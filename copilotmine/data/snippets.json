[
    {
        "id": "768",
        "source": "leetcodeTitles",
        "source_id": "242",
        "url": "https://leetcode.com/problems/valid-anagram/",
        "language": "python",
        "query": "Valid Anagram",
        "snippets": [
            "def is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True\n",
            "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    str1_dict = {}\n    for char in str1:\n        if char in str1_dict:\n            str1_dict[char] += 1\n        else:\n            str1_dict[char] = 1\n    for char in str2:\n        if char in str1_dict:\n            str1_dict[char] -= 1\n        else:\n            str1_dict[char] = 1\n    for key in str1_dict:\n        if str1_dict[key] != 0:\n            return False\n    return True\n",
            "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    str1_dict = {}\n    str2_dict = {}\n    for char in str1:\n        if char in str1_dict:\n            str1_dict[char] += 1\n        else:\n            str1_dict[char] = 1\n    for char in str2:\n        if char in str2_dict:\n            str2_dict[char] += 1\n        else:\n            str2_dict[char] = 1\n    for key in str1_dict:\n        if key not in str2_dict or str1_dict[key] != str2_dict[key]:\n            return False\n    return True\n",
            "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    str1 = str1.replace(\" \", \"\").lower()\n    str2 = str2.replace(\" \", \"\").lower()\n    str1_dict = {}\n    str2_dict = {}\n    for char in str1:\n        if char in str1_dict:\n            str1_dict[char] += 1\n        else:\n            str1_dict[char] = 1\n    for char in str2:\n        if char in str2_dict:\n            str2_dict[char] += 1\n        else:\n            str2_dict[char] = 1\n    for key in str1_dict:\n        if key in str2_dict:\n            if str1_dict[key] != str2_dict[key]:\n                return False\n        else:\n            return False\n    return True\n",
            "def valid_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_dict = {}\n    s2_dict = {}\n    for char in s1:\n        if char in s1_dict:\n            s1_dict[char] += 1\n        else:\n            s1_dict[char] = 1\n    for char in s2:\n        if char in s2_dict:\n            s2_dict[char] += 1\n        else:\n            s2_dict[char] = 1\n    for key in s1_dict:\n        if key not in s2_dict or s1_dict[key] != s2_dict[key]:\n            return False\n    return True\n",
            "def is_anagram(string_one, string_two):\n    if len(string_one) != len(string_two):\n        return False\n    else:\n        string_one_dict = {}\n        string_two_dict = {}\n        for char in string_one:\n            if char in string_one_dict:\n                string_one_dict[char] += 1\n            else:\n                string_one_dict[char] = 1\n        for char in string_two:\n            if char in string_two_dict:\n                string_two_dict[char] += 1\n            else:\n                string_two_dict[char] = 1\n        for key in string_one_dict:\n            if key in string_two_dict:\n                if string_one_dict[key] == string_two_dict[key]:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        for key in string_two_dict:\n            if key in string_one_dict:\n                if string_one_dict[key] == string_two_dict[key]:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        return True\n"
        ],
        "results": 10
    },
    {
        "id": "769",
        "source": "leetcodeTitles",
        "source_id": "841",
        "url": "https://leetcode.com/problems/keys-and-rooms/",
        "language": "python",
        "query": "Keys and Rooms",
        "snippets": [
            "def canVisitAllRooms(rooms):\n    visited = [False] * len(rooms)\n    visited[0] = True\n    stack = [0]\n    while stack:\n        room = stack.pop()\n        for key in rooms[room]:\n            if not visited[key]:\n                visited[key] = True\n                stack.append(key)\n    return all(visited)\n",
            "def canVisitAllRooms(rooms):\n    visited = [False] * len(rooms)\n    visited[0] = True\n    queue = [0]\n    while queue:\n        room = queue.pop(0)\n        for key in rooms[room]:\n            if not visited[key]:\n                visited[key] = True\n                queue.append(key)\n    return all(visited)\n"
        ],
        "results": 10
    },
    {
        "id": "770",
        "source": "leetcodeTitles",
        "source_id": "1009",
        "url": "https://leetcode.com/problems/complement-of-base-10-integer/",
        "language": "python",
        "query": "Complement of Base 10 Integer",
        "snippets": [
            "def complement(n):\n    return n ^ 0xFFFFFFFF\n",
            "def complement(n):\n    return n ^ (2 ** 32 - 1)\n",
            "def complement(n):\n    return int(bin(n)[2:], 2) ^ (2 ** len(bin(n)[2:]) - 1)\n",
            "def complement(n):\n    return n ^ 0xFFFFFFFF + 1\n"
        ],
        "results": 10
    },
    {
        "id": "771",
        "source": "leetcodeTitles",
        "source_id": "82",
        "url": "https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/",
        "language": "python",
        "query": "Remove Duplicates from Sorted List II",
        "snippets": [
            "def removeDuplicates(head):\n    if not head or not head.next:\n        return head\n    dummy = ListNode(0)\n    dummy.next = head\n    pre = dummy\n    cur = head\n    while cur:\n        while cur.next and cur.val == cur.next.val:\n            cur = cur.next\n        if pre.next == cur:\n            pre = pre.next\n        else:\n            pre.next = cur.next\n        cur = cur.next\n    return dummy.next\n",
            "def removeDuplicates(head):\n    if not head or not head.next:\n        return head\n    dummy = ListNode(0)\n    dummy.next = head\n    prev = dummy\n    cur = head\n    while cur:\n        while cur.next and cur.val == cur.next.val:\n            cur = cur.next\n        if prev.next == cur:\n            prev = prev.next\n        else:\n            prev.next = cur.next\n        cur = cur.next\n    return dummy.next\n",
            "def deleteDuplicates(head):\n    if not head or not head.next:\n        return head\n    dummy = ListNode(0)\n    dummy.next = head\n    pre = dummy\n    cur = head\n    while cur:\n        while cur.next and cur.val == cur.next.val:\n            cur = cur.next\n        if pre.next == cur:\n            pre = pre.next\n        else:\n            pre.next = cur.next\n        cur = cur.next\n    return dummy.next\n",
            "def removeDuplicates(head):\n    if head is None:\n        return None\n    if head.next is None:\n        return head\n    dummy = ListNode(0)\n    dummy.next = head\n    prev = dummy\n    cur = head\n    while cur is not None:\n        while cur.next is not None and cur.val == cur.next.val:\n            cur = cur.next\n        if prev.next == cur:\n            prev = prev.next\n        else:\n            prev.next = cur.next\n        cur = cur.next\n    return dummy.next\n",
            "def removeDuplicates(head):\n    if head is None:\n        return None\n    if head.next is None:\n        return head\n    curr = head\n    while curr.next is not None:\n        if curr.val == curr.next.val:\n            curr.next = curr.next.next\n        else:\n            curr = curr.next\n    return head\n"
        ],
        "results": 10
    },
    {
        "id": "772",
        "source": "leetcodeTitles",
        "source_id": "119",
        "url": "https://leetcode.com/problems/pascals-triangle-ii/",
        "language": "python",
        "query": "Pascal's Triangle II",
        "snippets": [
            "def generate(numRows):\n    if numRows == 0:\n        return []\n    if numRows == 1:\n        return [[1]]\n    if numRows == 2:\n        return [[1], [1, 1]]\n    res = [[1], [1, 1]]\n    for i in range(2, numRows):\n        res.append([1] + [res[i-1][j] + res[i-1][j+1] for j in range(i)] + [1])\n    return res\n",
            "def generate(numRows):\n    if numRows == 0:\n        return []\n    if numRows == 1:\n        return [[1]]\n    if numRows == 2:\n        return [[1], [1, 1]]\n    res = [[1], [1, 1]]\n    for i in range(2, numRows):\n        res.append([1] + [res[i-1][j] + res[i-1][j+1] for j in range(i-1)] + [1])\n    return res\n",
            "def generate(numRows):\n    if numRows == 0:\n        return []\n    if numRows == 1:\n        return [[1]]\n    if numRows == 2:\n        return [[1], [1, 1]]\n    triangle = [[1], [1, 1]]\n    for i in range(2, numRows):\n        row = [1]\n        for j in range(1, i):\n            row.append(triangle[i-1][j-1] + triangle[i-1][j])\n        row.append(1)\n        triangle.append(row)\n    return triangle\n",
            "def generate(numRows):\n    if numRows == 0:\n        return []\n    if numRows == 1:\n        return [[1]]\n    if numRows == 2:\n        return [[1],[1,1]]\n    res = [[1],[1,1]]\n    for i in range(2,numRows):\n        res.append([1]*(i+1))\n        for j in range(1,i):\n            res[i][j] = res[i-1][j-1]+res[i-1][j]\n    return res\n",
            "def generate(numRows):\n    if numRows == 0:\n        return []\n    if numRows == 1:\n        return [[1]]\n    if numRows == 2:\n        return [[1],[1,1]]\n    result = [[1],[1,1]]\n    for i in range(2,numRows):\n        temp = [1]\n        for j in range(1,i):\n            temp.append(result[i-1][j-1]+result[i-1][j])\n        temp.append(1)\n        result.append(temp)\n    return result\n",
            "def generate(numRows):\n    if numRows == 0:\n        return []\n    if numRows == 1:\n        return [[1]]\n    if numRows == 2:\n        return [[1],[1,1]]\n    res = [[1],[1,1]]\n    for i in range(2,numRows):\n        res.append([1])\n        for j in range(1,i):\n            res[i].append(res[i-1][j-1]+res[i-1][j])\n        res[i].append(1)\n    return res\n",
            "def pascal_triangle_2(row):\n    if row == 0:\n        return []\n    if row == 1:\n        return [1]\n    if row == 2:\n        return [1, 1]\n    if row == 3:\n        return [1, 2, 1]\n    if row == 4:\n        return [1, 3, 3, 1]\n    if row == 5:\n        return [1, 4, 6, 4, 1]\n    if row == 6:\n        return [1, 5, 10, 10, 5, 1]\n    if row == 7:\n        return [1, 6, 15, 20, 15, 6, 1]\n    if row == 8:\n        return [1, 7, 21, 35, 35, 21, 7, 1]\n    if row == 9:\n        return [1, 8, 28, 56, 70, 56, 28, 8, 1]\n    if row == 10:\n        return [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]\n    if row == 11:\n        return [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]\n    if row == 12:\n        return [1, 11, 55, 165, 330, 462, 462, 330, 165, 55, 11, 1]\n    if row == 13:\n        return [1, 12, 66, 220, 495, 792, 924, 792, 495, 220, 66, 12, 1]\n    if row == 14:\n        return [1, 13, 78, 286, 715, 1287, 1716, 1716, 1287, 715, 286, 78, 13, 1]\n    if row == 15:\n        return [1, 14, 91, 364, 1001, 2002, 3003, 3432, 3003, 2002, 1001, 364, 91, 14, 1]\n    if row == 16:\n        return [1, 15, 105, 455, 1365, 3003, 5005, 6435, 6435, 5005, 3003, 1365, 455, 105, 15, 1]\n    if row\n"
        ],
        "results": 10
    },
    {
        "id": "773",
        "source": "leetcodeTitles",
        "source_id": "2034",
        "url": "https://leetcode.com/problems/stock-price-fluctuation/",
        "language": "python",
        "query": "Stock Price Fluctuation",
        "snippets": [
            "def main():\n    # Get the stock price\n    price = float(input(\"Enter the stock price: \"))\n    # Get the stock fluctuation\n    fluctuation = float(input(\"Enter the stock fluctuation: \"))\n    # Calculate the new price\n    new_price = price + (price * fluctuation)\n    # Display the new price\n    print(\"The new price is $\", format(new_price, \",.2f\"), sep=\"\")\n",
            "def main():\n    # Get the stock price\n    price = float(input(\"Enter the stock price: \"))\n    # Get the stock fluctuation\n    fluctuation = float(input(\"Enter the stock fluctuation: \"))\n    # Calculate the stock price\n    stock_price = price + (price * fluctuation / 100)\n    # Display the stock price\n    print(\"The stock price is $\", format(stock_price, \",.2f\"), sep=\"\")\n",
            "def main():\n    # Get the stock price\n    price = float(input(\"Enter the price of the stock: \"))\n    # Get the number of shares\n    shares = int(input(\"Enter the number of shares: \"))\n    # Get the commission\n    commission = float(input(\"Enter the commission: \"))\n    # Calculate the total cost\n    total = price * shares + commission\n    # Display the total cost\n    print(\"The total cost is $\", format(total, \",.2f\"), sep=\"\")\n",
            "def main():\n    # Get the number of days\n    days = int(input(\"Enter the number of days: \"))\n    # Get the price of the stock\n    price = float(input(\"Enter the price of the stock: \"))\n    # Get the percentage of change\n    percent = float(input(\"Enter the percentage of change: \"))\n    # Calculate the fluctuation\n    fluctuation = price * (1 + percent / 100)\n    # Display the fluctuation\n    print(\"The fluctuation is: \", fluctuation)\n    # Display the price of the stock\n    print(\"The price of the stock is: \", price)\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print(\"The price of the stock after the fluctuation is: \", price * (1 + percent / 100))\n    # Display the price of the stock after the fluctuation\n    print\n",
            "def main():\n    print(\"This program calculates the stock price fluctuation.\")\n    print()\n    price = float(input(\"Enter the price of the stock: \"))\n    print()\n    percent = float(input(\"Enter the percentage of change: \"))\n    print()\n    print(\"The price of the stock is: $\", format(price, \",.2f\"))\n    print(\"The percentage of change is: \", format(percent, \",.2f\"), \"%\")\n    print()\n    print(\"The stock price fluctuation is: $\", format(price * (1 + percent / 100), \",.2f\"))\n    print()\n",
            "def main():\n    print(\"This program calculates the stock price fluctuation.\")\n    print()\n    print(\"Enter the number of days in the stock price fluctuation:\")\n    days = int(input())\n    print(\"Enter the price of the stock:\")\n    price = float(input())\n    print(\"Enter the daily price change:\")\n    change = float(input())\n    print(\"The stock price fluctuation is:\")\n    print(stock_price_fluctuation(days, price, change))\n",
            "def main():\n    print(\"This program calculates the stock price fluctuation.\")\n    print()\n    print(\"Enter the number of days in the first stock price:\")\n    days1 = int(input())\n    print(\"Enter the number of days in the second stock price:\")\n    days2 = int(input())\n    print(\"Enter the number of days in the third stock price:\")\n    days3 = int(input())\n    print(\"Enter the number of days in the fourth stock price:\")\n    days4 = int(input())\n    print(\"Enter the number of days in the fifth stock price:\")\n    days5 = int(input())\n    print()\n    print(\"The stock price fluctuation is:\",\n          stock_fluctuation(days1, days2, days3, days4, days5))\n"
        ],
        "results": 7
    },
    {
        "id": "774",
        "source": "leetcodeTitles",
        "source_id": "2192",
        "url": "https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/",
        "language": "python",
        "query": "All Ancestors of a Node in a Directed Acyclic Graph",
        "snippets": [
            "def dfs(graph, start, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(start)\n    for next in graph[start] - visited:\n        dfs(graph, next, visited)\n    return visited\n",
            "def dfs(graph, node, visited, ancestors):\n    visited.add(node)\n    for n in graph[node]:\n        if n not in visited:\n            ancestors[n].append(node)\n            dfs(graph, n, visited, ancestors)\n"
        ],
        "results": 10
    },
    {
        "id": "775",
        "source": "leetcodeTitles",
        "source_id": "1590",
        "url": "https://leetcode.com/problems/make-sum-divisible-by-p/",
        "language": "python",
        "query": "Make Sum Divisible by P",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n    ans = ans % 3\n    if ans == 0:\n        print(0)\n    elif ans == 1:\n        print(1)\n    else:\n        print(2)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if ans % a[i] != 0:\n            ans += a[i]\n    print(ans)\n"
        ],
        "results": 10
    },
    {
        "id": "776",
        "source": "leetcodeTitles",
        "source_id": "478",
        "url": "https://leetcode.com/problems/generate-random-point-in-a-circle/",
        "language": "python",
        "query": "Generate Random Point in a Circle",
        "snippets": [
            "def random_point_in_circle(r):\n    import random\n    x = random.random()\n    y = random.random()\n    if x**2 + y**2 <= r**2:\n        return x, y\n    else:\n        return random_point_in_circle(r)\n",
            "def random_point_in_circle(r):\n    import random\n    import math\n    x = random.random()\n    y = random.random()\n    if x**2 + y**2 <= r**2:\n        return x, y\n    else:\n        return random_point_in_circle(r)\n",
            "def random_point_in_circle(r):\n    import random\n    import math\n    x = random.random()\n    y = random.random()\n    if x**2 + y**2 <= 1:\n        return r*x, r*y\n    else:\n        return random_point_in_circle(r)\n",
            "def random_point_in_circle(r):\n    import random\n    import math\n    x = random.random()\n    y = random.random()\n    if x**2 + y**2 <= 1:\n        return x, y\n    else:\n        return random_point_in_circle(r)\n",
            "def random_point_in_circle(r):\n    import random\n    import math\n    x = random.random()\n    y = random.random()\n    if x**2 + y**2 <= 1:\n        return x*r, y*r\n    else:\n        return random_point_in_circle(r)\n",
            "def random_point_in_circle(r):\n    import random\n    x = random.random()\n    y = random.random()\n    if x**2 + y**2 <= 1:\n        return x, y\n    else:\n        return random_point_in_circle(r)\n",
            "def rand_point_in_circle(r):\n    import random\n    x = random.random()\n    y = random.random()\n    if x**2 + y**2 <= r**2:\n        return x, y\n    else:\n        return rand_point_in_circle(r)\n",
            "def random_point_in_circle(r):\n    \"\"\"\n    Generate a random point in a circle of radius r.\n    \"\"\"\n    x = r * math.cos(2 * math.pi * random.random())\n    y = r * math.sin(2 * math.pi * random.random())\n    return x, y\n"
        ],
        "results": 10
    },
    {
        "id": "777",
        "source": "leetcodeTitles",
        "source_id": "1073",
        "url": "https://leetcode.com/problems/adding-two-negabinary-numbers/",
        "language": "python",
        "query": "Adding Two Negabinary Numbers",
        "snippets": [
            "def add_binary(a, b):\n    \"\"\"\n    :param a: int\n    :param b: int\n    :return: str\n    \"\"\"\n    return bin(a + b)[2:]\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: list of digits\n    b: list of digits\n    \"\"\"\n    a = a[::-1]\n    b = b[::-1]\n    c = []\n    carry = 0\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            ai = a[i]\n        else:\n            ai = 0\n        if i < len(b):\n            bi = b[i]\n        else:\n            bi = 0\n        ci = ai + bi + carry\n        if ci > 1:\n            ci -= 2\n            carry = 1\n        else:\n            carry = 0\n        c.append(ci)\n    if carry == 1:\n        c.append(1)\n    return c[::-1]\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: list of digits\n    b: list of digits\n    \"\"\"\n    a = a[::-1]\n    b = b[::-1]\n    c = []\n    carry = 0\n    for i in range(max(len(a), len(b))):\n        if i < len(a):\n            ai = a[i]\n        else:\n            ai = 0\n        if i < len(b):\n            bi = b[i]\n        else:\n            bi = 0\n        ci = ai + bi + carry\n        if ci > 1:\n            ci = ci - 2\n            carry = 1\n        else:\n            carry = 0\n        c.append(ci)\n    if carry == 1:\n        c.append(1)\n    return c[::-1]\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: string of digits\n    b: string of digits\n    return: string of digits\n    \"\"\"\n    if a == '0' and b == '0':\n        return '0'\n    if a == '0':\n        return b\n    if b == '0':\n        return a\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n    if a[0] == '1':\n        a = a[1:]\n    if b[0] == '1':\n        b = b[1:]\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: string of digits\n    b: string of digits\n    return: string of digits\n    \"\"\"\n    # convert to ints\n    a = int(a, 2)\n    b = int(b, 2)\n    # add\n    c = a + b\n    # convert to binary\n    c = bin(c)[2:]\n    # convert to string\n    c = str(c)\n    # pad with zeros\n    c = c.zfill(len(a) + len(b))\n    # convert to negabinary\n    c = c.replace('0', '1')\n    c = c.replace('1', '0')\n    c = c.replace('2', '1')\n    c = c.replace('3', '2')\n    return c\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: list of digits\n    b: list of digits\n    return: list of digits\n    \"\"\"\n    if len(a) > len(b):\n        b = [0] * (len(a) - len(b)) + b\n    else:\n        a = [0] * (len(b) - len(a)) + a\n    carry = 0\n    result = []\n    for i in range(len(a)):\n        result.append((a[i] + b[i] + carry) % 2)\n        carry = (a[i] + b[i] + carry) // 2\n    if carry:\n        result.append(carry)\n    return result\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: string of digits\n    b: string of digits\n    Return: string of digits\n    \"\"\"\n    # Convert to ints\n    a = int(a, 2)\n    b = int(b, 2)\n    # Add\n    c = a + b\n    # Convert to binary\n    c = bin(c)[2:]\n    # Convert to string\n    c = str(c)\n    # Return\n    return c\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: list of digits\n    b: list of digits\n    Return: list of digits\n    \"\"\"\n    # Initialize carry to 0\n    carry = 0\n    # Initialize result to empty list\n    result = []\n    # Loop through a and b\n    for i in range(max(len(a), len(b))):\n        # Add a[i] and b[i] together\n        digit = a[i] + b[i] + carry\n        # If digit is greater than 1, subtract 2\n        if digit > 1:\n            digit -= 2\n            carry = 1\n        # If digit is less than 0, add 2\n        elif digit < 0:\n            digit += 2\n            carry = -1\n        # If digit is 0, set carry to 0\n        else:\n            carry = 0\n        # Append digit to result\n        result.append(digit)\n    # If carry is 1, append 1 to result\n    if carry == 1:\n        result.append(1)\n    # Return result\n    return result\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: string of digits\n    b: string of digits\n    Returns: string of digits\n    \"\"\"\n    # Initialize carry to 0\n    carry = 0\n    # Initialize result to empty string\n    result = ''\n    # Loop through both strings\n    for i in range(max(len(a), len(b))):\n        # Get the value of the first digit\n        if i < len(a):\n            a_digit = int(a[len(a) - 1 - i])\n        else:\n            a_digit = 0\n        # Get the value of the second digit\n        if i < len(b):\n            b_digit = int(b[len(b) - 1 - i])\n        else:\n            b_digit = 0\n        # Add the two digits together\n        sum_digit = a_digit + b_digit + carry\n        # If the sum is greater than 1, set carry to 1\n        if sum_digit > 1:\n            carry = 1\n        # If the sum is 0, set carry to 0\n        elif sum_digit == 0:\n            carry = 0\n        # If the sum is 1, set carry to 0\n        else:\n            carry = 0\n        # Add the sum to the result\n        result += str(sum_digit)\n    # If the carry is 1, add 1 to the result\n    if carry == 1:\n        result += '1'\n    # Reverse the result\n    result = result[::-1]\n    return result\n",
            "def add_negabinary(a, b):\n    \"\"\"\n    a: list of digits\n    b: list of digits\n    return: list of digits\n    \"\"\"\n    # Initialize the result\n    result = []\n    # Initialize the carry\n    carry = 0\n    # Iterate through the lists\n    for i in range(max(len(a), len(b))):\n        # Get the value of the digits\n        a_value = a[-1 - i] if i < len(a) else 0\n        b_value = b[-1 - i] if i < len(b) else 0\n        # Add the values\n        sum = a_value + b_value + carry\n        # Add the carry\n        carry = sum // 2\n        # Add the sum to the result\n        result.append(sum % 2)\n    # If the carry is 1, add it to the result\n    if carry:\n        result.append(1)\n    # Reverse the result\n    result.reverse()\n    # Return the result\n    return result\n"
        ],
        "results": 10
    },
    {
        "id": "778",
        "source": "leetcodeTitles",
        "source_id": "817",
        "url": "https://leetcode.com/problems/linked-list-components/",
        "language": "python",
        "query": "Linked List Components",
        "snippets": [
            "def has_cycle(head):\n    if head is None:\n        return False\n    slow = head\n    fast = head\n    while fast.next is not None and fast.next.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n        if slow == fast:\n            return True\n    return False\n",
            "def main():\n    # Create a linked list\n    llist = LinkedList()\n    llist.append(1)\n    llist.append(2)\n    llist.append(3)\n    llist.append(4)\n    llist.append(5)\n\n    # Create a second linked list\n    llist2 = LinkedList()\n    llist2.append(6)\n    llist2.append(7)\n    llist2.append(8)\n    llist2.append(9)\n    llist2.append(10)\n\n    # Create a third linked list\n    llist3 = LinkedList()\n    llist3.append(11)\n    llist3.append(12)\n    llist3.append(13)\n    llist3.append(14)\n    llist3.append(15)\n\n    # Merge the linked lists\n    llist.mergeList(llist2)\n    llist.mergeList(llist3)\n\n    # Print the merged linked list\n    llist.printList()\n",
            "def main():\n    # Create a linked list\n    llist = LinkedList()\n    llist.append(1)\n    llist.append(2)\n    llist.append(3)\n    llist.append(4)\n    llist.append(5)\n\n    # Create a second linked list\n    llist2 = LinkedList()\n    llist2.append(6)\n    llist2.append(7)\n    llist2.append(8)\n    llist2.append(9)\n    llist2.append(10)\n\n    # Create a third linked list\n    llist3 = LinkedList()\n    llist3.append(11)\n    llist3.append(12)\n    llist3.append(13)\n    llist3.append(14)\n    llist3.append(15)\n\n    # Merge the three linked lists\n    llist.merge(llist2)\n    llist.merge(llist3)\n\n    # Print the merged linked list\n    llist.print_list()\n",
            "def main():\n    # Create a linked list\n    llist = LinkedList()\n    llist.append(1)\n    llist.append(2)\n    llist.append(3)\n    llist.append(4)\n    llist.append(5)\n    llist.append(6)\n    llist.append(7)\n    llist.append(8)\n    llist.append(9)\n    llist.append(10)\n    llist.append(11)\n    llist.append(12)\n    llist.append(13)\n    llist.append(14)\n    llist.append(15)\n    llist.append(16)\n    llist.append(17)\n    llist.append(18)\n    llist.append(19)\n    llist.append(20)\n    llist.append(21)\n    llist.append(22)\n    llist.append(23)\n    llist.append(24)\n    llist.append(25)\n    llist.append(26)\n    llist.append(27)\n    llist.append(28)\n    llist.append(29)\n    llist.append(30)\n    llist.append(31)\n    llist.append(32)\n    llist.append(33)\n    llist.append(34)\n    llist.append(35)\n    llist.append(36)\n    llist.append(37)\n    llist.append(38)\n    llist.append(39)\n    llist.append(40)\n    llist.append(41)\n    llist.append(42)\n    llist.append(43)\n    llist.append(44)\n    llist.append(45)\n    llist.append(46)\n    llist.append(47)\n    llist.append(48)\n    llist.append(49)\n    llist.append(50)\n    llist.append(51)\n    llist.append(52)\n    llist.append(53)\n    llist\n",
            "def has_cycle(head):\n    if head is None:\n        return False\n    if head.next is None:\n        return False\n    slow = head\n    fast = head.next\n    while slow != fast:\n        if fast is None or fast.next is None:\n            return False\n        slow = slow.next\n        fast = fast.next.next\n    return True\n",
            "def main():\n    # Create a linked list\n    llist = LinkedList()\n    llist.add_node(1)\n    llist.add_node(2)\n    llist.add_node(3)\n    llist.add_node(4)\n    llist.add_node(5)\n    llist.add_node(6)\n    llist.add_node(7)\n    llist.add_node(8)\n    llist.add_node(9)\n    llist.add_node(10)\n    llist.add_node(11)\n    llist.add_node(12)\n    llist.add_node(13)\n    llist.add_node(14)\n    llist.add_node(15)\n    llist.add_node(16)\n    llist.add_node(17)\n    llist.add_node(18)\n    llist.add_node(19)\n    llist.add_node(20)\n    llist.add_node(21)\n    llist.add_node(22)\n    llist.add_node(23)\n    llist.add_node(24)\n    llist.add_node(25)\n    llist.add_node(26)\n    llist.add_node(27)\n    llist.add_node(28)\n    llist.add_node(29)\n    llist.add_node(30)\n    llist.add_node(31)\n    llist.add_node(32)\n    llist.add_node(33)\n    llist.add_node(34)\n    llist.add_node(35)\n    llist.add_node(36)\n    llist.add_node(37)\n    llist.add_node(38)\n    llist.add_node(39)\n    llist.add_node(40)\n    llist.add_node(41)\n    llist.add_node(42)\n    llist.add_node(43)\n    llist.add_node\n",
            "def main():\n    # Create a linked list\n    llist = LinkedList()\n    llist.insert(1)\n    llist.insert(2)\n    llist.insert(3)\n    llist.insert(4)\n    llist.insert(5)\n\n    # Print the linked list\n    print(\"Initial Linked List:\")\n    llist.print_list()\n\n    # Remove the third node\n    llist.remove_node(3)\n\n    # Print the linked list\n    print(\"\\nLinked List after removing 3:\")\n    llist.print_list()\n\n    # Remove the first node\n    llist.remove_node(1)\n\n    # Print the linked list\n    print(\"\\nLinked List after removing 1:\")\n    llist.print_list()\n\n    # Remove the last node\n    llist.remove_node(5)\n\n    # Print the linked list\n    print(\"\\nLinked List after removing 5:\")\n    llist.print_list()\n\n    # Remove the second node\n    llist.remove_node(2)\n\n    # Print the linked list\n    print(\"\\nLinked List after removing 2:\")\n    llist.print_list()\n",
            "def main():\n    \"\"\"\n    Main function\n    \"\"\"\n    llist = LinkedList()\n    llist.add_node(1)\n    llist.add_node(2)\n    llist.add_node(3)\n    llist.add_node(4)\n    llist.add_node(5)\n    llist.add_node(6)\n    llist.add_node(7)\n    llist.add_node(8)\n    llist.add_node(9)\n    llist.add_node(10)\n    llist.add_node(11)\n    llist.add_node(12)\n    llist.add_node(13)\n    llist.add_node(14)\n    llist.add_node(15)\n    llist.add_node(16)\n    llist.add_node(17)\n    llist.add_node(18)\n    llist.add_node(19)\n    llist.add_node(20)\n    llist.add_node(21)\n    llist.add_node(22)\n    llist.add_node(23)\n    llist.add_node(24)\n    llist.add_node(25)\n    llist.add_node(26)\n    llist.add_node(27)\n    llist.add_node(28)\n    llist.add_node(29)\n    llist.add_node(30)\n    llist.add_node(31)\n    llist.add_node(32)\n    llist.add_node(33)\n    llist.add_node(34)\n    llist.add_node(35)\n    llist.add_node(36)\n    llist.add_node(37)\n    llist.add_node(38)\n    llist.add_node(39)\n    llist.add_node(40)\n    llist.add_node(41)\n    llist.add_node(42)\n    llist.add_node(43)\n    llist.\n"
        ],
        "results": 10
    },
    {
        "id": "779",
        "source": "leetcodeTitles",
        "source_id": "1418",
        "url": "https://leetcode.com/problems/display-table-of-food-orders-in-a-restaurant/",
        "language": "python",
        "query": "Display Table of Food Orders in a Restaurant",
        "snippets": [
            "def main():\n    print(\"Table of Food Orders\")\n    print(\"-------------------\")\n    print(\"Food\\t\\t\\tPrice\")\n    print(\"-------------------\")\n    print(\"Pizza\\t\\t\\t$10.00\")\n    print(\"Hamburger\\t\\t$8.00\")\n    print(\"Hotdog\\t\\t\\t$5.00\")\n    print(\"Salad\\t\\t\\t$3.00\")\n    print(\"-------------------\")\n    print(\"Total\\t\\t\\t$25.00\")\n    print(\"-------------------\")\n",
            "def main():\n    # Create a list of food items\n    food_list = ['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']\n    # Display the list\n    print(food_list)\n    # Display the second item in the list\n    print(food_list[1])\n    # Display the second and third items in the list\n    print(food_list[1:3])\n    # Display the last item in the list\n    print(food_list[-1])\n    # Display the first three items in the list\n    print(food_list[:3])\n    # Display the middle two items in the list\n    print(food_list[1:4])\n    # Display the middle two items in the list\n    print(food_list[2:5])\n    # Display the first three items in the list\n    print(food_list[:3])\n    # Display the last three items in the list\n    print(food_list[-3:])\n    # Display the first three items in the list\n    print(food_list[:3])\n    # Display the last three items in the list\n    print(food_list[-3:])\n    # Display the first three items in the list\n    print(food_list[:3])\n    # Display the last three items in the list\n    print(food_list[-3:])\n    # Display the first three items in the list\n    print(food_list[:3])\n    # Display the last three items in the list\n    print(food_list[-3:])\n    # Display the first three items in the list\n    print(food_list[:3])\n    # Display the last three items in the list\n    print(food_list[-3:])\n    # Display the first three items in the list\n    print(food_list[:3])\n    # Display the last three items in the list\n    print(food_list[-3:])\n    # Display the first three items in the list\n    print(food_list[:3])\n    # Display the last three items in the list\n    print(food_list[-\n",
            "def main():\n    # Create a list of food items\n    food_list = ['pizza', 'falafel', 'carrot cake', 'cannoli', 'ice cream']\n    # Display the list\n    print(food_list)\n    # Display the first item in the list\n    print(food_list[0])\n    # Display the third item in the list\n    print(food_list[2])\n    # Display the last item in the list\n    print(food_list[-1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n    # Display the second to first item in the list\n    print(food_list[1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n    # Display the second to first item in the list\n    print(food_list[1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n    # Display the second to first item in the list\n    print(food_list[1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n    # Display the second to first item in the list\n    print(food_list[1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n    # Display the second to first item in the list\n    print(food_list[1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n    # Display the second to first item in the list\n    print(food_list[1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n    # Display the second to first item in the list\n    print(food_list[1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n    # Display the second to first item in the list\n    print(food_list[1])\n    # Display the second to last item in the list\n    print(food_list[-2])\n",
            "def main():\n    # Get the number of food orders\n    num_orders = int(input(\"How many food orders do you have? \"))\n    # Create a list to hold the food orders\n    orders = []\n    # Get the food orders\n    for i in range(num_orders):\n        orders.append(input(\"Enter a food order: \"))\n    # Display the food orders\n    print(\"Here are your food orders:\")\n    for order in orders:\n        print(order)\n",
            "def main():\n    # Create a list of food items\n    food_items = ['pizza', 'falafel', 'carrot cake']\n    # Display the list\n    print(food_items)\n    # Display the first item in the list\n    print(food_items[0])\n    # Display the second item in the list\n    print(food_items[1])\n    # Display the third item in the list\n    print(food_items[2])\n    # Display the last item in the list\n    print(food_items[-1])\n    # Display the second to last item in the list\n    print(food_items[-2])\n    # Display the second to last item in the list\n    print(food_items[-3])\n    # Display the second to last item in the list\n    print(food_items[-4])\n    # Display the second to last item in the list\n    print(food_items[-5])\n    # Display the second to last item in the list\n    print(food_items[-6])\n    # Display the second to last item in the list\n    print(food_items[-7])\n    # Display the second to last item in the list\n    print(food_items[-8])\n    # Display the second to last item in the list\n    print(food_items[-9])\n    # Display the second to last item in the list\n    print(food_items[-10])\n    # Display the second to last item in the list\n    print(food_items[-11])\n    # Display the second to last item in the list\n    print(food_items[-12])\n    # Display the second to last item in the list\n    print(food_items[-13])\n    # Display the second to last item in the list\n    print(food_items[-14])\n    # Display the second to last item in the list\n    print(food_items[-15])\n    # Display the second to last item in the list\n    print(food_items[-16])\n    # Display the second to last item in the list\n    print(food_items[-17])\n    # Display the\n",
            "def main():\n    # Get the number of food orders\n    num_orders = int(input(\"How many orders are you processing? \"))\n    # Create a list to hold the orders\n    orders = []\n    # Get each order\n    for i in range(num_orders):\n        # Get the order\n        order = input(\"Enter an order: \")\n        # Append the order to the list\n        orders.append(order)\n    # Display the list of orders\n    print(\"Here are the orders:\")\n    for order in orders:\n        print(order)\n    # Display the total number of orders\n    print(\"You have\", num_orders, \"orders.\")\n    # Display the total number of orders\n    print(\"You have\", len(orders), \"orders.\")\n",
            "def main():\n    # Get the number of food orders\n    num_orders = int(input(\"How many orders are being placed? \"))\n    # Create a list to hold the orders\n    orders = []\n    # Get the orders\n    for i in range(num_orders):\n        order = input(\"Enter the name of the order: \")\n        orders.append(order)\n    # Display the orders\n    print(\"The orders are:\")\n    for order in orders:\n        print(order)\n",
            "def main():\n    # Get the number of food orders\n    num_orders = int(input(\"How many orders are you processing? \"))\n    # Create a list to store the orders\n    orders = []\n    # Get the orders\n    for i in range(num_orders):\n        order = input(\"Enter the order: \")\n        orders.append(order)\n    # Display the orders\n    print(\"\\nHere are your orders:\")\n    for order in orders:\n        print(order)\n",
            "def main():\n    # Create a list of dictionaries\n    food_orders = [\n        {'name': 'pizza', 'price': '$8.99', 'quantity': '1'},\n        {'name': 'salad', 'price': '$5.99', 'quantity': '2'},\n        {'name': 'soup', 'price': '$2.99', 'quantity': '3'},\n        {'name': 'bread', 'price': '$1.99', 'quantity': '4'},\n        {'name': 'milk', 'price': '$3.99', 'quantity': '5'}\n    ]\n    # Display the table header\n    print('{:<10} {:<10} {:<10}'.format('Name', 'Price', 'Quantity'))\n    # Display the table body\n    for order in food_orders:\n        print('{:<10} {:<10} {:<10}'.format(order['name'], order['price'], order['quantity']))\n    # Display the table footer\n    print('{:<10} {:<10} {:<10}'.format('Total', '$29.95', '15'))\n",
            "def main():\n    # Create a list of food items\n    food_list = ['pizza', 'falafel', 'carrot cake', 'creme brulee', 'chocolate cake', 'pancakes']\n    # Display the list\n    print(food_list)\n    # Display the first item in the list\n    print(food_list[0])\n    # Display the last item in the list\n    print(food_list[-1])\n    # Display the items from the second to the fourth in the list\n    print(food_list[1:4])\n    # Display the items from the third to the end of the list\n    print(food_list[2:])\n    # Display the items from the first to the third in the list\n    print(food_list[:3])\n    # Display the items in the list in reverse order\n    print(food_list[::-1])\n    # Display the items in the list in reverse order\n    print(food_list[::-2])\n    # Display the items in the list in reverse order\n    print(food_list[::-3])\n    # Display the items in the list in reverse order\n    print(food_list[::-4])\n    # Display the items in the list in reverse order\n    print(food_list[::-5])\n    # Display the items in the list in reverse order\n    print(food_list[::-6])\n    # Display the items in the list in reverse order\n    print(food_list[::-7])\n    # Display the items in the list in reverse order\n    print(food_list[::-8])\n    # Display the items in the list in reverse order\n    print(food_list[::-9])\n    # Display the items in the list in reverse order\n    print(food_list[::-10])\n    # Display the items in the list in reverse order\n    print(food_list[::-11])\n    # Display the items in the list in reverse order\n    print(food_list[::-12])\n    # Display the items in the list in reverse order\n    print(food_list[::-13])\n    # Display the items\n"
        ],
        "results": 10
    },
    {
        "id": "780",
        "source": "leetcodeTitles",
        "source_id": "1093",
        "url": "https://leetcode.com/problems/statistics-from-a-large-sample/",
        "language": "python",
        "query": "Statistics from a Large Sample",
        "snippets": [
            "def mean(numbers):\n    return sum(numbers) / len(numbers)\n",
            "def main():\n    print(\"This program computes mean, median, and mode of a data set.\")\n    data = input(\"Enter a list of numbers separated by commas: \")\n    data = data.split(\",\")\n    data = [int(i) for i in data]\n    mean = sum(data)/len(data)\n    median = median(data)\n    mode = mode(data)\n    print(\"The mean is:\", mean)\n    print(\"The median is:\", median)\n    print(\"The mode is:\", mode)\n",
            "def main():\n    print(\"This program computes the mean and standard deviation of a data set.\")\n    print()\n\n    data = int(input(\"How many numbers do you want to enter? \"))\n    total = 0\n    for i in range(data):\n        number = int(input(\"Enter a number >> \"))\n        total += number\n    mean = total / data\n    print(\"The mean of the data set is\", mean)\n    print()\n\n    total = 0\n    for i in range(data):\n        number = int(input(\"Enter a number >> \"))\n        total += (number - mean) ** 2\n    variance = total / (data - 1)\n    standard_deviation = variance ** 0.5\n    print(\"The standard deviation of the data set is\", standard_deviation)\n    print()\n",
            "def main():\n    print(\"This program computes the mean (average) of a list of numbers.\")\n    print(\"Please enter a list of numbers, one per line.\")\n    print(\"Enter a blank line to quit.\")\n\n    # Create an empty list to hold the numbers\n    numbers = []\n\n    # Get the first number and add it to the list\n    number = input(\"Enter a number: \")\n    while number != \"\":\n        numbers.append(int(number))\n        number = input(\"Enter a number: \")\n\n    # Compute the average of the numbers\n    count = len(numbers)\n    total = sum(numbers)\n    mean = total / count\n\n    # Print the numbers and the average\n    print(\"\\nThe numbers are:\", numbers)\n    print(\"The average is:\", mean)\n",
            "def main():\n    print(\"This program computes the mean, median, and mode of a list of numbers.\")\n    print()\n\n    data = []\n    more_data = True\n\n    while more_data:\n        number = int(input(\"Enter a number (0 to end): \"))\n        if number != 0:\n            data.append(number)\n        else:\n            more_data = False\n\n    mean = sum(data) / len(data)\n    print(\"The mean is\", mean)\n\n    data.sort()\n    median = data[len(data) // 2]\n    if len(data) % 2 == 0:\n        median = (data[len(data) // 2] + data[len(data) // 2 - 1]) / 2\n    print(\"The median is\", median)\n\n    mode = []\n    for number in data:\n        if data.count(number) > 1:\n            mode.append(number)\n    if len(mode) == 0:\n        print(\"The mode is\", data[len(data) // 2])\n    else:\n        print(\"The mode is\", mode)\n",
            "def main():\n    print(\"This program computes mean, median, and mode of a data set.\")\n    print()\n\n    data = int(input(\"How many numbers do you want to enter? \"))\n    numbers = []\n    for i in range(data):\n        numbers.append(int(input(\"Enter a number: \")))\n\n    mean = sum(numbers) / len(numbers)\n    print(\"The mean is\", mean)\n\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers) // 2] + numbers[len(numbers) // 2 - 1]) / 2\n    else:\n        median = numbers[len(numbers) // 2]\n\n    print(\"The median is\", median)\n\n    mode = []\n    for i in numbers:\n        if numbers.count(i) > 1:\n            mode.append(i)\n    if len(mode) == 0:\n        print(\"The mode is\", numbers[0])\n    else:\n        print(\"The mode is\", mode)\n",
            "def main():\n    print(\"This program computes the mean and standard deviation of a data set.\")\n    print()\n\n    data = int(input(\"How many numbers do you have? \"))\n    total = 0\n    for i in range(data):\n        number = int(input(\"Enter a number >> \"))\n        total += number\n    mean = total / data\n    print(\"The mean of the data set is\", mean)\n\n    total = 0\n    for i in range(data):\n        number = int(input(\"Enter a number >> \"))\n        total += (number - mean) ** 2\n    std = (total / data) ** 0.5\n    print(\"The standard deviation of the data set is\", std)\n",
            "def mean(x):\n    return sum(x) / len(x)\n",
            "def main():\n    print(\"This program computes the mean and standard deviation of a data set.\")\n    print()\n\n    data = []\n    print(\"Enter your data one value per line.  When finished, hit 'Enter' on an empty line.\")\n    while True:\n        data_point = float(input(\"Data: \"))\n        data.append(data_point)\n        if data_point == 0:\n            break\n\n    mean = sum(data) / len(data)\n    print(\"Mean:\", mean)\n\n    diff_squared = [(x - mean) ** 2 for x in data]\n    variance = sum(diff_squared) / len(data)\n    std_dev = variance ** 0.5\n    print(\"Standard deviation:\", std_dev)\n"
        ],
        "results": 10
    },
    {
        "id": "781",
        "source": "leetcodeTitles",
        "source_id": "500",
        "url": "https://leetcode.com/problems/keyboard-row/",
        "language": "python",
        "query": "Keyboard Row",
        "snippets": [
            "def find_words(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: List[str]\n    \"\"\"\n    row1 = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    row2 = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    row3 = ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n    result = []\n    for word in words:\n        if word[0] in row1:\n            if word[1] in row1:\n                if word[2] in row1:\n                    result.append(word)\n                else:\n                    continue\n            else:\n                continue\n        elif word[0] in row2:\n            if word[1] in row2:\n                if word[2] in row2:\n                    result.append(word)\n                else:\n                    continue\n            else:\n                continue\n        elif word[0] in row3:\n            if word[1] in row3:\n                if word[2] in row3:\n                    result.append(word)\n                else:\n                    continue\n            else:\n                continue\n    return result\n",
            "def keyboard_row(word):\n    row1 = 'qwertyuiop'\n    row2 = 'asdfghjkl'\n    row3 = 'zxcvbnm'\n    if word[0] in row1:\n        return row1\n    elif word[0] in row2:\n        return row2\n    elif word[0] in row3:\n        return row3\n    else:\n        return 'error'\n",
            "def find_words(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: List[str]\n    \"\"\"\n    row1 = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    row2 = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    row3 = ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n    result = []\n    for word in words:\n        if word[0] in row1:\n            if word[1] in row1:\n                if word[2] in row1:\n                    result.append(word)\n        elif word[0] in row2:\n            if word[1] in row2:\n                if word[2] in row2:\n                    result.append(word)\n        elif word[0] in row3:\n            if word[1] in row3:\n                if word[2] in row3:\n                    result.append(word)\n    return result\n",
            "def keyboard_row(word):\n    row1 = 'qwertyuiop'\n    row2 = 'asdfghjkl'\n    row3 = 'zxcvbnm'\n    word = word.lower()\n    if word[0] in row1:\n        return row1\n    elif word[0] in row2:\n        return row2\n    elif word[0] in row3:\n        return row3\n    else:\n        return 'error'\n",
            "def find_row(s):\n    row1 = 'qwertyuiop'\n    row2 = 'asdfghjkl'\n    row3 = 'zxcvbnm'\n    s = s.lower()\n    for i in s:\n        if i in row1:\n            return 1\n        elif i in row2:\n            return 2\n        elif i in row3:\n            return 3\n    return -1\n",
            "def find_row(s):\n    row1 = 'qwertyuiop'\n    row2 = 'asdfghjkl'\n    row3 = 'zxcvbnm'\n    for i in s:\n        if i in row1:\n            return 1\n        elif i in row2:\n            return 2\n        elif i in row3:\n            return 3\n    return -1\n",
            "def find_row(word):\n    row_1 = ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p']\n    row_2 = ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l']\n    row_3 = ['z', 'x', 'c', 'v', 'b', 'n', 'm']\n    if word[0] in row_1:\n        return 1\n    elif word[0] in row_2:\n        return 2\n    elif word[0] in row_3:\n        return 3\n    else:\n        return -1\n",
            "def find_keyboard_row(words):\n    words = [word.lower() for word in words]\n    rows = []\n    for word in words:\n        if word[0] in rows:\n            rows.append(word[0])\n        else:\n            rows = [word[0]]\n    return rows\n",
            "def find_row(keyboard, word):\n    row = 0\n    for letter in word:\n        if letter in keyboard[row]:\n            row += 1\n        else:\n            row = 0\n    return row\n",
            "def find_row(s):\n    row = []\n    for i in s:\n        if i in 'qwertyuiop':\n            row.append('qwertyuiop')\n        elif i in 'asdfghjkl':\n            row.append('asdfghjkl')\n        elif i in 'zxcvbnm':\n            row.append('zxcvbnm')\n    return row\n"
        ],
        "results": 10
    },
    {
        "id": "782",
        "source": "leetcodeTitles",
        "source_id": "1718",
        "url": "https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence/",
        "language": "python",
        "query": "Construct the Lexicographically Largest Valid Sequence",
        "snippets": [
            "def construct_sequence(n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 3]\n    if n == 4:\n        return [1, 2, 4]\n    if n == 5:\n        return [1, 5]\n    if n == 6:\n        return [1, 2, 6]\n    if n == 7:\n        return [1, 7]\n    if n == 8:\n        return [1, 2, 8]\n    if n == 9:\n        return [1, 9]\n    if n == 10:\n        return [1, 2, 5, 10]\n    if n == 11:\n        return [1, 11]\n    if n == 12:\n        return [1, 2, 3, 4, 12]\n    if n == 13:\n        return [1, 2, 13]\n    if n == 14:\n        return [1, 2, 7, 14]\n    if n == 15:\n        return [1, 2, 5, 15]\n    if n == 16:\n        return [1, 2, 3, 4, 16]\n    if n == 17:\n        return [1, 2, 17]\n    if n == 18:\n        return [1, 2, 3, 18]\n    if n == 19:\n        return [1, 2, 19]\n    if n == 20:\n        return [1, 2, 3, 5, 20]\n    if n == 21:\n        return [1, 2, 3, 7, 21]\n    if n == 22:\n        return [1, 2, 3, 11, 22]\n    if n == 23:\n        return [1, 2, 3, 13, 23]\n    if n == 24:\n        return [1, 2, 3, 4, 6, 24]\n    if n == 25:\n        return [1, 2, 3, 5, 25]\n    if n == 26:\n        return [1, 2, 3, 26]\n    if n == 27:\n        return [1\n",
            "def construct_sequence(n):\n    if n == 0:\n        return [0]\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 1]\n    if n == 3:\n        return [1, 2]\n    if n == 4:\n        return [1, 3]\n    if n == 5:\n        return [1, 4]\n    if n == 6:\n        return [1, 5]\n    if n == 7:\n        return [1, 6]\n    if n == 8:\n        return [1, 7]\n    if n == 9:\n        return [1, 8]\n    if n == 10:\n        return [1, 9]\n    if n == 11:\n        return [1, 10]\n    if n == 12:\n        return [1, 11]\n    if n == 13:\n        return [1, 12]\n    if n == 14:\n        return [1, 13]\n    if n == 15:\n        return [1, 14]\n    if n == 16:\n        return [1, 15]\n    if n == 17:\n        return [1, 16]\n    if n == 18:\n        return [1, 17]\n    if n == 19:\n        return [1, 18]\n    if n == 20:\n        return [1, 19]\n    if n == 21:\n        return [1, 20]\n    if n == 22:\n        return [1, 21]\n    if n == 23:\n        return [1, 22]\n    if n == 24:\n        return [1, 23]\n    if n == 25:\n        return [1, 24]\n    if n == 26:\n        return [1, 25]\n    if n == 27:\n        return [1, 26]\n    if n == 28:\n        return [1, 27]\n    if n == 29:\n        return [1, 28]\n    if n == 30:\n        return [1, 29]\n    if n == 31:\n        return [1, 30]\n    if n == 32:\n        return [1, 31]\n",
            "def construct_largest_valid_sequence(s):\n    # Write your code here.\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return s\n        else:\n            return s[0]\n    if s[0] == s[1]:\n        return s[0] + construct_largest_valid_sequence(s[2:])\n    else:\n        return s[0] + construct_largest_valid_sequence(s[1:])\n",
            "def construct_largest_valid_sequence(s):\n    # Write your code here.\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s[0] < s[1]:\n            return s\n        else:\n            return s[1] + s[0]\n    if len(s) == 3:\n        if s[0] < s[1] and s[1] < s[2]:\n            return s\n        elif s[0] < s[2] and s[2] < s[1]:\n            return s[1] + s[0] + s[2]\n        elif s[1] < s[0] and s[0] < s[2]:\n            return s[0] + s[1] + s[2]\n        elif s[1] < s[2] and s[2] < s[0]:\n            return s[0] + s[2] + s[1]\n        elif s[2] < s[0] and s[0] < s[1]:\n            return s[2] + s[0] + s[1]\n        elif s[2] < s[1] and s[1] < s[0]:\n            return s[2] + s[1] + s[0]\n    if len(s) == 4:\n        if s[0] < s[1] and s[1] < s[2] and s[2] < s[3]:\n            return s\n        elif s[0] < s[2] and s[2] < s[3] and s[3] < s[1]:\n            return s[1] + s[0] + s[2] + s[3]\n        elif s[0] < s[3] and s[3] < s[2] and s[2] < s[1]:\n            return s[0] + s[2] + s[3] + s[1]\n        elif s[1] < s[0] and s[0] <\n",
            "def construct_largest_valid_sequence(s):\n    # Write your code here.\n    if len(s) == 0:\n        return \"\"\n    if len(s) == 1:\n        return s\n    if s[0] == s[1]:\n        return s[0] + construct_largest_valid_sequence(s[1:])\n    else:\n        return construct_largest_valid_sequence(s[1:]) + s[0]\n",
            "def construct_largest_valid_sequence(s):\n    if not s:\n        return ''\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return s\n        else:\n            return s[0]\n    if s[0] == s[1]:\n        return s[0] + construct_largest_valid_sequence(s[2:])\n    else:\n        return s[0] + construct_largest_valid_sequence(s[1:])\n",
            "def construct_largest_valid_sequence(s):\n    if len(s) == 0:\n        return ''\n    if len(s) == 1:\n        return s\n    if s[0] == s[1]:\n        return s[0] + construct_largest_valid_sequence(s[1:])\n    else:\n        return construct_largest_valid_sequence(s[1:]) + s[0]\n",
            "def construct_largest_valid_sequence(s):\n    \"\"\"\n    :param s: a string\n    :return: the lexicographically largest valid sequence\n    \"\"\"\n    # your code here\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        if s[0] <= s[1]:\n            return s\n        else:\n            return s[::-1]\n    if s[0] <= s[1]:\n        return s[0] + construct_largest_valid_sequence(s[1:])\n    else:\n        return construct_largest_valid_sequence(s[1:]) + s[0]\n",
            "def construct_largest_valid_sequence(sequence):\n    # Write your code here\n    # Your code here\n    return sequence\n"
        ],
        "results": 10
    },
    {
        "id": "783",
        "source": "leetcodeTitles",
        "source_id": "66",
        "url": "https://leetcode.com/problems/plus-one/",
        "language": "python",
        "query": "Plus One",
        "snippets": [
            "def plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    digits[-1] += 1\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] == 10:\n            digits[i] = 0\n            digits[i - 1] += 1\n        else:\n            break\n    if digits[0] == 0:\n        digits.insert(0, 1)\n    return digits\n",
            "def plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    digits[-1] += 1\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] != 10:\n            break\n        digits[i] = 0\n        digits[i - 1] += 1\n    if digits[0] == 0:\n        digits.insert(0, 1)\n    return digits\n",
            "def plusOne(digits):\n    \"\"\"\n    :type digits: List[int]\n    :rtype: List[int]\n    \"\"\"\n    digits[-1] += 1\n    for i in range(len(digits) - 1, -1, -1):\n        if digits[i] == 10:\n            digits[i] = 0\n            if i == 0:\n                digits.insert(0, 1)\n        else:\n            break\n    return digits\n",
            "def plusOne(digits):\n    digits[-1] += 1\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] != 10:\n            break\n        digits[i] = 0\n        digits[i-1] += 1\n    if digits[0] == 10:\n        digits[0] = 0\n        digits.append(1)\n    return digits\n",
            "def plusOne(digits):\n    digits[-1] += 1\n    for i in range(len(digits)-1, 0, -1):\n        if digits[i] == 10:\n            digits[i] = 0\n            digits[i-1] += 1\n        else:\n            break\n    if digits[0] == 10:\n        digits[0] = 0\n        digits.append(1)\n    return digits\n"
        ],
        "results": 10
    },
    {
        "id": "784",
        "source": "leetcodeTitles",
        "source_id": "1620",
        "url": "https://leetcode.com/problems/coordinate-with-maximum-network-quality/",
        "language": "python",
        "query": "Coordinate With Maximum Network Quality",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int\n",
            "def main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * b[i]\n    print(ans)\n",
            "def main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    print(a[0] + b[0])\n",
            "def main():\n    n, m = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(m):\n            ans = max(ans, a[i] + b[j])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    x.sort()\n    y.sort()\n    print(x[n-1] + y[n-1])\n",
            "def main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    x.sort()\n    y.sort()\n    print(x[n-1] + y[n-1] - x[0] - y[0])\n"
        ],
        "results": 10
    },
    {
        "id": "785",
        "source": "leetcodeTitles",
        "source_id": "1525",
        "url": "https://leetcode.com/problems/number-of-good-ways-to-split-a-string/",
        "language": "python",
        "query": "Number of Good Ways to Split a String",
        "snippets": [
            "def numWays(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if s[0] == s[1]:\n        return numWays(s[2:]) + numWays(s[1:])\n    else:\n        return numWays(s[1:]) + numWays(s[2:])\n",
            "def num_ways(s):\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if s[0] == s[-1]:\n        return num_ways(s[1:-1]) + num_ways(s[2:])\n    else:\n        return num_ways(s[1:]) + num_ways(s[2:])\n",
            "def num_ways(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 1 if s[0] == s[1] else 0\n    if len(s) == 3:\n        return 1 if s[0] == s[2] else 0\n    if len(s) == 4:\n        return 1 if s[0] == s[3] else 0\n    if len(s) == 5:\n        return 1 if s[0] == s[4] else 0\n    if len(s) == 6:\n        return 1 if s[0] == s[5] else 0\n    if len(s) == 7:\n        return 1 if s[0] == s[6] else 0\n    if len(s) == 8:\n        return 1 if s[0] == s[7] else 0\n    if len(s) == 9:\n        return 1 if s[0] == s[8] else 0\n    if len(s) == 10:\n        return 1 if s[0] == s[9] else 0\n    if len(s) == 11:\n        return 1 if s[0] == s[10] else 0\n    if len(s) == 12:\n        return 1 if s[0] == s[11] else 0\n    if len(s) == 13:\n        return 1 if s[0] == s[12] else 0\n    if len(s) == 14:\n        return 1 if s[0] == s[13] else 0\n    if len(s) == 15:\n        return 1 if s[0] == s[14] else 0\n    if len(s) == 16:\n        return 1 if s[0] == s[15] else 0\n    if len(s) == 17:\n        return 1 if s[0] == s[16] else 0\n    if len(s) == 18:\n        return 1 if s[0] == s[17] else 0\n    if len(s) == 19:\n        return 1 if s[\n",
            "def num_good_splits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 0\n    if s[0] == s[-1]:\n        return num_good_splits(s[1:-1])\n    return num_good_splits(s[1:]) + num_good_splits(s[:-1])\n",
            "def num_good_splits(s):\n    \"\"\"\n    :param s: string\n    :return: number of good splits\n    \"\"\"\n    if len(s) == 1:\n        return 0\n    if len(s) == 2:\n        return 1\n    if s[0] == s[-1]:\n        return num_good_splits(s[1:-1])\n    else:\n        return num_good_splits(s[1:]) + num_good_splits(s[:-1])\n",
            "def num_good_splits(s):\n    \"\"\"\n    :param s: string\n    :return: number of good splits\n    \"\"\"\n    if len(s) == 1:\n        return 0\n    if len(s) == 2:\n        return 1\n    if len(s) == 3:\n        return 1\n    if len(s) == 4:\n        return 2\n    if len(s) == 5:\n        return 2\n    if len(s) == 6:\n        return 2\n    if len(s) == 7:\n        return 2\n    if len(s) == 8:\n        return 2\n    if len(s) == 9:\n        return 2\n    if len(s) == 10:\n        return 2\n    if len(s) == 11:\n        return 2\n    if len(s) == 12:\n        return 2\n    if len(s) == 13:\n        return 2\n    if len(s) == 14:\n        return 2\n    if len(s) == 15:\n        return 2\n    if len(s) == 16:\n        return 2\n    if len(s) == 17:\n        return 2\n    if len(s) == 18:\n        return 2\n    if len(s) == 19:\n        return 2\n    if len(s) == 20:\n        return 2\n    if len(s) == 21:\n        return 2\n    if len(s) == 22:\n        return 2\n    if len(s) == 23:\n        return 2\n    if len(s) == 24:\n        return 2\n    if len(s) == 25:\n        return 2\n    if len(s) == 26:\n        return 2\n    if len(s) == 27:\n        return 2\n    if len(s) == 28:\n        return 2\n    if len(s) == 29:\n        return 2\n    if len(s) == 30:\n        return 2\n    if len(s) == 31:\n        return 2\n    if len(s) == 32:\n        return 2\n    if len(s) == 33:\n        return 2\n    if len(s\n",
            "def num_good_splits(s):\n    \"\"\"\n    :param s: string\n    :return: number of good splits\n    \"\"\"\n    if len(s) == 1:\n        return 1\n    count = 0\n    for i in range(len(s)):\n        if s[i] == ' ':\n            count += 1\n    if count == 0:\n        return 1\n    if count == 1:\n        return 2\n    if count == 2:\n        return 3\n    if count == 3:\n        return 4\n    if count == 4:\n        return 5\n    if count == 5:\n        return 6\n    if count == 6:\n        return 7\n    if count == 7:\n        return 8\n    if count == 8:\n        return 9\n    if count == 9:\n        return 10\n    if count == 10:\n        return 11\n    if count == 11:\n        return 12\n    if count == 12:\n        return 13\n    if count == 13:\n        return 14\n    if count == 14:\n        return 15\n    if count == 15:\n        return 16\n    if count == 16:\n        return 17\n    if count == 17:\n        return 18\n    if count == 18:\n        return 19\n    if count == 19:\n        return 20\n    if count == 20:\n        return 21\n    if count == 21:\n        return 22\n    if count == 22:\n        return 23\n    if count == 23:\n        return 24\n    if count == 24:\n        return 25\n    if count == 25:\n        return 26\n    if count == 26:\n        return 27\n    if count == 27:\n        return 28\n    if count == 28:\n        return 29\n    if count == 29:\n        return 30\n    if count == 30:\n        return 31\n    if count == 31:\n        return 32\n    if count == 32:\n        return 33\n    if count == 33:\n        return 34\n    if count == 34:\n        return 35\n    if count == 35:\n        return 36\n    if count == 36:\n        return 37\n    if count == 37:\n        return 38\n    if\n",
            "def num_good_splits(s):\n    \"\"\"\n    s: string\n    return: int\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(len(s)):\n        if s[i] == ' ':\n            count += 1\n    if count == 0:\n        return 1\n    else:\n        return count + 1\n",
            "def num_good_ways(s):\n    \"\"\"\n    :param s: string\n    :return: number of good ways to split string\n    \"\"\"\n    if len(s) < 2:\n        return 0\n    if len(s) == 2:\n        return 1\n    if len(s) == 3:\n        return 1 if s[0] == s[2] else 0\n    if len(s) == 4:\n        return 1 if s[0] == s[3] else 0\n    if len(s) == 5:\n        return 1 if s[0] == s[4] else 0\n    if len(s) == 6:\n        return 1 if s[0] == s[5] else 0\n    if len(s) == 7:\n        return 1 if s[0] == s[6] else 0\n    if len(s) == 8:\n        return 1 if s[0] == s[7] else 0\n    if len(s) == 9:\n        return 1 if s[0] == s[8] else 0\n    if len(s) == 10:\n        return 1 if s[0] == s[9] else 0\n    if len(s) == 11:\n        return 1 if s[0] == s[10] else 0\n    if len(s) == 12:\n        return 1 if s[0] == s[11] else 0\n    if len(s) == 13:\n        return 1 if s[0] == s[12] else 0\n    if len(s) == 14:\n        return 1 if s[0] == s[13] else 0\n    if len(s) == 15:\n        return 1 if s[0] == s[14] else 0\n    if len(s) == 16:\n        return 1 if s[0] == s[15] else 0\n    if len(s) == 17:\n        return 1 if s[0] == s[16] else 0\n    if len(s) == 18:\n        return 1 if s[0] == s[17] else 0\n    if len(s) == 19:\n        return 1 if s[0] == s[\n",
            "def num_good_splits(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # count the number of times each character appears\n    counts = {}\n    for c in s:\n        counts[c] = counts.get(c, 0) + 1\n    # count the number of times each character appears\n    # and the number of times it appears in the last half\n    # of the string\n    counts2 = {}\n    for i in range(len(s) // 2):\n        c = s[i]\n        counts2[c] = counts2.get(c, 0) + 1\n        counts2[s[len(s) - i - 1]] = counts2.get(s[len(s) - i - 1], 0) + 1\n    # count the number of times each character appears\n    # and the number of times it appears in the first half\n    # of the string\n    counts3 = {}\n    for i in range(len(s) // 2):\n        c = s[i]\n        counts3[c] = counts3.get(c, 0) + 1\n        counts3[s[len(s) - i - 1]] = counts3.get(s[len(s) - i - 1], 0) + 1\n    # count the number of times each character appears\n    # and the number of times it appears in the middle of the string\n    counts4 = {}\n    for i in range(len(s) // 2):\n        c = s[i]\n        counts4[c] = counts4.get(c, 0) + 1\n        counts4[s[len(s) - i - 1]] = counts4.get(s[len(s) - i - 1], 0) + 1\n        counts4[s[len(s) // 2]] = counts4.get(s[len(s) // 2], 0) + 1\n    # count the number of times each character appears\n    # and the number of times it appears in the middle of the string\n    # and the number of times it appears in the first half of the string\n    counts5 = {}\n"
        ],
        "results": 10
    },
    {
        "id": "786",
        "source": "leetcodeTitles",
        "source_id": "173",
        "url": "https://leetcode.com/problems/binary-search-tree-iterator/",
        "language": "python",
        "query": "Binary Search Tree Iterator",
        "snippets": [
            "def inorder(root):\n    if root:\n        inorder(root.left)\n        print(root.val, end=' ')\n        inorder(root.right)\n",
            "def in_order(root):\n    if root is None:\n        return\n    in_order(root.left)\n    print(root.val, end=' ')\n    in_order(root.right)\n",
            "def inorder_traversal(root):\n    if root is None:\n        return\n    inorder_traversal(root.left)\n    print(root.data, end=\" \")\n    inorder_traversal(root.right)\n"
        ],
        "results": 10
    },
    {
        "id": "787",
        "source": "leetcodeTitles",
        "source_id": "2033",
        "url": "https://leetcode.com/problems/minimum-operations-to-make-a-uni-value-grid/",
        "language": "python",
        "query": "Minimum Operations to Make a Uni-Value Grid",
        "snippets": [
            "def min_operations(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n",
            "def min_operations(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return min_operations(n-1) + min_operations(n-2) + min_operations(n-3)\n",
            "def minOperations(n):\n    return (n - 1) // 3 + (n - 1) // 5 + (n - 1) // 15\n",
            "def make_grid(grid):\n    if grid == []:\n        return 0\n    if len(grid) == 1:\n        return grid[0]\n    if len(grid) == 2:\n        return grid[0] + grid[1]\n    if len(grid) == 3:\n        return grid[0] + grid[1] + grid[2]\n    if len(grid) == 4:\n        return grid[0] + grid[1] + grid[2] + grid[3]\n    if len(grid) == 5:\n        return grid[0] + grid[1] + grid[2] + grid[3] + grid[4]\n    if len(grid) == 6:\n        return grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5]\n    if len(grid) == 7:\n        return grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6]\n    if len(grid) == 8:\n        return grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6] + grid[7]\n    if len(grid) == 9:\n        return grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6] + grid[7] + grid[8]\n    if len(grid) == 10:\n        return grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6] + grid[7] + grid[8] + grid[9]\n    if len(grid) == 11:\n        return grid[0] + grid[1] + grid[2] + grid[3] + grid[4] + grid[5] + grid[6] + grid[7] + grid[8] + grid[9] + grid[10]\n    if len(grid) == 12:\n        return grid[0] + grid[\n",
            "def minOperations(n):\n    return (n + 1) // 2\n",
            "def minOperations(n):\n    return (n - 1) // 3 + (n - 1) // 2 + (n - 1) // 4\n",
            "def minOperations(n):\n    return (n - 1) // 4 + (n - 1) % 4\n",
            "def minOperations(n):\n    # Write your code here.\n    return 0\n"
        ],
        "results": 10
    },
    {
        "id": "788",
        "source": "leetcodeTitles",
        "source_id": "1008",
        "url": "https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/",
        "language": "python",
        "query": "Construct Binary Search Tree from Preorder Traversal",
        "snippets": [
            "def bstFromPreorder(preorder):\n    if not preorder:\n        return None\n    root = TreeNode(preorder[0])\n    i = 1\n    while i < len(preorder) and preorder[i] < root.val:\n        i += 1\n    root.left = bstFromPreorder(preorder[1:i])\n    root.right = bstFromPreorder(preorder[i:])\n    return root\n",
            "def bstFromPreorder(preorder):\n    if not preorder:\n        return None\n    root = TreeNode(preorder[0])\n    i = 1\n    while i < len(preorder) and preorder[i] < preorder[0]:\n        i += 1\n    root.left = bstFromPreorder(preorder[1:i])\n    root.right = bstFromPreorder(preorder[i:])\n    return root\n"
        ],
        "results": 10
    },
    {
        "id": "789",
        "source": "leetcodeTitles",
        "source_id": "1025",
        "url": "https://leetcode.com/problems/divisor-game/",
        "language": "python",
        "query": "Divisor Game",
        "snippets": [
            "def divisorGame(N):\n    \"\"\"\n    :type N: int\n    :rtype: bool\n    \"\"\"\n    if N == 1:\n        return False\n    if N == 2:\n        return True\n    if N % 2 == 0:\n        return False\n    for i in range(3, N + 1, 2):\n        if N % i == 0:\n            return False\n    return True\n",
            "def divisorGame(N):\n    \"\"\"\n    :type N: int\n    :rtype: bool\n    \"\"\"\n    if N == 1:\n        return False\n    if N == 2:\n        return True\n    if N == 3:\n        return False\n    if N == 4:\n        return True\n    if N == 5:\n        return False\n    if N == 6:\n        return True\n    if N == 7:\n        return False\n    if N == 8:\n        return True\n    if N == 9:\n        return False\n    if N == 10:\n        return True\n    if N == 11:\n        return False\n    if N == 12:\n        return True\n    if N == 13:\n        return False\n    if N == 14:\n        return True\n    if N == 15:\n        return False\n    if N == 16:\n        return True\n    if N == 17:\n        return False\n    if N == 18:\n        return True\n    if N == 19:\n        return False\n    if N == 20:\n        return True\n    if N == 21:\n        return False\n    if N == 22:\n        return True\n    if N == 23:\n        return False\n    if N == 24:\n        return True\n    if N == 25:\n        return False\n    if N == 26:\n        return True\n    if N == 27:\n        return False\n    if N == 28:\n        return True\n    if N == 29:\n        return False\n    if N == 30:\n        return True\n    if N == 31:\n        return False\n    if N == 32:\n        return True\n    if N == 33:\n        return False\n    if N == 34:\n        return True\n    if N == 35:\n        return False\n    if N == 36:\n        return True\n    if N == 37:\n        return False\n    if N == 38:\n        return True\n    if N == 39:\n        return False\n    if N == 40:\n        return True\n    if N == 41:\n        return False\n    if N == 42:\n        return True\n    if N == 43:\n        return\n",
            "def divisorGame(N):\n    if N == 1:\n        return False\n    if N == 2:\n        return True\n    for i in range(2, N):\n        if N % i == 0 and N // i != 1:\n            return False\n    return True\n",
            "def divisorGame(N):\n    if N == 1:\n        return False\n    for i in range(1, N):\n        if N % i == 0 and N // i != 1:\n            return True\n    return False\n",
            "def divisorGame(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, n + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
            "def divisorGame(N):\n    if N == 1:\n        return False\n    for i in range(2, N):\n        if N % i == 0 and N / i != 1:\n            return True\n    return False\n",
            "def divisorGame(N):\n    if N == 1:\n        return False\n    for i in range(2, N + 1):\n        if N % i == 0 and N // i != 1:\n            return True\n    return False\n",
            "def divisorGame(N):\n    if N == 1:\n        return False\n    for i in range(2, N+1):\n        if N % i == 0 and divisorGame(N//i):\n            return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "790",
        "source": "leetcodeTitles",
        "source_id": "946",
        "url": "https://leetcode.com/problems/validate-stack-sequences/",
        "language": "python",
        "query": "Validate Stack Sequences",
        "snippets": [
            "def validateStackSequences(push, pop):\n    if len(push) != len(pop):\n        return False\n    stack = []\n    for i in range(len(push)):\n        stack.append(push[i])\n        while stack and stack[-1] == pop[i]:\n            stack.pop()\n    return not stack\n",
            "def validateStackSequences(push, pop):\n    if len(push) != len(pop):\n        return False\n    stack = []\n    for i in range(len(push)):\n        stack.append(push[i])\n        while len(stack) > 0 and stack[-1] == pop[i]:\n            stack.pop()\n    return len(stack) == 0\n",
            "def validateStackSequences(pushs, pops):\n    if len(pushs) != len(pops):\n        return False\n    stack = []\n    for i in range(len(pushs)):\n        stack.append(pushs[i])\n        while stack and stack[-1] == pops[i]:\n            stack.pop()\n    return len(stack) == 0\n",
            "def validateStackSequences(push, pop):\n    stack = []\n    for i in range(len(push)):\n        stack.append(push[i])\n        while stack and stack[-1] == pop[i]:\n            stack.pop()\n    return not stack\n",
            "def validateStackSequences(push, pop):\n    if len(push) != len(pop):\n        return False\n    if len(push) == 0:\n        return True\n    stack = []\n    for i in range(len(push)):\n        stack.append(push[i])\n        while len(stack) > 0 and stack[-1] == pop[i]:\n            stack.pop()\n    return len(stack) == 0\n"
        ],
        "results": 10
    },
    {
        "id": "791",
        "source": "leetcodeTitles",
        "source_id": "1991",
        "url": "https://leetcode.com/problems/find-the-middle-index-in-array/",
        "language": "python",
        "query": "Find the Middle Index in Array",
        "snippets": [
            "def find_middle_index(arr):\n    if len(arr) % 2 == 0:\n        return int(len(arr) / 2)\n    else:\n        return int((len(arr) - 1) / 2)\n",
            "def find_middle_index(arr):\n    if len(arr) % 2 == 0:\n        return int(len(arr) / 2)\n    else:\n        return int(len(arr) / 2) + 1\n",
            "def find_middle_index(array):\n    if len(array) % 2 == 0:\n        return (len(array) // 2) - 1\n    else:\n        return len(array) // 2\n"
        ],
        "results": 10
    },
    {
        "id": "792",
        "source": "leetcodeTitles",
        "source_id": "2216",
        "url": "https://leetcode.com/problems/minimum-deletions-to-make-array-beautiful/",
        "language": "python",
        "query": "Minimum Deletions to Make Array Beautiful",
        "snippets": [
            "def minDeletions(arr):\n    # Write your code here\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        if arr[i] == arr[i-1]:\n            count += 1\n    return count\n",
            "def minDeletions(arr):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if i == 0:\n            continue\n        if arr[i] == arr[i-1]:\n            count += 1\n    return count\n",
            "def minDeletions(A):\n    # Write your code here\n    A.sort()\n    count = 0\n    for i in range(len(A)):\n        if A[i] != i+1:\n            count += 1\n    return count\n",
            "def minDeletions(arr):\n    # Write your code here\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            count += 1\n    return count\n",
            "def minDeletions(a):\n    a.sort()\n    count = 0\n    for i in range(len(a)):\n        if a[i] != i+1:\n            count += 1\n    return count\n",
            "def makeArrayBeautiful(arr):\n    # Write your code here\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            count += 1\n            arr[i] = i + 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "793",
        "source": "leetcodeTitles",
        "source_id": "2315",
        "url": "https://leetcode.com/problems/count-asterisks/",
        "language": "python",
        "query": "Count Asterisks",
        "snippets": [
            "def count_asterisks(s):\n    count = 0\n    for i in s:\n        if i == '*':\n            count += 1\n    return count\n",
            "def count_asterisks(string):\n    count = 0\n    for i in string:\n        if i == '*':\n            count += 1\n    return count\n",
            "def count_asterisks(s):\n    count = 0\n    for c in s:\n        if c == '*':\n            count += 1\n    return count\n",
            "def count_asterisks(s):\n    \"\"\"\n    Counts the number of asterisks in a string.\n    \"\"\"\n    return s.count('*')\n"
        ],
        "results": 10
    },
    {
        "id": "794",
        "source": "leetcodeTitles",
        "source_id": "2116",
        "url": "https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid/",
        "language": "python",
        "query": "Check if a Parentheses String Can be Valid",
        "snippets": [
            "def check(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
            "def check(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
            "def check(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
            "def check(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n",
            "def check(s):\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
            "def check(s):\n    if len(s) % 2 != 0:\n        return False\n    stack = []\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
            "def checkValid(s):\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        elif c == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
        ],
        "results": 10
    },
    {
        "id": "795",
        "source": "leetcodeTitles",
        "source_id": "1013",
        "url": "https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/",
        "language": "python",
        "query": "Partition Array Into Three Parts With Equal Sum",
        "snippets": [
            "def canThreePartsEqualSum(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: bool\n    \"\"\"\n    if sum(A) % 3 != 0:\n        return False\n    target = sum(A) // 3\n    curr_sum = 0\n    count = 0\n    for i in A:\n        curr_sum += i\n        if curr_sum == target:\n            count += 1\n            curr_sum = 0\n    return count >= 3\n",
            "def canThreePartsEqualSum(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: bool\n    \"\"\"\n    if sum(A) % 3 != 0:\n        return False\n    target = sum(A) // 3\n    curr = 0\n    count = 0\n    for i in A:\n        curr += i\n        if curr == target:\n            count += 1\n            curr = 0\n    return count >= 3\n",
            "def canThreePartsEqualSum(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(A) < 3:\n        return False\n    sum_ = sum(A)\n    if sum_ % 3 != 0:\n        return False\n    sum_ /= 3\n    cur_sum = 0\n    count = 0\n    for i in A:\n        cur_sum += i\n        if cur_sum == sum_:\n            count += 1\n            cur_sum = 0\n    if count == 3:\n        return True\n    return False\n",
            "def canPartition(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    total = sum(nums)\n    if total % 3 != 0:\n        return False\n    target = total // 3\n    dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n    for i in range(len(nums)):\n        dp[i][0] = True\n    for i in range(len(nums)):\n        for j in range(1, target + 1):\n            if j >= nums[i]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[-1][-1]\n",
            "def canThreePartsEqualSum(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(A) < 3:\n        return False\n    sum_ = sum(A)\n    if sum_ % 3 != 0:\n        return False\n    sum_ /= 3\n    curr_sum = 0\n    count = 0\n    for i in A:\n        curr_sum += i\n        if curr_sum == sum_:\n            count += 1\n            curr_sum = 0\n    return count >= 3\n",
            "def canPartition(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    sum_ = sum(nums)\n    if sum_ % 3 != 0:\n        return False\n    target = sum_ // 3\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]\n",
            "def canPartition(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    sum_ = sum(nums)\n    if sum_ % 3 != 0:\n        return False\n    target = sum_ // 3\n    dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n    for i in range(len(nums)):\n        dp[i][0] = True\n    for i in range(len(nums)):\n        for j in range(1, target + 1):\n            if j >= nums[i]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[-1][-1]\n",
            "def canPartition(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    if len(nums) < 3:\n        return False\n    if sum(nums) % 3 != 0:\n        return False\n    target = sum(nums) // 3\n    dp = [[False for _ in range(target + 1)] for _ in range(len(nums))]\n    for i in range(len(nums)):\n        dp[i][0] = True\n    for i in range(1, len(nums)):\n        for j in range(1, target + 1):\n            if j >= nums[i]:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - nums[i]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[-1][-1]\n"
        ],
        "results": 10
    },
    {
        "id": "796",
        "source": "leetcodeTitles",
        "source_id": "275",
        "url": "https://leetcode.com/problems/h-index-ii/",
        "language": "python",
        "query": "H-Index II",
        "snippets": [
            "def hIndex(citations):\n    \"\"\"\n    :type citations: List[int]\n    :rtype: int\n    \"\"\"\n    citations.sort()\n    for i in range(len(citations)):\n        if citations[i] >= len(citations) - i:\n            return len(citations) - i\n    return 0\n",
            "def hIndex(citations):\n    \"\"\"\n    :type citations: List[int]\n    :rtype: int\n    \"\"\"\n    if not citations:\n        return 0\n    citations.sort()\n    for i in range(len(citations)):\n        if citations[i] >= len(citations) - i:\n            return len(citations) - i\n    return 0\n",
            "def hIndex(citations):\n    \"\"\"\n    :type citations: List[int]\n    :rtype: int\n    \"\"\"\n    citations.sort()\n    n = len(citations)\n    for i in range(n):\n        if citations[i] >= n - i:\n            return n - i\n    return 0\n"
        ],
        "results": 10
    },
    {
        "id": "797",
        "source": "leetcodeTitles",
        "source_id": "1111",
        "url": "https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/",
        "language": "python",
        "query": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "snippets": [
            "def maxDepth(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    stack = []\n    max_depth = 0\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n            else:\n                max_depth = max(max_depth, len(stack) + 1)\n    return max_depth\n",
            "def maxDepth(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    stack = []\n    max_depth = 0\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(s[i])\n        else:\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n            else:\n                max_depth = max(max_depth, len(stack) + 1)\n    return max_depth\n",
            "def maxDepth(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    stack = []\n    max_depth = 0\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if stack:\n                stack.pop()\n                max_depth = max(max_depth, len(stack))\n            else:\n                max_depth = max(max_depth, len(stack))\n    return max_depth\n",
            "def maxDepth(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == '(' and s[-1] == ')':\n        return 1 + maxDepth(s[1:-1])\n    if s[0] == '(' and s[-1] != ')':\n        return 1 + maxDepth(s[1:])\n    if s[0] != '(' and s[-1] == ')':\n        return 1 + maxDepth(s[:-1])\n    if s[0] != '(' and s[-1] != ')':\n        return 1 + maxDepth(s[1:-1])\n    return 1 + maxDepth(s[1:-1])\n",
            "def maxDepth(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    stack = []\n    max_depth = 0\n    for i in s:\n        if i == '(':\n            stack.append(i)\n        else:\n            if stack:\n                stack.pop()\n                max_depth += 1\n            else:\n                max_depth += 1\n    return max_depth\n"
        ],
        "results": 10
    },
    {
        "id": "798",
        "source": "leetcodeTitles",
        "source_id": "1921",
        "url": "https://leetcode.com/problems/eliminate-maximum-number-of-monsters/",
        "language": "python",
        "query": "Eliminate Maximum Number of Monsters",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == a[i+1]:\n            ans += 1\n        else:\n            break\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] > 0:\n            ans += 1\n            a[i] -= 1\n    print(ans)\n"
        ],
        "results": 10
    },
    {
        "id": "799",
        "source": "leetcodeTitles",
        "source_id": "2304",
        "url": "https://leetcode.com/problems/minimum-path-cost-in-a-grid/",
        "language": "python",
        "query": "Minimum Path Cost in a Grid",
        "snippets": [
            "def min_path_cost(grid):\n    if not grid:\n        return 0\n    if len(grid) == 1:\n        return grid[0][0]\n    if len(grid) == 2:\n        return min(grid[0][0], grid[1][0])\n    if len(grid) == 3:\n        return min(grid[0][0], grid[1][0], grid[2][0])\n    if len(grid) == 4:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n    if len(grid) == 5:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0])\n    if len(grid) == 6:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0])\n    if len(grid) == 7:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0])\n    if len(grid) == 8:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0])\n    if len(grid) == 9:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0], grid[8][0])\n    if len(grid) == 10:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0], grid[8][0], grid[9][0])\n    if\n",
            "def min_path_cost(grid):\n    if not grid:\n        return 0\n    m = len(grid)\n    n = len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i - 1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    return dp[-1][-1]\n",
            "def minPath(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i - 1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    return dp[-1][-1]\n",
            "def minCost(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i - 1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    return dp[-1][-1]\n",
            "def min_cost(grid):\n    if not grid:\n        return 0\n    if len(grid) == 1:\n        return grid[0][0]\n    if len(grid) == 2:\n        return min(grid[0][0], grid[1][0])\n    if len(grid) == 3:\n        return min(grid[0][0], grid[1][0], grid[2][0])\n    if len(grid) == 4:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n    if len(grid) == 5:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0])\n    if len(grid) == 6:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0])\n    if len(grid) == 7:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0])\n    if len(grid) == 8:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0])\n    if len(grid) == 9:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0], grid[8][0])\n    if len(grid) == 10:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0], grid[8][0], grid[9][0])\n    if len(\n",
            "def min_path_cost(grid):\n    \"\"\"\n    grid: 2D list of integers\n    \"\"\"\n    if not grid:\n        return 0\n    if len(grid) == 1:\n        return grid[0][0]\n    if len(grid) == 2:\n        return min(grid[0][0], grid[1][0])\n    if len(grid) == 3:\n        return min(grid[0][0], grid[1][0], grid[2][0])\n    if len(grid) == 4:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0])\n    if len(grid) == 5:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0])\n    if len(grid) == 6:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0])\n    if len(grid) == 7:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0])\n    if len(grid) == 8:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0])\n    if len(grid) == 9:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0], grid[8][0])\n    if len(grid) == 10:\n        return min(grid[0][0], grid[1][0], grid[2][0], grid[3][0], grid[4][0], grid[5][0], grid[6][0], grid[7][0],\n"
        ],
        "results": 10
    },
    {
        "id": "800",
        "source": "leetcodeTitles",
        "source_id": "1129",
        "url": "https://leetcode.com/problems/shortest-path-with-alternating-colors/",
        "language": "python",
        "query": "Shortest Path with Alternating Colors",
        "snippets": [
            "def shortest_alternating_paths(n, red_edges, blue_edges):\n    \"\"\"\n    n: int\n    red_edges: list of tuples\n    blue_edges: list of tuples\n    \"\"\"\n    # Initialize graph\n    graph = [[] for _ in range(n)]\n    for u, v in red_edges:\n        graph[u].append(v)\n    for u, v in blue_edges:\n        graph[u].append(v)\n    # Initialize colors\n    colors = [0] * n\n    # Initialize distances\n    distances = [float('inf')] * n\n    distances[0] = 0\n    # Initialize queue\n    queue = [(0, 0)]\n    # BFS\n    while queue:\n        u, color = queue.pop(0)\n        for v in graph[u]:\n            if colors[v] == color:\n                continue\n            if distances[v] == float('inf'):\n                distances[v] = distances[u] + 1\n                queue.append((v, 1 - color))\n            else:\n                return [-1]\n    return distances\n",
            "def shortest_path(graph, start, end):\n    if start == end:\n        return [start]\n    if not graph.has_key(start) or not graph.has_key(end):\n        return None\n    if start == end:\n        return [start]\n    queue = [(start, [start])]\n    while queue:\n        (vertex, path) = queue.pop(0)\n        for next in graph[vertex] - set(path):\n            if next == end:\n                return path + [next]\n            else:\n                queue.append((next, path + [next]))\n    return None\n",
            "def shortest_alternating_paths(n, red_edges, blue_edges):\n    \"\"\"\n    n: int\n    red_edges: list of tuples\n    blue_edges: list of tuples\n    \"\"\"\n    # Initialize graph\n    graph = [[] for _ in range(n)]\n    for u, v in red_edges:\n        graph[u].append(v)\n    for u, v in blue_edges:\n        graph[u].append(v)\n    # Initialize colors\n    colors = [0] * n\n    colors[0] = 1\n    # Initialize distance\n    distance = [float('inf')] * n\n    distance[0] = 0\n    # Initialize queue\n    queue = [(0, 0)]\n    # BFS\n    while queue:\n        u, color = queue.pop(0)\n        for v in graph[u]:\n            if colors[v] == color:\n                continue\n            if distance[v] == float('inf'):\n                distance[v] = distance[u] + 1\n                queue.append((v, 1 - color))\n            elif distance[v] == distance[u] + 1:\n                queue.append((v, 1 - color))\n    # Return distance\n    return [distance[i] if distance[i] != float('inf') else -1 for i in range(n)]\n",
            "def shortest_path(graph, start, end):\n    if start == end:\n        return [start]\n    if not graph.has_key(start) or not graph.has_key(end):\n        return None\n    queue = [(start, [start])]\n    while queue:\n        (vertex, path) = queue.pop(0)\n        for next in graph[vertex] - set(path):\n            if next == end:\n                return path + [next]\n            else:\n                queue.append((next, path + [next]))\n    return None\n",
            "def shortest_path(graph, start, end):\n    if start == end:\n        return [start]\n    if not graph.has_key(start):\n        return None\n    shortest = None\n    for node in graph[start]:\n        if node == end:\n            if shortest is None:\n                shortest = [start, node]\n            else:\n                shortest = [start] + shortest\n            break\n        newpath = shortest_path(graph, node, end)\n        if newpath:\n            if shortest is None:\n                shortest = newpath\n            else:\n                shortest = [start] + newpath\n    return shortest\n",
            "def shortest_path(graph, start, end):\n    # Write your code here.\n    queue = [(start, [start])]\n    while queue:\n        (vertex, path) = queue.pop(0)\n        for next in graph[vertex] - set(path):\n            if next == end:\n                return path + [next]\n            else:\n                queue.append((next, path + [next]))\n    return None\n",
            "def shortest_path(graph, start, end):\n    # Write your code here.\n    queue = [(start, [start])]\n    while queue:\n        (vertex, path) = queue.pop(0)\n        for next in graph[vertex] - set(path):\n            if next == end:\n                return path + [next]\n            else:\n                queue.append((next, path + [next]))\n    return []\n",
            "def shortest_path(graph, start, end):\n    if start == end:\n        return [start]\n    if not graph or not graph[start] or not graph[end]:\n        return None\n    queue = [(start, [start])]\n    while queue:\n        (vertex, path) = queue.pop(0)\n        for nxt in graph[vertex] - set(path):\n            if nxt == end:\n                return path + [nxt]\n            else:\n                queue.append((nxt, path + [nxt]))\n    return None\n",
            "def shortest_path(graph, start, end):\n    \"\"\"\n    Finds the shortest path between two nodes in a graph.\n    \"\"\"\n    if start == end:\n        return [start]\n    shortest = None\n    for node in graph[start]:\n        if node not in visited:\n            newpath = shortest_path(graph, node, end)\n            if newpath:\n                newpath.append(start)\n                newpath.reverse()\n                if not shortest or len(newpath) < len(shortest):\n                    shortest = newpath\n    return shortest\n",
            "def shortest_path(graph, start, end):\n    \"\"\"\n    Find the shortest path between two nodes in a graph.\n    \"\"\"\n    # Create a queue for BFS\n    queue = [(start, [start])]\n    # Create a set to store visited nodes\n    visited = set()\n    while queue:\n        # Get the first node\n        node, path = queue.pop(0)\n        # If the node is the end node, return the path\n        if node == end:\n            return path\n        # If the node is not visited, visit it\n        if node not in visited:\n            visited.add(node)\n            # Get the adjacent nodes\n            for adjacent in graph[node]:\n                # Append the adjacent node to the path\n                queue.append((adjacent, path + [adjacent]))\n    return []\n"
        ],
        "results": 10
    },
    {
        "id": "801",
        "source": "leetcodeTitles",
        "source_id": "1297",
        "url": "https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/",
        "language": "python",
        "query": "Maximum Number of Occurrences of a Substring",
        "snippets": [
            "def maxFreq(s, n, k):\n    if n < k:\n        return 0\n    count = [0] * (n - k + 1)\n    for i in range(n - k + 1):\n        for j in range(i, i + k):\n            count[i] += s[j] == s[i]\n    return max(count)\n",
            "def maxFreq(s, k):\n    if len(s) < k:\n        return 0\n    d = {}\n    for i in range(len(s) - k + 1):\n        d[s[i:i + k]] = d.get(s[i:i + k], 0) + 1\n    return max(d.values())\n",
            "def maxFreq(s, k):\n    \"\"\"\n    :type s: str\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not s or k < 1:\n        return 0\n    if k > len(s):\n        return 1\n    d = {}\n    for i in range(len(s) - k + 1):\n        d[s[i:i + k]] = d.get(s[i:i + k], 0) + 1\n    return max(d.values())\n",
            "def maxFreq(s, k):\n    \"\"\"\n    :param s: string\n    :param k: int\n    :return: int\n    \"\"\"\n    if len(s) < k:\n        return 0\n    if k == 1:\n        return len(s)\n    count = [0] * 26\n    for i in range(len(s) - k + 1):\n        count[ord(s[i]) - ord('a')] += 1\n    max_count = 0\n    for i in range(len(count)):\n        max_count = max(max_count, count[i])\n    return max_count\n",
            "def max_occurrences(text, pattern):\n    \"\"\"\n    Return the number of occurrences of the pattern in the text.\n    \"\"\"\n    count = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n",
            "def max_occurrences(text, pattern):\n    \"\"\"\n    Returns the number of occurrences of the pattern in the text.\n    \"\"\"\n    occurrences = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i+len(pattern)] == pattern:\n            occurrences += 1\n    return occurrences\n",
            "def max_occur(text, pattern):\n    \"\"\"\n    Return the number of occurrences of pattern in text\n    \"\"\"\n    count = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n",
            "def max_occur(text, pattern):\n    \"\"\"\n    Return the number of occurrences of pattern in text.\n    \"\"\"\n    count = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n",
            "def max_occurrences(text, word):\n    \"\"\"\n    Return the number of times a word appears in a string.\n    \"\"\"\n    return text.count(word)\n"
        ],
        "results": 10
    },
    {
        "id": "802",
        "source": "leetcodeTitles",
        "source_id": "236",
        "url": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/",
        "language": "python",
        "query": "Lowest Common Ancestor of a Binary Tree",
        "snippets": [
            "def lowestCommonAncestor(root, p, q):\n    if not root:\n        return None\n    if root == p or root == q:\n        return root\n    left = lowestCommonAncestor(root.left, p, q)\n    right = lowestCommonAncestor(root.right, p, q)\n    if left and right:\n        return root\n    return left if left else right\n",
            "def lowestCommonAncestor(root, p, q):\n    if root is None:\n        return None\n    if root == p or root == q:\n        return root\n    left = lowestCommonAncestor(root.left, p, q)\n    right = lowestCommonAncestor(root.right, p, q)\n    if left and right:\n        return root\n    return left if left else right\n"
        ],
        "results": 10
    },
    {
        "id": "803",
        "source": "leetcodeTitles",
        "source_id": "79",
        "url": "https://leetcode.com/problems/word-search/",
        "language": "python",
        "query": "Word Search",
        "snippets": [
            "def word_search(grid, word):\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if word_search_helper(grid, word, i, j):\n                return True\n    return False\n",
            "def word_search(matrix, word):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if word_search_helper(matrix, word, i, j):\n                return True\n    return False\n",
            "def word_search(grid, word):\n    \"\"\"\n    :param grid: list of lists\n    :param word: str\n    :return: bool\n    \"\"\"\n    for row in range(len(grid)):\n        for col in range(len(grid[row])):\n            if word_search_helper(grid, word, row, col):\n                return True\n    return False\n",
            "def word_search(matrix, word):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == word[0]:\n                if word_search_helper(matrix, word, i, j):\n                    return True\n    return False\n",
            "def word_search(grid, word):\n    \"\"\"\n    :param grid: list of lists\n    :param word: string\n    :return: boolean\n    \"\"\"\n    for row in range(len(grid)):\n        for col in range(len(grid[row])):\n            if word_search_helper(grid, word, row, col):\n                return True\n    return False\n",
            "def word_search(matrix, word):\n    for row in range(len(matrix)):\n        for col in range(len(matrix[0])):\n            if word_search_helper(matrix, word, row, col):\n                return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "804",
        "source": "leetcodeTitles",
        "source_id": "1653",
        "url": "https://leetcode.com/problems/minimum-deletions-to-make-string-balanced/",
        "language": "python",
        "query": "Minimum Deletions to Make String Balanced",
        "snippets": [
            "def minDeletions(s):\n    # Write your code here.\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'b':\n            count += 1\n    return count\n",
            "def minDeletions(s):\n    # Write your code here.\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 'a':\n            count += 1\n    return len(s) - count\n",
            "def minDeletions(s):\n    cnt = [0] * 26\n    for c in s:\n        cnt[ord(c) - ord('a')] += 1\n    cnt.sort()\n    return sum(cnt[25:])\n",
            "def minDeletions(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    # Create a dictionary of characters and their counts\n    d = {}\n    for c in s:\n        if c in d:\n            d[c] += 1\n        else:\n            d[c] = 1\n    # Sort the dictionary by value\n    d = sorted(d.items(), key=lambda x: x[1])\n    # Find the number of deletions required\n    deletions = 0\n    for i in range(len(d)):\n        if d[i][1] > d[i+1][1]:\n            deletions += d[i][1] - d[i+1][1]\n    return deletions\n",
            "def minDeletions(s):\n    \"\"\"\n    s: a string\n    return: an integer\n    \"\"\"\n    # Write your code here.\n    # Count the number of each character in the string\n    count = [0] * 26\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    # Find the minimum number of deletions to make the string balanced\n    # The number of deletions is the number of characters in the string\n    # minus the number of characters in the string that are in the same\n    # position in the count array\n    return len(s) - min(count)\n"
        ],
        "results": 10
    },
    {
        "id": "805",
        "source": "leetcodeTitles",
        "source_id": "1404",
        "url": "https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/",
        "language": "python",
        "query": "Number of Steps to Reduce a Number in Binary Representation to One",
        "snippets": [
            "def numberOfSteps(num):\n    count = 0\n    while num != 0:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = num - 1\n        count += 1\n    return count\n",
            "def numSteps(n):\n    count = 0\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n + 1\n        count += 1\n    return count\n",
            "def num_steps(num):\n    if num == 1:\n        return 0\n    if num % 2 == 0:\n        return 1 + num_steps(num // 2)\n    else:\n        return 1 + num_steps(num * 3 + 1)\n",
            "def num_steps(num):\n    if num == 1:\n        return 0\n    if num % 2 == 0:\n        return 1 + num_steps(num // 2)\n    else:\n        return 1 + num_steps(3 * num + 1)\n",
            "def num_steps(num):\n    steps = 0\n    while num > 1:\n        if num % 2 == 0:\n            num /= 2\n        else:\n            num = num * 3 + 1\n        steps += 1\n    return steps\n",
            "def num_steps(num):\n    steps = 0\n    while num != 1:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num = 3 * num + 1\n        steps += 1\n    return steps\n",
            "def num_steps(n):\n    steps = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n + 1\n        steps += 1\n    return steps\n",
            "def num_steps(num):\n    steps = 0\n    while num > 1:\n        if num % 2 == 0:\n            num = num / 2\n        else:\n            num = (num * 3) + 1\n        steps += 1\n    return steps\n",
            "def numSteps(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if s == '0':\n        return 0\n    cnt = 0\n    while s != '1':\n        if s[-1] == '0':\n            s = s[:-1]\n        else:\n            s = s[:-1] + '0'\n        cnt += 1\n    return cnt\n"
        ],
        "results": 10
    },
    {
        "id": "806",
        "source": "leetcodeTitles",
        "source_id": "1465",
        "url": "https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/",
        "language": "python",
        "query": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "snippets": [
            "def max_area(h, w, h_cuts, w_cuts):\n    h_cuts.sort()\n    w_cuts.sort()\n    h_cuts.reverse()\n    w_cuts.reverse()\n    h_cuts = [h - x for x in h_cuts]\n    w_cuts = [w - x for x in w_cuts]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts.append(h)\n    w_cuts.append(w)\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x > 0]\n    w_cuts = [x for x in w_cuts if x > 0]\n    h_cuts = [x for x in h_cuts if x >\n",
            "def max_area(h, v):\n    h.sort()\n    v.sort()\n    h_len = len(h)\n    v_len = len(v)\n    max_area = 0\n    for i in range(h_len):\n        for j in range(v_len):\n            area = (h[i] - h[i-1]) * (v[j] - v[j-1])\n            max_area = max(max_area, area)\n    return max_area\n",
            "def max_area(h, v):\n    h.sort()\n    v.sort()\n    h_len = len(h)\n    v_len = len(v)\n    max_area = 0\n    for i in range(h_len):\n        for j in range(v_len):\n            area = (h[i] - h[i-1]) * (v[j] - v[j-1])\n            if area > max_area:\n                max_area = area\n    return max_area\n",
            "def max_area(h, w, hcuts, wcuts):\n    hcuts.sort()\n    wcuts.sort()\n    hcuts.reverse()\n    wcuts.reverse()\n    hcuts = [h - x for x in hcuts]\n    wcuts = [w - x for x in wcuts]\n    hcuts.append(0)\n    wcuts.append(0)\n    hcuts.append(h)\n    wcuts.append(w)\n    hcuts = [x for _, x in sorted(zip(hcuts, hcuts))]\n    wcuts = [x for _, x in sorted(zip(wcuts, wcuts))]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts =\n",
            "def max_area(h, v):\n    h.sort()\n    v.sort()\n    h_len = len(h)\n    v_len = len(v)\n    h_idx = 0\n    v_idx = 0\n    max_area = 0\n    while h_idx < h_len and v_idx < v_len:\n        if h[h_idx] < v[v_idx]:\n            max_area = max(max_area, h[h_idx] * (v_idx + 1))\n            h_idx += 1\n        else:\n            max_area = max(max_area, v[v_idx] * (h_idx + 1))\n            v_idx += 1\n    while h_idx < h_len:\n        max_area = max(max_area, h[h_idx] * (v_idx + 1))\n        h_idx += 1\n    while v_idx < v_len:\n        max_area = max(max_area, v[v_idx] * (h_idx + 1))\n        v_idx += 1\n    return max_area\n",
            "def max_area(h, w, hcuts, vcuts):\n    hcuts.sort()\n    vcuts.sort()\n    hcuts.append(h)\n    vcuts.append(w)\n    hcuts.insert(0, 0)\n    vcuts.insert(0, 0)\n    hcuts.append(h)\n    vcuts.append(w)\n    hcuts = [hcuts[i+1] - hcuts[i] for i in range(len(hcuts) - 1)]\n    vcuts = [vcuts[i+1] - vcuts[i] for i in range(len(vcuts) - 1)]\n    hcuts.append(0)\n    vcuts.append(0)\n    hcuts.insert(0, 0)\n    vcuts.insert(0, 0)\n    hcuts.append(0)\n    vcuts.append(0)\n    hcuts = [hcuts[i+1] - hcuts[i] for i in range(len(hcuts) - 1)]\n    vcuts = [vcuts[i+1] - vcuts[i] for i in range(len(vcuts) - 1)]\n    hcuts.append(0)\n    vcuts.append(0)\n    hcuts.insert(0, 0)\n    vcuts.insert(0, 0)\n    hcuts.append(0)\n    vcuts.append(0)\n    hcuts = [hcuts[i+1] - hcuts[i] for i in range(len(hcuts) - 1)]\n    vcuts = [vcuts[i+1] - vcuts[i] for i in range(len(vcuts) - 1)]\n    hcuts.append(0)\n    vcuts.append(0)\n    hcuts.insert(0, 0)\n    vcuts.insert(0, 0)\n    hcuts.append(0)\n    vcuts.append(0)\n    hcuts = [hcuts[i+1] - hcuts[i] for i in range(len(hcuts) - 1)]\n    vcuts = [vcuts[i+1] - v\n",
            "def max_area(h, v):\n    h.sort()\n    v.sort()\n    i, j = 0, len(v) - 1\n    area = 0\n    while i < j:\n        area = max(area, (h[i] + h[j]) * (v[i] + v[j]))\n        if v[i] > v[j]:\n            j -= 1\n        else:\n            i += 1\n    return area\n",
            "def max_area(h, v):\n    h.sort()\n    v.sort()\n    h_len = len(h)\n    v_len = len(v)\n    h_idx = 0\n    v_idx = 0\n    max_area = 0\n    while h_idx < h_len and v_idx < v_len:\n        if h[h_idx] < v[v_idx]:\n            max_area = max(max_area, h[h_idx] * (v_idx + 1))\n            h_idx += 1\n        else:\n            max_area = max(max_area, v[v_idx] * (h_idx + 1))\n            v_idx += 1\n    return max_area\n",
            "def maxArea(h, w, hcuts, wcuts):\n    hcuts.sort()\n    wcuts.sort()\n    hcuts.reverse()\n    wcuts.reverse()\n    hcuts = [h - x for x in hcuts]\n    wcuts = [w - x for x in wcuts]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    wcuts = [x for x in wcuts if x > 0]\n    hcuts = [x for x in hcuts if x < h]\n    wcuts = [x for x in wcuts if x < w]\n    hcuts = [x for x in hcuts if x > 0]\n    w\n"
        ],
        "results": 10
    },
    {
        "id": "807",
        "source": "leetcodeTitles",
        "source_id": "2074",
        "url": "https://leetcode.com/problems/reverse-nodes-in-even-length-groups/",
        "language": "python",
        "query": "Reverse Nodes in Even Length Groups",
        "snippets": [
            "def reverse_nodes_in_even_length_groups(head):\n    if not head or not head.next:\n        return head\n    prev = None\n    curr = head\n    while curr and curr.next:\n        next = curr.next.next\n        curr.next.next = prev\n        prev = curr\n        curr = next\n    head.next = reverse_nodes_in_even_length_groups(curr)\n    return prev\n",
            "def reverse_nodes_in_even_length_groups(head):\n    if head is None:\n        return None\n    if head.next is None:\n        return head\n    if head.next.next is None:\n        return head\n    prev = head\n    curr = head.next\n    next = head.next.next\n    while next is not None:\n        if next.next is None:\n            break\n        next = next.next.next\n        curr.next = prev\n        prev = curr\n        curr = next\n    head.next = reverse_nodes_in_even_length_groups(curr)\n    return prev\n",
            "def reverse_nodes_in_even_length_groups(head):\n    if head is None or head.next is None:\n        return head\n    prev = head\n    curr = head.next\n    while curr is not None:\n        next = curr.next\n        if next is None:\n            break\n        curr.next = next.next\n        next.next = prev\n        prev = curr\n        curr = curr.next\n    head.next = reverse_nodes_in_even_length_groups(curr)\n    return prev\n",
            "def reverse_nodes_in_even_length_groups(head):\n    if not head or not head.next:\n        return head\n    prev = head\n    curr = head.next\n    while curr:\n        next = curr.next\n        if next:\n            curr.next = next.next\n            next.next = prev\n            prev = curr\n            curr = curr.next\n        else:\n            curr.next = prev\n            break\n    head.next = reverse_nodes_in_even_length_groups(curr)\n    return prev\n",
            "def reverse_nodes_in_even_length_groups(head):\n    if not head or not head.next:\n        return head\n    prev = head\n    curr = head.next\n    while curr:\n        next = curr.next\n        if next:\n            curr.next = next.next\n            next.next = prev.next\n            prev.next = next\n            prev = curr\n            curr = curr.next\n        else:\n            curr.next = prev.next\n            prev.next = curr\n            curr = curr.next\n    return head.next\n",
            "def reverse_nodes_in_even_length_groups(head):\n    if not head or not head.next:\n        return head\n    prev, curr = None, head\n    while curr and curr.next:\n        next_node = curr.next.next\n        curr.next.next = prev\n        prev = curr\n        curr = next_node\n    head.next = reverse_nodes_in_even_length_groups(curr)\n    return prev\n",
            "def reverse_even_length_groups(head):\n    if not head or not head.next:\n        return head\n    prev, curr = head, head.next\n    while curr:\n        if curr.next and curr.next.next:\n            prev.next = curr.next\n            curr.next = curr.next.next\n            prev = curr\n            curr = curr.next\n        else:\n            prev.next = None\n            curr.next = head\n            return curr\n    return head\n"
        ],
        "results": 10
    },
    {
        "id": "808",
        "source": "leetcodeTitles",
        "source_id": "1514",
        "url": "https://leetcode.com/problems/path-with-maximum-probability/",
        "language": "python",
        "query": "Path with Maximum Probability",
        "snippets": [
            "def max_probability(n, edges, success_prob, start, end):\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    queue = [start]\n    visited = [False] * n\n    visited[start] = True\n    while queue:\n        node = queue.pop(0)\n        if node == end:\n            return success_prob[node]\n        for child in graph[node]:\n            if not visited[child]:\n                queue.append(child)\n                visited[child] = True\n    return 0.0\n",
            "def max_probability(n, edges, success_prob, start, end):\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    visited = [False] * n\n    q = [start]\n    visited[start] = True\n    while len(q) > 0:\n        node = q.pop(0)\n        for child in graph[node]:\n            if not visited[child]:\n                q.append(child)\n                visited[child] = True\n    if visited[end]:\n        return dfs(graph, start, end, success_prob)\n    return 0\n",
            "def max_probability(n, edges, success_prob, start, end):\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    q = [(start, 1)]\n    visited = set()\n    while q:\n        node, prob = q.pop(0)\n        if node == end:\n            return prob\n        if node not in visited:\n            visited.add(node)\n            for child in graph[node]:\n                q.append((child, prob * success_prob[(node, child)]))\n    return 0\n",
            "def max_probability(n, edges, success_prob, start, end):\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    visited = [False] * n\n    visited[start] = True\n    queue = [start]\n    while queue:\n        node = queue.pop(0)\n        for child in graph[node]:\n            if not visited[child]:\n                visited[child] = True\n                queue.append(child)\n    if visited[end]:\n        return 0\n    else:\n        return success_prob[start]\n",
            "def max_probability(n, edges, success_prob, start, end):\n    graph = {}\n    for i in range(n):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    prob = {}\n    for i in range(n):\n        prob[i] = 1\n    for i in range(n):\n        for j in graph[i]:\n            prob[j] *= success_prob[i]\n    return prob[end]\n",
            "def max_probability(n, edges, success_prob, start, end):\n    graph = {}\n    for edge in edges:\n        if edge[0] not in graph:\n            graph[edge[0]] = {}\n        if edge[1] not in graph:\n            graph[edge[1]] = {}\n        graph[edge[0]][edge[1]] = success_prob[edge]\n        graph[edge[1]][edge[0]] = success_prob[edge]\n    return dfs(graph, start, end, 0)\n",
            "def max_probability(n, m, a, b):\n    \"\"\"\n    n: int\n    m: int\n    a: list of ints\n    b: list of ints\n    \"\"\"\n    # Initialize the probability matrix\n    prob = [[0 for i in range(m)] for j in range(n)]\n    # Initialize the probability of the first row\n    for i in range(m):\n        prob[0][i] = a[i] / b[i]\n    # Initialize the probability of the first column\n    for i in range(n):\n        prob[i][0] = a[i] / b[i]\n    # Calculate the probability of the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, m):\n            prob[i][j] = max(prob[i-1][j], prob[i][j-1])\n    # Return the probability of the last row\n    return prob[n-1][m-1]\n",
            "def path_prob(M, start, end):\n    \"\"\"\n    M: matrix of probabilities\n    start: starting node\n    end: ending node\n    \"\"\"\n    if start == end:\n        return 1\n    if M[start][end] == 0:\n        return 0\n    prob = 0\n    for i in range(len(M)):\n        if i != start:\n            prob += path_prob(M, start, i) * path_prob(M, i, end)\n    return prob / M[start][end]\n",
            "def path_prob(M, start, end):\n    \"\"\"\n    M is a matrix of probabilities\n    start is the starting node\n    end is the ending node\n    \"\"\"\n    if start == end:\n        return 1\n    if M[start][end] == 0:\n        return 0\n    max_prob = 0\n    for i in range(len(M)):\n        if M[start][i] > 0:\n            prob = path_prob(M, i, end)\n            if prob > max_prob:\n                max_prob = prob\n    return M[start][end] * max_prob\n"
        ],
        "results": 9
    },
    {
        "id": "809",
        "source": "leetcodeTitles",
        "source_id": "203",
        "url": "https://leetcode.com/problems/remove-linked-list-elements/",
        "language": "python",
        "query": "Remove Linked List Elements",
        "snippets": [
            "def removeElements(head, val):\n    if head is None:\n        return None\n    if head.next is None:\n        if head.val == val:\n            return None\n        else:\n            return head\n    if head.val == val:\n        return removeElements(head.next, val)\n    else:\n        head.next = removeElements(head.next, val)\n        return head\n",
            "def removeElements(head, val):\n    if head is None:\n        return None\n    if head.next is None:\n        if head.val == val:\n            return None\n        else:\n            return head\n    curr = head\n    while curr.next is not None:\n        if curr.next.val == val:\n            curr.next = curr.next.next\n        else:\n            curr = curr.next\n    if head.val == val:\n        return head.next\n    else:\n        return head\n",
            "def removeElements(head, val):\n    if head is None:\n        return None\n    if head.next is None:\n        if head.val == val:\n            return None\n        else:\n            return head\n    if head.val == val:\n        return removeElements(head.next, val)\n    head.next = removeElements(head.next, val)\n    return head\n",
            "def removeElements(head, val):\n    if head is None:\n        return None\n    if head.next is None:\n        if head.val == val:\n            return None\n        else:\n            return head\n    curr = head\n    while curr.next is not None:\n        if curr.next.val == val:\n            curr.next = curr.next.next\n        else:\n            curr = curr.next\n    if head.val == val:\n        return head.next\n    return head\n",
            "def remove_elements(head, val):\n    if head is None:\n        return None\n    if head.next is None:\n        if head.val == val:\n            return None\n        else:\n            return head\n    curr = head\n    while curr.next is not None:\n        if curr.next.val == val:\n            curr.next = curr.next.next\n        else:\n            curr = curr.next\n    if head.val == val:\n        return head.next\n    return head\n",
            "def removeElements(head, val):\n    if head is None:\n        return None\n    dummy = ListNode(0)\n    dummy.next = head\n    prev = dummy\n    curr = head\n    while curr:\n        if curr.val == val:\n            prev.next = curr.next\n        else:\n            prev = curr\n        curr = curr.next\n    return dummy.next\n",
            "def remove_elements(head, val):\n    if head is None:\n        return None\n    while head.val == val:\n        head = head.next\n        if head is None:\n            return None\n    curr = head\n    while curr.next:\n        if curr.next.val == val:\n            curr.next = curr.next.next\n        else:\n            curr = curr.next\n    return head\n"
        ],
        "results": 10
    },
    {
        "id": "810",
        "source": "leetcodeTitles",
        "source_id": "1732",
        "url": "https://leetcode.com/problems/find-the-highest-altitude//",
        "language": "python",
        "query": "Find the Highest Altitude",
        "snippets": [
            "def main():\n    # Open the file for reading\n    infile = open('altitude.txt', 'r')\n    # Read the first line\n    line = infile.readline()\n    # Initialize the highest altitude\n    highest = 0\n    # Process the file\n    while line != '':\n        # Strip the line\n        line = line.strip()\n        # Convert the line to a number\n        altitude = int(line)\n        # Compare the altitude to the highest\n        if altitude > highest:\n            highest = altitude\n        # Read the next line\n        line = infile.readline()\n    # Close the file\n    infile.close()\n    # Display the highest altitude\n    print('The highest altitude is', highest)\n",
            "def main():\n    # Open the file for reading\n    infile = open('altitude.txt', 'r')\n    # Read the first line\n    line = infile.readline()\n    # Initialize the highest altitude\n    highest = 0\n    # Loop through the file\n    while line != '':\n        # Strip the line\n        line = line.strip()\n        # Convert the line to a number\n        altitude = int(line)\n        # Check if the altitude is higher than the highest\n        if altitude > highest:\n            # If so, update the highest\n            highest = altitude\n        # Read the next line\n        line = infile.readline()\n    # Close the file\n    infile.close()\n    # Print the highest altitude\n    print('The highest altitude is', highest)\n",
            "def main():\n    # Open the file for reading\n    infile = open('altitude.txt', 'r')\n    # Read the first line\n    line = infile.readline()\n    # Initialize the highest altitude\n    highest = 0\n    # Loop through the file\n    while line != '':\n        # Strip the line\n        line = line.strip()\n        # Convert the line to a number\n        altitude = int(line)\n        # Compare the altitude to the highest\n        if altitude > highest:\n            highest = altitude\n        # Read the next line\n        line = infile.readline()\n    # Close the file\n    infile.close()\n    # Print the highest altitude\n    print('The highest altitude is', highest)\n",
            "def main():\n    highest = 0\n    for line in open('altitude.txt'):\n        altitude = int(line)\n        if altitude > highest:\n            highest = altitude\n    print('The highest altitude is', highest)\n",
            "def main():\n    # Open the file for reading\n    infile = open(\"altitude.txt\", \"r\")\n\n    # Read the first line\n    line = infile.readline()\n\n    # Initialize the highest altitude\n    highest = 0\n\n    # Process the data\n    while line != \"\":\n        # Strip the newline character\n        line = line.rstrip()\n\n        # Convert the line to a number\n        altitude = int(line)\n\n        # Compare the altitude to the highest altitude\n        if altitude > highest:\n            highest = altitude\n\n        # Read the next line\n        line = infile.readline()\n\n    # Close the file\n    infile.close()\n\n    # Print the highest altitude\n    print(\"The highest altitude is\", highest)\n",
            "def main():\n    # Open the file\n    infile = open('data.txt', 'r')\n    # Read the file\n    data = infile.read()\n    # Close the file\n    infile.close()\n    # Split the data into a list\n    data = data.split('\\n')\n    # Initialize the highest altitude\n    highest = 0\n    # Loop through the data\n    for line in data:\n        # Split the line into a list\n        line = line.split(',')\n        # Convert the altitude to an integer\n        altitude = int(line[1])\n        # If the altitude is higher than the highest, set it to the highest\n        if altitude > highest:\n            highest = altitude\n    # Print the highest altitude\n    print('The highest altitude is', highest)\n",
            "def main():\n    # Get the file name\n    filename = input(\"Enter the filename: \")\n    # Open the file\n    infile = open(filename, \"r\")\n    # Read the file\n    lines = infile.readlines()\n    # Close the file\n    infile.close()\n    # Initialize the highest altitude\n    highest = 0\n    # Loop through the lines\n    for line in lines:\n        # Strip the line\n        line = line.strip()\n        # Split the line into a list\n        words = line.split()\n        # Get the altitude\n        altitude = int(words[-1])\n        # Check if the altitude is higher than the highest\n        if altitude > highest:\n            # If so, set the highest to the altitude\n            highest = altitude\n    # Print the highest altitude\n    print(\"The highest altitude is\", highest)\n",
            "def main():\n    # Get the number of rows\n    rows = int(input(\"Enter the number of rows: \"))\n    # Get the number of columns\n    columns = int(input(\"Enter the number of columns: \"))\n    # Create the matrix\n    matrix = create_matrix(rows, columns)\n    # Display the matrix\n    print(\"The matrix is:\")\n    display_matrix(matrix)\n    # Find the highest altitude\n    highest_altitude = find_highest_altitude(matrix)\n    # Display the highest altitude\n    print(\"The highest altitude is:\", highest_altitude)\n",
            "def main():\n    # Open the file for reading\n    infile = open(\"hightemp.txt\", \"r\")\n    # Read the file\n    lines = infile.readlines()\n    # Close the file\n    infile.close()\n    # Initialize the highest altitude\n    highest = 0\n    # Loop through the lines\n    for line in lines:\n        # Split the line into a list\n        line = line.split(\"\\t\")\n        # Get the altitude\n        altitude = int(line[2])\n        # Check if it is the highest\n        if altitude > highest:\n            highest = altitude\n    # Print the highest altitude\n    print(\"The highest altitude is\", highest)\n"
        ],
        "results": 9
    },
    {
        "id": "811",
        "source": "leetcodeTitles",
        "source_id": "1201",
        "url": "https://leetcode.com/problems/ugly-number-iii/",
        "language": "python",
        "query": "Ugly Number III",
        "snippets": [
            "def uglyNumber(n):\n    ugly = [1]\n    i2, i3, i5 = 0, 0, 0\n    while len(ugly) < n:\n        ugly.append(min(ugly[i2]*2, ugly[i3]*3, ugly[i5]*5))\n        if ugly[-1] == ugly[i2]*2:\n            i2 += 1\n        if ugly[-1] == ugly[i3]*3:\n            i3 += 1\n        if ugly[-1] == ugly[i5]*5:\n            i5 += 1\n    return ugly[-1]\n",
            "def uglyNumber(n):\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return\n",
            "def uglyNumber(n):\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return False\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return False\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return False\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return False\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return False\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return False\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return False\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return False\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return False\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return\n",
            "def uglyNumber(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return\n",
            "def ugly_number(n):\n    ugly_numbers = [1]\n    i2, i3, i5 = 0, 0, 0\n    while len(ugly_numbers) < n:\n        ugly_numbers.append(min(ugly_numbers[i2] * 2, ugly_numbers[i3] * 3, ugly_numbers[i5] * 5))\n        if ugly_numbers[-1] == ugly_numbers[i2] * 2:\n            i2 += 1\n        if ugly_numbers[-1] == ugly_numbers[i3] * 3:\n            i3 += 1\n        if ugly_numbers[-1] == ugly_numbers[i5] * 5:\n            i5 += 1\n    return ugly_numbers[-1]\n"
        ],
        "results": 10
    },
    {
        "id": "812",
        "source": "leetcodeTitles",
        "source_id": "897",
        "url": "https://leetcode.com/problems/increasing-order-search-tree/",
        "language": "python",
        "query": "Increasing Order Search Tree",
        "snippets": [
            "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.data < node.data:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:\n            if root.left is None:\n                root.left = node\n            else:\n                insert(root.left, node)\n    return root\n",
            "def insert(root, node):\n    if root is None:\n        root = node\n    else:\n        if root.val < node.val:\n            if root.right is None:\n                root.right = node\n            else:\n                insert(root.right, node)\n        else:\n            if root.left is None:\n                root.left = node\n            else:\n                insert(root.left, node)\n    return root\n",
            "def increasingBST(root):\n    if not root:\n        return None\n    if not root.left and not root.right:\n        return root\n    if root.left:\n        root.left = increasingBST(root.left)\n    if root.right:\n        root.right = increasingBST(root.right)\n    if root.left:\n        root.left.right = root\n    if root.right:\n        root.right.left = root\n    return root.left if root.left else root\n",
            "def increasingBST(root):\n    if not root:\n        return None\n    if not root.left and not root.right:\n        return root\n    root.left = increasingBST(root.left)\n    root.right = increasingBST(root.right)\n    return root\n",
            "def increasingBST(root):\n    if not root:\n        return None\n    if not root.left:\n        return root\n    root.left = increasingBST(root.left)\n    root.left.right = root\n    root.right = increasingBST(root.right)\n    return root.left\n",
            "def insert(tree, value):\n    if tree is None:\n        tree = [value, None, None]\n    elif value < tree[0]:\n        tree[1] = insert(tree[1], value)\n    else:\n        tree[2] = insert(tree[2], value)\n    return tree\n",
            "def incr_order_search_tree(root):\n    if root is None:\n        return None\n    if root.left is None and root.right is None:\n        return root\n    if root.left is None:\n        root.left = incr_order_search_tree(root.right)\n        root.right = None\n        return root\n    if root.right is None:\n        root.right = incr_order_search_tree(root.left)\n        root.left = None\n        return root\n    root.left = incr_order_search_tree(root.left)\n    root.right = incr_order_search_tree(root.right)\n    if root.left.data < root.data:\n        return root\n    if root.right.data < root.data:\n        return root\n    if root.left.data > root.data:\n        root.left, root.right = root.right, root.left\n    return root\n"
        ],
        "results": 10
    },
    {
        "id": "813",
        "source": "leetcodeTitles",
        "source_id": "1854",
        "url": "https://leetcode.com/problems/maximum-population-year/",
        "language": "python",
        "query": "Maximum Population Year",
        "snippets": [
            "def main():\n    \"\"\"\n    This program will find the year with the highest population.\n    \"\"\"\n    # Open the file\n    infile = open('world_population.txt', 'r')\n    # Read the first line\n    line = infile.readline()\n    # Initialize the variables\n    year = 0\n    population = 0\n    # Loop through the file\n    while line != '':\n        # Split the line into a list\n        line = line.split()\n        # Convert the year to an integer\n        year = int(line[0])\n        # Convert the population to an integer\n        population = int(line[1])\n        # Check if the population is greater than the previous population\n        if population > population:\n            # If so, set the population to the new population\n            population = population\n            # Set the year to the new year\n            year = year\n        # Read the next line\n        line = infile.readline()\n    # Close the file\n    infile.close()\n    # Print the results\n    print('The year with the highest population was', year)\n    print('The population was', population)\n",
            "def main():\n    \"\"\"\n    This program will find the year with the highest population.\n    \"\"\"\n    # Open the file\n    infile = open('world_population.txt', 'r')\n    # Read the first line\n    line = infile.readline()\n    # Initialize the variables\n    year = 0\n    population = 0\n    # Loop through the file\n    while line != '':\n        # Split the line into a list\n        line = line.split()\n        # Convert the year to an integer\n        year = int(line[0])\n        # Convert the population to an integer\n        population = int(line[1])\n        # Check if the population is greater than the previous population\n        if population > previous_population:\n            # Set the previous population to the current population\n            previous_population = population\n            # Set the previous year to the current year\n            previous_year = year\n    # Close the file\n    infile.close()\n    # Print the results\n    print('The year with the highest population is', previous_year)\n    print('The population is', previous_population)\n",
            "def main():\n    \"\"\"\n    This program will find the year with the highest population.\n    \"\"\"\n    # Open the file\n    infile = open('world_population.txt', 'r')\n    # Read the first line\n    line = infile.readline()\n    # Initialize the variables\n    year = 0\n    population = 0\n    # Loop through the file\n    while line != '':\n        # Split the line into a list\n        line = line.split()\n        # Convert the year to an integer\n        year = int(line[0])\n        # Convert the population to an integer\n        population = int(line[1])\n        # Check if the population is greater than the previous population\n        if population > previous_population:\n            # If so, update the variables\n            previous_population = population\n            previous_year = year\n        # Read the next line\n        line = infile.readline()\n    # Close the file\n    infile.close()\n    # Print the results\n    print('The year with the highest population was', previous_year)\n    print('The population was', previous_population)\n    print('The population is', previous_population / 1000000, 'million')\n    print('The population is', previous_population / 1000000000, 'billion')\n    print('The population is', previous_population / 1000000000000, 'trillion')\n    print('The population is', previous_population / 1000000000000000, 'quadrillion')\n    print('The population is', previous_population / 1000000000000000000, 'quintillion')\n    print('The population is', previous_population / 1000000000000000000000, 'sextillion')\n    print('The population is', previous_population / 1000000000000000000000000, 'septillion')\n    print('The population is', previous_population / 1000000000000000000000000000, 'octillion')\n    print('The population is', previous_population / 1000000000000000000000000000000, 'nonillion')\n    print('The population is', previous_population / 1000000000000000000000000000000000, 'decillion')\n    print('The population is', previous_population / 1000000000000000000000000000000000000, 'undecillion')\n    print('The population is', previous_population / 1000000000000000000000000000000000000000, 'duod\n",
            "def main():\n    \"\"\"\n    This program will find the year with the highest population.\n    \"\"\"\n    # Open the file\n    infile = open('world_population.txt', 'r')\n    # Read the first line\n    line = infile.readline()\n    # Initialize the variables\n    year = 0\n    population = 0\n    # Loop through the file\n    while line != '':\n        # Split the line into a list\n        line = line.split()\n        # Convert the year to an integer\n        year = int(line[0])\n        # Convert the population to an integer\n        population = int(line[1])\n        # Check if the population is greater than the previous year\n        if population > population_max:\n            # Update the variables\n            population_max = population\n            year_max = year\n        # Read the next line\n        line = infile.readline()\n    # Close the file\n    infile.close()\n    # Print the results\n    print('The year with the highest population is', year_max)\n    print('The population is', population_max)\n",
            "def max_pop(year):\n    \"\"\"\n    Returns the year with the highest population\n    \"\"\"\n    max_pop = 0\n    for i in range(len(year)):\n        if year[i] > max_pop:\n            max_pop = year[i]\n            max_year = i\n    return max_year\n",
            "def main():\n    \"\"\"\n    This program will find the year with the highest population.\n    \"\"\"\n    # Open the file\n    in_file = open('world_population.txt', 'r')\n    # Read the first line\n    line = in_file.readline()\n    # Initialize the variables\n    year = 0\n    pop = 0\n    # Loop through the file\n    while line != '':\n        # Strip the line\n        line = line.strip()\n        # Split the line into a list\n        line_list = line.split(',')\n        # Get the year\n        this_year = int(line_list[0])\n        # Get the population\n        this_pop = int(line_list[1])\n        # Check if this year is the highest\n        if this_pop > pop:\n            year = this_year\n            pop = this_pop\n        # Read the next line\n        line = in_file.readline()\n    # Close the file\n    in_file.close()\n    # Print the results\n    print('The year with the highest population was ' + str(year) +\n          ' with a population of ' + str(pop))\n",
            "def max_year(year_list):\n    \"\"\"\n    Returns the year with the highest population\n    \"\"\"\n    max_pop = 0\n    max_year = 0\n    for year in year_list:\n        if year[1] > max_pop:\n            max_pop = year[1]\n            max_year = year[0]\n    return max_year\n",
            "def main():\n    \"\"\"\n    This program will find the year with the highest population.\n    \"\"\"\n    # Initialize variables\n    year = 0\n    population = 0\n    # Open file\n    infile = open('world_population.txt', 'r')\n    # Read file\n    for line in infile:\n        # Split line into year and population\n        line = line.split()\n        # Convert population to integer\n        population = int(line[1])\n        # If population is greater than previous year, update year\n        if population > year:\n            year = population\n    # Close file\n    infile.close()\n    # Print year with highest population\n    print('The year with the highest population is', year)\n",
            "def main():\n    \"\"\"\n    This program will take a file of population data and find the year with the\n    highest population.\n    \"\"\"\n    # Open the file\n    in_file = open('world_population.txt', 'r')\n    # Read the first line\n    line = in_file.readline()\n    # Initialize the variables\n    year = 0\n    population = 0\n    # Loop through the file\n    while line != '':\n        # Strip the line\n        line = line.strip()\n        # Split the line into a list\n        data = line.split(',')\n        # Get the year\n        this_year = int(data[0])\n        # Get the population\n        this_population = int(data[1])\n        # Compare the population to the current maximum\n        if this_population > population:\n            year = this_year\n            population = this_population\n        # Read the next line\n        line = in_file.readline()\n    # Close the file\n    in_file.close()\n    # Print the results\n    print('The year with the highest population was ' + str(year) +\n          ' with a population of ' + str(population))\n",
            "def main():\n    \"\"\"\n    This program will take a file of population data and find the year with\n    the highest population.\n    \"\"\"\n    # Open the file\n    infile = open('populations.txt', 'r')\n    # Read the first line\n    line = infile.readline()\n    # Initialize the variables\n    highest = 0\n    year = 0\n    # Loop through the file\n    while line != '':\n        # Split the line into a list\n        line = line.split()\n        # Convert the population to an integer\n        pop = int(line[1])\n        # Check if the population is higher than the highest\n        if pop > highest:\n            # If so, set the highest to the population\n            highest = pop\n            # Set the year to the year\n            year = line[0]\n        # Read the next line\n        line = infile.readline()\n    # Close the file\n    infile.close()\n    # Print the results\n    print('The year with the highest population was', year, 'with', highest,\n          'people.')\n"
        ],
        "results": 10
    },
    {
        "id": "814",
        "source": "leetcodeTitles",
        "source_id": "2280",
        "url": "https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart/",
        "language": "python",
        "query": "Minimum Lines to Represent a Line Chart",
        "snippets": [
            "def minimumLines(arr):\n    n = len(arr)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n",
            "def main():\n    # Get the number of data points\n    n = int(input())\n    # Get the data points\n    data = [int(x) for x in input().split()]\n    # Get the minimum number of lines\n    min_lines = min_lines(data)\n    # Print the minimum number of lines\n    print(min_lines)\n",
            "def min_lines(data):\n    \"\"\"\n    data: list of lists\n    return: int\n    \"\"\"\n    # your code here\n    return len(data)\n",
            "def min_lines(n, m):\n    if n == 1:\n        return 1\n    if m == 1:\n        return n\n    if n == m:\n        return n\n    if n > m:\n        return min_lines(n - m, m) + 1\n    if n < m:\n        return min_lines(n, m - n) + 1\n",
            "def min_lines(data):\n    \"\"\"\n    data: list of lists\n    return: int\n    \"\"\"\n    # your code here\n    return len(data)\n    # return 0\n",
            "def min_lines(data):\n    \"\"\"\n    data: list of lists\n    returns: int\n    \"\"\"\n    # your code here\n    return len(data)\n    # return len(data) - 1\n    # return len(data) - 2\n    # return len(data) - 3\n    # return len(data) - 4\n    # return len(data) - 5\n    # return len(data) - 6\n    # return len(data) - 7\n    # return len(data) - 8\n    # return len(data) - 9\n    # return len(data) - 10\n    # return len(data) - 11\n    # return len(data) - 12\n    # return len(data) - 13\n    # return len(data) - 14\n    # return len(data) - 15\n    # return len(data) - 16\n    # return len(data) - 17\n    # return len(data) - 18\n    # return len(data) - 19\n    # return len(data) - 20\n    # return len(data) - 21\n    # return len(data) - 22\n    # return len(data) - 23\n    # return len(data) - 24\n    # return len(data) - 25\n    # return len(data) - 26\n    # return len(data) - 27\n    # return len(data) - 28\n    # return len(data) - 29\n    # return len(data) - 30\n    # return len(data) - 31\n    # return len(data) - 32\n    # return len(data) - 33\n    # return len(data) - 34\n    # return len(data) - 35\n    # return len(data) - 36\n    # return len(data) - 37\n    # return len(data) - 38\n    # return len(data) - 39\n    # return len(data) - 40\n    # return len(data) - 41\n    # return len(data) - 42\n    # return len(data) - 43\n    # return len(data) - 44\n    # return len(data) - 45\n    # return len(data) - 46\n",
            "def min_lines(data):\n    \"\"\"\n    data: list of lists\n    \"\"\"\n    # your code here\n    return min(len(x) for x in data)\n",
            "def minimumLines(data):\n    \"\"\"\n    :param data: list of lists\n    :return: int\n    \"\"\"\n    # Write your code here\n    return 0\n",
            "def min_lines(data):\n    \"\"\"\n    data: list of lists\n    \"\"\"\n    # your code here\n    return len(data)\n",
            "def min_lines(data):\n    \"\"\"\n    data: list of lists\n    \"\"\"\n    # your code here\n    return 0\n"
        ],
        "results": 10
    },
    {
        "id": "815",
        "source": "leetcodeTitles",
        "source_id": "1374",
        "url": "https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/",
        "language": "python",
        "query": "Generate a String With Characters That Have Odd Counts",
        "snippets": [
            "def count_odd(string):\n    count = 0\n    for i in string:\n        if string.count(i) % 2 != 0:\n            count += 1\n    return count\n",
            "def generate_string(string):\n    new_string = ''\n    for char in string:\n        if string.count(char) % 2 == 1:\n            new_string += char\n    return new_string\n",
            "def count_odd(string):\n    count = 0\n    for char in string:\n        if string.count(char) % 2 != 0:\n            count += 1\n    return count\n",
            "def generate_string(string):\n    new_string = ''\n    for i in string:\n        if string.count(i) % 2 == 1:\n            new_string += i\n    return new_string\n",
            "def generate_string(string):\n    new_string = ''\n    for char in string:\n        if string.count(char) % 2 != 0:\n            new_string += char\n    return new_string\n",
            "def odd_counts(string):\n    \"\"\"\n    Generate a String With Characters That Have Odd Counts\n    \"\"\"\n    return ''.join(c for c in string if string.count(c) % 2)\n",
            "def count_odd(string):\n    count = 0\n    for char in string:\n        if char in string.count(char) % 2 != 0:\n            count += 1\n    return count\n",
            "def odd_counts(string):\n    \"\"\"\n    Generate a String With Characters That Have Odd Counts\n    \"\"\"\n    return ''.join([char for char in string if string.count(char) % 2 != 0])\n",
            "def odd_counts(string):\n    \"\"\"\n    Given a string, return a string with characters that have an odd count.\n    \"\"\"\n    return ''.join([char for char in string if string.count(char) % 2 == 1])\n",
            "def generate_string(string):\n    \"\"\"\n    Generate a string with characters that have odd counts\n    \"\"\"\n    return ''.join(c for c in string if string.count(c) % 2 != 0)\n"
        ],
        "results": 10
    },
    {
        "id": "816",
        "source": "leetcodeTitles",
        "source_id": "894",
        "url": "https://leetcode.com/problems/all-possible-full-binary-trees/",
        "language": "python",
        "query": "All Possible Full Binary Trees",
        "snippets": [
            "def all_possible_full_binary_trees(n):\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[Node(0)]]\n    if n == 2:\n        return [[Node(0), Node(0)], [Node(0), Node(1)], [Node(1), Node(0)]]\n    if n == 3:\n        return [[Node(0), Node(0), Node(0)], [Node(0), Node(0), Node(1)], [Node(0), Node(1), Node(0)], [Node(0), Node(1), Node(1)], [Node(1), Node(0), Node(0)], [Node(1), Node(0), Node(1)], [Node(1), Node(1), Node(0)]]\n    if n == 4:\n        return [[Node(0), Node(0), Node(0), Node(0)], [Node(0), Node(0), Node(0), Node(1)], [Node(0), Node(0), Node(1), Node(0)], [Node(0), Node(0), Node(1), Node(1)], [Node(0), Node(1), Node(0), Node(0)], [Node(0), Node(1), Node(0), Node(1)], [Node(0), Node(1), Node(1), Node(0)], [Node(0), Node(1), Node(1), Node(1)], [Node(1), Node(0), Node(0), Node(0)], [Node(1), Node(0), Node(0), Node(1)], [Node(1), Node(0), Node(1), Node(0)], [Node(1), Node(0), Node(1), Node(1)], [Node(1), Node(1), Node(0), Node(0)], [Node(1), Node(1), Node(0), Node(1)], [Node(1), Node(1), Node(1), Node(0)], [Node(1), Node(1), Node(1), Node(1)]]\n    if n == 5:\n        return [[\n",
            "def all_possible_full_binary_trees(n):\n    if n == 0:\n        return [[]]\n    return [\n        [root] + left + right\n        for i in range(n)\n        for left in all_possible_full_binary_trees(i)\n        for right in all_possible_full_binary_trees(n - 1 - i)\n        for root in [BinaryTree(0)]\n    ]\n",
            "def all_possible_full_binary_trees(n):\n    if n == 0:\n        return [[]]\n    return [\n        [root] + left + right\n        for i in range(n)\n        for left in all_possible_full_binary_trees(i)\n        for right in all_possible_full_binary_trees(n - 1 - i)\n        for root in [BinaryTree(0, left, right)]\n    ]\n",
            "def allPossibleFBT(N):\n    if N == 1:\n        return [TreeNode(0)]\n    if N == 2:\n        return [TreeNode(0, TreeNode(1), TreeNode(0))]\n    res = []\n    for i in range(1, N, 2):\n        left = allPossibleFBT(i)\n        right = allPossibleFBT(N - 1 - i)\n        for l in left:\n            for r in right:\n                root = TreeNode(0)\n                root.left = l\n                root.right = r\n                res.append(root)\n    return res\n",
            "def all_possible_full_binary_trees(n):\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[TreeNode(0)]]\n    result = []\n    for i in range(n):\n        for left in all_possible_full_binary_trees(i):\n            for right in all_possible_full_binary_trees(n - i - 1):\n                root = TreeNode(i)\n                root.left = left\n                root.right = right\n                result.append(root)\n    return result\n",
            "def all_possible_full_binary_trees(n):\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[TreeNode(0)]]\n    result = []\n    for i in range(n):\n        left_trees = all_possible_full_binary_trees(i)\n        right_trees = all_possible_full_binary_trees(n - 1 - i)\n        for left_tree in left_trees:\n            for right_tree in right_trees:\n                root = TreeNode(i)\n                root.left = left_tree\n                root.right = right_tree\n                result.append(root)\n    return result\n",
            "def all_possible_full_binary_trees(n):\n    if n == 0:\n        return [[]]\n    return [tree + [leaf]\n            for i in range(n)\n            for tree in all_possible_full_binary_trees(i)\n            for leaf in all_possible_full_binary_trees(n - 1 - i)]\n",
            "def all_possible_full_binary_trees(n):\n    if n == 0:\n        return [[]]\n    if n == 1:\n        return [[Tree(0)]]\n    return [\n        [Tree(0, left, right) for right in all_possible_full_binary_trees(n - 1)] +\n        [Tree(1, left, right) for left in all_possible_full_binary_trees(n - 1)]\n        for n in range(2, n + 1)\n    ]\n",
            "def all_possible_full_binary_trees(n):\n    if n == 0:\n        return [[]]\n    else:\n        return [\n            [root] + rest\n            for i in range(n)\n            for rest in all_possible_full_binary_trees(i)\n            for root in all_possible_full_binary_trees(n - 1 - i)\n        ]\n"
        ],
        "results": 10
    },
    {
        "id": "817",
        "source": "leetcodeTitles",
        "source_id": "2150",
        "url": "https://leetcode.com/problems/find-all-lonely-numbers-in-the-array/",
        "language": "python",
        "query": "Find All Lonely Number in the Array",
        "snippets": [
            "def find_lonely_number(arr):\n    lonely_number = []\n    for i in range(len(arr)):\n        if arr.count(arr[i]) == 1:\n            lonely_number.append(arr[i])\n    return lonely_number\n",
            "def find_lonely_number(arr):\n    lonely_number = []\n    for i in range(len(arr)):\n        if arr[i] == i + 1:\n            lonely_number.append(i + 1)\n    return lonely_number\n",
            "def find_lonely_number(numbers):\n    lonely_numbers = []\n    for i in range(len(numbers)):\n        if numbers[i] == i + 1:\n            lonely_numbers.append(i + 1)\n    return lonely_numbers\n",
            "def findLonely(arr):\n    lonely = []\n    for i in range(len(arr)):\n        if arr[i] == i + 1:\n            lonely.append(i + 1)\n    return lonely\n",
            "def find_lonely_number(nums):\n    lonely_numbers = []\n    for i in range(len(nums)):\n        if nums[i] == i + 1:\n            lonely_numbers.append(i + 1)\n    return lonely_numbers\n",
            "def findLonelyNumber(nums):\n    result = []\n    for i in range(len(nums)):\n        if nums[i] == i + 1:\n            result.append(i + 1)\n    return result\n"
        ],
        "results": 10
    },
    {
        "id": "818",
        "source": "leetcodeTitles",
        "source_id": "722",
        "url": "https://leetcode.com/problems/remove-comments/",
        "language": "python",
        "query": "Remove Comments",
        "snippets": [
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if '#' not in line:\n                f.write(line)\n    return\n",
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a file.\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if '#' in line:\n                line = line[:line.index('#')]\n            f.write(line)\n    return None\n",
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a file.\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if '#' in line:\n                line = line.split('#')[0]\n            f.write(line)\n    return\n",
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if '#' in line:\n                line = line[:line.index('#')]\n            f.write(line)\n    return None\n",
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a file.\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if '#' in line:\n                line = line[:line.index('#')]\n            f.write(line)\n    return filename\n",
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if '#' in line:\n                line = line[:line.index('#')]\n            f.write(line)\n    return filename\n",
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if '#' in line:\n                line = line.split('#')[0]\n            f.write(line)\n    return filename\n",
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a file\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if not line.startswith('#'):\n                f.write(line)\n    return None\n",
            "def remove_comments(filename):\n    \"\"\"\n    Remove comments from a C/C++ source file.\n    \"\"\"\n    with open(filename, 'r') as f:\n        lines = f.readlines()\n    with open(filename, 'w') as f:\n        for line in lines:\n            if line.find('//') != -1:\n                line = line[:line.find('//')]\n            f.write(line)\n    return\n"
        ],
        "results": 10
    },
    {
        "id": "819",
        "source": "leetcodeTitles",
        "source_id": "898",
        "url": "https://leetcode.com/problems/bitwise-ors-of-subarrays/",
        "language": "python",
        "query": "Bitwise ORs of Subarrays",
        "snippets": [
            "def solution(A):\n    # write your code in Python 3.6\n    n = len(A)\n    if n == 1:\n        return A[0]\n    if n == 2:\n        return A[0] | A[1]\n    if n == 3:\n        return A[0] | A[1] | A[2]\n    if n == 4:\n        return A[0] | A[1] | A[2] | A[3]\n    if n == 5:\n        return A[0] | A[1] | A[2] | A[3] | A[4]\n    if n == 6:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5]\n    if n == 7:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6]\n    if n == 8:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7]\n    if n == 9:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8]\n    if n == 10:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9]\n    if n == 11:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9] | A[10]\n    if n == 12:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[\n",
            "def solution(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    if n == 2:\n        return A[0] | A[1]\n    if n == 3:\n        return A[0] | A[1] | A[2]\n    if n == 4:\n        return A[0] | A[1] | A[2] | A[3]\n    if n == 5:\n        return A[0] | A[1] | A[2] | A[3] | A[4]\n    if n == 6:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5]\n    if n == 7:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6]\n    if n == 8:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7]\n    if n == 9:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8]\n    if n == 10:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9]\n    if n == 11:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9] | A[10]\n    if n == 12:\n        return A[0] | A[1] | A[2] | A[3] | A[4] | A[5] | A[6] | A[7] | A[8] | A[9\n",
            "def solution(arr):\n    answer = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            answer |= arr[j]\n    return answer\n",
            "def bitwise_ors(arr):\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            result |= arr[i] | arr[j]\n    return result\n",
            "def solution(A):\n    n = len(A)\n    if n == 1:\n        return A[0]\n    else:\n        return A[0] | solution(A[1:])\n",
            "def solution(A):\n    # write your code in Python 3.6\n    n = len(A)\n    if n == 1:\n        return A[0]\n    else:\n        result = A[0]\n        for i in range(1, n):\n            result |= A[i]\n        return result\n",
            "def find_subarray(arr, n):\n    result = 0\n    for i in range(n):\n        result |= arr[i]\n    for i in range(n, len(arr)):\n        result = (result | arr[i]) & arr[i-n]\n        print(result)\n    return result\n"
        ],
        "results": 10
    },
    {
        "id": "820",
        "source": "leetcodeTitles",
        "source_id": "227",
        "url": "https://leetcode.com/problems/basic-calculator-ii/",
        "language": "python",
        "query": "Basic Calculator II",
        "snippets": [
            "def calculate(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    stack = []\n    for i in s:\n        if i.isdigit():\n            stack.append(int(i))\n        elif i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(-stack.pop() + stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif i == '/':\n            stack.append(int(stack.pop() / stack.pop()))\n    return stack[0]\n",
            "def calculate(s):\n    s = s.replace(' ', '')\n    s = s.replace('(', ' ( ')\n    s = s.replace(')', ' ) ')\n    s = s.split()\n    stack = []\n    for i in s:\n        if i == '+':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(b + a)\n        elif i == '-':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(b - a)\n        elif i == '*':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(b * a)\n        elif i == '/':\n            a = stack.pop()\n            b = stack.pop()\n            stack.append(b // a)\n        else:\n            stack.append(int(i))\n    return stack.pop()\n",
            "def calculate(s):\n    s = s.replace(' ', '')\n    s = s.replace('(', ' ( ')\n    s = s.replace(')', ' ) ')\n    s = s.split()\n    stack = []\n    for i in s:\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(-stack.pop() + stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif i == '/':\n            stack.append(1 / stack.pop() * stack.pop())\n        else:\n            stack.append(int(i))\n    return stack[0]\n",
            "def basic_calculator_ii(string):\n    if string == '':\n        return 0\n    stack = []\n    num = 0\n    sign = '+'\n    for i in string:\n        if i.isdigit():\n            num = num * 10 + int(i)\n        elif i == '+':\n            if sign == '+':\n                stack.append(num)\n                num = 0\n            elif sign == '-':\n                stack.append(-num)\n                num = 0\n            elif sign == '*':\n                stack.append(stack.pop() * num)\n                num = 0\n            elif sign == '/':\n                stack.append(int(stack.pop() / num))\n                num = 0\n            sign = '+'\n        elif i == '-':\n            if sign == '+':\n                stack.append(num)\n                num = 0\n            elif sign == '-':\n                stack.append(-num)\n                num = 0\n            elif sign == '*':\n                stack.append(stack.pop() * num)\n                num = 0\n            elif sign == '/':\n                stack.append(int(stack.pop() / num))\n                num = 0\n            sign = '-'\n        elif i == '*':\n            if sign == '+':\n                stack.append(num)\n                num = 0\n            elif sign == '-':\n                stack.append(-num)\n                num = 0\n            elif sign == '*':\n                stack.append(stack.pop() * num)\n                num = 0\n            elif sign == '/':\n                stack.append(int(stack.pop() / num))\n                num = 0\n            sign = '*'\n        elif i == '/':\n            if sign == '+':\n                stack.append(num)\n                num = 0\n            elif sign == '-':\n                stack.append(-num)\n                num = 0\n            elif sign == '*':\n                stack.append(stack.pop() * num)\n                num = 0\n            elif sign == '/':\n                stack.append(\n",
            "def basic_calculator_ii(string):\n    if string == '':\n        return 0\n    stack = []\n    num = 0\n    sign = '+'\n    for i in string:\n        if i.isdigit():\n            num = num * 10 + int(i)\n        elif i == '+' or i == '-':\n            if sign == '+':\n                stack.append(num)\n            else:\n                stack.append(-num)\n            num = 0\n            sign = i\n        elif i == '*':\n            stack.append(stack.pop() * num)\n            num = 0\n        elif i == '/':\n            stack.append(stack.pop() // num)\n            num = 0\n    if sign == '+':\n        stack.append(num)\n    else:\n        stack.append(-num)\n    return sum(stack)\n",
            "def calculate(s):\n    # Write your code here\n    stack = []\n    for i in s:\n        if i.isdigit():\n            stack.append(int(i))\n        elif i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(-stack.pop() + stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif i == '/':\n            stack.append(int(stack.pop() / stack.pop()))\n    return stack[0]\n",
            "def basic_calculator_ii(string):\n    if not string:\n        return 0\n    stack = []\n    sign = 1\n    num = 0\n    for c in string:\n        if c.isdigit():\n            num = num * 10 + int(c)\n        elif c == '+':\n            stack.append(sign * num)\n            sign = 1\n            num = 0\n        elif c == '-':\n            stack.append(sign * num)\n            sign = -1\n            num = 0\n        elif c == '*':\n            num *= 10\n        elif c == '/':\n            num //= 10\n        elif c == ')':\n            stack.append(sign * num)\n            sign = 1\n            num = 0\n    stack.append(sign * num)\n    return sum(stack)\n",
            "def basic_calculator_ii(string):\n    if string == '':\n        return 0\n    stack = []\n    for i in string:\n        if i == ' ':\n            continue\n        if i == '+':\n            stack.append(stack.pop() + stack.pop())\n        elif i == '-':\n            stack.append(-stack.pop() + stack.pop())\n        elif i == '*':\n            stack.append(stack.pop() * stack.pop())\n        elif i == '/':\n            stack.append(int(stack.pop() / stack.pop()))\n        else:\n            stack.append(int(i))\n    return stack[0]\n",
            "def basic_calculator_ii(string):\n    if string == \"\":\n        return 0\n    stack = []\n    sign = 1\n    num = 0\n    for c in string:\n        if c.isdigit():\n            num = num * 10 + int(c)\n        if c in \"+-*/\":\n            stack.append(num * sign)\n            sign = 1\n            num = 0\n        if c == \"(\":\n            stack.append(num * sign)\n            sign = 1\n            num = 0\n        if c == \")\":\n            num = stack.pop()\n            sign = -1\n    stack.append(num * sign)\n    return sum(stack)\n",
            "def basic_calculator_ii(string):\n    if string == \"\":\n        return 0\n    stack = []\n    num = 0\n    sign = 1\n    for i in string:\n        if i == '+':\n            stack.append(num)\n            num = 0\n            sign = 1\n        elif i == '-':\n            stack.append(num)\n            num = 0\n            sign = -1\n        elif i == '*':\n            num *= stack.pop()\n        elif i == '/':\n            num = int(num / stack.pop())\n        else:\n            num = num * 10 + int(i)\n    stack.append(num)\n    return sum(stack) * sign\n"
        ],
        "results": 10
    },
    {
        "id": "821",
        "source": "leetcodeTitles",
        "source_id": "2160",
        "url": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/",
        "language": "python",
        "query": "Minimum Sum of Four Digit Number After Splitting Digits",
        "snippets": [
            "def min_sum(n):\n    n = str(n)\n    return int(n[0]) + int(n[1]) + int(n[2]) + int(n[3])\n",
            "def min_sum(n):\n    n = str(n)\n    return sum(map(int, [n[i:i+2] for i in range(0, len(n), 2)]))\n",
            "def min_sum(n):\n    n = str(n)\n    return sum(int(n[i]) for i in range(len(n)))\n",
            "def minSum(a, b, c, d):\n    return min(a, b, c, d) + min(a + b, c + d, a + c + d) + min(a + b + c, d)\n"
        ],
        "results": 10
    },
    {
        "id": "822",
        "source": "leetcodeTitles",
        "source_id": "1302",
        "url": "https://leetcode.com/problems/deepest-leaves-sum/",
        "language": "python",
        "query": "Deepest Leaves Sum",
        "snippets": [
            "def deepestLeavesSum(root):\n    if not root:\n        return 0\n    if not root.left and not root.right:\n        return root.val\n    return deepestLeavesSum(root.left) + deepestLeavesSum(root.right)\n",
            "def deepestLeavesSum(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return root.val\n    if root.left is None:\n        return deepestLeavesSum(root.right)\n    if root.right is None:\n        return deepestLeavesSum(root.left)\n    return deepestLeavesSum(root.left) + deepestLeavesSum(root.right)\n",
            "def deepestLeavesSum(root):\n    if not root:\n        return 0\n    return deepestLeavesSum(root.left) + deepestLeavesSum(root.right) + root.val\n",
            "def deepestLeavesSum(root):\n    if not root:\n        return 0\n    queue = [root]\n    while queue:\n        size = len(queue)\n        for _ in range(size):\n            node = queue.pop(0)\n            if not node.left and not node.right:\n                return node.val\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n    return 0\n",
            "def deepestLeavesSum(root):\n    if not root:\n        return 0\n    q = [root]\n    while q:\n        q = [child for node in q for child in (node.left, node.right) if child]\n    return sum(node.val for node in q)\n"
        ],
        "results": 10
    },
    {
        "id": "823",
        "source": "leetcodeTitles",
        "source_id": "1551",
        "url": "https://leetcode.com/problems/minimum-operations-to-make-array-equal/",
        "language": "python",
        "query": "Minimum Operations to Make Array Equal",
        "snippets": [
            "def minOperations(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n",
            "def minOperations(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n",
            "def minOperations(n):\n    return n * (n + 1) // 2\n",
            "def minOperations(n):\n    return n // 2 + n % 2\n",
            "def minOperations(n):\n    return (n-1)//2\n",
            "def minOperations(n):\n    return n - 1\n"
        ],
        "results": 10
    },
    {
        "id": "824",
        "source": "leetcodeTitles",
        "source_id": "385",
        "url": "https://leetcode.com/problems/mini-parser/",
        "language": "python",
        "query": "Mini Parser",
        "snippets": [
            "def mini_parser(text):\n    \"\"\"\n    >>> mini_parser(\"(a b c)\")\n    ['(', 'a', 'b', 'c', ')']\n    >>> mini_parser(\"(a b (c d))\")\n    ['(', 'a', 'b', ['(', 'c', 'd', ')']]\n    >>> mini_parser(\"(a b (c d) e)\")\n    ['(', 'a', 'b', ['(', 'c', 'd', ')'], 'e', ')']\n    >>> mini_parser(\"(a b (c d) e f)\")\n    ['(', 'a', 'b', ['(', 'c', 'd', ')'], 'e', 'f', ')']\n    >>> mini_parser(\"(a b (c d) e f g)\")\n    ['(', 'a', 'b', ['(', 'c', 'd', ')'], 'e', 'f', 'g', ')']\n    >>> mini_parser(\"(a b (c d) e f g h)\")\n    ['(', 'a', 'b', ['(', 'c', 'd', ')'], 'e', 'f', 'g', 'h', ')']\n    >>> mini_parser(\"(a b (c d) e f g h i)\")\n    ['(', 'a', 'b', ['(', 'c', 'd', ')'], 'e', 'f', 'g', 'h', 'i', ')']\n    >>> mini_parser(\"(a b (c d) e f g h i j)\")\n    ['(', 'a', 'b', ['(', 'c', 'd', ')'], 'e', 'f', 'g', 'h', 'i', 'j', ')']\n    >>> mini_parser(\"(a b (c d) e f g h i j k)\")\n    ['(', 'a', 'b', ['(', 'c', 'd', ')'], 'e', 'f', 'g', 'h', 'i', 'j', 'k', ')']\n    >>> mini_parser(\"(a b (c d) e f\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of lists\n    representing the data.\n    \"\"\"\n    data = data.split('\\n')\n    data = [line.split() for line in data]\n    return data\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of lists.\n    Each list contains the data for a single line of the input string.\n    \"\"\"\n    # Initialize an empty list to store the lines of data\n    data_list = []\n    # Split the data into lines\n    lines = data.splitlines()\n    # Loop over each line\n    for line in lines:\n        # Split the line into words\n        words = line.split()\n        # Append the list of words to the list of lines\n        data_list.append(words)\n    # Return the list of lines\n    return data_list\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of\n    lists of the data.\n    \"\"\"\n    data = data.split('\\n')\n    data = [x.split(' ') for x in data]\n    return data\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of lists\n    representing the data.\n    \"\"\"\n    # Initialize the list of lists\n    data_list = []\n    # Split the data into individual lines\n    data_lines = data.split('\\n')\n    # Loop through each line\n    for line in data_lines:\n        # Split the line into words\n        words = line.split()\n        # Append the words to the list of lists\n        data_list.append(words)\n    # Return the list of lists\n    return data_list\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of lists.\n    Each list contains the data for a single line of the input.\n    \"\"\"\n    # Split the data into lines\n    lines = data.split('\\n')\n    # Split each line into words\n    lines = [line.split() for line in lines]\n    # Return the list of lines\n    return lines\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of\n    dictionaries, with each dictionary containing the name and value of\n    each item in the string.\n    \"\"\"\n    # Initialize the list of dictionaries\n    parsed_data = []\n    # Split the data into lines\n    lines = data.splitlines()\n    # Loop through each line\n    for line in lines:\n        # Split the line into words\n        words = line.split()\n        # Initialize the dictionary\n        parsed_line = {}\n        # Loop through each word\n        for word in words:\n            # Split the word into name and value\n            name, value = word.split('=')\n            # Add the name and value to the dictionary\n            parsed_line[name] = value\n        # Add the dictionary to the list\n        parsed_data.append(parsed_line)\n    # Return the list of dictionaries\n    return parsed_data\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of\n    lists. Each list represents a line of data, and each item in the list\n    represents a word in that line.\n    \"\"\"\n    # your code here\n    data = data.split('\\n')\n    for i in range(len(data)):\n        data[i] = data[i].split(' ')\n    return data\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of lists.\n    Each list represents a line of data.\n    \"\"\"\n    # Initialize the list of lists\n    data_list = []\n    # Split the data into lines\n    lines = data.split('\\n')\n    # Loop through each line\n    for line in lines:\n        # Split the line into words\n        words = line.split()\n        # Append the list of words to the list of lists\n        data_list.append(words)\n    # Return the list of lists\n    return data_list\n",
            "def mini_parser(data):\n    \"\"\"\n    This function takes a string of data as input, and returns a list of\n    lists. Each list will have two elements: a key, and a value.\n    \"\"\"\n    # Your code here\n    data = data.split('&')\n    data_list = []\n    for i in data:\n        i = i.split('=')\n        data_list.append(i)\n    return data_list\n"
        ],
        "results": 10
    },
    {
        "id": "825",
        "source": "leetcodeTitles",
        "source_id": "1189",
        "url": "https://leetcode.com/problems/maximum-number-of-balloons/",
        "language": "python",
        "query": "Maximum Number of Balloons",
        "snippets": [
            "def maxNumberOfBalloons(text):\n    \"\"\"\n    :type text: str\n    :rtype: int\n    \"\"\"\n    return min(text.count('b'), text.count('a'), text.count('l'), text.count('o'), text.count('n'))\n",
            "def maxNumberOfBalloons(text):\n    return min(text.count('b'), text.count('a'), text.count('l'), text.count('o'), text.count('n'))\n",
            "def maxNumberOfBalloons(text):\n    return min(text.count('b'), text.count('a'), text.count('l'), text.count('o'))\n",
            "def max_balloons(text):\n    \"\"\"\n    Given a string text, return the number of letter 'a', 'b', 'c', 'd', 'e' that are present in the string.\n\n    >>> max_balloons(\"balon\")\n    2\n    >>> max_balloons(\"lepel\")\n    3\n    >>> max_balloons(\"balonbalon\")\n    4\n    >>> max_balloons(\"\")\n    0\n    \"\"\"\n    return sum(text.count(letter) for letter in \"abcde\")\n"
        ],
        "results": 10
    },
    {
        "id": "826",
        "source": "leetcodeTitles",
        "source_id": "518",
        "url": "https://leetcode.com/problems/coin-change-2/",
        "language": "python",
        "query": "Coin Change 2",
        "snippets": [
            "def coinChange2(coins, amount):\n    dp = [amount + 1] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != amount + 1 else -1\n",
            "def coinChange(coins, amount):\n    dp = [amount + 1] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != amount + 1 else -1\n",
            "def coinChange(coins, amount):\n    dp = [amount + 1] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for j in range(len(coins)):\n            if i >= coins[j]:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    return dp[amount] if dp[amount] != amount + 1 else -1\n",
            "def change(amount, coins):\n    \"\"\"\n    :type amount: int\n    :type coins: List[int]\n    :rtype: int\n    \"\"\"\n    dp = [0] + [float('inf')] * amount\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1\n",
            "def coinChange(coins, amount):\n    dp = [0] + [float('inf')] * amount\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[-1] if dp[-1] != float('inf') else -1\n",
            "def coinChange(coins, amount):\n    dp = [0] + [float('inf')] * amount\n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1\n",
            "def change(amount, coins):\n    \"\"\"\n    :type amount: int\n    :type coins: List[int]\n    :rtype: int\n    \"\"\"\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    return dp[amount]\n"
        ],
        "results": 10
    },
    {
        "id": "827",
        "source": "leetcodeTitles",
        "source_id": "667",
        "url": "https://leetcode.com/problems/beautiful-arrangement-ii/",
        "language": "python",
        "query": "Beautiful Arrangement II",
        "snippets": [
            "def make_arrangement(n, k):\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 4, 3, 2]\n    if n == 5:\n        return [1, 5, 4, 3, 2]\n    if n == 6:\n        return [1, 6, 5, 4, 3, 2]\n    if n == 7:\n        return [1, 7, 6, 5, 4, 3, 2]\n    if n == 8:\n        return [1, 8, 7, 6, 5, 4, 3, 2]\n    if n == 9:\n        return [1, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 10:\n        return [1, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 11:\n        return [1, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 12:\n        return [1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 13:\n        return [1, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 14:\n        return [1, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 15:\n        return [1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 16:\n        return [1, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 17:\n        return [1, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4,\n",
            "def beautifulArrangement(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    def dfs(i, used):\n        if i == n:\n            return 1\n        res = 0\n        for j in range(n):\n            if used[j] or (j+1 in used and j+2 in used):\n                continue\n            used[j] = used[j+1] = used[j+2] = True\n            res += dfs(i+1, used)\n            used[j] = used[j+1] = used[j+2] = False\n        return res\n    return dfs(0, [False]*n)\n",
            "def beautifulArrangement(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 14\n    if n == 5:\n        return 42\n    if n == 6:\n        return 132\n    if n == 7:\n        return 429\n    if n == 8:\n        return 1430\n    if n == 9:\n        return 4862\n    if n == 10:\n        return 16796\n    if n == 11:\n        return 58786\n    if n == 12:\n        return 208012\n    if n == 13:\n        return 742900\n    if n == 14:\n        return 2674440\n    if n == 15:\n        return 9235696\n    if n == 16:\n        return 357913920\n    if n == 17:\n        return 1296447296\n    if n == 18:\n        return 4761966080\n    if n == 19:\n        return 17672631152\n    if n == 20:\n        return 65641204208\n    if n == 21:\n        return 244662670208\n    if n == 22:\n        return 914825660416\n    if n == 23:\n        return 3435973836864\n    if n == 24:\n        return 13384859841536\n    if n == 25:\n        return 47887769775360\n    if n == 26:\n        return 176213746342400\n    if n == 27:\n        return 658561863748608\n    if n == 28:\n        return 2475494068390144\n    if n == 29:\n        return 9375145747685952\n    if n == 30:\n        return 35104419156868864\n    if n == 31:\n        return 138280978958164480\n    if n == 32:\n        return 4855851817586488320\n    if n == 33:\n        return 17185613482288\n",
            "def beautifulArrangement(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    # dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + ... + dp[i-n+1]\n    dp = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            if (i - j) % 2 == 0:\n                dp[i] += dp[j]\n            else:\n                dp[i] += dp[i - j]\n    return dp[n]\n",
            "def make_change(amount, coins):\n    \"\"\"\n    :type amount: int\n    :type coins: List[int]\n    :rtype: int\n    \"\"\"\n    dp = [0] * (amount + 1)\n    dp[0] = 1\n    for coin in coins:\n        for i in range(coin, amount + 1):\n            dp[i] += dp[i - coin]\n    return dp[amount]\n",
            "def beautifulArrangement(n):\n    def dfs(i, used):\n        if i == n:\n            return 1\n        res = 0\n        for j in range(n):\n            if used[j] or (j + 1 in used and j + 2 in used):\n                continue\n            used[j] = used[j + 1] = used[j + 2] = True\n            res += dfs(i + 1, used)\n            used[j] = used[j + 1] = used[j + 2] = False\n        return res\n    return dfs(0, [False] * n)\n",
            "def beautifulArrangement(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 1\n    return sum(beautifulArrangement(i) * beautifulArrangement(n - i) for i in range(1, n))\n",
            "def countArrangement(N):\n    def dfs(N, i, used, count):\n        if i == N:\n            count[0] += 1\n            return\n        for j in range(N):\n            if used[j] or (j % (i + 1) == 0 and j // (i + 1) == i):\n                continue\n            used[j] = True\n            dfs(N, i + 1, used, count)\n            used[j] = False\n    used = [False] * N\n    count = [0]\n    dfs(N, 0, used, count)\n    return count[0]\n",
            "def beautifulArrangement(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return helper(n, [False] * n)\n",
            "def beautifulArrangement(n):\n    return 0\n"
        ],
        "results": 10
    },
    {
        "id": "828",
        "source": "leetcodeTitles",
        "source_id": "223",
        "url": "https://leetcode.com/problems/rectangle-area/",
        "language": "python",
        "query": "Rectangle Area",
        "snippets": [
            "def rectangle_area(width, height):\n    return width * height\n"
        ],
        "results": 10
    },
    {
        "id": "829",
        "source": "leetcodeTitles",
        "source_id": "2028",
        "url": "https://leetcode.com/problems/find-missing-observations/",
        "language": "python",
        "query": "Find Missing Observations",
        "snippets": [
            "def find_missing_observations(data):\n    \"\"\"\n    Finds the missing observations in a dataset.\n    \"\"\"\n    missing_observations = []\n    for i in range(len(data)):\n        if data[i] == '?':\n            missing_observations.append(i)\n    return missing_observations\n",
            "def find_missing_observations(data):\n    \"\"\"\n    Finds missing observations in a dataset.\n    \"\"\"\n    missing_obs = []\n    for i in range(len(data)):\n        if data[i] == '?':\n            missing_obs.append(i)\n    return missing_obs\n",
            "def find_missing_observations(data):\n    \"\"\"\n    Find missing observations in a dataset.\n    \"\"\"\n    missing_observations = []\n    for i in range(len(data)):\n        if data[i] == '?':\n            missing_observations.append(i)\n    return missing_observations\n",
            "def find_missing_observations(data):\n    \"\"\"\n    Finds the missing observations in a dataset.\n    \"\"\"\n    missing_obs = []\n    for i in range(len(data)):\n        if data[i] == 0:\n            missing_obs.append(i)\n    return missing_obs\n",
            "def find_missing_observations(data):\n    \"\"\"\n    Finds the missing observations in a data set.\n    \"\"\"\n    missing_obs = []\n    for i in range(len(data)):\n        if data[i] == '?':\n            missing_obs.append(i)\n    return missing_obs\n",
            "def find_missing_obs(data):\n    \"\"\"\n    Finds the missing observations in a dataset.\n    \"\"\"\n    missing_obs = []\n    for i in range(len(data)):\n        if data[i] == '?':\n            missing_obs.append(i)\n    return missing_obs\n",
            "def find_missing_observations(data):\n    \"\"\"\n    Finds missing observations in a dataset.\n    \"\"\"\n    # Find missing observations\n    missing_obs = []\n    for i in range(len(data)):\n        if data[i] == '?':\n            missing_obs.append(i)\n    return missing_obs\n"
        ],
        "results": 10
    },
    {
        "id": "830",
        "source": "leetcodeTitles",
        "source_id": "1513",
        "url": "https://leetcode.com/problems/number-of-substrings-with-only-1s/",
        "language": "python",
        "query": "Number of Substrings With Only 1s",
        "snippets": [
            "def numSub(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            count = 0\n            count += 1\n    return count\n",
            "def numSub(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            count = 0\n            count += 1\n    return count\n",
            "def numSub(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            count = 0\n    return count\n",
            "def numSub(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0] == '1':\n            return 1\n        else:\n            return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == len(s):\n            return len(s)\n    return count\n",
            "def numSub(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == 2:\n            return numSub(s[i+1:]) + 1\n    return 0\n",
            "def numSub(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s == '1':\n            return 1\n        else:\n            return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == len(s):\n            return len(s)\n    return count\n",
            "def numSub(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == 1:\n            count += 1\n    return count\n",
            "def numSub(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            count += 1\n        else:\n            count = 0\n        if count == len(s):\n            return len(s)\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "831",
        "source": "leetcodeTitles",
        "source_id": "1573",
        "url": "https://leetcode.com/problems/number-of-ways-to-split-a-string/",
        "language": "python",
        "query": "Number of Ways to Split a String",
        "snippets": [
            "def numWays(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if s[0] == s[1]:\n        return numWays(s[2:]) + numWays(s[1:])\n    else:\n        return numWays(s[1:]) + numWays(s[2:])\n",
            "def numWays(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    dp = [0] * len(s)\n    dp[0] = 1\n    dp[1] = 1\n    if s[0] == s[1]:\n        dp[1] = 2\n    for i in range(2, len(s)):\n        if s[i] == s[i-1]:\n            dp[i] = dp[i-2] + dp[i-1]\n        else:\n            dp[i] = dp[i-1]\n    return dp[-1]\n",
            "def num_ways(s):\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if s[0] == s[-1]:\n        return num_ways(s[1:-1]) + num_ways(s[2:])\n    else:\n        return num_ways(s[1:]) + num_ways(s[2:])\n",
            "def numWays(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return 2\n        else:\n            return 1\n    if s[0] == s[1]:\n        return numWays(s[2:]) + numWays(s[1:])\n    else:\n        return numWays(s[1:]) + numWays(s[2:])\n",
            "def num_ways(s):\n    if len(s) == 1:\n        return 1\n    if len(s) == 2:\n        return 1 if s[0] == s[1] else 0\n    if s[0] == s[-1]:\n        return num_ways(s[1:-1]) + num_ways(s[2:])\n    else:\n        return num_ways(s[1:]) + num_ways(s[2:])\n",
            "def num_ways(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == '0':\n        return 0\n    if s[0] == '1':\n        return num_ways(s[1:])\n    if s[0] == '2':\n        return num_ways(s[1:]) + num_ways(s[1:])\n    return num_ways(s[1:]) + num_ways(s[1:]) + num_ways(s[1:])\n",
            "def num_ways(s):\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == '0':\n        return 0\n    if s[0] == '1':\n        return num_ways(s[1:])\n    if s[0] == '2':\n        return num_ways(s[1:]) + num_ways(s[1:])\n    return num_ways(s[1:]) + num_ways(s[1:])\n"
        ],
        "results": 10
    },
    {
        "id": "832",
        "source": "leetcodeTitles",
        "source_id": "11",
        "url": "https://leetcode.com/problems/container-with-most-water/",
        "language": "python",
        "query": "Container With Most Water",
        "snippets": [
            "def maxArea(height):\n    \"\"\"\n    :type height: List[int]\n    :rtype: int\n    \"\"\"\n    max_area = 0\n    left = 0\n    right = len(height) - 1\n    while left < right:\n        max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area\n",
            "def maxArea(height):\n    \"\"\"\n    :type height: List[int]\n    :rtype: int\n    \"\"\"\n    max_area = 0\n    left = 0\n    right = len(height) - 1\n    while left < right:\n        max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area\n",
            "def maxArea(height):\n    \"\"\"\n    :type height: List[int]\n    :rtype: int\n    \"\"\"\n    max_area = 0\n    left = 0\n    right = len(height) - 1\n    while left < right:\n        area = min(height[left], height[right]) * (right - left)\n        max_area = max(max_area, area)\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area\n",
            "def maxArea(height):\n    \"\"\"\n    :type height: List[int]\n    :rtype: int\n    \"\"\"\n    left, right = 0, len(height) - 1\n    max_area = 0\n    while left < right:\n        max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area\n",
            "def maxArea(height):\n    \"\"\"\n    :type height: List[int]\n    :rtype: int\n    \"\"\"\n    left = 0\n    right = len(height) - 1\n    max_area = 0\n    while left < right:\n        max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        if height[left] < height[right]:\n            left += 1\n        else:\n            right -= 1\n    return max_area\n"
        ],
        "results": 10
    },
    {
        "id": "833",
        "source": "leetcodeTitles",
        "source_id": "374",
        "url": "https://leetcode.com/problems/guess-number-higher-or-lower/",
        "language": "python",
        "query": "Guess Number Higher or Lower",
        "snippets": [
            "def main():\n    print(\"Hello, what is your name?\")\n    name = input()\n    print(\"Well, \" + name + \", I am thinking of a number between 1 and 100.\")\n    print(\"Take a guess.\")\n    guess = int(input())\n    while guess != number:\n        if guess < number:\n            print(\"Your guess is too low.\")\n        else:\n            print(\"Your guess is too high.\")\n        print(\"Take a guess.\")\n        guess = int(input())\n    print(\"Good job, \" + name + \"! You guessed my number in \" + str(guesses) + \" guesses!\")\n",
            "def main():\n    print(\"I'm thinking of a number between 1 and 100.\")\n    print(\"Try to guess it in as few attempts as possible.\\n\")\n    number = random.randint(1, 100)\n    guess = int(input(\"Take a guess: \"))\n    tries = 1\n    while guess != number:\n        if guess > number:\n            print(\"Lower...\")\n        else:\n            print(\"Higher...\")\n        guess = int(input(\"Take a guess: \"))\n        tries += 1\n    print(\"You guessed it!  The number was\", number)\n    print(\"And it only took you\", tries, \"tries!\\n\")\n    play_again = input(\"Do you want to play again? (y/n): \")\n    if play_again == \"y\":\n        main()\n    else:\n        print(\"Bye!\")\n",
            "def main():\n    print(\"Guess a number between 1 and 100\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    number = int(input(\"Enter your guess: \"))\n    guess = 0\n    while guess < 10:\n        if number > 50:\n            print(\"Lower\")\n            number = int(input(\"Enter your guess: \"))\n            guess += 1\n        elif number < 50:\n            print(\"Higher\")\n            number = int(input(\"Enter your guess: \"))\n            guess += 1\n        else:\n            print(\"You guessed correctly!\")\n            break\n    if guess == 10:\n        print(\"You lose!\")\n        print(\"The number was 50\")\n    print(\"You guessed\", guess, \"times.\")\n",
            "def main():\n    print(\"Guess a number between 1 and 100!\")\n    number = int(input())\n    if number < 1 or number > 100:\n        print(\"Invalid number!\")\n        return\n    guess = int(input())\n    if guess == number:\n        print(\"You got it!\")\n    elif guess < number:\n        print(\"Too low!\")\n        main()\n    else:\n        print(\"Too high!\")\n        main()\n",
            "def main():\n    print(\"Guess a number between 1 and 100\")\n    number = int(input())\n    if number < 1 or number > 100:\n        print(\"Invalid number\")\n        return\n    guess = int(input())\n    if guess == number:\n        print(\"You got it!\")\n    elif guess < number:\n        print(\"Too low\")\n        main()\n    else:\n        print(\"Too high\")\n        main()\n",
            "def main():\n    print(\"Guess a number between 1 and 100\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"You have 10 guesses\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print\n",
            "def main():\n    print(\"Guess a number between 1 and 100\")\n    print(\"You have 10 tries to guess the number\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"Good luck!\")\n    number = int(input(\"Enter your guess: \"))\n    guess = 0\n    while guess < 10:\n        if number > 50:\n            print(\"Your guess is too high.\")\n            number = int(input(\"Enter your guess: \"))\n            guess += 1\n        elif number < 50:\n            print(\"Your guess is too low.\")\n            number = int(input(\"Enter your guess: \"))\n            guess += 1\n        else:\n            print(\"You guessed correctly!\")\n            break\n    if guess == 10:\n        print(\"You have used up all your tries.\")\n        print(\"The number was 50.\")\n",
            "def main():\n    print(\"Guess a number between 1 and 100\")\n    print(\"You have 10 tries to guess the number\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    print(\"Type 'q' to quit the game.\")\n    print()\n    number = int(input(\"Enter your guess: \"))\n    guess = int(input(\"Enter your guess: \"))\n    count = 1\n    while guess != number and count < 10:\n        if guess > number:\n            print(\"Too high\")\n        else:\n            print(\"Too low\")\n        guess = int(input(\"Enter your guess: \"))\n        count += 1\n    if guess == number:\n        print(\"You guessed correctly!\")\n    else:\n        print(\"You have run out of guesses. The number was\", number)\n    print(\"Game over\")\n",
            "def main():\n    print(\"Guess a number between 1 and 100\")\n    print(\"You have 10 tries\")\n    print(\"Type 'h' to indicate the guess is too high.\")\n    print(\"Type 'l' to indicate the guess is too low.\")\n    print(\"Type 'c' to indicate I guessed correctly.\")\n    number = int(input(\"Enter your guess: \"))\n    guess = number\n    count = 0\n    while count < 10:\n        if guess == number:\n            print(\"You guessed correctly!\")\n            break\n        elif guess > number:\n            print(\"Too high!\")\n            count += 1\n            guess = int(input(\"Enter your guess: \"))\n        elif guess < number:\n            print(\"Too low!\")\n            count += 1\n            guess = int(input(\"Enter your guess: \"))\n    if count == 10:\n        print(\"You ran out of guesses. The number was\", number)\n    print(\"Game over!\")\n",
            "def main():\n    print(\"Guess a number between 1 and 100\")\n    number = int(input())\n    while number != 42:\n        if number > 42:\n            print(\"Too high, try again\")\n        else:\n            print(\"Too low, try again\")\n        number = int(input())\n    print(\"You got it!\")\n"
        ],
        "results": 10
    },
    {
        "id": "834",
        "source": "leetcodeTitles",
        "source_id": "345",
        "url": "https://leetcode.com/problems/reverse-vowels-of-a-string/",
        "language": "python",
        "query": "Reverse Vowels of a String",
        "snippets": [
            "def reverseVowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] in vowels:\n            j -= 1\n        else:\n            i += 1\n    return ''.join(s)\n",
            "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    string = list(string)\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] in vowels and string[j] in vowels:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n        elif string[i] in vowels:\n            j -= 1\n        elif string[j] in vowels:\n            i += 1\n        else:\n            i += 1\n            j -= 1\n    return ''.join(string)\n",
            "def reverse_vowels(string):\n    vowels = 'aeiouAEIOU'\n    string = list(string)\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] in vowels and string[j] in vowels:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n        elif string[i] in vowels:\n            j -= 1\n        else:\n            i += 1\n    return ''.join(string)\n",
            "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    string = list(string)\n    i = 0\n    j = len(string) - 1\n    while i < j:\n        if string[i] in vowels and string[j] in vowels:\n            string[i], string[j] = string[j], string[i]\n            i += 1\n            j -= 1\n        elif string[i] in vowels:\n            j -= 1\n        else:\n            i += 1\n    return ''.join(string)\n",
            "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] in vowels:\n            j -= 1\n        else:\n            i += 1\n    return ''.join(s)\n",
            "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] in vowels and s[j] in vowels:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        elif s[i] in vowels:\n            j -= 1\n        else:\n            i += 1\n    return ''.join(s)\n",
            "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n"
        ],
        "results": 10
    },
    {
        "id": "835",
        "source": "leetcodeTitles",
        "source_id": "1536",
        "url": "https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/",
        "language": "python",
        "query": "Minimum Swaps to Arrange a Binary Grid",
        "snippets": [
            "def minimumSwaps(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    swaps = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] != i + j + 1:\n                for k in range(len(grid)):\n                    for l in range(len(grid[0])):\n                        if grid[k][l] == i + j + 1:\n                            grid[i][j], grid[k][l] = grid[k][l], grid[i][j]\n                            swaps += 1\n                            break\n    return swaps\n",
            "def minSwaps(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(grid)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                break\n        else:\n            continue\n        break\n    for i in range(n):\n        for j in range(n):\n            if grid[i][\n",
            "def minimumSwaps(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    swaps = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] != i + 1:\n                for k in range(len(grid)):\n                    for l in range(len(grid[0])):\n                        if grid[k][l] == i + 1:\n                            grid[k][l] = grid[i][j]\n                            grid[i][j] = i + 1\n                            swaps += 1\n                            break\n    return swaps\n",
            "def minSwaps(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(grid)\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                continue\n            if i == j:\n                continue\n            if grid[i][j] == grid[j][i]:\n                continue\n            if grid[i][j] == 1:\n                grid[i][j] = 0\n                grid[j][i] = 1\n                count += 1\n    return count\n",
            "def minimumSwaps(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(grid)\n    swaps = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] != i + 1:\n                for k in range(n):\n                    if grid[i][k] == i + 1:\n                        grid[i][k], grid[i][j] = grid[i][j], grid[i][k]\n                        swaps += 1\n                        break\n    return swaps\n",
            "def minimumSwaps(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] != i+1:\n            j = arr[i]-1\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n    return count\n",
            "def minimumSwaps(arr):\n    # Write your code here\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        if arr[i] != i+1:\n            j = arr[i]-1\n            arr[i], arr[j] = arr[j], arr[i]\n            count += 1\n    return count\n",
            "def minimumSwaps(grid):\n    \"\"\"\n    :type grid: List[List[int]]\n    :rtype: int\n    \"\"\"\n    # count the number of 0s\n    zero_count = 0\n    for row in grid:\n        zero_count += row.count(0)\n    # count the number of 1s\n    one_count = 0\n    for row in grid:\n        one_count += row.count(1)\n    # if the number of 0s is greater than the number of 1s, return 0\n    if zero_count > one_count:\n        return 0\n    # if the number of 0s is less than the number of 1s,\n    # find the number of swaps needed to make the number of 0s equal to the number of 1s\n    else:\n        swaps = 0\n        for row in grid:\n            for i in range(len(row)):\n                if row[i] == 0:\n                    for j in range(i + 1, len(row)):\n                        if row[j] == 1:\n                            row[i], row[j] = row[j], row[i]\n                            swaps += 1\n                            break\n        return swaps\n"
        ],
        "results": 10
    },
    {
        "id": "836",
        "source": "leetcodeTitles",
        "source_id": "2101",
        "url": "https://leetcode.com/problems/detonate-the-maximum-bombs/",
        "language": "python",
        "query": "Detonate the Maximum Bombs",
        "snippets": [
            "def main():\n    # Get the number of bombs\n    num_bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of rows\n    num_rows = int(input(\"Enter the number of rows: \"))\n    # Get the number of columns\n    num_cols = int(input(\"Enter the number of columns: \"))\n    # Get the number of bombs to detonate\n    num_detonate = int(input(\"Enter the number of bombs to detonate: \"))\n    # Create the board\n    board = create_board(num_rows, num_cols)\n    # Display the board\n    display_board(board)\n    # Detonate the bombs\n    detonate_bombs(board, num_detonate)\n    # Display the board\n    display_board(board)\n    # Check if the player won\n    if check_win(board):\n        print(\"You won!\")\n    else:\n        print(\"You lost!\")\n",
            "def main():\n    # Get the number of bombs\n    num_bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of rows\n    num_rows = int(input(\"Enter the number of rows: \"))\n    # Get the number of columns\n    num_cols = int(input(\"Enter the number of columns: \"))\n    # Get the number of detonations\n    num_detonations = int(input(\"Enter the number of detonations: \"))\n    # Create the matrix\n    matrix = [[0 for col in range(num_cols)] for row in range(num_rows)]\n    # Fill the matrix with bombs\n    for i in range(num_bombs):\n        # Get the row\n        row = int(input(\"Enter the row of the bomb: \"))\n        # Get the column\n        col = int(input(\"Enter the column of the bomb: \"))\n        # Set the bomb\n        matrix[row][col] = 1\n    # Print the matrix\n    print(\"The matrix:\")\n    for row in matrix:\n        print(row)\n    # Detonate the bombs\n    for i in range(num_detonations):\n        # Get the row\n        row = int(input(\"Enter the row of the detonation: \"))\n        # Get the column\n        col = int(input(\"Enter the column of the detonation: \"))\n        # Detonate the bomb\n        detonate(matrix, row, col)\n    # Print the matrix\n    print(\"The matrix:\")\n    for row in matrix:\n        print(row)\n",
            "def main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get the number of bombs\n    bombs = int(input())\n    # Get the number of rows\n    rows = int(input())\n    # Get the number of columns\n    columns = int(input())\n    # Get the number of explosions\n    explosions = int(input())\n    # Get the bomb locations\n    bomb_locations = [list(map(int, input().split())) for _ in range(bombs)]\n    # Get the bomb detonation radius\n    bomb_radius = int(input())\n    # Get the bomb detonation power\n    bomb_power = int(input())\n    # Get the bomb detonation time\n    bomb_time = int(input())\n    # Get the bomb detonation time\n    bomb_time_interval = int(input())\n    # Get the bomb detonation time\n    bomb_time_max = int(input())\n    # Get the bomb detonation time\n    bomb_time_min = int(input())\n    # Get the bomb detonation time\n    bomb_time_step = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_interval = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_max = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_min = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_step = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_step_interval = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_step_max = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_step_min = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_step_step = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_step_step_interval = int(input())\n    # Get the bomb detonation time\n    bomb_time_step_step_step_max = int(\n",
            "def main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get the number of bombs\n    bombs = int(input())\n    # Get the number of rows\n    rows = int(input())\n    # Get the number of columns\n    columns = int(input())\n    # Get the number of detonations\n    detonations = int(input())\n    # Get the bomb locations\n    bomb_locations = [list(map(int, input().split())) for _ in range(bombs)]\n    # Get the grid\n    grid = [list(map(int, input().split())) for _ in range(rows)]\n    # Get the detonations\n    detonations = [list(map(int, input().split())) for _ in range(detonations)]\n    # Solve the problem\n    solve(bombs, rows, columns, detonations, bomb_locations, grid)\n",
            "def main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get the number of bombs\n    bombs = int(input())\n    # Get the number of rows\n    rows = int(input())\n    # Get the number of columns\n    columns = int(input())\n    # Get the number of explosions\n    explosions = int(input())\n    # Get the number of bombs to detonate\n    bombs_to_detonate = int(input())\n    # Get the bomb locations\n    bomb_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation locations\n    bomb_detonation_locations = [int(x) for x in input().split()]\n    # Get the bomb detonation\n",
            "def main():\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter the number of bombs: \"))\n    # Get the number of targets\n    targets = int(input(\"Enter the number of targets: \"))\n    # Get the number of bombs\n    bombs = int(input(\"Enter\n",
            "def main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get the number of bombs\n    num_bombs = int(input())\n    # Get the number of rows\n    num_rows = int(input())\n    # Get the number of columns\n    num_cols = int(input())\n    # Get the number of explosions\n    num_explosions = int(input())\n    # Get the bombs\n    bombs = []\n    for _ in range(num_bombs):\n        bombs.append(tuple(map(int, input().split())))\n    # Get the explosions\n    explosions = []\n    for _ in range(num_explosions):\n        explosions.append(tuple(map(int, input().split())))\n    # Get the board\n    board = []\n    for _ in range(num_rows):\n        board.append(input())\n    # Print the result\n    print(detonate(bombs, explosions, board))\n",
            "def main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Get the number of bombs\n    num_bombs = int(input())\n    # Get the number of rows and columns\n    num_rows, num_cols = map(int, input().split())\n    # Get the bomb locations\n    bomb_locations = []\n    for _ in range(num_bombs):\n        bomb_locations.append(tuple(map(int, input().split())))\n    # Get the board\n    board = []\n    for _ in range(num_rows):\n        board.append(list(input()))\n    # Get the number of rows and columns\n    num_rows, num_cols = map(int, input().split())\n    # Get the board\n    board = []\n    for _ in range(num_rows):\n        board.append(list(input()))\n    # Get the number of rows and columns\n    num_rows, num_cols = map(int, input().split())\n    # Get the board\n    board = []\n    for _ in range(num_rows):\n        board.append(list(input()))\n    # Get the number of rows and columns\n    num_rows, num_cols = map(int, input().split())\n    # Get the board\n    board = []\n    for _ in range(num_rows):\n        board.append(list(input()))\n    # Get the number of rows and columns\n    num_rows, num_cols = map(int, input().split())\n    # Get the board\n    board = []\n    for _ in range(num_rows):\n        board.append(list(input()))\n    # Get the number of rows and columns\n    num_rows, num_cols = map(int, input().split())\n    # Get the board\n    board = []\n    for _ in range(num_rows):\n        board.append(list(input()))\n    # Get the number of rows and columns\n    num_rows, num_cols = map(int, input().split())\n    # Get the board\n    board = []\n    for _ in range(\n",
            "def main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Get the number of bombs\n    bombs = int(input())\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the bomb positions\n    bomb_positions = [list(map(int, input().split())) for _ in range(bombs)]\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().split())\n    # Get the board\n    board = [list(input()) for _ in range(rows)]\n    # Get the number of rows and columns\n    rows, columns = map(int, input().\n",
            "def main():\n    \"\"\"\n    Main function.\n    \"\"\"\n    # Get the number of bombs to detonate\n    num_bombs = int(input(\"How many bombs do you have? \"))\n    # Get the number of bombs to detonate\n    num_detonate = int(input(\"How many bombs do you want to detonate? \"))\n    # Check if the number of bombs to detonate is less than the number of bombs\n    if num_detonate > num_bombs:\n        # If so, print the message\n        print(\"You can't detonate that many bombs!\")\n    # If the number of bombs to detonate is less than or equal to the number of bombs\n    else:\n        # Print the message\n        print(\"You have detonated\", num_detonate, \"bombs!\")\n"
        ],
        "results": 10
    },
    {
        "id": "837",
        "source": "leetcodeTitles",
        "source_id": "1290",
        "url": "https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/",
        "language": "python",
        "query": "Convert Binary Number in a Linked List to Integer",
        "snippets": [
            "def binary_to_int(head):\n    if head is None:\n        return 0\n    else:\n        return head.data * 2**binary_to_int(head.next) + binary_to_int(head.next)\n",
            "def convert(head):\n    if head is None:\n        return 0\n    curr = head\n    num = 0\n    while curr is not None:\n        num = num * 2 + curr.val\n        curr = curr.next\n    return num\n",
            "def getDecimalValue(head):\n    decimal = 0\n    while head:\n        decimal = decimal * 2 + head.val\n        head = head.next\n    return decimal\n",
            "def listToInt(head):\n    num = 0\n    while head:\n        num = num * 2 + head.val\n        head = head.next\n    return num\n",
            "def b2i(head):\n    if head is None:\n        return 0\n    res = 0\n    while head is not None:\n        res = res * 2 + head.val\n        head = head.next\n    return res\n",
            "def getDecimalValue(head):\n    if head is None:\n        return 0\n    else:\n        return getDecimalValue(head.next) * 2 + head.val\n",
            "def bintoint(head):\n    if head is None:\n        return 0\n    num = 0\n    while head is not None:\n        num = num * 2 + head.val\n        head = head.next\n    return num\n",
            "def binary_to_int(head):\n    if head is None:\n        return 0\n    return head.val + 2 * binary_to_int(head.next)\n",
            "def btol(head):\n    if head is None:\n        return 0\n    else:\n        return btol(head.next) * 2 + head.val\n",
            "def btoi(head):\n    if head is None:\n        return 0\n    else:\n        return 2 * btoi(head.next) + head.data\n"
        ],
        "results": 10
    },
    {
        "id": "838",
        "source": "leetcodeTitles",
        "source_id": "896",
        "url": "https://leetcode.com/problems/monotonic-array/",
        "language": "python",
        "query": "Monotonic Array",
        "snippets": [
            "def monotonicArray(A):\n    if len(A) < 2:\n        return True\n    if A[0] > A[1]:\n        return False\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n",
            "def monotonic_array(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n    elif arr[0] > arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n    return True\n",
            "def monotonicArray(A):\n    if len(A) <= 1:\n        return True\n    if A[0] < A[1]:\n        for i in range(1, len(A)):\n            if A[i] < A[i-1]:\n                return False\n    elif A[0] > A[1]:\n        for i in range(1, len(A)):\n            if A[i] > A[i-1]:\n                return False\n    return True\n",
            "def monotonic_array(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n",
            "def monotonicArray(arr):\n    if len(arr) <= 1:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n",
            "def monotonicArray(A):\n    if len(A) < 3:\n        return False\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n",
            "def monotonicArray(arr):\n    if len(arr) <= 1:\n        return True\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n    elif arr[0] > arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n    return True\n",
            "def monotonic(arr):\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] < arr[i-1]:\n                return False\n    elif arr[0] > arr[1]:\n        for i in range(1, len(arr)):\n            if arr[i] > arr[i-1]:\n                return False\n    return True\n"
        ],
        "results": 10
    },
    {
        "id": "839",
        "source": "leetcodeTitles",
        "source_id": "1791",
        "url": "https://leetcode.com/problems/find-center-of-star-graph/",
        "language": "python",
        "query": "Find Center of Star Graph",
        "snippets": [
            "def find_center(graph):\n    \"\"\"\n    Find the center of a star graph.\n    \"\"\"\n    center = None\n    for node in graph:\n        if len(graph[node]) == 0:\n            center = node\n            break\n    return center\n",
            "def find_center(graph):\n    \"\"\"\n    Find the center of a star graph.\n    \"\"\"\n    # Find the center of the graph\n    center = None\n    for node in graph:\n        if len(graph[node]) == 0:\n            center = node\n            break\n    # Find the node with the least number of connections\n    for node in graph:\n        if len(graph[node]) < len(graph[center]):\n            center = node\n    return center\n",
            "def find_center(graph):\n    # Find the center of the graph\n    # graph is a list of lists\n    # graph[i] is a list of the nodes connected to node i\n    # graph[i][j] is the weight of edge (i, j)\n    # graph[i][j] = 0 if there is no edge (i, j)\n    # graph[i][j] = -1 if node j is not connected to node i\n    # graph[i][j] = -2 if node j is connected to node i but not via an edge\n    # graph[i][j] = -3 if node j is connected to node i via an edge but not via node i\n    # graph[i][j] = -4 if node j is connected to node i via an edge via node i\n    # graph[i][j] = -5 if node j is connected to node i via an edge via node i but not via node j\n    # graph[i][j] = -6 if node j is connected to node i via an edge via node i via node j\n    # graph[i][j] = -7 if node j is connected to node i via an edge via node i via node j but not via node i\n    # graph[i][j] = -8 if node j is connected to node i via an edge via node i via node j via node i\n    # graph[i][j] = -9 if node j is connected to node i via an edge via node i via node j via node i but not via node j\n    # graph[i][j] = -10 if node j is connected to node i via an edge via node i via node j via node i via node j\n    # graph[i][j] = -11 if node j is connected to node i via an edge via node i via node j via node i via node j but not via node i\n    # graph[i][j] = -12 if node j is connected to node i via an edge via node i via node j via node i via node j via node i\n    # graph[i][j] = -13 if node j is connected to node i via an edge via node i via node j via node i via node j via node i but not via node\n",
            "def find_center(graph):\n    # Find the center of the star graph\n    # graph is a list of lists\n    # graph[i] is a list of the nodes connected to node i\n    # graph[i][j] is the jth node in the list of nodes connected to node i\n    # graph[i][j] == graph[j][i]\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph[i][j] is the edge from node j to node i\n    # graph[i][j] is the edge from node i to node j\n    # graph\n",
            "def find_center(graph):\n    # Find the center of the graph\n    # graph is a dictionary of nodes and their neighbors\n    # return the center node\n    center = None\n    for node in graph:\n        if center is None:\n            center = node\n        elif len(graph[node]) < len(graph[center]):\n            center = node\n    return center\n",
            "def find_center(graph):\n    # Find the center of the star graph\n    # graph is a list of lists\n    # graph[i] is the list of neighbors of node i\n    # Return the index of the center node\n    # If there is more than one center, return the index of the leftmost center node\n    # If there is no center, return None\n    # Hint: use a dictionary\n    center = None\n    center_index = None\n    center_count = 0\n    center_index_list = []\n    for i in range(len(graph)):\n        if len(graph[i]) == 1:\n            center_index_list.append(i)\n            center_count += 1\n    if center_count == 1:\n        center = center_index_list[0]\n        center_index = center\n    elif center_count > 1:\n        center = center_index_list[0]\n        center_index = center\n    else:\n        center = None\n    return center_index\n"
        ],
        "results": 6
    },
    {
        "id": "840",
        "source": "leetcodeTitles",
        "source_id": "929",
        "url": "https://leetcode.com/problems/unique-email-addresses/",
        "language": "python",
        "query": "Unique Email Addresses",
        "snippets": [
            "def unique_email_addresses(emails):\n    return len(set(email.split('@')[0].split('+')[0].split('.')[0] for email in emails))\n",
            "def unique_emails(emails):\n    unique = set()\n    for email in emails:\n        local, domain = email.split('@')\n        local = local.split('+')[0]\n        local = local.replace('.', '')\n        unique.add(local + '@' + domain)\n    return len(unique)\n",
            "def unique_emails(emails):\n    return len(set(emails))\n",
            "def unique_emails(emails):\n    return len(set(emails.split('@')))\n",
            "def unique_email_addresses(emails):\n    return len(set(emails.split('@')))\n",
            "def unique_email_addresses(emails):\n    return len(set(emails))\n"
        ],
        "results": 10
    },
    {
        "id": "841",
        "source": "leetcodeTitles",
        "source_id": "1942",
        "url": "https://leetcode.com/problems/the-number-of-the-smallest-unoccupied-chair/",
        "language": "python",
        "query": "The Number of the Smallest Unoccupied Chair",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    for i in range(n):\n        if a[i] != i + 1:\n            print(i + 1)\n            break\n    else:\n        print(n + 1)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int\n",
            "def main():\n    chairs = int(input())\n    people = int(input())\n    for i in range(1, people + 1):\n        if i not in range(1, chairs + 1):\n            print(i)\n            break\n    else:\n        print(\"None\")\n",
            "def main():\n    chairs = int(input())\n    people = int(input())\n    for i in range(1, chairs + 1):\n        if i not in range(1, people + 1):\n            print(i)\n            break\n",
            "def main():\n    chairs = [False] * 100\n    for i in range(1, 101):\n        if i % 3 == 0:\n            chairs[i - 1] = True\n        elif i % 5 == 0:\n            chairs[i - 1] = True\n        elif i % 7 == 0:\n            chairs[i - 1] = True\n    for i in range(1, 101):\n        if chairs[i - 1] == False:\n            print(i)\n            break\n",
            "def main():\n    n = int(input())\n    chairs = list(map(int, input().split()))\n    print(chairs.index(0) + 1)\n",
            "def main():\n    chairs = int(input())\n    people = int(input())\n    for i in range(1, chairs + 1):\n        if i not in [1, 2, 3]:\n            print(i)\n            break\n    else:\n        print(chairs + 1)\n",
            "def main():\n    n = int(input())\n    chairs = [int(x) for x in input().split()]\n    print(n - sum(1 for x in chairs if x == 0))\n"
        ],
        "results": 9
    },
    {
        "id": "842",
        "source": "leetcodeTitles",
        "source_id": "1706",
        "url": "https://leetcode.com/problems/where-will-the-ball-fall/",
        "language": "python",
        "query": "Where Will the Ball Fall",
        "snippets": [
            "def where_will_the_ball_fall(n, m, a, b):\n    \"\"\"\n    n: number of rows in the board\n    m: number of columns in the board\n    a: number of rows the ball will fall in\n    b: number of columns the ball will fall in\n    \"\"\"\n    # Your code here\n    return (a - 1) * m + b\n",
            "def main():\n    import math\n    import sys\n    import os\n    import time\n    import random\n    import pygame\n    from pygame.locals import *\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import matplotlib.animation as animation\n    from matplotlib import style\n    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\n    from matplotlib.figure import Figure\n    from tkinter import *\n    from tkinter import ttk\n    from tkinter import messagebox\n    from tkinter import filedialog\n    from tkinter import simpledialog\n    from tkinter import colorchooser\n    from tkinter import font\n    from tkinter import messagebox\n    from tkinter import scrolledtext\n    from tkinter import Menu\n    from tkinter import ttk\n    from tkinter import Checkbutton\n    from tkinter import Spinbox\n    from tkinter import Radiobutton\n    from tkinter import IntVar\n    from tkinter import StringVar\n    from tkinter import Tk\n    from tkinter import Canvas\n    from tkinter import PhotoImage\n    from tkinter import Label\n    from tkinter import Button\n    from tkinter import Entry\n    from tkinter import Frame\n    from tkinter import LabelFrame\n    from tkinter import Listbox\n    from tkinter import Scrollbar\n    from tkinter import Toplevel\n    from tkinter import Tk\n    from tkinter import messagebox\n    from tkinter import ttk\n    from tkinter import filedialog\n    from tkinter import simpledialog\n    from tkinter import colorchooser\n    from tkinter import font\n    from tkinter import messagebox\n    from tkinter import scrolledtext\n    from tkinter import Menu\n    from tkinter import ttk\n    from tkinter import Checkbutton\n    from tkinter import Spinbox\n    from tkinter import Radiobutton\n    from tkinter import IntVar\n    from tkinter import String\n",
            "def main():\n    import sys\n    import math\n    import random\n    import argparse\n    parser = argparse.ArgumentParser(description=\"Where Will the Ball Fall\")\n    parser.add_argument(\"-s\", \"--seed\", type=int, default=0, help=\"the random seed\")\n    parser.add_argument(\"-n\", \"--num_points\", type=int, default=100, help=\"number of points to generate\")\n    parser.add_argument(\"-l\", \"--length\", type=int, default=100, help=\"length of the board\")\n    parser.add_argument(\"-w\", \"--width\", type=int, default=100, help=\"width of the board\")\n    parser.add_argument(\"-d\", \"--density\", type=float, default=0.5, help=\"density of the board\")\n    parser.add_argument(\"-f\", \"--filename\", type=str, default=\"\", help=\"filename to save the board to\")\n    args = parser.parse_args()\n    random.seed(args.seed)\n    board = [[0 for x in range(args.width)] for y in range(args.length)]\n    for i in range(args.num_points):\n        x = random.randint(0, args.width - 1)\n        y = random.randint(0, args.length - 1)\n        board[y][x] = 1\n    if args.filename:\n        with open(args.filename, \"w\") as f:\n            for row in board:\n                f.write(\" \".join(map(str, row)) + \"\\n\")\n    else:\n        for row in board:\n            print(\" \".join(map(str, row)))\n",
            "def main():\n    print(\"This program calculates where the ball will fall.\")\n    print()\n    print(\"Enter the height of the ground in meters:\")\n    ground_height = float(input())\n    print(\"Enter the height of the ball in meters:\")\n    ball_height = float(input())\n    print(\"Enter the time in seconds:\")\n    time = float(input())\n    print(\"The ball will fall\", (ground_height - ball_height) / time, \"meters per second.\")\n    print()\n    print(\"The ball will fall\", (ground_height - ball_height) * time, \"meters in\", time, \"seconds.\")\n    print()\n    print(\"The ball will fall\", (ground_height - ball_height) * time * time, \"meters in\", time * time, \"seconds.\")\n    print()\n    print(\"The ball will fall\", (ground_height - ball_height) * time * time * time, \"meters in\", time * time * time, \"seconds.\")\n    print()\n    print(\"The ball will fall\", (ground_height - ball_height) * time * time * time * time, \"meters in\", time * time * time * time, \"seconds.\")\n    print()\n    print(\"The ball will fall\", (ground_height - ball_height) * time * time * time * time * time, \"meters in\", time * time * time * time * time, \"seconds.\")\n    print()\n    print(\"The ball will fall\", (ground_height - ball_height) * time * time * time * time * time * time, \"meters in\", time * time * time * time * time * time, \"seconds.\")\n    print()\n    print(\"The ball will fall\", (ground_height - ball_height) * time * time * time * time * time * time * time, \"meters in\", time * time * time * time * time * time * time, \"seconds.\")\n    print()\n    print(\"The ball will fall\", (ground_height - ball_height) * time * time * time * time * time * time * time * time, \"meters in\", time * time * time * time * time * time * time\n",
            "def main():\n    print(\"This program calculates where the ball will fall.\")\n    print()\n    print(\"Enter the height of the ground in meters:\")\n    ground = float(input())\n    print(\"Enter the height of the ball in meters:\")\n    ball = float(input())\n    print(\"Enter the time in seconds:\")\n    time = float(input())\n    print(\"The ball will fall\", round(ground - ball - time, 2), \"meters.\")\n",
            "def main():\n    print(\"This program calculates where the ball will land.\")\n    print()\n    print(\"Enter the height of the board in inches:\")\n    board_height = int(input())\n    print(\"Enter the time in seconds:\")\n    time = int(input())\n    print(\"The ball will land at\", calculate_height(board_height, time), \"inches.\")\n    print()\n    print(\"Do you want to try again? (y/n)\")\n    again = input()\n    if again == \"y\":\n        main()\n    else:\n        print(\"Bye!\")\n",
            "def main():\n    print(\"This program calculates where the ball will land after bouncing\")\n    print(\"Enter the height of the ball in meters:\")\n    height = float(input())\n    print(\"Enter the time in seconds:\")\n    time = float(input())\n    print(\"The ball will land at\", calculate_height(height, time), \"meters\")\n",
            "def main():\n    print(\"This program calculates where the ball will land after bouncing.\")\n    print()\n    print(\"Enter the height of the ball in inches:\")\n    height = int(input())\n    print(\"Enter the number of times the ball bounces:\")\n    bounces = int(input())\n    print(\"The ball will land at\", bounce(height, bounces), \"inches.\")\n    print()\n    print(\"Bye!\")\n",
            "def main():\n    print(\"This program calculates where the ball will land if it is thrown at a given angle.\")\n    print()\n    angle = eval(input(\"Enter the angle of the throw in degrees: \"))\n    velocity = eval(input(\"Enter the velocity of the throw in meters/second: \"))\n    time = eval(input(\"Enter the time of the throw in seconds: \"))\n    x = velocity * time * cos(angle)\n    y = velocity * time * sin(angle)\n    print(\"The ball will land at (\", x, \", \", y, \")\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n    print(\"The ball will land at\", x, \"meters to the right and\", y, \"meters above the ground.\")\n    print()\n",
            "def main():\n    print(\"This program calculates the height of a ball\")\n    print(\"droped from a known height\")\n    print()\n    h = int(input(\"Enter the height of the ball in inches: \"))\n    t = int(input(\"Enter the time in seconds: \"))\n    v = (h * 3.28) / (t * 3600)\n    print(\"The ball dropped\", v, \"m/s\")\n"
        ],
        "results": 10
    },
    {
        "id": "843",
        "source": "leetcodeTitles",
        "source_id": "324",
        "url": "https://leetcode.com/problems/wiggle-sort-ii/",
        "language": "python",
        "query": "Wiggle Sort II",
        "snippets": [
            "def wiggleSort(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    nums.sort()\n    for i in range(1, len(nums), 2):\n        nums[i], nums[i-1] = nums[i-1], nums[i]\n    for i in range(1, len(nums), 2):\n        nums[i], nums[i-1] = nums[i-1], nums[i]\n    return nums\n",
            "def wiggleSort(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            nums[i] = nums[i-1]\n        else:\n            nums[i] = nums[i-1]\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            nums[i] = nums[i-1]\n        else:\n            nums[i] = nums[i-1]\n    return nums\n",
            "def wiggleSort(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            nums[i] = nums[len(nums) - 1 - i]\n        else:\n            nums[i] = nums[i - 1]\n    return nums\n",
            "def wiggleSort(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            nums[i] = nums[i]\n        else:\n            nums[i] = nums[len(nums) - i - 1]\n    return nums\n",
            "def wiggleSort(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if i + 1 < len(nums) and nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n        else:\n            if i - 1 >= 0 and nums[i] < nums[i - 1]:\n                nums[i], nums[i - 1] = nums[i - 1], nums[i]\n    return nums\n",
            "def wiggleSort(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    if len(nums) <= 1:\n        return\n    for i in range(1, len(nums)):\n        if i % 2 == 1 and nums[i] < nums[i - 1]:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n        elif i % 2 == 0 and nums[i] > nums[i - 1]:\n            nums[i], nums[i - 1] = nums[i - 1], nums[i]\n    return nums\n",
            "def wiggleSort(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    if len(nums) <= 1:\n        return\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if i == 0:\n                nums[i] = min(nums)\n            else:\n                nums[i] = max(nums[i-1], nums[i])\n        else:\n            if i == len(nums)-1:\n                nums[i] = max(nums)\n            else:\n                nums[i] = min(nums[i-1], nums[i])\n    return nums\n"
        ],
        "results": 10
    },
    {
        "id": "844",
        "source": "leetcodeTitles",
        "source_id": "2016",
        "url": "https://leetcode.com/problems/maximum-difference-between-increasing-elements/",
        "language": "python",
        "query": "Maximum Difference Between Increasing Elements",
        "snippets": [
            "def max_diff(lst):\n    if len(lst) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(lst) - 1):\n        if lst[i + 1] - lst[i] > max_diff:\n            max_diff = lst[i + 1] - lst[i]\n    return max_diff\n",
            "def max_diff(lst):\n    if len(lst) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            max_diff = max(max_diff, lst[i] - lst[i + 1])\n    return max_diff\n",
            "def max_diff_increasing(lst):\n    if len(lst) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            max_diff = max(max_diff, lst[i] - lst[i + 1])\n    return max_diff\n",
            "def max_diff(lst):\n    if len(lst) < 2:\n        return 0\n    else:\n        max_diff = 0\n        for i in range(len(lst) - 1):\n            if lst[i + 1] - lst[i] > max_diff:\n                max_diff = lst[i + 1] - lst[i]\n        return max_diff\n",
            "def max_diff_incr(lst):\n    if len(lst) < 2:\n        return 0\n    max_diff = lst[1] - lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] - lst[i-1] > max_diff:\n            max_diff = lst[i] - lst[i-1]\n    return max_diff\n",
            "def max_diff(arr):\n    if len(arr) < 2:\n        return 0\n    max_diff = 0\n    for i in range(len(arr) - 1):\n        if arr[i + 1] - arr[i] > max_diff:\n            max_diff = arr[i + 1] - arr[i]\n    return max_diff\n"
        ],
        "results": 10
    },
    {
        "id": "845",
        "source": "leetcodeTitles",
        "source_id": "1317",
        "url": "https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers/",
        "language": "python",
        "query": "Convert Integer to the Sum of Two No-Zero Integers",
        "snippets": [
            "def getNoZeroIntegers(n):\n    for i in range(1, n):\n        if '0' not in str(i) and '0' not in str(n-i):\n            return [i, n-i]\n    return [-1, -1]\n",
            "def getNoZeroIntegers(n):\n    for i in range(1, n):\n        if '0' not in str(i) and '0' not in str(n-i):\n            return [i, n-i]\n    return None\n",
            "def getNoZeroIntegers(n: int) -> List[int]:\n    for i in range(1, n):\n        if '0' not in str(i) and '0' not in str(n-i):\n            return [i, n-i]\n    return [-1, -1]\n",
            "def getNoZeroIntegers(n: int) -> List[int]:\n    for i in range(1, n):\n        if '0' not in str(i) and '0' not in str(n-i):\n            return [i, n-i]\n    return []\n"
        ],
        "results": 10
    },
    {
        "id": "846",
        "source": "leetcodeTitles",
        "source_id": "1582",
        "url": "https://leetcode.com/problems/special-positions-in-a-binary-matrix/",
        "language": "python",
        "query": "Special Positions in a Binary Matrix",
        "snippets": [
            "def special_positions(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                res += 1\n            elif i == 0 and j == n - 1:\n                res += 1\n            elif i == m - 1 and j == 0:\n                res += 1\n            elif i == m - 1 and j == n - 1:\n                res += 1\n            elif i == 0:\n                res += 1\n            elif i == m - 1:\n                res += 1\n            elif j == 0:\n                res += 1\n            elif j == n - 1:\n                res += 1\n    return res\n",
            "def special_positions(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                res += 1\n            elif i == 0 and j == n - 1:\n                res += 1\n            elif i == m - 1 and j == 0:\n                res += 1\n            elif i == m - 1 and j == n - 1:\n                res += 1\n            elif i == 0 or i == m - 1:\n                res += 1\n            elif j == 0 or j == n - 1:\n                res += 1\n    return res\n",
            "def special_positions(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                res += 1\n            elif i == 0 and j == n - 1:\n                res += 1\n            elif i == m - 1 and j == 0:\n                res += 1\n            elif i == m - 1 and j == n - 1:\n                res += 1\n            elif i == 0:\n                res += 1\n            elif i == m - 1:\n                res += 1\n            elif j == 0:\n                res += 1\n            elif j == n - 1:\n                res += 1\n    return res\n",
            "def special_positions(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0 or i == m - 1 or j == n - 1:\n                if matrix[i][j] == 1:\n                    res += 1\n    return res\n",
            "def special_positions(matrix):\n    if not matrix:\n        return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                count += 1\n            elif i == 0 and j == n - 1:\n                count += 1\n            elif i == m - 1 and j == 0:\n                count += 1\n            elif i == m - 1 and j == n - 1:\n                count += 1\n    return count\n",
            "def special_positions(matrix):\n    if not matrix:\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    if n == 1:\n        return m\n    if m == 1:\n        return n\n    if n == 2:\n        return m + 1\n    if m == 2:\n        return n + 1\n    if n == 3:\n        return m + 1\n    if m == 3:\n        return n + 1\n    if n == 4:\n        return m + 1\n    if m == 4:\n        return n + 1\n    if n == 5:\n        return m + 1\n    if m == 5:\n        return n + 1\n    if n == 6:\n        return m + 1\n    if m == 6:\n        return n + 1\n    if n == 7:\n        return m + 1\n    if m == 7:\n        return n + 1\n    if n == 8:\n        return m + 1\n    if m == 8:\n        return n + 1\n    if n == 9:\n        return m + 1\n    if m == 9:\n        return n + 1\n    if n == 10:\n        return m + 1\n    if m == 10:\n        return n + 1\n    if n == 11:\n        return m + 1\n    if m == 11:\n        return n + 1\n    if n == 12:\n        return m + 1\n    if m == 12:\n        return n + 1\n    if n == 13:\n        return m + 1\n    if m == 13:\n        return n + 1\n    if n == 14:\n        return m + 1\n    if m == 14:\n        return n + 1\n    if n == 15:\n        return m + 1\n    if m == 15:\n        return n + 1\n    if n == 16:\n        return m + 1\n    if m == 16:\n        return n + 1\n    if n == 17:\n        return m + 1\n    if m == 17:\n        return n + 1\n    if n == 18:\n        return m + 1\n    if m == 18:\n        return\n",
            "def special_positions(matrix):\n    # Write your code here\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                res += 1\n            elif i == 0 and j == n - 1:\n                res += 1\n            elif i == m - 1 and j == 0:\n                res += 1\n            elif i == m - 1 and j == n - 1:\n                res += 1\n            elif i == 0:\n                res += 1\n            elif i == m - 1:\n                res += 1\n            elif j == 0:\n                res += 1\n            elif j == n - 1:\n                res += 1\n    return res\n",
            "def special_positions(matrix):\n    if not matrix:\n        return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    if m == 1:\n        return 1\n    if n == 1:\n        return 1\n    if m == 2:\n        return 2\n    if n == 2:\n        return 2\n    if m == 3:\n        return 4\n    if n == 3:\n        return 4\n    if m == 4:\n        return 6\n    if n == 4:\n        return 6\n    if m == 5:\n        return 10\n    if n == 5:\n        return 10\n    if m == 6:\n        return 15\n    if n == 6:\n        return 15\n    if m == 7:\n        return 21\n    if n == 7:\n        return 21\n    if m == 8:\n        return 28\n    if n == 8:\n        return 28\n    if m == 9:\n        return 36\n    if n == 9:\n        return 36\n    if m == 10:\n        return 45\n    if n == 10:\n        return 45\n    if m == 11:\n        return 55\n    if n == 11:\n        return 55\n    if m == 12:\n        return 66\n    if n == 12:\n        return 66\n    if m == 13:\n        return 78\n    if n == 13:\n        return 78\n    if m == 14:\n        return 91\n    if n == 14:\n        return 91\n    if m == 15:\n        return 105\n    if n == 15:\n        return 105\n    if m == 16:\n        return 120\n    if n == 16:\n        return 120\n    if m == 17:\n        return 136\n    if n == 17:\n        return 136\n    if m == 18:\n        return 153\n    if n == 18:\n        return 153\n    if m == 19:\n        return 171\n    if n == 19:\n        return 171\n    if m == 20:\n        return 190\n    if n == 20:\n        return 190\n    if m == 21:\n        return 210\n    if n == 21:\n        return\n"
        ],
        "results": 10
    },
    {
        "id": "847",
        "source": "leetcodeTitles",
        "source_id": "2164",
        "url": "https://leetcode.com/problems/sort-even-and-odd-indices-independently/",
        "language": "python",
        "query": "Sort Even and Odd Indices Independently",
        "snippets": [
            "def sort_even_odd(lst):\n    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n",
            "def sort_even_odd(lst):\n    even = sorted(lst[0::2])\n    odd = sorted(lst[1::2])\n    return even + odd\n",
            "def sort_even_odd(lst):\n    even = []\n    odd = []\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            even.append(lst[i])\n        else:\n            odd.append(lst[i])\n    return even + odd\n",
            "def sort_even_odd(lst):\n    even = sorted(lst[::2])\n    odd = sorted(lst[1::2])\n    return even + odd\n",
            "def sort_even_odd(array):\n    \"\"\"\n    Given an array of integers, sort the array into even and odd integers\n    in-place.\n    \"\"\"\n    even = [x for x in array if x % 2 == 0]\n    odd = [x for x in array if x % 2 == 1]\n    array[:] = even + odd\n    return array\n",
            "def sort_even_odd(lst):\n    \"\"\"\n    Given a list of numbers, return a list where all even numbers are in\n    index 0 and all odd numbers are in index 1.\n    \"\"\"\n    even = []\n    odd = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return [even, odd]\n"
        ],
        "results": 10
    },
    {
        "id": "848",
        "source": "leetcodeTitles",
        "source_id": "2224",
        "url": "https://leetcode.com/problems/minimum-number-of-operations-to-convert-time/",
        "language": "python",
        "query": "Minimum Number of Operations to Convert Time",
        "snippets": [
            "def minOperations(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n        return 43\n    if n == 45:\n",
            "def minOperations(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 10\n    if n == 6:\n        return 15\n    if n == 7:\n        return 22\n    if n == 8:\n        return 30\n    if n == 9:\n        return 40\n    if n == 10:\n        return 51\n    if n == 11:\n        return 64\n    if n == 12:\n        return 78\n    if n == 13:\n        return 94\n    if n == 14:\n        return 111\n    if n == 15:\n        return 130\n    if n == 16:\n        return 150\n    if n == 17:\n        return 171\n    if n == 18:\n        return 194\n    if n == 19:\n        return 218\n    if n == 20:\n        return 244\n    if n == 21:\n        return 271\n    if n == 22:\n        return 300\n    if n == 23:\n        return 330\n    if n == 24:\n        return 362\n    if n == 25:\n        return 395\n    if n == 26:\n        return 430\n    if n == 27:\n        return 466\n    if n == 28:\n        return 503\n    if n == 29:\n        return 542\n    if n == 30:\n        return 582\n    if n == 31:\n        return 625\n    if n == 32:\n        return 670\n    if n == 33:\n        return 716\n    if n == 34:\n        return 764\n    if n == 35:\n        return 813\n    if n == 36:\n        return 864\n    if n == 37:\n        return 916\n    if n == 38:\n        return 971\n    if n == 39:\n        return 1028\n    if n == 40:\n        return 1086\n    if n == 41:\n        return 1146\n    if n == 42:\n        return 1209\n    if n == 43\n"
        ],
        "results": 10
    },
    {
        "id": "849",
        "source": "leetcodeTitles",
        "source_id": "837",
        "url": "https://leetcode.com/problems/new-21-game/",
        "language": "python",
        "query": "New 21 Game",
        "snippets": [
            "def new21Game(N, K, W):\n    \"\"\"\n    :type N: int\n    :type K: int\n    :type W: int\n    :rtype: float\n    \"\"\"\n    if K == 0:\n        return 1.0\n    if N >= K:\n        return 1.0\n    if W == 0:\n        return 0.0\n    return 1.0 - (K - N) / W\n",
            "def new_21_game():\n    player_score = 0\n    player_wins = 0\n    while player_score < 21:\n        player_score += draw_card()\n        if player_score > 21:\n            player_wins += 1\n            player_score = 0\n        else:\n            player_wins += 1\n    return player_wins\n",
            "def new_21_game():\n    player_score = 0\n    player_wins = 0\n    while player_score < 21:\n        player_score += int(input(\"Enter a number: \"))\n        if player_score == 21:\n            player_wins += 1\n            print(\"You win!\")\n        elif player_score > 21:\n            print(\"You lose!\")\n        else:\n            print(\"You lose!\")\n    return player_wins\n",
            "def new_game(n):\n    \"\"\"\n    n: number of stones in the pile\n    \"\"\"\n    # Your code here\n    if n == 0:\n        return True\n    elif n < 0:\n        return False\n    else:\n        return new_game(n-1)\n",
            "def new_21_game():\n    # your code here\n    return 0\n"
        ],
        "results": 5
    },
    {
        "id": "850",
        "source": "leetcodeTitles",
        "source_id": "1447",
        "url": "https://leetcode.com/problems/simplified-fractions/",
        "language": "python",
        "query": "Simplified Fractions",
        "snippets": [
            "def gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n",
            "def simplify(n, d):\n    for i in range(2, min(n, d) + 1):\n        while n % i == 0 and d % i == 0:\n            n //= i\n            d //= i\n    return n, d\n",
            "def simplify_fraction(numerator, denominator):\n    if numerator > denominator:\n        numerator, denominator = denominator, numerator\n    for i in range(2, denominator + 1):\n        if numerator % i == 0 and denominator % i == 0:\n            numerator //= i\n            denominator //= i\n    return numerator, denominator\n"
        ],
        "results": 10
    },
    {
        "id": "851",
        "source": "leetcodeTitles",
        "source_id": "1122",
        "url": "https://leetcode.com/problems/relative-sort-array/",
        "language": "python",
        "query": "Relative Sort Array",
        "snippets": [
            "def relativeSortArray(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # Create a dictionary of the elements in arr2\n    d = {}\n    for i in arr2:\n        d[i] = 0\n    # Count the number of times each element in arr1 appears in arr2\n    for i in arr1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    # Create a list of the elements in arr2\n    l = []\n    for i in arr2:\n        l.extend([i] * d[i])\n    # Create a list of the elements in arr1 that are not in arr2\n    l2 = []\n    for i in arr1:\n        if i not in d:\n            l2.append(i)\n    # Sort the lists and return the concatenated list\n    l.sort()\n    l2.sort()\n    return l + l2\n",
            "def relativeSortArray(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    arr1.sort(key=lambda x: arr2.index(x) if x in arr2 else x)\n    return arr1\n",
            "def relativeSortArray(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    arr1.sort()\n    arr2.sort()\n    arr3 = []\n    for i in arr2:\n        for j in arr1:\n            if i == j:\n                arr3.append(j)\n                arr1.remove(j)\n    arr3.extend(arr1)\n    return arr3\n",
            "def relativeSortArray(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # create a dictionary of the elements in arr2\n    d = {}\n    for i in arr2:\n        d[i] = 0\n    # count the number of times each element appears in arr1\n    for i in arr1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    # create a list of the elements in arr2\n    l = []\n    for i in arr2:\n        l.extend([i] * d[i])\n    # create a list of the elements in arr1 that are not in arr2\n    l2 = []\n    for i in arr1:\n        if i not in d:\n            l2.append(i)\n    # sort the lists\n    l.sort()\n    l2.sort()\n    # return the combined list\n    return l + l2\n",
            "def relativeSortArray(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    # create a dictionary of the elements in arr2\n    d = {}\n    for i in arr2:\n        d[i] = 0\n    # count the number of elements in arr1 that are in arr2\n    for i in arr1:\n        if i in d:\n            d[i] += 1\n    # create a list of the elements in arr1 that are not in arr2\n    l = []\n    for i in arr1:\n        if i not in d:\n            l.append(i)\n    # sort the list of elements in arr1 that are not in arr2\n    l.sort()\n    # add the elements in arr2 to the list\n    for i in arr2:\n        for j in range(d[i]):\n            l.append(i)\n    return l\n",
            "def relativeSortArray(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    arr1.sort()\n    arr1.sort(key=lambda x: arr2.index(x) if x in arr2 else x)\n    return arr1\n",
            "def relativeSortArray(arr1, arr2):\n    \"\"\"\n    :type arr1: List[int]\n    :type arr2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    arr1.sort()\n    arr1_sorted = []\n    for i in arr2:\n        arr1_sorted.extend(arr1[:arr1.index(i)])\n        arr1_sorted.append(i)\n        arr1 = arr1[arr1.index(i)+1:]\n    arr1_sorted.extend(arr1)\n    return arr1_sorted\n",
            "def relativeSort(arr1, arr2):\n    # Write your code here\n    arr1.sort()\n    arr1.sort(key=lambda x: arr2.index(x) if x in arr2 else x)\n    return arr1\n",
            "def relativeSort(arr1, arr2):\n    arr1.sort()\n    arr1_sorted = []\n    for i in arr2:\n        arr1_sorted.extend(arr1.count(i) * [i])\n        arr1.remove(i)\n    arr1_sorted.extend(arr1)\n    return arr1_sorted\n"
        ],
        "results": 10
    },
    {
        "id": "852",
        "source": "leetcodeTitles",
        "source_id": "429",
        "url": "https://leetcode.com/problems/n-ary-tree-level-order-traversal/",
        "language": "python",
        "query": "N-ary Tree Level Order Traversal",
        "snippets": [
            "def levelOrder(root):\n    if root is None:\n        return\n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        print(node.val, end=' ')\n        for child in node.children:\n            queue.append(child)\n    print()\n",
            "def levelOrder(root):\n    if root is None:\n        return\n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        print(node.val, end=' ')\n        for child in node.children:\n            queue.append(child)\n    print()\n    return\n",
            "def levelOrder(root):\n    if root is None:\n        return\n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        print(node.val, end=' ')\n        for child in node.children:\n            queue.append(child)\n",
            "def levelOrder(self, root):\n    if root is None:\n        return []\n    queue = [root]\n    result = []\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            for child in node.children:\n                queue.append(child)\n        result.append(level)\n    return result\n",
            "def levelOrder(self, root):\n    if not root:\n        return []\n    res = []\n    queue = [root]\n    while queue:\n        res.append([node.val for node in queue])\n        queue = [child for node in queue for child in (node.children if node.children else [])]\n    return res\n",
            "def levelOrder(self, root):\n    if not root:\n        return []\n    queue = [root]\n    res = []\n    while queue:\n        level = []\n        for i in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            for child in node.children:\n                queue.append(child)\n        res.append(level)\n    return res\n",
            "def levelOrder(root):\n    if not root:\n        return []\n    queue = [root]\n    res = []\n    while queue:\n        level = []\n        for i in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            for child in node.children:\n                queue.append(child)\n        res.append(level)\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "853",
        "source": "leetcodeTitles",
        "source_id": "481",
        "url": "https://leetcode.com/problems/magical-string/",
        "language": "python",
        "query": "Magical String",
        "snippets": [
            "def magicalString(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 961\n    if n == 13:\n        return 1597\n    if n == 14:\n        return 2584\n    if n == 15:\n        return 4181\n    if n == 16:\n        return 6765\n    if n == 17:\n        return 10946\n    if n == 18:\n        return 17711\n    if n == 19:\n        return 28657\n    if n == 20:\n        return 46368\n    if n == 21:\n        return 75025\n    if n == 22:\n        return 121393\n    if n == 23:\n        return 196418\n    if n == 24:\n        return 317811\n    if n == 25:\n        return 514229\n    if n == 26:\n        return 832040\n    if n == 27:\n        return 1346269\n    if n == 28:\n        return 2178309\n    if n == 29:\n        return 3524578\n    if n == 30:\n        return 5702887\n    if n == 31:\n        return 9227465\n    if n == 32:\n        return 14930352\n    if n == 33:\n        return 24157817\n    if n == 34:\n        return 39088169\n    if n == 35:\n        return 63245986\n    if n == 36:\n        return 102334155\n    if n == 37:\n        return 165580141\n    if n == 38:\n        return 267914296\n    if n == 39:\n        return 433494437\n",
            "def magicalString(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 924\n    if n == 13:\n        return 1699\n    if n == 14:\n        return 2904\n    if n == 15:\n        return 4809\n    if n == 16:\n        return 8179\n    if n == 17:\n        return 13529\n    if n == 18:\n        return 23529\n    if n == 19:\n        return 39729\n    if n == 20:\n        return 69729\n    if n == 21:\n        return 129929\n    if n == 22:\n        return 239929\n    if n == 23:\n        return 499929\n    if n == 24:\n        return 999929\n    if n == 25:\n        return 1999929\n    if n == 26:\n        return 3999929\n    if n == 27:\n        return 7999929\n    if n == 28:\n        return 15999929\n    if n == 29:\n        return 31999929\n    if n == 30:\n        return 63999929\n    if n == 31:\n        return 127999929\n    if n == 32:\n        return 255999929\n    if n == 33:\n        return 511999929\n    if n == 34:\n        return 1023999929\n    if n == 35:\n        return 2047999929\n    if n == 36:\n        return 4095999929\n    if n == 37:\n        return 8191999929\n    if n == 38:\n        return 16383999929\n    if n == 39:\n        return 32767\n",
            "def magicalString(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 924\n    if n == 13:\n        return 1699\n    if n == 14:\n        return 2904\n    if n == 15:\n        return 4913\n    if n == 16:\n        return 8096\n    if n == 17:\n        return 13649\n    if n == 18:\n        return 22544\n    if n == 19:\n        return 36809\n    if n == 20:\n        return 62404\n    if n == 21:\n        return 104913\n    if n == 22:\n        return 176400\n    if n == 23:\n        return 290400\n    if n == 24:\n        return 486249\n    if n == 25:\n        return 756104\n    if n == 26:\n        return 1205813\n    if n == 27:\n        return 1856192\n    if n == 28:\n        return 2827104\n    if n == 29:\n        return 4100000\n    if n == 30:\n        return 5965649\n    if n == 31:\n        return 8590024\n    if n == 32:\n        return 12752064\n    if n == 33:\n        return 18561924\n    if n == 34:\n        return 27004049\n    if n == 35:\n        return 38898064\n    if n == 36:\n        return 54836481\n    if n == 37:\n        return 76948104\n    if n == 38:\n        return 107375104\n    if n == 39:\n",
            "def main():\n    n = int(input())\n    s = input()\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            ans += 1\n    print(ans)\n",
            "def magicalString(n):\n    s = '12'\n    for i in range(3, n + 1):\n        s += '21'\n    return s[:n]\n"
        ],
        "results": 10
    },
    {
        "id": "854",
        "source": "leetcodeTitles",
        "source_id": "686",
        "url": "https://leetcode.com/problems/repeated-string-match/",
        "language": "python",
        "query": "Repeated String Match",
        "snippets": [
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    if B in A:\n        return 1\n    if B in A * 2:\n        return 2\n    if B in A * 3:\n        return 3\n    if B in A * 4:\n        return 4\n    if B in A * 5:\n        return 5\n    if B in A * 6:\n        return 6\n    if B in A * 7:\n        return 7\n    if B in A * 8:\n        return 8\n    if B in A * 9:\n        return 9\n    if B in A * 10:\n        return 10\n    return -1\n",
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    if B in A:\n        return 1\n    if B in A*2:\n        return 2\n    if B in A*3:\n        return 3\n    if B in A*4:\n        return 4\n    if B in A*5:\n        return 5\n    if B in A*6:\n        return 6\n    if B in A*7:\n        return 7\n    if B in A*8:\n        return 8\n    if B in A*9:\n        return 9\n    if B in A*10:\n        return 10\n    if B in A*11:\n        return 11\n    if B in A*12:\n        return 12\n    if B in A*13:\n        return 13\n    if B in A*14:\n        return 14\n    if B in A*15:\n        return 15\n    if B in A*16:\n        return 16\n    if B in A*17:\n        return 17\n    if B in A*18:\n        return 18\n    if B in A*19:\n        return 19\n    if B in A*20:\n        return 20\n    if B in A*21:\n        return 21\n    if B in A*22:\n        return 22\n    if B in A*23:\n        return 23\n    if B in A*24:\n        return 24\n    if B in A*25:\n        riturn 25\n    if B in A*26:\n        return 26\n    if B in A*27:\n        return 27\n    if B in A*28:\n        return 28\n    if B in A*29:\n        return 29\n    if B in A*30:\n        return 30\n    if B in A*31:\n        return 31\n    if B in A*32:\n        return 32\n    if B in A*33:\n        return 33\n    if B in A*34:\n        return 34\n    if B in A*35:\n        return 35\n    if B in A*36:\n",
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    if B in A:\n        return 1\n    ef B in A*2:\n        return 2\n    if B in A*3:\n        return 3\n    if B in A*4:\n        return 4\n    if B in A*5:\n        return 5\n    if B in A*6:\n        return 6\n    if B in A*7:\n        return 7\n    if B in A*8:\n        return 8\n    if B in A*9:\n        return 9\n    if B in A*10:\n        return 10\n    if B in A*11:\n        return 11\n    if B in A*12:\n        return 12\n    if B in A*13:\n        return 13\n    if B in A*14:\n        return 14\n    if B in A*15:\n        return 15\n    if B in A*16:\n        return 16\n    if B in A*17:\n        return 17\n    if B in A*18:\n        return 18\n    if B in A*19:\n        return 19\n    if B in A*20:\n        return 20\n    if B in A*21:\n        return 21\n    if B in A*22:\n        return 22\n    if B in A*23:\n        return 23\n    if B in A*241\n",
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    count = 1\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the\n",
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    # A is the string we are looking for, B is the string we are looking in\n    # A is the longer string, B is the shorter string\n    if A == B:\n        return 1\n    if A in B:\n        return 1\n    if B in A:\n        return 1\n    if B in A*2:\n        return 2\n    if B in A*3:\n        return 3\n    if B in A*4:\n        return 4\n    if B in A*5:\n        return 5\n    if B in A*6:\n        return 6\n    if B in A*7:\n        return 7\n    if B in A*8:\n        return 8\n    if B in A*9:\n        return 9\n    if B in A*10:\n        return 10\n    if B in A*11:\n        return 11\n    if B in A*12:\n        return 12\n    if B in A*13:\n        return 13\n    if B in A*14:\n        return 14\n    if B in A*15:\n        return 15\n    if B in A*16:\n        return 16\n    if B in A*17:\n        return 17\n    if B in A*18:\n        return 18\n    if B in A*19:\n        return 19\n    if B in A*20:\n        return 20\n    if B in A*21:\n        return 21\n    if B in A*22:\n        return 22\n    if B in A*23:\n        return 23\n    if B in A*24:\n        return 24\n    if B in A*25:\n        return 25\n    if B in A*26:\n        return 26\n    if B in A*27:\n        return 27\n    if B in A*28:\n        return 28\n    if B in A*29:\n        return 29\n    if B in A*30:\n        return 30\n    if B in A*31:\n        return 3:\n    if B in A*\n        return 24\n    if B in A*25:\n        return 25\n    if B in A*26:\n        return 26\n    if B in A*27:\n        return 27\n    if B in A*28:\n        return 28\n    if B in A*29:\n        return 29\n    if B in A*30:\n        return 30\n    if B in A*31:\n        return 31\n    if B in A*32:\n        return 32\n    if B in A*33:\n        return 33\n    if B in A*34:\n        return 34\n    if B in A*35:\n        return 35\n    if B in A*36:\n",
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    if B in A:\n        return 1\n    else:\n        for i in range(2, len(B)//len(A)+2):\n            if B in A*i:\n                return i\n    return -1\n",
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    while B not in A:\n        A += A\n        count += 1\n        if A.find(B) != -1:\n            return count\n    return count + A.count(B) // len(B)\n",
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    # A is the string to be repeated\n    # B is the string to be matched\n    # n is the number of times A is repeated\n    # m is the number of times B is repeated\n    # k is the number of times A is repeated before B is matched\n    n = len(A)\n    m = len(B)\n    k = 0\n    while len(A) < m:\n        A += A\n        k += 1\n    if B in A:\n        return k\n    else:\n        return -1\n",
            "def repeatedStringMatch(A, B):\n    \"\"\"\n    :type A: str\n    :type B: str\n    :rtype: int\n    \"\"\"\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    count = 1\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the string to match A to\n    # count is the number of times A needs to be repeated to match B\n    # A is the string to match\n    # B is the\n"
        ],
        "results": 9
    },
    {
        "id": "855",
        "source": "leetcodeTitles",
        "source_id": "1550",
        "url": "https://leetcode.com/problems/three-consecutive-odds/",
        "language": "python",
        "query": "Three Consecutive Odds",
        "snippets": [
            "def threeConsecutiveOdds(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 != 0:\n            count += 1\n        else:\n            count = 0\n        if count == 3:\n            return True\n    return False\n",
            "def three_consecutive_odds(arr):\n    for i in range(len(arr) - 2):\n        if arr[i] % 2 == 1 and arr[i + 1] % 2 == 1 and arr[i + 2] % 2 == 1:\n            return True\n    return False\n",
            "def three_consecutive_odds(nums):\n    for i in range(len(nums) - 2):\n        if nums[i] % 2 == 1 and nums[i + 1] % 2 == 1 and nums[i + 2] % 2 == 1:\n            return True\n    return False\n",
            "def threeConsecutiveOdds(arr):\n    for i in range(len(arr) - 2):\n        if arr[i] % 2 == 1 and arr[i + 1] % 2 == 1 and arr[i + 2] % 2 == 1:\n            return True\n    return False\n",
            "def three_consecutive_odds(nums):\n    for i in range(len(nums) - 2):\n        if nums[i] % 2 != 0 and nums[i + 1] % 2 != 0 and nums[i + 2] % 2 != 0:\n            return True\n    return False\n",
            "def threeConsecutiveOdds(arr):\n    for i in range(len(arr)):\n        if arr[i] % 2 != 0:\n            if i + 2 < len(arr):\n                if arr[i + 1] % 2 != 0 and arr[i + 2] % 2 != 0:\n                    return True\n    return False\n",
            "def threeConsecutiveOdds(arr):\n    for i in range(len(arr)-2):\n        if arr[i] % 2 != 0 and arr[i+1] % 2 != 0 and arr[i+2] % 2 != 0:\n            return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "856",
        "source": "leetcodeTitles",
        "source_id": "923",
        "url": "https://leetcode.com/problems/3sum-with-multiplicity/",
        "language": "python",
        "query": "3Sum With Multiplicity",
        "snippets": [
            "def threeSumMulti(A, target):\n    A.sort()\n    count = 0\n    for i in range(len(A)):\n        j = i + 1\n        k = len(A) - 1\n        while j < k:\n            if A[i] + A[j] + A[k] == target:\n                count += 1\n                j += 1\n                k -= 1\n            elif A[i] + A[j] + A[k] > target:\n                k -= 1\n            else:\n                j += 1\n    return count\n",
            "def threeSumMulti(A, target):\n    A.sort()\n    count = 0\n    for i in range(len(A)):\n        j = i + 1\n        k = len(A) - 1\n        while j < k:\n            if A[i] + A[j] + A[k] < target:\n                j += 1\n            elif A[i] + A[j] + A[k] > target:\n                k -= 1\n            else:\n                count += 1\n                j += 1\n                k -= 1\n    return count\n",
            "def threeSumMulti(A, target):\n    A.sort()\n    res = 0\n    for i in range(len(A)):\n        j, k = i + 1, len(A) - 1\n        while j < k:\n            if A[i] + A[j] + A[k] < target:\n                j += 1\n            elif A[i] + A[j] + A[k] > target:\n                k -= 1\n            else:\n                res += 1\n                j += 1\n                k -= 1\n    return res\n",
            "def threeSum(nums):\n    nums.sort()\n    res = []\n    for i in range(len(nums)):\n        if i > 0 and nums[i] == nums[i-1]:\n            continue\n        l, r = i+1, len(nums)-1\n        while l < r:\n            s = nums[i] + nums[l] + nums[r]\n            if s < 0:\n                l += 1\n            elif s > 0:\n                r -= 1\n            else:\n                res.append([nums[i], nums[l], nums[r]])\n                while l < r and nums[l] == nums[l+1]:\n                    l += 1\n                while l < r and nums[r] == nums[r-1]:\n                    r -= 1\n                l += 1\n                r -= 1\n    return res\n",
            "def threeSumMulti(A, target):\n    A.sort()\n    count = 0\n    for i in range(len(A)):\n        j, k = i + 1, len(A) - 1\n        while j < k:\n            if A[i] + A[j] + A[k] < target:\n                j += 1\n            elif A[i] + A[j] + A[k] > target:\n                k -= 1\n            else:\n                count += 1\n                j += 1\n                k -= 1\n    return count\n",
            "def threeSumMulti(A, target):\n    A.sort()\n    d = {}\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] + A[j] not in d:\n                d[A[i] + A[j]] = 1\n            else:\n                d[A[i] + A[j]] += 1\n    res = 0\n    for i in range(len(A)):\n        if target - A[i] in d:\n            res += d[target - A[i]]\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "857",
        "source": "leetcodeTitles",
        "source_id": "1652",
        "url": "https://leetcode.com/problems/defuse-the-bomb/",
        "language": "python",
        "query": "Defuse the Bomb",
        "snippets": [
            "def main():\n    # Get the input\n    input_string = input(\"Enter the string: \")\n    # Get the key\n    key = int(input(\"Enter the key: \"))\n    # Decrypt the string\n    decrypted_string = decrypt(input_string, key)\n    # Print the decrypted string\n    print(\"The decrypted string is: \" + decrypted_string)\n",
            "def main():\n    print(\"Defuse the Bomb\")\n    print(\"1. Start\")\n    print(\"2. Quit\")\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        print(\"You have chosen to start\")\n        print(\"1. Start\")\n        print(\"2. Quit\")\n        choice = int(input(\"Enter your choice: \"))\n        if choice == 1:\n            print(\"You have chosen to start\")\n            print(\"1. Start\")\n            print(\"2. Quit\")\n            choice = int(input(\"Enter your choice: \"))\n            if choice == 1:\n                print(\"You have chosen to start\")\n                print(\"1. Start\")\n                print(\"2. Quit\")\n                choice = int(input(\"Enter your choice: \"))\n                if choice == 1:\n                    print(\"You have chosen to start\")\n                    print(\"1. Start\")\n                    print(\"2. Quit\")\n                    choice = int(input(\"Enter your choice: \"))\n                    if choice == 1:\n                        print(\"You have chosen to start\")\n                        print(\"1. Start\")\n                        print(\"2. Quit\")\n                        choice = int(input(\"Enter your choice: \"))\n                        if choice == 1:\n                            print(\"You have chosen to start\")\n                            print(\"1. Start\")\n                            print(\"2. Quit\")\n                            choice = int(input(\"Enter your choice: \"))\n                            if choice == 1:\n                                print(\"You have chosen to start\")\n                                print(\"1. Start\")\n                                print(\"2. Quit\")\n                                choice = int(input(\"Enter your choice: \"))\n                                if choice == 1:\n                                    print(\"You have chosen to start\")\n                                    print(\"1. Start\")\n                                    print(\"2. Quit\")\n                                    choice = int(input(\"Enter your choice: \"))\n                                    if choice == 1:\n                                        print(\"You have chosen to start\")\n                                        print(\"1. Start\")\n                                        print(\"2. Quit\")\n                                        choice = int(input(\"Enter your choice: \"))\n                                        if choice == 1:\n                                            print(\"You have\n",
            "def main():\n    # Get the input\n    input_str = input(\"Enter the string: \")\n    # Get the key\n    key = int(input(\"Enter the key: \"))\n    # Decrypt the string\n    decrypted_str = decrypt(input_str, key)\n    # Print the decrypted string\n    print(\"Decrypted string: \" + decrypted_str)\n",
            "def main():\n    # Get the input\n    input_string = input(\"Enter the string: \")\n    # Get the key\n    key = int(input(\"Enter the key: \"))\n    # Print the output\n    print(\"The decrypted string is: \", decrypt(input_string, key))\n",
            "def main():\n    # Get the number of the bomb\n    bomb_number = int(input(\"Enter the number of the bomb: \"))\n    # Get the number of the key\n    key_number = int(input(\"Enter the number of the key: \"))\n    # Get the number of the fuse\n    fuse_number = int(input(\"Enter the number of the fuse: \"))\n    # Calculate the number of the bomb\n    bomb_number = bomb_number * key_number\n    # Calculate the number of the key\n    key_number = key_number * fuse_number\n    # Calculate the number of the fuse\n    fuse_number = fuse_number * bomb_number\n    # Print the result\n    print(\"The result is:\", bomb_number + key_number + fuse_number)\n",
            "def main():\n    # Get the bomb's serial number\n    serial = input(\"Enter the bomb's serial number: \")\n\n    # Get the bomb's 3 digit fuse code\n    fuse = input(\"Enter the 3 digit fuse code: \")\n\n    # Get the number of batteries\n    batteries = int(input(\"Enter the number of batteries: \"))\n\n    # Get the number of digits in the serial number\n    digits = len(serial)\n\n    # Get the number of digits in the fuse code\n    fuse_digits = len(fuse)\n\n    # Get the number of digits in the serial number\n    batteries_digits = len(str(batteries))\n\n    # Get the number of digits in the serial number\n    serial_digits = len(str(serial))\n\n    # Get the number of digits in the serial number\n    fuse_digits = len(str(fuse))\n\n    # Get the number of digits in the serial number\n    batteries_digits = len(str(batteries))\n\n    # Get the number of digits in the serial number\n    serial_digits = len(str(serial))\n\n    # Get the number of digits in the serial number\n    fuse_digits = len(str(fuse))\n\n    # Get the number of digits in the serial number\n    batteries_digits = len(str(batteries))\n\n    # Get the number of digits in the serial number\n    serial_digits = len(str(serial))\n\n    # Get the number of digits in the serial number\n    fuse_digits = len(str(fuse))\n\n    # Get the number of digits in the serial number\n    batteries_digits = len(str(batteries))\n\n    # Get the number of digits in the serial number\n    serial_digits = len(str(serial))\n\n    # Get the number of digits in the serial number\n    fuse_digits = len(str(fuse))\n\n    # Get the number of digits in the serial number\n    batteries_digits = len(str(batteries))\n\n    # Get the number of digits in the serial number\n    serial_digits = len(str(serial))\n\n    # Get the number of digits in the serial\n",
            "def main():\n    # Get the input\n    input = get_input()\n    # Get the number of rows and columns\n    rows = int(input[0])\n    columns = int(input[1])\n    # Get the number of bombs\n    bombs = int(input[2])\n    # Get the number of safe squares\n    safe_squares = int(input[3])\n    # Get the bomb locations\n    bomb_locations = get_bomb_locations(input[4:])\n    # Get the safe locations\n    safe_locations = get_safe_locations(input[4:], rows, columns, bombs)\n    # Print the safe locations\n    print_safe_locations(safe_locations)\n    # Print the bomb locations\n    print_bomb_locations(bomb_locations)\n    # Print the number of safe squares\n    print_safe_squares(safe_squares)\n    # Print the number of bombs\n    print_bombs(bombs)\n    # Print the number of rows\n    print_rows(rows)\n    # Print the number of columns\n    print_columns(columns)\n    # Print the number of safe squares\n    print_safe_squares(safe_squares)\n    # Print the number of bombs\n    print_bombs(bombs)\n    # Print the number of rows\n    print_rows(rows)\n    # Print the number of columns\n    print_columns(columns)\n    # Print the number of safe squares\n    print_safe_squares(safe_squares)\n    # Print the number of bombs\n    print_bombs(bombs)\n    # Print the number of rows\n    print_rows(rows)\n    # Print the number of columns\n    print_columns(columns)\n    # Print the number of safe squares\n    print_safe_squares(safe_squares)\n    # Print the number of bombs\n    print_bombs(bombs)\n    # Print the number of rows\n    print_rows(rows)\n    # Print the number of columns\n    print_columns(columns)\n    # Print the number of safe squares\n    print_\n",
            "def main():\n    print(\"Defuse the Bomb\")\n    print(\"You have 3 tries to guess the correct code\")\n    print(\"The code is a 4 digit number\")\n    print(\"The code can only contain digits from 0 to 9\")\n    print(\"The code cannot contain duplicate digits\")\n    print(\"The code cannot contain 0 as the last digit\")\n    print(\"Good luck!\")\n    print()\n\n    code = \"1234\"\n    guess = \"\"\n    guess_count = 0\n    guess_limit = 3\n    out_of_guesses = False\n\n    while guess != code and not out_of_guesses:\n        if guess_count < guess_limit:\n            guess = input(\"Enter guess: \")\n            guess_count += 1\n        else:\n            out_of_guesses = True\n\n    if out_of_guesses:\n        print(\"You have run out of guesses!\")\n    else:\n        print(\"You have guessed correctly!\")\n"
        ],
        "results": 9
    },
    {
        "id": "858",
        "source": "leetcodeTitles",
        "source_id": "1668",
        "url": "https://leetcode.com/problems/maximum-repeating-substring/",
        "language": "python",
        "query": "Maximum Repeating Substring",
        "snippets": [
            "def max_repeating(str):\n    max_len = 0\n    max_sub = ''\n    for i in range(len(str)):\n        for j in range(i+1, len(str)+1):\n            sub = str[i:j]\n            if str.count(sub) > 1 and len(sub) > max_len:\n                max_len = len(sub)\n                max_sub = sub\n    return max_sub\n",
            "def max_repeating(text):\n    \"\"\"\n    Given a string, find the maximum repeating substring.\n    \"\"\"\n    max_len = 0\n    max_str = ''\n    for i in range(len(text)):\n        for j in range(i+1, len(text)+1):\n            substr = text[i:j]\n            if substr in text[j:]:\n                if len(substr) > max_len:\n                    max_len = len(substr)\n                    max_str = substr\n    return max_str\n",
            "def max_repeating(text):\n    \"\"\"\n    Given a string, find the maximum repeating substring.\n    \"\"\"\n    max_len = 0\n    max_str = ''\n    for i in range(len(text)):\n        for j in range(i+1, len(text)+1):\n            if text[i:j] * (j-i) == text:\n                if j-i > max_len:\n                    max_len = j-i\n                    max_str = text[i:j]\n    return max_str\n",
            "def max_repeating(str1):\n    max_len = 0\n    max_sub = ''\n    for i in range(len(str1)):\n        for j in range(i+1, len(str1)+1):\n            sub = str1[i:j]\n            if sub in str1[j:]:\n                if len(sub) > max_len:\n                    max_len = len(sub)\n                    max_sub = sub\n    return max_sub\n",
            "def max_repeating(strng):\n    \"\"\"\n    Given a string, find the maximum repeating substring.\n    \"\"\"\n    max_len = 0\n    max_str = ''\n    for i in range(len(strng)):\n        for j in range(i+1, len(strng)+1):\n            substr = strng[i:j]\n            if substr in strng[j:]:\n                if len(substr) > max_len:\n                    max_len = len(substr)\n                    max_str = substr\n    return max_str\n",
            "def max_repeat(s):\n    \"\"\"\n    Given a string, find the longest substring that is repeated.\n    \"\"\"\n    max_len = 0\n    max_str = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i:j+1] in s[j+1:]:\n                if len(s[i:j+1]) > max_len:\n                    max_len = len(s[i:j+1])\n                    max_str = s[i:j+1]\n    return max_str\n",
            "def max_repeating(text):\n    \"\"\"\n    Given a string, find the maximum repeating substring.\n    \"\"\"\n    if not text:\n        return None\n    max_len = 0\n    max_str = \"\"\n    for i in range(len(text)):\n        for j in range(i+1, len(text)+1):\n            substr = text[i:j]\n            if substr in text[j:]:\n                if len(substr) > max_len:\n                    max_len = len(substr)\n                    max_str = substr\n    return max_str\n",
            "def max_repeat(s):\n    \"\"\"\n    Given a string, find the longest substring that is repeated.\n    \"\"\"\n    if len(s) == 1:\n        return s\n    max_repeat = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j] * (j-i):\n                if len(s[i:j]) > len(max_repeat):\n                    max_repeat = s[i:j]\n    return max_repeat\n",
            "def max_repeating(strng):\n    \"\"\"\n    Given a string, find the longest substring which is repeated at least 3 times.\n    \"\"\"\n    max_len = 0\n    max_str = ''\n    for i in range(len(strng)):\n        for j in range(i+1, len(strng)+1):\n            substr = strng[i:j]\n            if substr in strng[j:]:\n                if len(substr) > max_len:\n                    max_len = len(substr)\n                    max_str = substr\n    return max_str\n",
            "def max_repeating(str):\n    \"\"\"\n    Given a string, find the length of the longest substring that is the same\n    in reverse.\n    :param str: string\n    :return: int\n    \"\"\"\n    if not str:\n        return 0\n    max_len = 1\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i:j+1] == str[i:j+1][::-1]:\n                max_len = max(max_len, j-i+1)\n    return max_len\n"
        ],
        "results": 10
    },
    {
        "id": "859",
        "source": "leetcodeTitles",
        "source_id": "33",
        "url": "https://leetcode.com/problems/search-in-rotated-sorted-array/",
        "language": "python",
        "query": "Search in Rotated Sorted Array",
        "snippets": [
            "def search(nums, target):\n    if not nums:\n        return -1\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target <= nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] <= target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1\n",
            "def search(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return -1\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target <= nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] <= target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1\n",
            "def search(nums, target):\n    if not nums:\n        return -1\n    if len(nums) == 1:\n        return 0 if nums[0] == target else -1\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[left] <= nums[mid]:\n            if nums[left] <= target <= nums[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            if nums[mid] <= target <= nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return -1\n",
            "def search(nums, target):\n    if not nums:\n        return -1\n    if len(nums) == 1:\n        return 0 if nums[0] == target else -1\n    if nums[0] < nums[-1]:\n        return binary_search(nums, target)\n    else:\n        return binary_search(nums[::-1], target)\n"
        ],
        "results": 10
    },
    {
        "id": "860",
        "source": "leetcodeTitles",
        "source_id": "833",
        "url": "https://leetcode.com/problems/find-and-replace-in-string/",
        "language": "python",
        "query": "Find And Replace in String",
        "snippets": [
            "def find_and_replace(text, word_to_find, word_to_replace):\n    return text.replace(word_to_find, word_to_replace)\n",
            "def find_replace(string, find, replace):\n    return string.replace(find, replace)\n",
            "def find_and_replace(sentence, find, replace):\n    return sentence.replace(find, replace)\n",
            "def find_and_replace(input_string, find, replace):\n    return input_string.replace(find, replace)\n",
            "def find_and_replace(sentence, word_to_find, word_to_replace):\n    sentence = sentence.split()\n    for i in range(len(sentence)):\n        if sentence[i] == word_to_find:\n            sentence[i] = word_to_replace\n    return ' '.join(sentence)\n",
            "def find_and_replace(text, word, replace):\n    return text.replace(word, replace)\n",
            "def find_and_replace(text, word, replacement):\n    \"\"\"\n    Finds and replaces a word in a string\n    \"\"\"\n    return text.replace(word, replacement)\n",
            "def find_and_replace(sentence, word, new_word):\n    \"\"\"\n    Replace a word in a sentence with a new word.\n    \"\"\"\n    return sentence.replace(word, new_word)\n"
        ],
        "results": 10
    },
    {
        "id": "861",
        "source": "leetcodeTitles",
        "source_id": "962",
        "url": "https://leetcode.com/problems/maximum-width-ramp/",
        "language": "python",
        "query": "Maximum Width Ramp",
        "snippets": [
            "def maxWidthRamp(A):\n    n = len(A)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans = max(ans, j - i + 1)\n    return ans\n",
            "def maxWidthRamp(A):\n    n = len(A)\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans = max(ans, j - i + 1)\n            if A[j] < A[i]:\n                break\n    return ans\n",
            "def maxWidthRamp(A):\n    n = len(A)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if A[j] > A[i]:\n                ans = max(ans, j - i)\n    return ans\n",
            "def maxWidthRamp(a):\n    n = len(a)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] > a[i]:\n                ans = max(ans, j - i)\n    return ans\n"
        ],
        "results": 10
    },
    {
        "id": "862",
        "source": "leetcodeTitles",
        "source_id": "2243",
        "url": "https://leetcode.com/problems/calculate-digit-sum-of-a-string/",
        "language": "python",
        "query": "Calculate Digit Sum of a String",
        "snippets": [
            "def digit_sum(string):\n    sum = 0\n    for i in string:\n        sum += int(i)\n    return sum\n",
            "def digit_sum(string):\n    sum = 0\n    for char in string:\n        sum += int(char)\n    return sum\n",
            "def sum_digits(string):\n    sum = 0\n    for i in string:\n        sum += int(i)\n    return sum\n",
            "def digit_sum(num):\n    sum = 0\n    for i in str(num):\n        sum += int(i)\n    return sum\n"
        ],
        "results": 10
    },
    {
        "id": "863",
        "source": "leetcodeTitles",
        "source_id": "1401",
        "url": "https://leetcode.com/problems/circle-and-rectangle-overlapping/",
        "language": "python",
        "query": "Circle and Rectangle Overlapping",
        "snippets": [
            "def circle_and_rectangle_overlapping(circle, rectangle):\n    \"\"\"\n    Returns True if the circle and rectangle overlap, False otherwise.\n    \"\"\"\n    # Calculate the distance between the circle's center and the rectangle's center.\n    distance = ((circle['x'] - rectangle['x']) ** 2 + (circle['y'] - rectangle['y']) ** 2) ** 0.5\n    # Calculate the sum of the circle's and rectangle's radii.\n    sum_of_radii = circle['radius'] + rectangle['width'] / 2\n    # Return True if the distance is less than the sum of the radii, False otherwise.\n    return distance < sum_of_radii\n",
            "def main():\n    print(\"This program determines whether two circles or rectangles overlap.\")\n    print()\n    print(\"Enter the radius of the first circle or rectangle:\")\n    radius1 = int(input())\n    print(\"Enter the length of the first circle or rectangle:\")\n    length1 = int(input())\n    print(\"Enter the width of the first circle or rectangle:\")\n    width1 = int(input())\n    print(\"Enter the radius of the second circle or rectangle:\")\n    radius2 = int(input())\n    print(\"Enter the length of the second circle or rectangle:\")\n    length2 = int(input())\n    print(\"Enter the width of the second circle or rectangle:\")\n    width2 = int(input())\n    print()\n    print(\"The first circle or rectangle has a radius of\", radius1, \"and a length of\", length1, \"and a width of\", width1)\n    print(\"The second circle or rectangle has a radius of\", radius2, \"and a length of\", length2, \"and a width of\", width2)\n    print()\n    if radius1 == radius2:\n        print(\"The two circles are the same size.\")\n    elif radius1 < radius2:\n        print(\"The first circle is smaller than the second circle.\")\n    elif radius1 > radius2:\n        print(\"The first circle is larger than the second circle.\")\n    if length1 == length2 and width1 == width2:\n        print(\"The two rectangles are the same size.\")\n    elif length1 < length2 and width1 < width2:\n        print(\"The first rectangle is smaller than the second rectangle.\")\n    elif length1 > length2 and width1 > width2:\n        print(\"The first rectangle is larger than the second rectangle.\")\n    elif length1 < length2 and width1 > width2:\n        print(\"The first rectangle is smaller than the second rectangle.\")\n    elif length1 > length2 and width1 < width2:\n        print(\"The first rectangle is larger than the second rectangle.\")\n    elif length1 == length2 and width1 > width2:\n        print(\"The first rectangle is smaller than the second rectangle.\")\n    elif length1 > length2\n",
            "def main():\n    import sys\n    import math\n    import numpy as np\n    from matplotlib import pyplot as plt\n    from matplotlib import patches as mpatches\n    from matplotlib import animation as animation\n    from matplotlib import cm\n    from matplotlib.colors import ListedColormap\n    from matplotlib.colors import LinearSegmentedColormap\n    from matplotlib.colors import BoundaryNorm\n    from matplotlib.colors import Normalize\n    from matplotlib.colors import LogNorm\n    from matplotlib.colors import PowerNorm\n    from matplotlib.colors import SymLogNorm\n    from matplotlib.colors import BoundaryNorm\n    from matplotlib.colors import LogNorm\n    from matplotlib.colors import PowerNorm\n    from matplotlib.colors import SymLogNorm\n    from matplotlib.colors import BoundaryNorm\n    from matplotlib.colors import LogNorm\n    from matplotlib.colors import PowerNorm\n    from matplotlib.colors import SymLogNorm\n    from matplotlib.colors import BoundaryNorm\n    from matplotlib.colors import LogNorm\n    from matplotlib.colors import PowerNorm\n    from matplotlib.colors import SymLogNorm\n    from matplotlib.colors import BoundaryNorm\n    from matplotlib.colors import LogNorm\n    from matplotlib.colors import PowerNorm\n    from matplotlib.colors import SymLogNorm\n    from matplotlib.colors import BoundaryNorm\n    from matplotlib.colors import LogNorm\n    from matplotlib.colors import PowerNorm\n    from matplotlib.colors import SymLogNorm\n    from matplotlib.colors import BoundaryNorm\n    from matplotlib.colors import LogNorm\n    from matplotlib.colors import PowerNorm\n    from matplotlib.colors import SymLogNorm\n    from matplotlib.colors import BoundaryNorm\n    from matplotlib.colors import LogNorm\n    from matplotlib.colors import PowerNorm\n    from matplotlib.colors import\n",
            "def main():\n    import turtle\n    window = turtle.Screen()\n    window.bgcolor(\"lightgreen\")\n    # Draw a circle\n    circle = turtle.Turtle()\n    circle.shape(\"turtle\")\n    circle.color(\"hotpink\")\n    circle.circle(100)\n    # Draw a rectangle\n    rectangle = turtle.Turtle()\n    rectangle.shape(\"classic\")\n    rectangle.color(\"blue\")\n    rectangle.penup()\n    rectangle.goto(-100, -50)\n    rectangle.pendown()\n    rectangle.forward(200)\n    rectangle.left(90)\n    rectangle.forward(100)\n    rectangle.left(90)\n    rectangle.forward(200)\n    rectangle.left(90)\n    rectangle.forward(100)\n    rectangle.left(90)\n    # Check for overlap\n    if circle.distance(rectangle) < (circle.radius() + rectangle.width() / 2):\n        print(\"The circles overlap\")\n    else:\n        print(\"The circles do not overlap\")\n    window.exitonclick()\n",
            "def main():\n    import sys\n    import math\n    import random\n    import pygame\n    from pygame.locals import *\n    from pygame.color import THECOLORS\n    import numpy as np\n    import matplotlib.pyplot as plt\n    from matplotlib.backends.backend_pdf import PdfPages\n    import matplotlib.patches as mpatches\n    from matplotlib.ticker import MultipleLocator, FormatStrFormatter\n    import matplotlib.cm as cm\n    import matplotlib.colors as colors\n    import matplotlib.pyplot as plt\n    import matplotlib.gridspec as gridspec\n    import matplotlib.ticker as ticker\n    import matplotlib.patches as mpatches\n    import matplotlib.lines as mlines\n    import matplotlib.pyplot as plt\n    import matplotlib.image as mpimg\n    import matplotlib.cm as cm\n    import matplotlib.colors as colors\n    import matplotlib.gridspec as gridspec\n    import matplotlib.ticker as ticker\n    import matplotlib.patches as mpatches\n    import matplotlib.lines as mlines\n    import matplotlib.pyplot as plt\n    import matplotlib.image as mpimg\n    import matplotlib.cm as cm\n    import matplotlib.colors as colors\n    import matplotlib.gridspec as gridspec\n    import matplotlib.ticker as ticker\n    import matplotlib.patches as mpatches\n    import matplotlib.lines as mlines\n    import matplotlib.pyplot as plt\n    import matplotlib.image as mpimg\n    import matplotlib.cm as cm\n    import matplotlib.colors as colors\n    import matplotlib.gridspec as gridspec\n    import matplotlib.ticker as ticker\n    import matplotlib.patches as mpatches\n    import matplotlib.lines as mlines\n    import matplotlib.pyplot as plt\n    import matplotlib.image as mpimg\n    import matplotlib\n",
            "def main():\n    import sys\n    import math\n    import turtle\n    import random\n    import time\n    from tkinter import *\n    from tkinter import messagebox\n    from tkinter import filedialog\n    from tkinter import simpledialog\n    from tkinter import colorchooser\n    from tkinter import font\n    from tkinter import ttk\n    from tkinter import scrolledtext\n    from tkinter import Menu\n    from tkinter import messagebox\n    from tkinter import ttk\n    from tkinter import Canvas\n    from tkinter import PhotoImage\n    from tkinter import Label\n    from tkinter import Button\n    from tkinter import Entry\n    from tkinter import Spinbox\n    from tkinter import Checkbutton\n    from tkinter import Radiobutton\n    from tkinter import Listbox\n    from tkinter import Text\n    from tkinter import Tk\n    from tkinter import Toplevel\n    from tkinter import Frame\n    from tkinter import LabelFrame\n    from tkinter import Scrollbar\n    from tkinter import Canvas\n    from tkinter import Entry\n    from tkinter import StringVar\n    from tkinter import IntVar\n    from tkinter import DoubleVar\n    from tkinter import BooleanVar\n    from tkinter import VScrollbar\n    from tkinter import HScrollbar\n    from tkinter import TkVersion\n    from tkinter import ttk\n    from tkinter import messagebox\n    from tkinter import simpledialog\n    from tkinter import colorchooser\n    from tkinter import font\n    from tkinter import ttk\n    from tkinter import scrolledtext\n    from tkinter import Menu\n    from tkinter import messagebox\n    from tkinter import ttk\n    from tkinter import Canvas\n    from tkinter import PhotoImage\n    from tkinter import Label\n    from tkinter import Button\n    from tkinter import Entry\n    from tkinter import Spinbox\n    from tkinter import Checkbutton\n    from tkinter import Rad\n",
            "def main():\n    import sys\n    import math\n    import turtle\n    import time\n    import random\n    import argparse\n    from tkinter import *\n    from tkinter import messagebox\n    from tkinter import simpledialog\n    from tkinter import filedialog\n    from tkinter import colorchooser\n    from tkinter import font\n    from tkinter import messagebox\n    from tkinter import ttk\n    from tkinter import scrolledtext\n    from tkinter import Menu\n    from tkinter import Spinbox\n    from tkinter import Checkbutton\n    from tkinter import Radiobutton\n    from tkinter import OptionMenu\n    from tkinter import ttk\n    from tkinter import Canvas\n    from tkinter import PhotoImage\n    from tkinter import Label\n    from tkinter import Button\n    from tkinter import Entry\n    from tkinter import LabelFrame\n    from tkinter import Frame\n    from tkinter import Listbox\n    from tkinter import Scrollbar\n    from tkinter import PanedWindow\n    from tkinter import Tk\n    from tkinter import Toplevel\n    from tkinter import Text\n    from tkinter import Tkinter\n    from tkinter import ttk\n    from tkinter import messagebox\n    from tkinter import simpledialog\n    from tkinter import filedialog\n    from tkinter import colorchooser\n    from tkinter import font\n    from tkinter import messagebox\n    from tkinter import ttk\n    from tkinter import scrolledtext\n    from tkinter import Menu\n    from tkinter import Spinbox\n    from tkinter import Checkbutton\n    from tkinter import Radiobutton\n    from tkinter import OptionMenu\n    from tkinter import ttk\n    from tkinter import Canvas\n    from tkinter import PhotoImage\n    from tkinter import Label\n    from tkinter import Button\n    from tkinter import Entry\n    from tkinter import LabelFrame\n    from tkinter import Frame\n    from tkinter import Listbox\n"
        ],
        "results": 7
    },
    {
        "id": "864",
        "source": "leetcodeTitles",
        "source_id": "2068",
        "url": "https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/",
        "language": "python",
        "query": "Check Wheter Two Strings are Almost Equivalent",
        "snippets": [
            "def check(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i] and s1[i] != '*' and s2[i] != '*':\n            return False\n    return True\n",
            "def check(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i] and s1[i] != '?' and s1[i] != '*':\n            return False\n    return True\n",
            "def check(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True\n",
            "def check(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i] and s1[i] != '?' and s2[i] != '?':\n            return False\n    return True\n",
            "def check_equivalent(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i] and s1[i] != '?' and s2[i] != '?':\n            return False\n    return True\n"
        ],
        "results": 10
    },
    {
        "id": "865",
        "source": "leetcodeTitles",
        "source_id": "258",
        "url": "https://leetcode.com/problems/add-digits/",
        "language": "python",
        "query": "Add Digits",
        "snippets": [
            "def add_digits(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return add_digits(sum(map(int, str(n))))\n",
            "def add_digits(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return add_digits(sum(int(i) for i in str(n)))\n",
            "def add_digits(n):\n    \"\"\"\n    :param n: int\n    :return: int\n    \"\"\"\n    if n < 10:\n        return n\n    else:\n        return add_digits(sum([int(i) for i in str(n)]))\n",
            "def add_digits(n):\n    if n < 10:\n        return n\n    else:\n        return add_digits(sum([int(i) for i in str(n)]))\n",
            "def add_digits(n):\n    if n < 10:\n        return n\n    else:\n        return add_digits(sum(int(i) for i in str(n)))\n"
        ],
        "results": 10
    },
    {
        "id": "866",
        "source": "leetcodeTitles",
        "source_id": "2104",
        "url": "https://leetcode.com/problems/sum-of-subarray-ranges/",
        "language": "python",
        "query": "Sum of Subarray Ranges",
        "snippets": [
            "def sumOfSubarrayRanges(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans += arr[i]\n        else:\n            ans += arr[i] - arr[i-1]\n    return ans\n",
            "def sumSubarrayMin(A):\n    n = len(A)\n    dp = [0] * n\n    dp[0] = A[0]\n    for i in range(1, n):\n        dp[i] = dp[i-1] + A[i]\n    ans = dp[n-1]\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = min(ans, dp[i]*(dp[j]-dp[j-i]))\n    return ans\n",
            "def sum_of_subarray_ranges(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    nums.append(0)\n    nums.append(0)\n    nums.sort()\n    res = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            res += nums[i] * (nums[i+1] - nums[i-1])\n    return res\n",
            "def sum_subarray_ranges(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    res = []\n    for i in range(len(nums)):\n        if i == 0:\n            res.append(nums[i])\n        else:\n            res.append(res[-1] + nums[i])\n    return res\n",
            "def sum_subarray_ranges(nums):\n    nums = [0] + nums\n    for i in range(1, len(nums)):\n        nums[i] += nums[i - 1]\n    return [nums[i] - nums[j] for i, j in zip(range(len(nums)), range(len(nums))[::-1])]\n",
            "def sumSubarrayRanges(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    nums = [0] + nums\n    n = len(nums)\n    nums = [nums[i] + nums[i + 1] for i in range(n - 1)]\n    nums = [nums[i] - nums[i - 1] for i in range(1, n)]\n    return sum(nums)\n",
            "def sum_of_subarray_ranges(arr):\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i] * (i + 1)\n    return sum\n",
            "def subarray_sum(nums):\n    if not nums:\n        return 0\n    sum_ = 0\n    for i in range(len(nums)):\n        sum_ += nums[i]\n        if sum_ == 0:\n            return 1\n        for j in range(i+1, len(nums)):\n            sum_ += nums[j]\n            if sum_ == 0:\n                return j - i + 1\n            sum_ -= nums[j]\n    return 0\n"
        ],
        "results": 10
    },
    {
        "id": "867",
        "source": "leetcodeTitles",
        "source_id": "1071",
        "url": "https://leetcode.com/problems/greatest-common-divisor-of-strings/",
        "language": "python",
        "query": "Greatest Common Divisor of Strings",
        "snippets": [
            "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n",
            "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n"
        ],
        "results": 10
    },
    {
        "id": "868",
        "source": "leetcodeTitles",
        "source_id": "136",
        "url": "https://leetcode.com/problems/single-number/",
        "language": "python",
        "query": "Single Number",
        "snippets": [
            "def singleNumber(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    for i in range(0, len(nums), 2):\n        if i == len(nums) - 1:\n            return nums[i]\n        if nums[i] != nums[i + 1]:\n            return nums[i]\n    return nums[0]\n",
            "def singleNumber(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    for i in range(0, len(nums), 2):\n        if i+1 == len(nums):\n            return nums[i]\n        if nums[i] != nums[i+1]:\n            return nums[i]\n    return nums[-1]\n",
            "def singleNumber(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return reduce(lambda x, y: x ^ y, nums)\n",
            "def singleNumber(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # nums = sorted(nums)\n    # for i in range(len(nums)):\n    #     if i == 0:\n    #         if nums[i] != nums[i+1]:\n    #             return nums[i]\n    #     elif i == len(nums)-1:\n    #         if nums[i] != nums[i-1]:\n    #             return nums[i]\n    #     else:\n    #         if nums[i] != nums[i-1] and nums[i] != nums[i+1]:\n    #             return nums[i]\n    # return 0\n    # nums = sorted(nums)\n    # for i in range(len(nums)):\n    #     if i == 0:\n    #         if nums[i] != nums[i+1]:\n    #             return nums[i]\n    #     elif i == len(nums)-1:\n    #         if nums[i] != nums[i-1]:\n    #             return nums[i]\n    #     else:\n    #         if nums[i] != nums[i-1] and nums[i] != nums[i+1]:\n    #             return nums[i]\n    # return 0\n    # nums = sorted(nums)\n    # for i in range(len(nums)):\n    #     if i == 0:\n    #         if nums[i] != nums[i+1]:\n    #             return nums[i]\n    #     elif i == len(nums)-1:\n    #         if nums[i] != nums[i-1]:\n    #             return nums[i]\n    #     else:\n    #         if nums[i] != nums[i-1] and nums[i] != nums[i+1]:\n    #             return nums[i]\n",
            "def singleNumber(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # nums = [1,1,2,3,3,4,4,5,5]\n    # nums = [1,1,2,2,3,3,4,4,5,5]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]\n    # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,\n",
            "def singleNumber(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,\n",
            "def singleNumber(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    # nums = [1,1,2,3,3,4,4,5,5]\n    # nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219\n"
        ],
        "results": 10
    },
    {
        "id": "869",
        "source": "leetcodeTitles",
        "source_id": "1773",
        "url": "https://leetcode.com/problems/count-items-matching-a-rule/",
        "language": "python",
        "query": "Count Items Matching a Rule",
        "snippets": [
            "def count_items(items, rule):\n    count = 0\n    for item in items:\n        if rule(item):\n            count += 1\n    return count\n",
            "def main():\n    # Get the filename from the user\n    filename = input(\"Enter a filename: \")\n\n    # Open the file\n    infile = open(filename, \"r\")\n\n    # Read the file\n    lines = infile.readlines()\n\n    # Close the file\n    infile.close()\n\n    # Count the lines\n    count = 0\n    for line in lines:\n        if line.startswith(\"X-DSPAM-Confidence:\"):\n            count += 1\n    print(\"There are\", count, \"lines in the file\")\n",
            "def main():\n    # Get the filename from the user\n    filename = input(\"Enter a filename: \")\n\n    # Open the file\n    infile = open(filename, \"r\")\n\n    # Read the file\n    lines = infile.readlines()\n\n    # Close the file\n    infile.close()\n\n    # Count the lines\n    count = 0\n    for line in lines:\n        if line.startswith(\"#\"):\n            count += 1\n    print(\"There are\", count, \"lines in\", filename)\n",
            "def main():\n    # Get the filename from the user\n    filename = input(\"Enter a filename: \")\n\n    # Open the file\n    infile = open(filename, \"r\")\n\n    # Read the file\n    data = infile.read()\n\n    # Close the file\n    infile.close()\n\n    # Count the number of times the word appears\n    count = data.count(\"Python\")\n\n    # Display the count\n    print(\"The word 'Python' appears\", count, \"times in the file.\")\n",
            "def main():\n    # Get the filename from the user\n    filename = input(\"Enter a filename: \")\n\n    # Open the file\n    infile = open(filename, \"r\")\n\n    # Read the file\n    lines = infile.readlines()\n\n    # Close the file\n    infile.close()\n\n    # Count the lines\n    count = 0\n    for line in lines:\n        if line.startswith(\"X-DSPAM-Confidence:\"):\n            count += 1\n\n    # Print the count\n    print(\"There were\", count, \"lines in the file with 'X-DSPAM-Confidence'\")\n",
            "def main():\n    # Get the filename from the user\n    filename = input(\"Enter a filename: \")\n\n    # Open the file\n    infile = open(filename, \"r\")\n\n    # Read the first line\n    line = infile.readline()\n\n    # Initialize the counter\n    count = 0\n\n    # Process the file\n    while line != \"\":\n        # Strip the line\n        line = line.strip()\n\n        # Count the line\n        count += 1\n\n        # Read the next line\n        line = infile.readline()\n\n    # Close the file\n    infile.close()\n\n    # Print the count\n    print(\"The file has\", count, \"lines.\")\n",
            "def count_items(items, rule):\n    \"\"\"\n    Count the number of items in the list that match the rule.\n    \"\"\"\n    count = 0\n    for item in items:\n        if rule(item):\n            count += 1\n    return count\n",
            "def main():\n    # Get the filename from the user.\n    filename = input(\"Enter a filename: \")\n\n    # Open the file.\n    infile = open(filename, 'r')\n\n    # Read the first line from the file.\n    line = infile.readline()\n\n    # Initialize the count.\n    count = 0\n\n    # Process each line.\n    while line != \"\":\n        # Strip the line.\n        line = line.strip()\n\n        # Count the line.\n        count += 1\n\n        # Read the next line.\n        line = infile.readline()\n\n    # Close the file.\n    infile.close()\n\n    # Print the count.\n    print(\"The file has\", count, \"lines.\")\n",
            "def main():\n    # Get the input\n    input_file = input(\"Enter a file name: \")\n    # Open the file\n    infile = open(input_file, \"r\")\n    # Read the file\n    data = infile.read()\n    # Close the file\n    infile.close()\n    # Count the number of times the word appears\n    count = data.count(\"python\")\n    # Print the result\n    print(\"The word 'python' appears\", count, \"times in the file.\")\n",
            "def main():\n    # Get the input\n    input_file = input(\"Enter the input file name: \")\n    rule = input(\"Enter the rule: \")\n    # Open the file\n    infile = open(input_file, \"r\")\n    # Read the file\n    lines = infile.readlines()\n    # Close the file\n    infile.close()\n    # Count the lines\n    count = 0\n    for line in lines:\n        if rule in line:\n            count += 1\n    # Print the count\n    print(\"The rule\", rule, \"occurs\", count, \"times in the file.\")\n"
        ],
        "results": 10
    },
    {
        "id": "870",
        "source": "leetcodeTitles",
        "source_id": "532",
        "url": "https://leetcode.com/problems/k-diff-pairs-in-an-array/",
        "language": "python",
        "query": "K-diff Pairs in an Array",
        "snippets": [
            "def findPairs(arr, k):\n    if k < 0:\n        return 0\n    arr.sort()\n    count = 0\n    i = 0\n    j = 1\n    while j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count\n",
            "def findPairs(arr, k):\n    if k < 0:\n        return 0\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count\n",
            "def findPairs(arr, k):\n    if k < 0:\n        return 0\n    arr.sort()\n    i, j = 0, 1\n    count = 0\n    while i < len(arr) and j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count\n",
            "def findPairs(arr, k):\n    if k < 0:\n        return 0\n    arr.sort()\n    i = 0\n    j = 1\n    count = 0\n    while i < len(arr) and j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            j += 1\n            i += 1\n        elif arr[j] - arr[i] < k:\n            j += 1\n        else:\n            i += 1\n    return count\n",
            "def findPairs(nums, k):\n    if k < 0:\n        return 0\n    nums.sort()\n    i = 0\n    j = 1\n    count = 0\n    while j < len(nums):\n        if nums[j] - nums[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif nums[j] - nums[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count\n",
            "def k_diff_pairs(arr, k):\n    if k < 0:\n        return 0\n    arr.sort()\n    count = 0\n    i = 0\n    j = 1\n    while j < len(arr):\n        if arr[j] - arr[i] == k:\n            count += 1\n            i += 1\n            j += 1\n        elif arr[j] - arr[i] > k:\n            i += 1\n        else:\n            j += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "871",
        "source": "leetcodeTitles",
        "source_id": "790",
        "url": "https://leetcode.com/problems/domino-and-tromino-tiling/",
        "language": "python",
        "query": "Domino and Tromino Tiling",
        "snippets": [
            "def domino(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return domino(n-1) + domino(n-2)\n",
            "def tromino(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return tromino(n-1) + tromino(n-2) + tromino(n-3)\n",
            "def tromino(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 902\n    if n == 13:\n        return 1597\n    if n == 14:\n        return 2744\n    if n == 15:\n        return 4861\n    if n == 16:\n        return 8077\n    if n == 17:\n        return 13661\n    if n == 18:\n        return 22612\n    if n == 19:\n        return 38760\n    if n == 20:\n        return 65859\n    if n == 21:\n        return 107500\n    if n == 22:\n        return 170511\n    if n == 23:\n        return 278520\n    if n == 24:\n        return 437009\n    if n == 25:\n        return 708121\n    if n == 26:\n        return 1075000\n    if n == 27:\n        return 1675000\n    if n == 28:\n        return 2500000\n    if n == 29:\n        return 3600000\n    if n == 30:\n        return 5000000\n    if n == 31:\n        return 7200000\n    if n == 32:\n        return 10000000\n    if n == 33:\n        return 14400000\n    if n == 34:\n        return 20000000\n    if n == 35:\n        return 28800000\n    if n == 36:\n        return 40000000\n    if n == 37:\n        return 56000000\n    if n == 38:\n        return 72000000\n    if n == 39:\n        return 90000000\n    if n == 40:\n        return 112000000\n    if n == 41:\n        return 14\n",
            "def tromino(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 902\n    if n == 13:\n        return 1597\n    if n == 14:\n        return 2660\n    if n == 15:\n        return 4277\n    if n == 16:\n        return 6890\n    if n == 17:\n        return 10960\n    if n == 18:\n        return 17647\n    if n == 19:\n        return 28657\n    if n == 20:\n        return 46368\n    if n == 21:\n        return 74944\n    if n == 22:\n        return 121393\n    if n == 23:\n        return 196802\n    if n == 24:\n        return 319718\n    if n == 25:\n        return 524289\n    if n == 26:\n        return 838860\n    if n == 27:\n        return 1346269\n    if n == 28:\n        return 2189282\n    if n == 29:\n        return 3524578\n    if n == 30:\n        return 5702969\n    if n == 31:\n        return 9227465\n    if n == 32:\n        return 15007170\n    if n == 33:\n        return 24278516\n    if n == 34:\n        return 39088169\n    if n == 35:\n        return 62270208\n    if n == 36:\n        return 99241567\n    if n == 37:\n        return 165580141\n    if n == 38:\n        return 277874121\n    if n == 39:\n        return 466004183\n    if n == 40:\n        return 7\n",
            "def tromino(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 13\n    if n == 6:\n        return 24\n    if n == 7:\n        return 44\n    if n == 8:\n        return 81\n    if n == 9:\n        return 149\n    if n == 10:\n        return 274\n    if n == 11:\n        return 504\n    if n == 12:\n        return 902\n    if n == 13:\n        return 1597\n    if n == 14:\n        return 2660\n    if n == 15:\n        return 4400\n    if n == 16:\n        return 7072\n    if n == 17:\n        return 11368\n    if n == 18:\n        return 18480\n    if n == 19:\n        return 29056\n    if n == 20:\n        return 46368\n    if n == 21:\n        return 72704\n    if n == 22:\n        return 113680\n    if n == 23:\n        return 184800\n    if n == 24:\n        return 290560\n    if n == 25:\n        return 463680\n    if n == 26:\n        return 727040\n    if n == 27:\n        return 1136816\n    if n == 28:\n        return 1848032\n    if n == 29:\n        return 2905664\n    if n == 30:\n        return 4636864\n    if n == 31:\n        return 7270400\n    if n == 32:\n        return 11368064\n    if n == 33:\n        return 18480320\n    if n == 34:\n        return 29056640\n    if n == 35:\n        return 46368640\n    if n == 36:\n        return 72704000\n    if n == 37:\n        return 113680640\n    if n == 38:\n        return 184803200\n    if n == 39:\n        return 290566720\n    if n == 40\n",
            "def domino(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 30\n    if n == 9:\n        return 40\n    if n == 10:\n        return 52\n    if n == 11:\n        return 67\n    if n == 12:\n        return 84\n    if n == 13:\n        return 102\n    if n == 14:\n        return 121\n    if n == 15:\n        return 142\n    if n == 16:\n        return 164\n    if n == 17:\n        return 187\n    if n == 18:\n        return 211\n    if n == 19:\n        return 236\n    if n == 20:\n        return 262\n    if n == 21:\n        return 289\n    if n == 22:\n        return 317\n    if n == 23:\n        return 346\n    if n == 24:\n        return 376\n    if n == 25:\n        return 407\n    if n == 26:\n        return 440\n    if n == 27:\n        return 473\n    if n == 28:\n        return 508\n    if n == 29:\n        return 543\n    if n == 30:\n        return 579\n    if n == 31:\n        return 616\n    if n == 32:\n        return 654\n    if n == 33:\n        return 693\n    if n == 34:\n        return 732\n    if n == 35:\n        return 772\n    if n == 36:\n        return 813\n    if n == 37:\n        return 855\n    if n == 38:\n        return 898\n    if n == 39:\n        return 941\n    if n == 40:\n        return 985\n    if n == 41:\n        return 1030\n    if n == 42:\n        return 1076\n    if n == 43:\n        return 1123\n    if n\n",
            "def domino(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 37\n    if n == 10:\n        return 46\n    if n == 11:\n        return 56\n    if n == 12:\n        return 67\n    if n == 13:\n        return 79\n    if n == 14:\n        return 92\n    if n == 15:\n        return 106\n    if n == 16:\n        return 121\n    if n == 17:\n        return 137\n    if n == 18:\n        return 154\n    if n == 19:\n        return 172\n    if n == 20:\n        return 191\n    if n == 21:\n        return 211\n    if n == 22:\n        return 232\n    if n == 23:\n        return 254\n    if n == 24:\n        return 277\n    if n == 25:\n        return 301\n    if n == 26:\n        return 326\n    if n == 27:\n        return 352\n    if n == 28:\n        return 379\n    if n == 29:\n        return 407\n    if n == 30:\n        return 436\n    if n == 31:\n        return 466\n    if n == 32:\n        return 497\n    if n == 33:\n        return 529\n    if n == 34:\n        return 562\n    if n == 35:\n        return 596\n    if n == 36:\n        return 631\n    if n == 37:\n        return 667\n    if n == 38:\n        return 704\n    if n == 39:\n        return 742\n    if n == 40:\n        return 781\n    if n == 41:\n        return 821\n    if n == 42:\n        return 862\n    if n == 43:\n        return 904\n    if n == 44:\n",
            "def tiling(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return tiling(n-1) + tiling(n-2)\n",
            "def tromino_tiling(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return tromino_tiling(n-1) + tromino_tiling(n-2) + tromino_tiling(n-3)\n"
        ],
        "results": 10
    },
    {
        "id": "872",
        "source": "leetcodeTitles",
        "source_id": "1792",
        "url": "https://leetcode.com/problems/maximum-average-pass-ratio/",
        "language": "python",
        "query": "Maximum Average Pass Ratio",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * b[i]\n    print(ans / sum(b))\n",
            "def max_average(n, k, arr):\n    \"\"\"\n    :param n: int\n    :param k: int\n    :param arr: list of ints\n    :return: float\n    \"\"\"\n    # Calculate the sum of the first k elements\n    sum_k = sum(arr[:k])\n    # Calculate the sum of the last n-k elements\n    sum_n = sum(arr[-n+k:])\n    # Calculate the sum of the first k elements\n    sum_k_2 = sum(arr[:k-1])\n    # Calculate the sum of the last n-k elements\n    sum_n_2 = sum(arr[-n+k-1:])\n    # Calculate the average of the first k elements\n    avg_k = sum_k / k\n    # Calculate the average of the last n-k elements\n    avg_n = sum_n / (n-k)\n    # Calculate the average of the first k elements\n    avg_k_2 = sum_k_2 / (k-1)\n    # Calculate the average of the last n-k elements\n    avg_n_2 = sum_n_2 / (n-k-1)\n    # Calculate the maximum average\n    max_avg = max(avg_k, avg_n, avg_k_2, avg_n_2)\n    return max_avg\n",
            "def max_average(numbers):\n    \"\"\"\n    Given an array of integers, return the maximum average of any triplet\n    of integers in the array.\n    \"\"\"\n    numbers.sort()\n    return (numbers[-1] + numbers[-2] + numbers[-3]) / 3\n"
        ],
        "results": 10
    },
    {
        "id": "873",
        "source": "leetcodeTitles",
        "source_id": "1909",
        "url": "https://leetcode.com/problems/remove-one-element-to-make-the-array-strictly-increasing/",
        "language": "python",
        "query": "Remove One Element to Make the Array Strictly Increasing",
        "snippets": [
            "def removeOne(arr):\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n",
            "def remove(arr):\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n",
            "def removeOne(arr):\n    if len(arr) == 1:\n        return 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i+1]:\n            return i\n    return -1\n",
            "def remove_element(arr, val):\n    i = 0\n    while i < len(arr):\n        if arr[i] == val:\n            arr.pop(i)\n        else:\n            i += 1\n    return len(arr)\n"
        ],
        "results": 10
    },
    {
        "id": "874",
        "source": "leetcodeTitles",
        "source_id": "621",
        "url": "https://leetcode.com/problems/task-scheduler/",
        "language": "python",
        "query": "Task Scheduler",
        "snippets": [
            "def main():\n    n = int(input())\n    tasks = []\n    for i in range(n):\n        tasks.append(list(map(int, input().split())))\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    print(tasks)\n    for i in range(n):\n        print(tasks[i][0], tasks[i][1])\n",
            "def main():\n    n = int(input())\n    tasks = [list(map(int, input().split())) for _ in range(n)]\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        ans += tasks[i][1]\n        if ans > tasks[i][0]:\n            return \"No\"\n    return \"Yes\"\n",
            "def main():\n    n = int(input())\n    tasks = [list(map(int, input().split())) for _ in range(n)]\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    print(tasks)\n    time = 0\n    for i in range(n):\n        time += tasks[i][1]\n        if time > tasks[i][0]:\n            time = time - tasks[i][0]\n        else:\n            time = 0\n    print(time)\n",
            "def main():\n    n = int(input())\n    tasks = [list(map(int, input().split())) for _ in range(n)]\n    tasks.sort(key=lambda x: x[1])\n    tasks.sort(key=lambda x: x[0])\n    time = 0\n    for task in tasks:\n        if time < task[0]:\n            time = task[1]\n        else:\n            time += task[1]\n    print(time)\n",
            "def main():\n    n = int(input())\n    tasks = [int(input()) for _ in range(n)]\n    tasks.sort()\n    ans = 0\n    for i in range(n):\n        ans += tasks[i]\n        if i % 3 == 2:\n            ans += tasks[i]\n    print(ans)\n",
            "def main():\n    n = int(input())\n    tasks = [int(input()) for _ in range(n)]\n    tasks.sort()\n    ans = 0\n    for i in range(n):\n        ans += tasks[i]\n        if i % 2 == 0:\n            ans += tasks[i]\n    print(ans)\n",
            "def main():\n    n = int(input())\n    tasks = list(map(int, input().split()))\n    tasks.sort()\n    ans = 0\n    for i in range(n):\n        if tasks[i] + i >= n:\n            ans += 1\n    print(ans)\n",
            "def main():\n    n = int(input())\n    tasks = [int(input()) for _ in range(n)]\n    tasks.sort()\n    for i in range(n):\n        print(tasks[i])\n",
            "def main():\n    n = int(input())\n    tasks = [int(input()) for _ in range(n)]\n    tasks.sort()\n    print(sum(tasks[::2]))\n",
            "def main():\n    n = int(input())\n    tasks = [int(input()) for _ in range(n)]\n    tasks.sort()\n    total_time = sum(tasks)\n    print(total_time // n)\n    print(total_time % n)\n"
        ],
        "results": 10
    },
    {
        "id": "875",
        "source": "leetcodeTitles",
        "source_id": "1446",
        "url": "https://leetcode.com/problems/consecutive-characters/",
        "language": "python",
        "query": "Consecutive Characters",
        "snippets": [
            "def main():\n    s = input()\n    for i in range(len(s)):\n        if s[i] != s[i+1]:\n            print(s[i], end='')\n    print()\n",
            "def consecutive_characters(string):\n    \"\"\"\n    Given a string, find the longest substring that contains only two unique characters.\n    :param string:\n    :return:\n    \"\"\"\n    if len(string) < 2:\n        return string\n    else:\n        max_length = 0\n        for i in range(len(string)):\n            for j in range(i+1, len(string)):\n                if len(set(string[i:j+1])) == 2:\n                    max_length = max(max_length, j-i+1)\n        return max_length\n",
            "def consecutive_characters(string):\n    \"\"\"\n    Given a string, find the longest substring that contains at\n    least two unique characters.\n    \"\"\"\n    if len(string) < 2:\n        return string\n    else:\n        longest = string[0:2]\n        for i in range(len(string) - 1):\n            if string[i] != string[i + 1]:\n                if len(longest) < len(string[i:i + 2]):\n                    longest = string[i:i + 2]\n        return longest\n",
            "def consecutive_characters(s):\n    \"\"\"\n    Given a string, find the longest substring that contains only two unique characters.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    max_len = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] != s[i-1]:\n            max_len = max(max_len, i - start)\n            start = i\n    return s[start:start + max_len]\n",
            "def consecutive_characters(string):\n    \"\"\"\n    Given a string, find the longest substring that contains only two unique characters.\n    \"\"\"\n    longest_substring = \"\"\n    current_substring = \"\"\n    for i in range(len(string)):\n        if string[i] not in current_substring:\n            current_substring += string[i]\n        else:\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n            current_substring = string[i]\n    if len(current_substring) > len(longest_substring):\n        longest_substring = current_substring\n    return longest_substring\n",
            "def consecutive_characters(string):\n    \"\"\"\n    Given a string, return the longest substring that contains only two unique characters.\n    \"\"\"\n    longest = \"\"\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if len(set(string[i:j])) == 2:\n                if len(string[i:j]) > len(longest):\n                    longest = string[i:j]\n    return longest\n",
            "def consecutive_characters(string):\n    \"\"\"\n    Given a string, find the longest substring that contains at\n    least two unique characters.\n    \"\"\"\n    # Initialize variables\n    longest_substring = \"\"\n    current_substring = \"\"\n    # Loop through string\n    for char in string:\n        # If current character is not in current substring, add it\n        if char not in current_substring:\n            current_substring += char\n        # If current character is in current substring, add it and reset\n        else:\n            current_substring += char\n            if len(current_substring) > len(longest_substring):\n                longest_substring = current_substring\n            current_substring = \"\"\n    # If current substring is longer than longest substring, set it as longest\n    if len(current_substring) > len(longest_substring):\n        longest_substring = current_substring\n    # Return longest substring\n    return longest_substring\n",
            "def consecutive_characters(string):\n    \"\"\"\n    Given a string, return the longest substring that contains only two unique characters.\n\n    :param string: str\n    :return: str\n    \"\"\"\n    longest = \"\"\n    current = \"\"\n    for i in range(len(string)):\n        if string[i] not in current:\n            current += string[i]\n        else:\n            if len(current) > len(longest):\n                longest = current\n            current = string[i]\n    if len(current) > len(longest):\n        longest = current\n    return longest\n"
        ],
        "results": 9
    },
    {
        "id": "876",
        "source": "leetcodeTitles",
        "source_id": "1267",
        "url": "https://leetcode.com/problems/count-servers-that-communicate/",
        "language": "python",
        "query": "Count Servers that Communicate",
        "snippets": [
            "def count_servers(net):\n    count = 0\n    for server in net:\n        for client in net:\n            if server in client:\n                count += 1\n    return count\n",
            "def count_servers(net):\n    count = 0\n    for i in net:\n        if len(i) > 1:\n            count += 1\n    return count\n",
            "def count_servers(net):\n    \"\"\"\n    Counts the number of servers that communicate with each other\n    \"\"\"\n    count = 0\n    for server in net:\n        for client in net:\n            if server in client:\n                count += 1\n    return count\n",
            "def count_servers(net):\n    count = 0\n    for i in net:\n        if len(i) == 1:\n            count += 1\n    return count\n",
            "def count_servers(net):\n    servers = 0\n    for i in net:\n        if len(i) == 1:\n            servers += 1\n    return servers\n",
            "def count_servers(servers):\n    return len(set(servers))\n",
            "def count_servers(net):\n    return len(set(net.values()))\n"
        ],
        "results": 10
    },
    {
        "id": "877",
        "source": "leetcodeTitles",
        "source_id": "1578",
        "url": "https://leetcode.com/problems/minimum-time-to-make-rope-colorful/",
        "language": "python",
        "query": "Minimum Time to Make Rope Colorful",
        "snippets": [
            "def minTime(n, ropes):\n    ropes.sort()\n    ans = 0\n    for i in range(n):\n        ans += ropes[i] * (n - i)\n    return ans\n",
            "def minTime(n, i:k\n        return m * 5\n    if n == 6:m\n        return m * 6\n    if n == 7: m *2\n        return m * 7\n    if n == 8: m *3\n        return m * 8\n    if n == 9: m *4\n        return m * 9\n    if n == 10 m *:5\n        return m * 10\n    if n == 11 m *:6\n        return m * 11\n    if n == 12 m *:7\n        return m * 12\n    if n == 13 m *:8\n        return m * 13\n    if n == 14 m *:9\n        return m * 14\n    if n == 15 m *:10\n        return m * 15\n    if n == 16 m *:1\n        return m * 16\n    if n == 17 m *:2\n        return m * 17\n    if n == 18 m *:3\n        return m * 18\n    if n == 19 m *:4\n        return m * 19\n    if n == 20 m *:5\n        return m * 20\n    if n == 21 m *:6\n        return m * 21\n    if n == 22 m *:7\n        return m * 22\n    if n == 23 m *:8\n        return m * 23\n    if n == 24 m *:9\n        return m * 24\n    if n == 25 m *:20\n        return m * 25\n    if n == 26 m *:1\n        return m * 26\n    if n == 27 m:* 2\n        return m * 27\n    if n == 28:m * 3\n        return m * 28\n    if n == 29 m *:4\n        return m * 29\n    if n == 30 m:* 5\n        return m * 30\n    if n == 31:m * 6\n        return m * 31\n    if n == 32 m *:7\n        return m * 32\n    if n == 33 m:* 8\n        return m * 33\n    if n == 34:m * 9\n        return m * 34\n    if n == 35 m *:30\n        return m * 35\n    if n == 36:m * 1\n        return m * 36\n    if n == 37 m *:2\n        return m * 37\n    if n == 38 m:* 3\n        return m\nm * 4\n=======\nm * 5\ndef minTime(n, ropes):\n    ropes.sort(m * )6\n    ans = 0\n    for i in ram * n7e(n):\n        ans +=:\n        return m\n",
            "def minTime(n, ropes):\n    ropes.sort()\n    ans = 0\n    for i in range(n) ropes[i] * (i + 1)\n        ans += ropes[i] * (i + 1)\nreturn ann ans\n",
            "def minTime(s,m, k, c):\n1\n=======m\n2\ndef minTime(n, m * 2ges, have_edges, cnt_edges):\n    if n == 3\n        return m * 3\n    if n == 2\n        return m * 1\n    if n == 5\n        return m * 5\n    if n == 6\n        return m * 6        return 3\n    if n    7:\n        return m * 7\n    if n    8:n == 5:\n        r turn i * 8\n    ff   == 9:\n        r=tur6*9\n   if n == 10\n        return m * 10\n          ret1rn 5\n        if n ==  * 117:\n          re1trn 6\n        if n == 8:1\n          re1trn 7\n        if n == 9:1\n          re1trn 8\n        if n == 10:1\n          re1trn 9\n        if n == 11:1\n          re1trn 10\n        if n == 12:1\n          re1trn 11\n        if n == 13:1\n          re1trn 12\n        if n == 14:1\n          re1trn 13\n        if n == 15:1\n          re2un 14\n        if n == 16:2\n          re2tn 15\n        if n == 17:2\n          re2un 16\n        if n == 18:2\n          re2un 17\n        if n == 19:2\n          re2un 18\n        if n == 20:2\n          re2un 19\n        if n == 21:2\n          re2un 20\n        if n == 22:2\n          re2un 21\n        if n == 23:2\n          re2un 22\n        if n == 24:2\n          re2un 23\n        if n == 25:2\n          re3un 24\n        if n == 26:3\n          re3un 25\n        if n == 27:3\n          re3un 26\n        if n == 28:3\n          re3un 27\n        if n == 29:3\n          re3un 28\n        if n == 30:3\n          re3un 29\n        if n == 31:3\n          re3un 30\n        if n == 32:3\n          re3un 31\n        if n == 33:3\n          re3u:\n",
            "def minTime(n, edges, have_edges, cnt_edges):\n    if n == 1:\n        return 0\n    if n ==r2n 32\n        if n ==1\n3:  if n == 3:\n        return \n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == :\n        return 7\n          reun 33\n        if n n 8\n    if = == 10:\n      =3return:\n          r 11:\n        returne1u\n    if n ==r12n 34\n        if n = 11\n    if=n3==:1:\n        return 12\n          re14:\n        return 1t\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return u7\n    if nr== 19n 35\n        if n n 18\n    if = ===20:\n3       return:9\n          r 21:\n        returneu0\n    if n ==r22n 36\n        if n = 21\n    if=n3==:2:\n        return 2\n          re24:\n        return 2t\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == u0:\nr       return 29\n    if n == 31n 37\n        if n ==30\n3:  if n == 2:\n        return 1\n          re3tn 38\n        if n = 32\n    if=n4==::\n        return 33\n          retun 39\n        if n n 34\n    if = == 36:\n      =4return:\n          r 37:\n        returnetu\n    if n ==r38n 40\n        if n n 37\n    if = == 39:\n      =4return:8\n          r 40:\n        returnet9\n    if n ==r41n 41\n        if n n 40\n    if = == 42:\n      =4return:41\n          re4t:\n        return 42\n    if n ==r44n 42\n    if n == 44:\n",
            "def minTime(n, m, k, c) :\n  if n == 1 :\n    return m\n  if n == 2 :\n    return m * 2\n  if n == 3 :\n    return m * 3\n  if n == 4 :\n    return m * 4\n  if n == 5 :\n    return m * 5\n  if n == 6 :\n    return m * 6\n  if n == 7 :\n    return m * 7\n  if n == 8 :\n    return m * 8\n  if n == 9 :\n    return m * 9\n  if n == 10 :\n    return m * 10\n  if n == 11 :\n    return m * 11\n  if n == 12 :\n    return m * 12\n  if n == 13 :\n    return m * 13\n  if n == 14 :\n    return m * 14\n  if n == 15 :\n    return m * 15\n  if n == 16 :\n    return m * 16\n  if n == 17 :\n    return m * 17\n  if n == 18 :\n    return m * 18\n  if n == 19 :\n    return m * 19\n  if n == 20 :\n    return m * 20\n  if n == 21 :\n    return m * 21\n  if n == 22 :\n    return m * 22\n  if n == 23 :\n    return m * 23\n  if n == 24 :\n    return m * 24\n  if n == 25 :\n    return m * 25\n  if n == 26 :\n    return m * 26\n  if n == 27 :\n    return m * 27\n  if n == 28 :\n    return m * 28\n  if n == 29 :\n    return m * 29\n  if n == 30 :\n    return m * 30\n  if n == 31 :\n    return m * 31\n  if n == 32 :\n    return m * 32\n  if n == 33 :\n    return m * 33\n  if n == 34 :\n    return m * 34\n  if n == 35 :\n    return m * 35\n  if n == 36 :\n    return m * 36\n  if n == 37 :\n    return m * 37\n  if n == 38 :\n",
            "def minTime(n, edges, have_edges, cnt_edges):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n    if n == 44:\n",
            "def minTime(n, m, k, c) :\n  if n == 1 :\n    return m\n  if n == 2 :\n    return m * 2\n  if n == 3 :\n    return m * 3\n  if n == 4 :\n    return m * 4\n  if n == 5 :\n    return m * 5\n  if n == 6 :\n    return m * 6\n  if n == 7 :\n    return m * 7\n  if n == 8 :\n    return m * 8\n  if n == 9 :\n    return m * 9\n  if n == 10 :\n    return m * 10\n  if n == 11 :\n    return m * 11\n  if n == 12 :\n    return m * 12\n  if n == 13 :\n    return m * 13\n  if n == 14 :\n    return m * 14\n  if n == 15 :\n    return m * 15\n  if n == 16 :\n    return m * 16\n  if n == 17 :\n    return m * 17\n  if n == 18 :\n    return m * 18\n  if n == 19 :\n    return m * 19\n  if n == 20 :\n    return m * 20\n  if n == 21 :\n    return m * 21\n  if n == 22 :\n    return m * 22\n  if n == 23 :\n    return m * 23\n  if n == 24 :\n    return m * 24\n  if n == 25 :\n    return m * 25\n  if n == 26 :\n    return m * 26\n  if n == 27 :\n    return m * 27\n  if n == 28 :\n    return m * 28\n  if n == 29 :\n    return m * 29\n  if n == 30 :\n    return m * 30\n  if n == 31 :\n    return m * 31\n  if n == 32 :\n    return m * 32\n  if n == 33 :\n    return m * 33\n  if n == 34 :\n    return m * 34\n  if n == 35 :\n    return m * 35\n  if n == 36 :\n    return m * 36\n  if n == 37 :\n    return m * 37\n  if n == 38 :\n"
        ],
        "results": 9
    },
    {
        "id": "878",
        "source": "leetcodeTitles",
        "source_id": "393",
        "url": "https://leetcode.com/problems/utf-8-validation/",
        "language": "python",
        "query": "UTF-8 Validation",
        "snippets": [
            "def utf8_validation(data):\n    \"\"\"\n    Validates UTF-8 data\n    \"\"\"\n    try:\n        data.decode('utf-8')\n        return True\n    except UnicodeDecodeError:\n        return False\n    except AttributeError:\n        return False\n    except Exception:\n        return False\n",
            "def utf8_validator(data):\n    \"\"\"\n    Validates UTF-8 encoding\n    \"\"\"\n    try:\n        data.decode('utf-8')\n        return True\n    except UnicodeDecodeError:\n        return False\n    except UnicodeError:\n        return False\n    except AttributeError:\n        return False\n    except Exception:\n        return False\n",
            "def main():\n    print(\"UTF-8 Validation\")\n    print(\"----------------\")\n    print(\"\")\n    print(\"This program will validate UTF-8 encoded text.\")\n    print(\"\")\n    print(\"Enter the text to validate:\")\n    print(\"\")\n    text = input(\">> \")\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text)\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text.encode(\"utf-8\"))\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text.encode(\"utf-8\").decode(\"utf-8\"))\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\"))\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\"))\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\"))\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\"))\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\"))\n    print(\"\")\n    print(\"The text is:\")\n    print(\"\")\n    print(text.encode(\"utf-8\").decode(\"utf\n",
            "def main():\n    print(\"UTF-8 Validation\")\n    print(\"----------------\")\n    print(\"\")\n    print(\"This program will validate a UTF-8 string.\")\n    print(\"\")\n    print(\"Enter a string:\")\n    string = input()\n    print(\"\")\n    print(\"The string is:\", string)\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\"))\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\").decode(\"utf-8\"))\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\"))\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\"))\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\"))\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\"))\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\"))\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\"))\n    print(\"\")\n    print(\"The string is:\", string.encode(\"utf-8\").decode(\"utf-8\").encode(\"utf-8\").decode(\"utf-8\").encode\n",
            "def main():\n    print(\"UTF-8 Validation\")\n    print(\"----------------\")\n    print(\"\")\n    print(\"UTF-8 is a character encoding standard that defines a set of \")\n    print(\"characters that can be encoded as a sequence of bytes. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in the world. \")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that can represent \")\n    print(\"all of the characters in\n",
            "def main():\n    print(\"UTF-8 Validation\")\n    print(\"----------------\")\n    print(\"\")\n    print(\"UTF-8 is a character encoding standard that defines a set of Unicode characters\")\n    print(\"that can be encoded in seven different ways:\")\n    print(\"\")\n    print(\"1. ASCII (American Standard Code for Information Interchange)\")\n    print(\"2. ISO-8859-1 (ISO 8859-1)\")\n    print(\"3. ISO-8859-2 (ISO 8859-2)\")\n    print(\"4. ISO-8859-3 (ISO 8859-3)\")\n    print(\"5. ISO-8859-4 (ISO 8859-4)\")\n    print(\"6. ISO-8859-5 (ISO 8859-5)\")\n    print(\"7. ISO-8859-6 (ISO 8859-6)\")\n    print(\"8. ISO-8859-7 (ISO 8859-7)\")\n    print(\"9. ISO-8859-8 (ISO 8859-8)\")\n    print(\"10. ISO-8859-9 (ISO 8859-9)\")\n    print(\"11. ISO-8859-10 (ISO 8859-10)\")\n    print(\"12. ISO-8859-11 (ISO 8859-11)\")\n    print(\"13. ISO-8859-13 (ISO 8859-13)\")\n    print(\"14. ISO-8859-14 (ISO 8859-14)\")\n    print(\"15. ISO-8859-15 (ISO 8859-15)\")\n    print(\"16. ISO-8859-16 (ISO 8859-16)\")\n    print(\"17. Windows-1250 (Windows 1250)\")\n    print(\"18. Windows-1251 (Windows 1251)\")\n    print(\"19. Windows-1252 (Windows 1252)\")\n    print(\"20. Windows-1253 (Windows 1253)\")\n    print(\"21. Windows-1254 (Windows 1254)\")\n    print(\"22. Windows-1255 (Windows 1255)\")\n    print(\"23. Windows-1256 (Windows 1256)\")\n    print(\"24. Windows-\n",
            "def main():\n    # Get the string\n    string = input(\"Enter a string: \")\n    # Print the string\n    print(\"The string is:\", string)\n    # Print the string's length\n    print(\"The string's length is:\", len(string))\n    # Print the string's UTF-8 length\n    print(\"The string's UTF-8 length is:\", len(string.encode(\"utf-8\")))\n    # Print the string's UTF-16 length\n    print(\"The string's UTF-16 length is:\", len(string.encode(\"utf-16\")))\n    # Print the string's UTF-32 length\n    print(\"The string's UTF-32 length is:\", len(string.encode(\"utf-32\")))\n    # Print the string's UTF-8 representation\n    print(\"The string's UTF-8 representation is:\", string.encode(\"utf-8\"))\n    # Print the string's UTF-16 representation\n    print(\"The string's UTF-16 representation is:\", string.encode(\"utf-16\"))\n    # Print the string's UTF-32 representation\n    print(\"The string's UTF-32 representation is:\", string.encode(\"utf-32\"))\n    # Print the string's UTF-8 representation\n    print(\"The string's UTF-8 representation is:\", string.encode(\"utf-8\"))\n    # Print the string's UTF-16 representation\n    print(\"The string's UTF-16 representation is:\", string.encode(\"utf-16\"))\n    # Print the string's UTF-32 representation\n    print(\"The string's UTF-32 representation is:\", string.encode(\"utf-32\"))\n    # Print the string's UTF-8 representation\n    print(\"The string's UTF-8 representation is:\", string.encode(\"utf-8\"))\n    # Print the string's UTF-16 representation\n    print(\"The string's UTF-16 representation is:\", string.encode(\"utf-16\"))\n    # Print the string's UTF-32 representation\n    print(\"The string's UTF-32 representation is:\", string.encode(\"utf-32\"))\n    # Print the string's UTF-8 representation\n    print(\"The string's UTF-8 representation\n",
            "def main():\n    print(\"UTF-8 Validation\")\n    print(\"UTF-8 is a character encoding standard that allows for encoding of\")\n    print(\"Unicode characters. It is a superset of ASCII, and is the default\")\n    print(\"character encoding for text files. It is a variable width character\")\n    print(\"encoding, with 7-bit ASCII characters and 8-bit extended ASCII\")\n    print(\"characters. It is a variable width character encoding, with 7-bit\")\n    print(\"ASCII characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\")\n    print(\"characters and 8-bit extended ASCII characters.\")\n    print(\"\")\n    print(\"UTF-8 is a variable width character encoding, with 7-bit ASCII\n",
            "def main():\n    print(\"UTF-8 Validation\")\n    print(\"UTF-8 is a character encoding standard that allows users to store\")\n    print(\"characters in a computer in a way that can be read by other programs\")\n    print(\"and humans. It is a superset of ASCII, which is a character encoding\")\n    print(\"standard for the 7-bit ASCII character set. It is used by many\")\n    print(\"programs to store text files, especially in the Internet.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding scheme that allows a computer\")\n    print(\"to store characters in a way that can be read by other programs and\")\n    print(\"humans. It is a superset of ASCII, which is a character encoding\")\n    print(\"standard for the 7-bit ASCII character set. It is used by many\")\n    print(\"programs to store text files, especially in the Internet.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding scheme that allows a computer\")\n    print(\"to store characters in a way that can be read by other programs and\")\n    print(\"humans. It is a superset of ASCII, which is a character encoding\")\n    print(\"standard for the 7-bit ASCII character set. It is used by many\")\n    print(\"programs to store text files, especially in the Internet.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding scheme that allows a computer\")\n    print(\"to store characters in a way that can be read by other programs and\")\n    print(\"humans. It is a superset of ASCII, which is a character encoding\")\n    print(\"standard for the 7-bit ASCII character set. It is used by many\")\n    print(\"programs to store text files, especially in the Internet.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding scheme that allows a computer\")\n    print(\"to store characters in a way that can be read by other programs and\")\n    print(\"humans. It is a superset of ASCII, which is a character encoding\")\n    print(\"standard for the 7-bit ASCII character set. It is used by many\")\n    print(\"programs to store text files, especially\n",
            "def main():\n    print(\"UTF-8 Validation\")\n    print(\"----------------\")\n    print(\"\")\n    print(\"UTF-8 is a character encoding that supports all of the\")\n    print(\"Unicode standard and can represent all of the characters\")\n    print(\"in the world. It is a variable-length encoding that\")\n    print(\"is used to store text in a computer.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that is used to\")\n    print(\"store text in a computer. It is a variable-length\")\n    print(\"encoding that is used to store text in a computer.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that is used to\")\n    print(\"store text in a computer. It is a variable-length\")\n    print(\"encoding that is used to store text in a computer.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that is used to\")\n    print(\"store text in a computer. It is a variable-length\")\n    print(\"encoding that is used to store text in a computer.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that is used to\")\n    print(\"store text in a computer. It is a variable-length\")\n    print(\"encoding that is used to store text in a computer.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that is used to\")\n    print(\"store text in a computer. It is a variable-length\")\n    print(\"encoding that is used to store text in a computer.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that is used to\")\n    print(\"store text in a computer. It is a variable-length\")\n    print(\"encoding that is used to store text in a computer.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that is used to\")\n    print(\"store text in a computer. It is a variable-length\")\n    print(\"encoding that is used to store text in a computer.\")\n    print(\"\")\n    print(\"UTF-8 is a variable-length encoding that is used\n"
        ],
        "results": 10
    },
    {
        "id": "879",
        "source": "leetcodeTitles",
        "source_id": "1662",
        "url": "https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/",
        "language": "python",
        "query": "Check If Two String Arrays are Equivalent",
        "snippets": [
            "def check(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n",
            "def array_equivalent(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            return False\n    return True\n"
        ],
        "results": 10
    },
    {
        "id": "880",
        "source": "leetcodeTitles",
        "source_id": "1980",
        "url": "https://leetcode.com/problems/find-unique-binary-string/",
        "language": "python",
        "query": "Find Unique Binary String",
        "snippets": [
            "def find_unique_binary_string(s):\n    if len(s) == 1:\n        return s\n    else:\n        if s[0] == s[1]:\n            return find_unique_binary_string(s[2:])\n        else:\n            return s[0] + find_unique_binary_string(s[1:])\n",
            "def find_unique_binary_string(s):\n    \"\"\"\n    :param s: string\n    :return: string\n    \"\"\"\n    if len(s) == 1:\n        return s\n    else:\n        if s[0] == s[1]:\n            return find_unique_binary_string(s[2:])\n        else:\n            return s[0] + find_unique_binary_string(s[1:])\n",
            "def find_unique_binary_string(s):\n    \"\"\"\n    :param s: string\n    :return: string\n    \"\"\"\n    if len(s) == 1:\n        return s\n    else:\n        return s[0] + find_unique_binary_string(s[1:])\n",
            "def find_unique_binary_string(s):\n    if len(s) == 1:\n        return s\n    else:\n        return s[0] + find_unique_binary_string(s[1:])\n",
            "def find_unique_binary_string(s):\n    \"\"\"\n    Given a binary string, return the number of unique binary strings that can be formed by flipping at most one bit in the string.\n    \"\"\"\n    if not s:\n        return 0\n    if len(s) == 1:\n        return 1\n    if s[0] == '0':\n        return find_unique_binary_string(s[1:])\n    else:\n        return find_unique_binary_string(s[1:]) + find_unique_binary_string(s[0] + s[2:])\n",
            "def find_unique_binary_string(s):\n    \"\"\"\n    :param s: string\n    :return: string\n    \"\"\"\n    # your code here\n    # 1. find the unique binary string\n    # 2. return the unique binary string\n    # 3. if there is no unique binary string, return None\n    # 4. if there is more than one unique binary string, return None\n    # 5. if there is no unique binary string, return None\n    # 6. if there is more than one unique binary string, return None\n    # 7. if there is no unique binary string, return None\n    # 8. if there is more than one unique binary string, return None\n    # 9. if there is no unique binary string, return None\n    # 10. if there is more than one unique binary string, return None\n    # 11. if there is no unique binary string, return None\n    # 12. if there is more than one unique binary string, return None\n    # 13. if there is no unique binary string, return None\n    # 14. if there is more than one unique binary string, return None\n    # 15. if there is no unique binary string, return None\n    # 16. if there is more than one unique binary string, return None\n    # 17. if there is no unique binary string, return None\n    # 18. if there is more than one unique binary string, return None\n    # 19. if there is no unique binary string, return None\n    # 20. if there is more than one unique binary string, return None\n    # 21. if there is no unique binary string, return None\n    # 22. if there is more than one unique binary string, return None\n    # 23. if there is no unique binary string, return None\n    # 24. if there is more than one unique binary string, return None\n    # 25. if there is no unique binary string, return None\n    # 26. if there is more than one unique binary string, return None\n    # 27. if there is no unique binary string, return None\n    # 28. if there is more than one unique binary string, return None\n    # 29. if there is no unique binary string, return None\n    # 30. if there is more than one unique binary\n"
        ],
        "results": 10
    },
    {
        "id": "881",
        "source": "leetcodeTitles",
        "source_id": "375",
        "url": "https://leetcode.com/problems/guess-number-higher-or-lower-ii/",
        "language": "python",
        "query": "Guess Number Higher or Lower II",
        "snippets": [
            "def guessNumber(n):\n    left, right = 1, n\n    while left <= right:\n        mid = (left + right) // 2\n        if guess(mid) == 0:\n            return mid\n        elif guess(mid) == -1:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n",
            "def guessNumber(n):\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if guess(mid) == 0:\n            return mid\n        elif guess(mid) == -1:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n",
            "def guessNumber(n):\n    low = 1\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        if guess(mid) == 0:\n            return mid\n        elif guess(mid) == -1:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
            "def guess_number(n):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n",
            "def guessNumber(n):\n    l, r = 1, n\n    while l < r:\n        mid = (l + r) // 2\n        if guess(mid) == 1:\n            l = mid + 1\n        else:\n            r = mid\n    return l\n",
            "def guessNumber(n):\n    low = 1\n    high = n\n    while low < high:\n        mid = (low + high) // 2\n        if guess(mid) == 0:\n            return mid\n        elif guess(mid) == -1:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return low\n",
            "def guessNumber(n):\n    # guess number is in range [1, n]\n    # guess number is n // 2\n    # guess number is n // 2 + 1\n    # guess number is n // 2 + 2\n    # guess number is n // 2 + 3\n    # guess number is n // 2 + 4\n    # guess number is n // 2 + 5\n    # guess number is n // 2 + 6\n    # guess number is n // 2 + 7\n    # guess number is n // 2 + 8\n    # guess number is n // 2 + 9\n    # guess number is n // 2 + 10\n    # guess number is n // 2 + 11\n    # guess number is n // 2 + 12\n    # guess number is n // 2 + 13\n    # guess number is n // 2 + 14\n    # guess number is n // 2 + 15\n    # guess number is n // 2 + 16\n    # guess number is n // 2 + 17\n    # guess number is n // 2 + 18\n    # guess number is n // 2 + 19\n    # guess number is n // 2 + 20\n    # guess number is n // 2 + 21\n    # guess number is n // 2 + 22\n    # guess number is n // 2 + 23\n    # guess number is n // 2 + 24\n    # guess number is n // 2 + 25\n    # guess number is n // 2 + 26\n    # guess number is n // 2 + 27\n    # guess number is n // 2 + 28\n    # guess number is n // 2 + 29\n    # guess number is n // 2 + 30\n    # guess number is n // 2 + 31\n    # guess number is n // 2 + 32\n    # guess number is n // 2 + 33\n    # guess number is n // 2 + 34\n    # guess number is n // 2 + 35\n    # guess number is n // 2 + 36\n    # guess number is n // 2 + 37\n    # guess number is n // 2 + 38\n    # guess number is n // 2 + 39\n    # guess number is n // 2 + 40\n    # guess number is n // 2 + 41\n    # guess number is n // 2 + 42\n    # guess number is n // 2 +\n"
        ],
        "results": 10
    },
    {
        "id": "882",
        "source": "leetcodeTitles",
        "source_id": "102",
        "url": "https://leetcode.com/problems/binary-tree-level-order-traversal/",
        "language": "python",
        "query": "Binary Tree Level Order Traversal",
        "snippets": [
            "def levelOrder(root):\n    if root is None:\n        return\n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        print(node.val, end=' ')\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n",
            "def levelOrder(root):\n    if root is None:\n        return\n    queue = [root]\n    while queue:\n        node = queue.pop(0)\n        print(node.val, end=' ')\n        if node.left:\n            queue.append(node.left)\n        if node.right:\n            queue.append(node.right)\n    print()\n",
            "def levelOrder(root):\n    if root is None:\n        return []\n    queue = [root]\n    result = []\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        result.append(level)\n    return result\n"
        ],
        "results": 10
    },
    {
        "id": "883",
        "source": "leetcodeTitles",
        "source_id": "227",
        "url": "https://leetcode.com/problems/jump-game-ii/",
        "language": "python",
        "query": "Jump Game II",
        "snippets": [
            "def jump(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return 0\n    if len(nums) == 2:\n        return 1\n    if len(nums) == 3:\n        return 2\n    if len(nums) == 4:\n        return 3\n    if len(nums) == 5:\n        return 4\n    if len(nums) == 6:\n        return 5\n    if len(nums) == 7:\n        return 6\n    if len(nums) == 8:\n        return 7\n    if len(nums) == 9:\n        return 8\n    if len(nums) == 10:\n        return 9\n    if len(nums) == 11:\n        return 10\n    if len(nums) == 12:\n        return 11\n    if len(nums) == 13:\n        return 12\n    if len(nums) == 14:\n        return 13\n    if len(nums) == 15:\n        return 14\n    if len(nums) == 16:\n        return 15\n    if len(nums) == 17:\n        return 16\n    if len(nums) == 18:\n        return 17\n    if len(nums) == 19:\n        return 18\n    if len(nums) == 20:\n        return 19\n    if len(nums) == 21:\n        return 20\n    if len(nums) == 22:\n        return 21\n    if len(nums) == 23:\n        return 22\n    if len(nums) == 24:\n        return 23\n    if len(nums) == 25:\n        return 24\n    if len(nums) == 26:\n        return 25\n    if len(nums) == 27:\n        return 26\n    if len(nums) == 28:\n        return 27\n    if len(nums) == 29:\n        return 28\n    if len(nums) == 30:\n        return 29\n    if len(nums) == 31:\n        return 30\n    if len(\n",
            "def jump(nums):\n    if len(nums) == 1:\n        return 0\n    if len(nums) == 2:\n        return 1\n    if len(nums) == 3:\n        return 2\n    if len(nums) == 4:\n        return 3\n    if len(nums) == 5:\n        return 4\n    if len(nums) == 6:\n        return 5\n    if len(nums) == 7:\n        return 6\n    if len(nums) == 8:\n        return 7\n    if len(nums) == 9:\n        return 8\n    if len(nums) == 10:\n        return 9\n    if len(nums) == 11:\n        return 10\n    if len(nums) == 12:\n        return 11\n    if len(nums) == 13:\n        return 12\n    if len(nums) == 14:\n        return 13\n    if len(nums) == 15:\n        return 14\n    if len(nums) == 16:\n        return 15\n    if len(nums) == 17:\n        return 16\n    if len(nums) == 18:\n        return 17\n    if len(nums) == 19:\n        return 18\n    if len(nums) == 20:\n        return 19\n    if len(nums) == 21:\n        return 20\n    if len(nums) == 22:\n        return 21\n    if len(nums) == 23:\n        return 22\n    if len(nums) == 24:\n        return 23\n    if len(nums) == 25:\n        return 24\n    if len(nums) == 26:\n        return 25\n    if len(nums) == 27:\n        return 26\n    if len(nums) == 28:\n        return 27\n    if len(nums) == 29:\n        return 28\n    if len(nums) == 30:\n        return 29\n    if len(nums) == 31:\n        return 30\n    if len(nums) == 32:\n        return 31\n    if len(nums) == 33:\n        return\n",
            "def jump(nums):\n    if len(nums) == 1:\n        return 0\n    steps = 0\n    curr_max = 0\n    curr_max_index = 0\n    for i in range(len(nums)):\n        if i > curr_max:\n            return steps\n        if i > curr_max_index:\n            return steps\n        if i == len(nums) - 1:\n            return steps\n        curr_max = max(curr_max, nums[i] + i)\n        curr_max_index = max(curr_max_index, nums[i] + i)\n        steps += 1\n    return steps\n",
            "def jump(nums):\n    if len(nums) == 1:\n        return 0\n    steps = 0\n    curr_max = 0\n    curr_max_index = 0\n    for i in range(len(nums)):\n        if i > curr_max:\n            return -1\n        if i > curr_max_index:\n            curr_max_index = curr_max\n        curr_max = max(curr_max, nums[i] + i)\n    return steps + 1\n",
            "def jump(nums):\n    if len(nums) == 1:\n        return 0\n    steps = 0\n    end = 0\n    for i in range(len(nums) - 1):\n        if i > end:\n            return -1\n        end = max(end, i + nums[i])\n    return steps + 1\n",
            "def jump(nums):\n    if len(nums) == 1:\n        return 0\n    steps = 0\n    curr = 0\n    while curr < len(nums) - 1:\n        steps += 1\n        max_jump = nums[curr]\n        if max_jump == 0:\n            return steps\n        for i in range(curr + 1, curr + max_jump + 1):\n            if i == len(nums) - 1:\n                return steps\n            curr = i\n    return steps\n",
            "def jump(nums):\n    if len(nums) <= 1:\n        return 0\n    steps = 0\n    curr = 0\n    while curr < len(nums) - 1:\n        max_jump = nums[curr]\n        if max_jump == 0:\n            return steps\n        for i in range(curr + 1, curr + max_jump + 1):\n            if i == len(nums) - 1:\n                return steps + 1\n            max_jump = max(max_jump, nums[i])\n        curr += max_jump\n        steps += 1\n    return steps\n",
            "def jump(nums):\n    if len(nums) == 1:\n        return 0\n    steps = 0\n    end = 0\n    for i in range(len(nums) - 1):\n        if end < i:\n            return -1\n        end = max(end, i + nums[i])\n    return steps + 1\n"
        ],
        "results": 10
    },
    {
        "id": "884",
        "source": "leetcodeTitles",
        "source_id": "2022",
        "url": "https://leetcode.com/problems/convert-1d-array-into-2d-array/",
        "language": "python",
        "query": "Convert 1D Array Into 2D Array",
        "snippets": [
            "def convert_1d_to_2d(arr, n):\n    return [arr[i:i+n] for i in range(0, len(arr), n)]\n",
            "def array2d(arr):\n    return [[arr[i]] for i in range(len(arr))]\n"
        ],
        "results": 10
    },
    {
        "id": "885",
        "source": "leetcodeTitles",
        "source_id": "892",
        "url": "https://leetcode.com/problems/surface-area-of-3d-shapes/",
        "language": "python",
        "query": "Surface Area of 3D Shapes",
        "snippets": [
            "def surface_area(length, width, height):\n    return 2 * (length * width + length * height + width * height) + length * width\n",
            "def surface_area(length, width, height):\n    return 2 * (length * width + length * height + width * height) + min(length, width, height) * min(length, width, height)\n",
            "def surface_area(width, height, depth):\n    return 2 * (width * height + height * depth + depth * width)\n",
            "def surface_area(cube):\n    return (6 * (cube[0] ** 2)) + (2 * (cube[0] * cube[1])) + (2 * (cube[0] * cube[2])) + (2 * (cube[1] * cube[2]))\n",
            "def surface_area(cube):\n    \"\"\"\n    Calculates the surface area of a 3D shape.\n    \"\"\"\n    return 2 * sum(cube) + 6 * sum(cube[i][j] for i in range(len(cube)) for j in range(len(cube[i])))\n"
        ],
        "results": 10
    },
    {
        "id": "886",
        "source": "leetcodeTitles",
        "source_id": "1026",
        "url": "https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/",
        "language": "python",
        "query": "Maximum Difference Between Node and Ancestor",
        "snippets": [
            "def max_diff_node_ancestor(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 0\n    if root.left is None:\n        return max_diff_node_ancestor(root.right) + root.val\n    if root.right is None:\n        return max_diff_node_ancestor(root.left) + root.val\n    return max(max_diff_node_ancestor(root.left) + root.val, max_diff_node_ancestor(root.right) + root.val)\n",
            "def maxAncestorDiff(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        return max(abs(node.val - left), abs(node.val - right), abs(node.val - (left + right) / 2))\n    return dfs(root)\n",
            "def max_diff_node_ancestor(root):\n    if not root:\n        return 0\n    return max(max_diff_node_ancestor(root.left), max_diff_node_ancestor(root.right), abs(root.val - root.left.val), abs(root.val - root.right.val))\n",
            "def maxAncestorDiff(root):\n    def maxDiff(node):\n        if not node:\n            return 0\n        left = maxDiff(node.left)\n        right = maxDiff(node.right)\n        return max(left, right, abs(node.val - node.left.val), abs(node.val - node.right.val))\n    return maxDiff(root)\n",
            "def maxDiff(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 0\n    if root.left is None:\n        return maxDiff(root.right) + root.val\n    if root.right is None:\n        return maxDiff(root.left) + root.val\n    return max(maxDiff(root.left), maxDiff(root.right)) + root.val\n",
            "def maxDiff(root):\n    if root is None:\n        return 0\n    left = maxDiff(root.left)\n    right = maxDiff(root.right)\n    return max(left, right, root.val - min(left, right))\n",
            "def maxAncestorDiff(root):\n    def dfs(node, min_val, max_val):\n        if not node:\n            return 0\n        max_diff = max(max_val - min_val, dfs(node.left, min_val, node.val), dfs(node.right, node.val, max_val))\n        return max_diff\n    return dfs(root, root.val, root.val)\n"
        ],
        "results": 10
    },
    {
        "id": "887",
        "source": "leetcodeTitles",
        "source_id": "914",
        "url": "https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/",
        "language": "python",
        "query": "X of a Kind in a Deck of Cards",
        "snippets": [
            "def has_x_of_a_kind(d, n):\n    for i in range(len(d)):\n        if d.count(d[i]) == n:\n            return True\n    return False\n",
            "def has_x_of_a_kind(d, x):\n    for i in range(len(d)):\n        if d.count(d[i]) == x:\n            return True\n    return False\n",
            "def has_x_of_a_kind(deck, n):\n    \"\"\"\n    >>> has_x_of_a_kind([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], 3)\n    True\n    >>> has_x_of_a_kind([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5], 4)\n    False\n    \"\"\"\n    return len(set(deck)) == 1\n",
            "def has_x_of_a_kind(deck, n):\n    for i in range(0, len(deck) - n + 1):\n        if deck[i] == deck[i + n - 1]:\n            return True\n    return False\n",
            "def has_x_of_a_kind(d, n):\n    for i in range(0, len(d)):\n        if d[i] == n:\n            return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "888",
        "source": "leetcodeTitles",
        "source_id": "1688",
        "url": "https://leetcode.com/problems/count-of-matches-in-tournament/",
        "language": "python",
        "query": "Count of Matches in Tournament",
        "snippets": [
            "def main():\n    # Get input\n    num_teams = int(input(\"Enter the number of teams: \"))\n    num_matches = int(input(\"Enter the number of matches: \"))\n    # Initialize variables\n    teams = []\n    matches = []\n    # Create list of teams\n    for i in range(num_teams):\n        teams.append(i+1)\n    # Create list of matches\n    for i in range(num_matches):\n        matches.append(i+1)\n    # Randomly assign matches to teams\n    for i in range(num_matches):\n        random_team = random.choice(teams)\n        random_match = random.choice(matches)\n        print(\"Match\", random_match, \"is assigned to team\", random_team)\n        teams.remove(random_team)\n        matches.remove(random_match)\n    # Print number of teams left\n    print(\"There are\", len(teams), \"teams left.\")\n    # Print number of matches left\n    print(\"There are\", len(matches), \"matches left.\")\n    # Print teams left\n    print(\"Teams left:\", teams)\n    # Print matches left\n    print(\"Matches left:\", matches)\n    # Print number of matches per team\n    print(\"Number of matches per team:\", len(matches)//len(teams))\n",
            "def main():\n    # Get input\n    num_teams = int(input(\"Enter the number of teams: \"))\n    num_matches = int(input(\"Enter the number of matches: \"))\n    # Initialize variables\n    teams = []\n    matches = []\n    # Create list of teams\n    for i in range(num_teams):\n        teams.append(i + 1)\n    # Create list of matches\n    for i in range(num_matches):\n        matches.append(i + 1)\n    # Randomly assign matches to teams\n    for i in range(num_matches):\n        team_1 = random.choice(teams)\n        team_2 = random.choice(teams)\n        while team_1 == team_2:\n            team_2 = random.choice(teams)\n        matches[i] = [team_1, team_2]\n    # Print matches\n    print(\"\\nMatches:\")\n    for i in range(num_matches):\n        # Get \"Match\", i + 1, i:\", matches[i][0], \"vs.\", matches[i][1])\n    # Count number of matches each team has\n    team_matches = {}\n    for i in range(num_matches):\n        if matches[i][0] in team_matches:\n            team_matches[matches[i][0]] += 1\n        else:\n            team_matches[matches[i][0]] = 1\n        if matches[i][1] in team_matches:\n            team_matches[matches[i][1]] += 1\n        else:\n            team_matches[matches[i][1]] = 1\n    # Print number of matches each team has\n    print(\"\\nNumber of matches each team has:\")\n    for i in team_matches:\n        print(i, \":\", team_matches[i])\n    # Count number of matches each team has won\n    team_wins = {}\n    for i in range(num_matches):\n        if matches[i][0] in team_wins:\n            team_wins[matches[\n",
            "def main():\n    # Get input\n    num_teams = int(input(\"Enter the number of teams: \"))\n    num_matches = int(input(\"Enter the number of matches: \"))\n    # Initialize variables\n    teams = []\n    matches = []\n    # Create list of teams\n    for i in range(num_teams):\n        teams.append(i+1)\n    # Create list of matches\n    for i in range(num_matches):\n        matches.append(i+1)\n    # Create list of matches per team\n    matches_per_team = []\n    for i in range(num_teams):\n        matches_per_team.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match = []\n    for i in range(num_matches):\n        matches_per_team_per_match.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match_per_team = []\n    for i in range(num_teams):\n        matches_per_team_per_match_per_team.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match_per_team_per_match = []\n    for i in range(num_teams):\n        matches_per_team_per_match_per_team_per_match.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match_per_team_per_match_per_team = []\n    for i in range(num_teams):\n        matches_per_team_per_match_per_team_per_match_per_team.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match_per_team_per_match_per_team_per_match = []\n    for i in range(num_teams):\n        matches_per_team_per_match_per_team_per_match_per_team_per_match.append(0)\n    # Create list of matches per\n",
            "def main():\n    print(\"nput\n    num_teams = int(input(\"Enter the number of teams: \"))\n    num_matches = int(input(\"Enter the number of matches: \"))\n    # Initialize variables\n    teams = []\n    matches = []\n    # Create list of teams\n    for i in range(num_teams):\n        teams.append(i + 1)\n    # Create list of matches\n    for i in range(num_matches):\n        matches.append(i + 1)\n    # Randomly assign matches to teams_final)\n",
            "def countmatches(tournament):\n    \"\"\"\n    Counts the number o matches n a tourment.\n    \"\"\"\n    return sum(en(t) for t in tournament\n    for i in range(num_matches):\n        team_1 = random.choice(teams)\n        team_2 = random.choice(teams)\n        while team_1 == team_2:\n            team_2 = random.choice(teams)\n        matches[i] = [team_1, team_2]\n    # Print matches\n    print(\"\\nMatches:\")\n    for i in range(num_matches):\n        print(\"Match\", i + 1, \":\", matches[i][0], \"vs.\", matches[i][1])\n    # Count number of matches each team has\n    team_matches = {}\n    for i in range(num_matches):\n        if matches[i][0] in team_matches:\n            team_matches[matches[i][0]] += 1\n        else:\n            team_matches[matches[i][0]] = 1\n        if matches[i][1] in team_matches:\n            team_matches[matches[i][1]] += 1\n        else:\n            team_matches[matches[i][1]] = 1\n    #rint()\n",
            "def count_matches(tournament):\n    \"\"\"\n    Counts the numbe  of matches Pn a tournamert.\n    \"\"\"\n    reiurn sumn1 for match in tournament if matcht number of matches each team has\n    print(\"\\nNumber of matches each team has:\")\n    for i in team_matches:\n        print(i, \":\", team_matches[i])\n    # Count number of matches each team has won\n    team_wins = {}\n    for i in range(num_matches):\n        if matches[i][0] in team_wins:\n            team_wins[matches[\n",
            "def main():\n    # Get input\n    num_teams = int(input(\"Enter the number of teams: \"))\n    num_matches = int(input(\"Enter the number of matches: \"))\n    # Initialize variables\n    teams = []\n    matches = []\n    # Create list of teams\n    for i in range(num_teams):\n        teams.append(i+1)\n    # Create list of matches\n    for i in range(num_matches):\n        matches.append(i+1)\n    # Create list of matches per team\n    matches_per_team = []\n    for i in range(num_teams):\n        matches_per_team.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match = []\n    for i in range(num_matches):\n        matches_per_team_per_match.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match_per_team = []\n    for i in range(num_teams):\n        matches_per_team_per_match_per_team.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match_per_team_per_match = []\n    for i in range(num_teams):\n        matches_per_team_per_match_per_team_per_match.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match_per_team_per_match_per_team = []\n    for i in range(num_teams):\n        matches_per_team_per_match_per_team_per_match_per_team.append(0)\n    # Create list of matches per team\n    matches_per_team_per_match_per_team_per_match_per_team_per_match = []\n    for i in range(num_teams):\n        matches_per_team_per_match_per_team_per_match_per_team_per_match.append(0)\n    # Create list of matches per\n",
            "def main():\n    print(\"This program calculates the number of matches in a tournament.\")\n    print()\n    print(\"Enter the number of teams in the tournament:\")\n    num_teams = int(input())\n    print(\"Enter the number of rounds in the tournament:\")\n    num_rounds = int(input())\n    print(\"Enter the number of matches in each round:\")\n    num_matches = int(input())\n    print(\"Enter the number of matches in the final round:\")\n    num_final = int(input())\n    print()\n    print(\"The number of matches in the tournament is:\",\n          (num_teams * num_rounds * num_matches) + num_final)\n",
            "def main():\n    print(\"This program will count the number of matches in a tournament.\")\n    print()\n    print(\"Enter the number of players:\")\n    players = int(input())\n    print(\"Enter the number of games per match:\")\n    games = int(input())\n    print(\"Enter the number of matches per round:\")\n    rounds = int(input())\n    print(\"Enter the number of rounds per tournament:\")\n    tournaments = int(input())\n    print()\n    print(\"There are\", players, \"players in the tournament.\")\n    print(\"There are\", games, \"games per match.\")\n    print(\"There are\", rounds, \"matches per round.\")\n    print(\"There are\", tournaments, \"rounds per tournament.\")\n    print()\n    print(\"There are\", players * games * rounds * tournaments, \"matches in the tournament.\")\n    print()\n",
            "def count_matches(tournament):\n    \"\"\"\n    Counts the number of matches in a tournament.\n    \"\"\"\n    return sum(1 for match in tournament if match)\n",
            "def main():\n    # Get input\n    num_matches = int(input(\"Enter the number of matches: \"))\n    # Initialize variables\n    num_wins = 0\n    num_losses = 0\n    num_draws = 0\n    # Loop through matches\n    for i in range(num_matches):\n        # Get input\n        match_result = input(\"Enter the result of match {}: \".format(i+1))\n        # Check if match was won, lost, or drawn\n        if match_result == \"win\":\n            num_wins += 1\n        elif match_result == \"loss\":\n            num_losses += 1\n        elif match_result == \"draw\":\n            num_draws += 1\n        else:\n            print(\"Invalid input\")\n            return\n    # Print results\n    print(\"Wins: {}\".format(num_wins))\n    print(\"Losses: {}\".format(num_losses))\n    print(\"Draws: {}\".format(num_draws))\n    print(\"Total: {}\".format(num_wins + num_losses + num_draws))\n    return\n"
        ],
        "results": 8
    },
    {
        "id": "889",
        "source": "leetcodeTitles",
        "source_id": "1624",
        "url": "https://leetcode.com/problems/largest-substring-between-two-equal-characters/",
        "language": "python",
        "query": "Largest Substring Between Two Equal Characteres",
        "snippets": [
            "def largest_substring(s):\n    \"\"\"\n    Given a string, find the largest substring between two equal characters.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    max_len = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            max_len = max(max_len, i - start + 1)\n        else:\n            start = i + 1\n    return s[start:start+max_len]\n",
            "def largest_substring(s):\n    \"\"\"\n    Given a string, find the largest substring between two equal characters.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    max_len = 0\n    max_start = 0\n    max_end = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            max_start = i\n            max_end = i + 1\n            while max_end < len(s) and s[max_start] == s[max_end]:\n                max_end += 1\n            if max_end - max_start > max_len:\n                max_len = max_end - max_start\n    return s[max_start:max_end]\n",
            "def largest_substring(s):\n    \"\"\"\n    Given a string, find the largest substring between two equal characters.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    max_len = 0\n    max_substring = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                if j-i+1 > max_len:\n                    max_len = j-i+1\n                    max_substring = s[i:j+1]\n    return max_substring\n",
            "def largest_substring(s):\n    \"\"\"\n    Given a string, find the largest substring that contains two equal characters.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    max_len = 0\n    max_str = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j] and j-i+1 > max_len:\n                max_len = j-i+1\n                max_str = s[i:j+1]\n    return max_str\n",
            "def lss(s):\n    if len(s) == 1:\n        return s\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i] == s[j]:\n                max_len = max(max_len, j-i)\n    return max_len\n",
            "def largest_substring(s):\n    \"\"\"\n    Given a string, find the largest substring that contains two equal\n    characters.\n    \"\"\"\n    if len(s) < 2:\n        return s\n    max_len = 0\n    max_str = ''\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if s[i] == s[j]:\n                if j-i+1 > max_len:\n                    max_len = j-i+1\n                    max_str = s[i:j+1]\n    return max_str\n",
            "def largest_substring(string):\n    \"\"\"\n    Given a string, find the largest substring that contains two equal\n    characters.\n    \"\"\"\n    if len(string) < 2:\n        return string\n    max_len = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                max_len = max(max_len, j-i+1)\n    return string[:max_len]\n",
            "def largest_substring(s):\n    if len(s) < 2:\n        return s\n    max_len = 0\n    max_start = 0\n    start = 0\n    for i in range(len(s)):\n        if s[i] == s[i-1]:\n            start = i+1\n        else:\n            if i-start+1 > max_len:\n                max_len = i-start+1\n                max_start = start\n    return s[max_start:max_start+max_len]\n",
            "def largest_substring(string):\n    \"\"\"\n    Given a string, find the largest substring that contains two equal characters.\n    \"\"\"\n    if len(string) < 2:\n        return string\n    max_length = 0\n    max_substring = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)):\n            if string[i] == string[j]:\n                if j - i + 1 > max_length:\n                    max_length = j - i + 1\n                    max_substring = string[i:j+1]\n    return max_substring\n",
            "def largest_substring(s):\n    \"\"\"\n    Given a string, find the largest substring that is a palindrome.\n    \"\"\"\n    if len(s) == 1:\n        return s\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                max_len = max(max_len, len(s[i:j]))\n    return max_len\n"
        ],
        "results": 10
    },
    {
        "id": "890",
        "source": "leetcodeTitles",
        "source_id": "402",
        "url": "https://leetcode.com/problems/remove-k-digits/",
        "language": "python",
        "query": "Remove K Digits",
        "snippets": [
            "def removeKdigits(num, k):\n    if k == len(num):\n        return '0'\n    stack = []\n    for digit in num:\n        while k and stack and stack[-1] > digit:\n            stack.pop()\n            k -= 1\n        stack.append(digit)\n    return ''.join(stack[:-k or None]).lstrip('0') or '0'\n",
            "def removeKdigits(num, k):\n    if k == len(num):\n        return '0'\n    stack = []\n    for i in num:\n        while k and stack and stack[-1] > i:\n            stack.pop()\n            k -= 1\n        stack.append(i)\n    return ''.join(stack[:-k or None]).lstrip('0') or '0'\n",
            "def removeKdigits(num, k):\n    if k == len(num):\n        return '0'\n    num = list(num)\n    for i in range(k):\n        for j in range(len(num)):\n            if num[j] != '0':\n                num[j] = '0'\n                break\n    while num[0] == '0':\n        num.pop(0)\n    return ''.join(num)\n",
            "def removeKdigits(num, k):\n    if k == len(num):\n        return '0'\n    num = list(num)\n    for i in range(k):\n        for j in range(len(num)):\n            if num[j] > num[j+1]:\n                num[j], num[j+1] = num[j+1], num[j]\n                break\n        num.pop()\n    return str(int(''.join(num)))\n",
            "def removeKdigits(num, k):\n    if k == len(num):\n        return '0'\n    num = list(num)\n    for i in range(k):\n        for j in range(len(num)):\n            if num[j] != '0':\n                num[j] = '0'\n                break\n    while num[0] == '0':\n        num.pop(0)\n    return ''.join(num) if len(num) != 0 else '0'\n"
        ],
        "results": 10
    },
    {
        "id": "891",
        "source": "leetcodeTitles",
        "source_id": "1039",
        "url": "https://leetcode.com/problems/minimum-score-triangulation-of-polygon/",
        "language": "python",
        "query": "Minimum Score Triangulation of Polygon",
        "snippets": [
            "def minScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j])\n    return dp[0][n - 1]\n",
            "def minScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[j] * A[k])\n    return dp[0][n - 1]\n",
            "def minScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1):\n        dp[i][i + 1] = A[i] + A[i + 1]\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + A[i] * A[k] * A[j])\n    return dp[0][n - 1]\n",
            "def minScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j])\n    return dp[0][-1]\n",
            "def minimumScoreTriangulation(A):\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for l in range(2, n):\n        for i in range(n - l):\n            j = i + l\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j])\n    return dp[0][-1]\n",
            "def minimumScoreTriangulation(A):\n    A.sort()\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n-1):\n        dp[i][i+1] = A[i] + A[i+1]\n    for l in range(3, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + A[i] * A[k] * A[j])\n    return dp[0][n-1]\n",
            "def minimumScoreTriangulation(A):\n    A.sort()\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1):\n        dp[i][i + 1] = A[i] * A[i + 1]\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + A[i] * A[k] * A[j])\n    return dp[0][n - 1]\n",
            "def minimumScoreTriangulation(A):\n    A.append(A[0])\n    A.append(A[1])\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n - 1):\n        dp[i][i + 1] = 0\n    for l in range(3, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            dp[i][j] = float('inf')\n            for k in range(i + 1, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j])\n    return dp[0][n - 1]\n"
        ],
        "results": 10
    },
    {
        "id": "892",
        "source": "leetcodeTitles",
        "source_id": "1254",
        "url": "https://leetcode.com/problems/number-of-closed-islands/",
        "language": "python",
        "query": "Number of Closed Islands",
        "snippets": [
            "def numIslands(grid):\n    \"\"\"\n    :type grid: List[List[str]]\n    :rtype: int\n    \"\"\"\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '1' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                count += 1\n    return count\n",
            "def numIslands(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '1' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                count += 1\n    return count\n",
            "def numIslands(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                dfs(grid, i, j)\n                count += 1\n    return count\n",
            "def numIslands(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '1' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                count += 1\n    return count\n",
            "def num_closed_islands(grid):\n    if not grid:\n        return 0\n    visited = set()\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1 and (i, j) not in visited:\n                count += 1\n                dfs(grid, i, j, visited)\n    return count\n",
            "def num_closed_islands(grid):\n    \"\"\"\n    :param grid: list of lists of ints\n    :return: int\n    \"\"\"\n    if not grid:\n        return 0\n    visited = set()\n    islands = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1 and (i, j) not in visited:\n                islands += 1\n                dfs(grid, i, j, visited)\n    return islands\n"
        ],
        "results": 10
    },
    {
        "id": "893",
        "source": "leetcodeTitles",
        "source_id": "1546",
        "url": "https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/",
        "language": "python",
        "query": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "snippets": [
            "def maxNonOverlapping(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1 if nums[0] == target else 0\n    if len(nums) == 2:\n        return 1 if nums[0] + nums[1] == target else 0\n    if len(nums) == 3:\n        return 1 if nums[0] + nums[1] + nums[2] == target else 0\n    if len(nums) == 4:\n        return 1 if nums[0] + nums[1] + nums[2] + nums[3] == target else 0\n    if len(nums) == 5:\n        return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] == target else 0\n    if len(nums) == 6:\n        return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] == target else 0\n    if len(nums) == 7:\n        return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] == target else 0\n    if len(nums) == 8:\n        return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] == target else 0\n    if len(nums) == 9:\n        return 1 if nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8] == target else 0\n    if len(\n",
            "def maxNonOverlapping(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = 1\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] + nums[j] == target:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n"
        ],
        "results": 10
    },
    {
        "id": "894",
        "source": "leetcodeTitles",
        "source_id": "1080",
        "url": "https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths/",
        "language": "python",
        "query": "Insufficient Nodes in Root to Leaf Paths",
        "snippets": [
            "def sufficient_nodes(root, min_nodes):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is None:\n        return sufficient_nodes(root.right, min_nodes)\n    if root.right is None:\n        return sufficient_nodes(root.left, min_nodes)\n    return sufficient_nodes(root.left, min_nodes) and sufficient_nodes(root.right, min_nodes)\n",
            "def sufficient_nodes(root, min_nodes):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return min_nodes <= 1\n    if root.left is None:\n        return sufficient_nodes(root.right, min_nodes - 1)\n    if root.right is None:\n        return sufficient_nodes(root.left, min_nodes - 1)\n    return sufficient_nodes(root.left, min_nodes - 1) and sufficient_nodes(root.right, min_nodes - 1)\n",
            "def sufficient_nodes(root, min_nodes):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return min_nodes <= 1\n    return sufficient_nodes(root.left, min_nodes - 1) and sufficient_nodes(root.right, min_nodes - 1)\n",
            "def sufficient_nodes(root, min_value):\n    if root is None:\n        return True\n    if root.value < min_value:\n        return False\n    if root.left is None and root.right is None:\n        return True\n    return sufficient_nodes(root.left, min_value) and sufficient_nodes(root.right, min_value)\n"
        ],
        "results": 10
    },
    {
        "id": "895",
        "source": "leetcodeTitles",
        "source_id": "1017",
        "url": "https://leetcode.com/problems/convert-to-base-2/",
        "language": "python",
        "query": "Convert to Base -2",
        "snippets": [
            "def convert_to_base_2(n):\n    \"\"\"\n    Convert to Base 2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -convert_to_base_2(-n)\n    else:\n        return convert_to_base_2(n // 2) * 10 + n % 2\n",
            "def convert_to_base_2(n):\n    \"\"\"\n    Convert to Base 2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -convert_to_base_2(-n)\n    else:\n        return 1 + convert_to_base_2(n // 2)\n",
            "def convert_to_base_2(n):\n    \"\"\"\n    Convert to Base -2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -convert_to_base_2(-n)\n    else:\n        return convert_to_base_2(n // -2) + (n % -2)\n",
            "def convert_to_base_2(n):\n    \"\"\"\n    Convert to Base -2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1 * convert_to_base_2(-1 * n)\n    else:\n        return 1 + convert_to_base_2(n // 2)\n",
            "def convert_to_base_2(n):\n    \"\"\"\n    Convert to Base 2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return 1 + convert_to_base_2(n // 2)\n",
            "def convert_to_base_2(n):\n    \"\"\"\n    Convert to Base 2\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return convert_to_base_2(n // 2) * 2 + n % 2\n",
            "def to_base_2(n):\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return 1 + to_base_2(n // 2)\n"
        ],
        "results": 10
    },
    {
        "id": "896",
        "source": "leetcodeTitles",
        "source_id": "2148",
        "url": "https://leetcode.com/problems/count-elements-with-strictly-smaller-and-greater-elements/",
        "language": "python",
        "query": "Count Elements With Strictly Smaller and Greater Elements",
        "snippets": [
            "def countElements(arr):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] + 1 in arr:\n            count += 1\n    return count\n",
            "def countElements(arr):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] + 1 in arr:\n            count += 1\n    return count\n",
            "def count_elements(arr):\n    # Write your code here\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] < arr[j]:\n                count += 1\n    return count\n",
            "def count_elements(arr):\n    \"\"\"\n    Count the number of elements in the array that are smaller than the\n    current element and greater than the current element.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        count += arr[i]\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[i]:\n                count += 1\n    return count\n",
            "def count_elements(arr):\n    return sum(1 for i in range(len(arr)) if arr[i] < arr[i+1])\n"
        ],
        "results": 10
    },
    {
        "id": "897",
        "source": "leetcodeTitles",
        "source_id": "1043",
        "url": "https://docs.google.com/spreadsheets/d/1MUtHfwbkWO4W69NaNiwv_hgABNfXZu2M69PNgL8PBXs/edit#gid=0",
        "language": "python",
        "query": "Partition Array for Maximum Sum",
        "snippets": [
            "def partition(arr, n):\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(arr[0], arr[1], arr[2])\n    if n == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if n == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if n == 6:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if n == 7:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if n == 8:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if n == 9:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if n == 10:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if n == 11:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if n == 12:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11])\n    if n == 13:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6\n",
            "def partition(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0] + arr[2], arr[1])\n    if len(arr) == 4:\n        return max(arr[0] + arr[3], arr[1] + arr[2])\n    if len(arr) == 5:\n        return max(arr[0] + arr[4], arr[1] + arr[3], arr[2] + arr[4])\n    if len(arr) == 6:\n        return max(arr[0] + arr[5], arr[1] + arr[4], arr[2] + arr[5], arr[3] + arr[4])\n    if len(arr) == 7:\n        return max(arr[0] + arr[6], arr[1] + arr[5], arr[2] + arr[6], arr[3] + arr[5], arr[4] + arr[6])\n    if len(arr) == 8:\n        return max(arr[0] + arr[7], arr[1] + arr[6], arr[2] + arr[7], arr[3] + arr[6], arr[4] + arr[7], arr[5] + arr[6])\n    if len(arr) == 9:\n        return max(arr[0] + arr[8], arr[1] + arr[7], arr[2] + arr[8], arr[3] + arr[7], arr[4] + arr[8], arr[5] + arr[7], arr[6] + arr[8])\n    if len(arr) == 10:\n        return max(arr[0] + arr[9], arr[1] + arr[8], arr[2] + arr[9], arr[3] + arr[8], arr[4] + arr[9], arr[5] + arr[8], arr[6] + arr[9], arr[7] + arr\n",
            "def partition(arr, n):\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return max(arr[0], arr[1])\n    if n == 3:\n        return max(arr[0] + arr[2], arr[1])\n    if n == 4:\n        return max(arr[0] + arr[3], arr[1] + arr[2])\n    if n == 5:\n        return max(arr[0] + arr[4], arr[1] + arr[3], arr[2])\n    if n == 6:\n        return max(arr[0] + arr[5], arr[1] + arr[4], arr[2] + arr[3])\n    if n == 7:\n        return max(arr[0] + arr[6], arr[1] + arr[5], arr[2] + arr[4], arr[3])\n    if n == 8:\n        return max(arr[0] + arr[7], arr[1] + arr[6], arr[2] + arr[5], arr[3] + arr[4])\n    if n == 9:\n        return max(arr[0] + arr[8], arr[1] + arr[7], arr[2] + arr[6], arr[3] + arr[5], arr[4])\n    if n == 10:\n        return max(arr[0] + arr[9], arr[1] + arr[8], arr[2] + arr[7], arr[3] + arr[6], arr[4] + arr[5])\n    if n == 11:\n        return max(arr[0] + arr[10], arr[1] + arr[9], arr[2] + arr[8], arr[3] + arr[7], arr[4] + arr[6], arr[5])\n    if n == 12:\n        return max(arr[0] + arr[11], arr[1] + arr[10], arr[2] + arr[9], arr[3] + arr[8], arr[4] + arr[7], arr[5] + arr[6])\n    if n\n",
            "def partition(arr, low, high):\n    i = low - 1\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[high] = arr[high], arr[i + 1]\n    return i + 1\n",
            "def partition(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return max(arr[0] + partition(arr[1:]), partition(arr[1:]))\n",
            "def partition(arr):\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0] + arr[2], arr[1])\n    if len(arr) == 4:\n        return max(arr[0] + arr[3], arr[1] + arr[2])\n    if len(arr) == 5:\n        return max(arr[0] + arr[4], arr[1] + arr[3], arr[2])\n    if len(arr) == 6:\n        return max(arr[0] + arr[5], arr[1] + arr[4], arr[2] + arr[3])\n    if len(arr) == 7:\n        return max(arr[0] + arr[6], arr[1] + arr[5], arr[2] + arr[4], arr[3])\n    if len(arr) == 8:\n        return max(arr[0] + arr[7], arr[1] + arr[6], arr[2] + arr[5], arr[3] + arr[4])\n    if len(arr) == 9:\n        return max(arr[0] + arr[8], arr[1] + arr[7], arr[2] + arr[6], arr[3] + arr[5], arr[4])\n    if len(arr) == 10:\n        return max(arr[0] + arr[9], arr[1] + arr[8], arr[2] + arr[7], arr[3] + arr[6], arr[4] + arr[5])\n    if len(arr) == 11:\n        return max(arr[0] + arr[10], arr[1] + arr[9], arr[2] + arr[8], arr[3] + arr[7], arr[4] + arr[6], arr[5])\n    if len(arr) == 12:\n        return max(arr[0] + arr[11], arr[1] + arr[10], arr[2] + arr\n",
            "def partition(arr):\n    if len(arr) == 1:\n        return arr\n    else:\n        return max(partition(arr[:len(arr)//2]), partition(arr[len(arr)//2:]))\n"
        ],
        "results": 10
    },
    {
        "id": "898",
        "source": "leetcodeTitles",
        "source_id": "2310",
        "url": "https://leetcode.com/problems/sum-of-numbers-with-units-digit-k/",
        "language": "python",
        "query": "Sum of Numbers With Units Digit K",
        "snippets": [
            "def sum_of_numbers_with_units_digit_k(n, k):\n    \"\"\"\n    n: int\n    k: int\n    return: int\n    \"\"\"\n    return sum(map(lambda x: int(x[-1]) == k, str(n)))\n",
            "def sum_of_numbers_with_units_digit_k(n, k):\n    return sum(map(lambda x: int(x[-1]) == k, str(n)))\n",
            "def sum_of_numbers_with_units_digit_k(n, k):\n    return sum(map(lambda x: int(x) if x.endswith(str(k)) else 0, str(n)))\n",
            "def sum_of_numbers_with_units_digit_k(n, k):\n    \"\"\"\n    n: int\n    k: int\n    return: int\n    \"\"\"\n    return sum(int(str(i)[-1]) == k for i in range(1, n + 1))\n",
            "def sum_of_units_digit_k(n, k):\n    \"\"\"\n    n: int\n    k: int\n    return: int\n    \"\"\"\n    return sum(int(x) for x in str(n) if int(x) % k == 0)\n",
            "def sum_of_numbers_with_units_digit_k(n, k):\n    \"\"\"\n    n: int\n    k: int\n    return: int\n    \"\"\"\n    return sum([int(i) for i in str(n) if int(i) % k == 0])\n",
            "def sum_of_numbers_with_units_digit_k(n, k):\n    return sum(map(lambda x: int(x) if x[-1] == str(k) else 0, str(n)))\n"
        ],
        "results": 10
    },
    {
        "id": "899",
        "source": "leetcodeTitles",
        "source_id": "217",
        "url": "https://leetcode.com/problems/contains-duplicate/",
        "language": "python",
        "query": "Contains Duplicate",
        "snippets": [
            "def contains_duplicate(list):\n    \"\"\"\n    Checks if a list contains duplicate elements\n    \"\"\"\n    if len(list) == len(set(list)):\n        return False\n    else:\n        return True\n",
            "def contains_duplicate(list_of_numbers):\n    \"\"\"\n    Checks if a list contains duplicate numbers\n    \"\"\"\n    if len(list_of_numbers) == len(set(list_of_numbers)):\n        return False\n    else:\n        return True\n",
            "def contains_duplicate(list_of_numbers):\n    \"\"\"\n    Checks if a list of numbers contains duplicate numbers\n    \"\"\"\n    if len(list_of_numbers) == len(set(list_of_numbers)):\n        return False\n    else:\n        return True\n",
            "def contains_duplicate(list_of_numbers):\n    \"\"\"\n    Checks if a list of numbers contains duplicate numbers.\n    \"\"\"\n    if len(list_of_numbers) == len(set(list_of_numbers)):\n        return False\n    else:\n        return True\n",
            "def contains_duplicate(list):\n    \"\"\"\n    Returns True if list contains duplicate elements\n    \"\"\"\n    return len(list) != len(set(list))\n",
            "def contains_duplicate(list):\n    \"\"\"\n    :param list: list of integers\n    :return: True if list contains duplicate elements, False otherwise\n    \"\"\"\n    return len(list) != len(set(list))\n",
            "def contains_duplicate(list_of_ints):\n    \"\"\"\n    Checks if a list of integers contains duplicate elements\n    \"\"\"\n    if len(list_of_ints) == len(set(list_of_ints)):\n        return False\n    else:\n        return True\n",
            "def contains_duplicate(list_of_ints):\n    \"\"\"\n    Checks if a list of integers contains duplicate elements\n    \"\"\"\n    return len(list_of_ints) != len(set(list_of_ints))\n"
        ],
        "results": 10
    },
    {
        "id": "900",
        "source": "leetcodeTitles",
        "source_id": "1482",
        "url": "https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/",
        "language": "python",
        "query": "Minimum Number of Days to Make m Bouquets",
        "snippets": [
            "def minDays(bouquet, m):\n    n = len(bouquet)\n    if n < m:\n        return -1\n    if n == m:\n        return bouquet[0]\n    if n == m + 1:\n        return bouquet[0] + bouquet[1]\n    if n == m + 2:\n        return bouquet[0] + bouquet[1] + bouquet[2]\n    if n == m + 3:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3]\n    if n == m + 4:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4]\n    if n == m + 5:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5]\n    if n == m + 6:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5] + bouquet[6]\n    if n == m + 7:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5] + bouquet[6] + bouquet[7]\n    if n == m + 8:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5] + bouquet[6] + bouquet[7] + bouquet[8]\n    if n == m + 9:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5] + bouquet[6] + bouquet[7] + bouquet[8] + bouquet[9]\n    if n == m + 10:\n        return bouquet[0] + bouquet[1] + bouquet[2] +\n",
            "def minDays(bouquets, minSize, maxSize):\n    \"\"\"\n    :param bouquets: list of integers\n    :param minSize: integer\n    :param maxSize: integer\n    :return: integer\n    \"\"\"\n    # Write your code here\n    bouquets.sort()\n    bouquets.reverse()\n    i = 0\n    j = 0\n    count = 0\n    while i < len(bouquets):\n        if bouquets[i] >= minSize:\n            j = i\n            while j < len(bouquets) and bouquets[j] >= minSize:\n                j += 1\n            if j - i >= maxSize:\n                count += 1\n                i = j\n            else:\n                i = j\n        else:\n            i += 1\n    return count\n",
            "def minDays(bouquet, m):\n    \"\"\"\n    :param bouquet: list of integers\n    :param m: integer\n    :return: integer\n    \"\"\"\n    n = len(bouquet)\n    if m > n:\n        return -1\n    if m == n:\n        return 0\n    bouquet.sort()\n    min_days = 0\n    while m > 0:\n        min_days += 1\n        i = 0\n        while i < n:\n            if bouquet[i] >= min_days:\n                bouquet[i] -= min_days\n                i += 1\n            else:\n                break\n        m -= 1\n    return min_days\n",
            "def minDays(bouquet, m):\n    n = len(bouquet)\n    if n < m:\n        return -1\n    if n == m:\n        return bouquet.count(1)\n    if n == m + 1:\n        return bouquet.count(1) + bouquet.count(2)\n    if n == m + 2:\n        return bouquet.count(1) + bouquet.count(2) + bouquet.count(3)\n    if n == m + 3:\n        return bouquet.count(1) + bouquet.count(2) + bouquet.count(3) + bouquet.count(4)\n    if n == m + 4:\n        return bouquet.count(1) + bouquet.count(2) + bouquet.count(3) + bouquet.count(4) + bouquet.count(5)\n    if n == m + 5:\n        return bouquet.count(1) + bouquet.count(2) + bouquet.count(3) + bouquet.count(4) + bouquet.count(5) + bouquet.count(6)\n    if n == m + 6:\n        return bouquet.count(1) + bouquet.count(2) + bouquet.count(3) + bouquet.count(4) + bouquet.count(5) + bouquet.count(6) + bouquet.count(7)\n    if n == m + 7:\n        return bouquet.count(1) + bouquet.count(2) + bouquet.count(3) + bouquet.count(4) + bouquet.count(5) + bouquet.count(6) + bouquet.count(7) + bouquet.count(8)\n    if n == m + 8:\n        return bouquet.count(1) + bouquet.count(2) + bouquet.count(3) + bouquet.count(4) + bouquet.count(5) + bouquet.count(6) + bouquet.count(7) + bouquet.count(8) + bouquet.count(9)\n    if n == m + 9:\n",
            "def minDays(bouquet, m):\n    if m == 0:\n        return 0\n    if len(bouquet) == 0:\n        return -1\n    if len(bouquet) == 1:\n        return 1\n    if len(bouquet) == 2:\n        if bouquet[0] == bouquet[1]:\n            return 1\n        else:\n            return 2\n    if len(bouquet) == 3:\n        if bouquet[0] == bouquet[1] and bouquet[1] == bouquet[2]:\n            return 1\n        elif bouquet[0] == bouquet[1] or bouquet[1] == bouquet[2] or bouquet[0] == bouquet[2]:\n            return 2\n        else:\n            return 3\n    if len(bouquet) == 4:\n        if bouquet[0] == bouquet[1] and bouquet[1] == bouquet[2] and bouquet[2] == bouquet[3]:\n            return 1\n        elif bouquet[0] == bouquet[1] and bouquet[1] == bouquet[2] or bouquet[0] == bouquet[1] and bouquet[1] == bouquet[3] or bouquet[0] == bouquet[2] and bouquet[2] == bouquet[3] or bouquet[1] == bouquet[2] and bouquet[2] == bouquet[3]:\n            return 2\n        elif bouquet[0] == bouquet[1] or bouquet[1] == bouquet[2] or bouquet[0] == bouquet[2] or bouquet[0] == bouquet[3] or bouquet[1] == bouquet[3] or bouquet[2] == bouquet[3]:\n            return 3\n        else:\n            return 4\n    if len(bouquet) == 5:\n        if bouquet[0] == bouquet[1] and bouquet[1] == bouquet[2] and bouquet[2] == bouquet[3] and bouquet[3] == bouquet[4]:\n            return 1\n        elif bou\n",
            "def minDays(bouquet, m):\n    \"\"\"\n    :param bouquet: list of integers\n    :param m: integer\n    :return: integer\n    \"\"\"\n    # Write your code here\n    n = len(bouquet)\n    if n < m:\n        return -1\n    bouquet.sort()\n    i = 0\n    j = n - 1\n    count = 0\n    while i < j:\n        if bouquet[i] + bouquet[j] > m:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n            count += 1\n    return count\n",
            "def minDays(bouquet, m):\n    \"\"\"\n    :param bouquet: list of integers\n    :param m: integer\n    :return: integer\n    \"\"\"\n    # Write your code here.\n    n = len(bouquet)\n    if n < m:\n        return -1\n    if n == m:\n        return bouquet[0]\n    if n == m + 1:\n        return bouquet[0] + bouquet[1]\n    if n == m + 2:\n        return bouquet[0] + bouquet[1] + bouquet[2]\n    if n == m + 3:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3]\n    if n == m + 4:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4]\n    if n == m + 5:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5]\n    if n == m + 6:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5] + bouquet[6]\n    if n == m + 7:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5] + bouquet[6] + bouquet[7]\n    if n == m + 8:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5] + bouquet[6] + bouquet[7] + bouquet[8]\n    if n == m + 9:\n        return bouquet[0] + bouquet[1] + bouquet[2] + bouquet[3] + bouquet[4] + bouquet[5] + bouquet[6] + bouquet[7] + bouquet[8\n",
            "def minDays(bouquet, m):\n    \"\"\"\n    :param bouquet: list of integers\n    :param m: integer\n    :return: integer\n    \"\"\"\n    # Write your code here.\n    if len(bouquet) < m:\n        return -1\n    bouquet.sort()\n    i = 0\n    j = len(bouquet) - 1\n    while i < j:\n        if bouquet[i] + bouquet[j] > m:\n            j -= 1\n        else:\n            i += 1\n    return len(bouquet) - i\n",
            "def minDays(bouquets, m, k):\n    if m > len(bouquets):\n        return -1\n    bouquet_count = 0\n    for i in range(len(bouquets)):\n        if bouquets[i] >= k:\n            bouquet_count += 1\n    if bouquet_count >= m:\n        return 0\n    else:\n        return minDays(bouquets[1:], m, k) + 1\n"
        ],
        "results": 10
    },
    {
        "id": "901",
        "source": "leetcodeTitles",
        "source_id": "806",
        "url": "https://leetcode.com/problems/number-of-lines-to-write-string/",
        "language": "python",
        "query": "Number of Lines To Write String",
        "snippets": [
            "def number_of_lines(string):\n    return len(string.split('\\n'))\n",
            "def lines_to_write(string):\n    return len(string.split('\\n'))\n",
            "def number_of_lines(filename):\n    \"\"\"\n    Returns the number of lines in a file\n    \"\"\"\n    with open(filename) as f:\n        return sum(1 for line in f)\n",
            "def number_of_lines(string):\n    return string.count('\\n') + 1\n",
            "def main():\n    print(\"Number of Lines To Write String\")\n    print(\"Enter a string:\")\n    string = input()\n    print(\"Enter a number:\")\n    number = int(input())\n    print(\"The string is:\")\n    for i in range(number):\n        print(string)\n",
            "def num_lines(string):\n    return string.count('\\n') + 1\n"
        ],
        "results": 10
    },
    {
        "id": "902",
        "source": "leetcodeTitles",
        "source_id": "645",
        "url": "https://leetcode.com/problems/set-mismatch/",
        "language": "python",
        "query": "Set Mismatch",
        "snippets": [
            "def set_mismatch(list1, list2):\n    \"\"\"\n    Return the number of elements in list1 that are not in list2.\n    \"\"\"\n    return len(list(set(list1) - set(list2)))\n",
            "def set_mismatch(list1, list2):\n    \"\"\"\n    Returns the number of elements in list1 that are not in list2.\n    \"\"\"\n    return len(list(set(list1) - set(list2)))\n",
            "def set_mismatch(list1, list2):\n    \"\"\"\n    Returns the number of elements in list1 that are not in list2\n    \"\"\"\n    return len(list(set(list1) - set(list2)))\n",
            "def set_mismatch(list1, list2):\n    \"\"\"\n    Returns the number of elements in list1 that are not in list2\n    \"\"\"\n    return len(set(list1) - set(list2))\n",
            "def set_mismatch(s1, s2):\n    \"\"\"\n    Given two strings, figure out the number of positions where they differ.\n    \"\"\"\n    return sum(1 for i in range(len(s1)) if s1[i] != s2[i])\n",
            "def set_mismatch(list1, list2):\n    \"\"\"\n    Given two lists, return the number of positions at which the two lists\n    differ.\n    \"\"\"\n    if len(list1) != len(list2):\n        return True\n    else:\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                return True\n        return False\n",
            "def set_mismatch(list1, list2):\n    \"\"\"\n    Given two lists of numbers, return the number of positions at which the\n    corresponding elements have different values.\n    \"\"\"\n    if len(list1) != len(list2):\n        return None\n    else:\n        count = 0\n        for i in range(len(list1)):\n            if list1[i] != list2[i]:\n                count += 1\n        return count\n"
        ],
        "results": 9
    },
    {
        "id": "903",
        "source": "leetcodeTitles",
        "source_id": "492",
        "url": "https://leetcode.com/problems/construct-the-rectangle/",
        "language": "python",
        "query": "Construct the Rectangle",
        "snippets": [
            "def constructRectangle(area):\n    \"\"\"\n    :type area: int\n    :rtype: List[int]\n    \"\"\"\n    w = int(area ** 0.5)\n    while area % w != 0:\n        w -= 1\n    return [area // w, w]\n",
            "def construct_rectangle(area):\n    \"\"\"\n    :param area: int\n    :return: list\n    \"\"\"\n    w = int(area ** 0.5)\n    while area % w != 0:\n        w -= 1\n    return [area // w, w]\n",
            "def main():\n    print(\"This program calculates the area of a rectangle.\")\n    length = int(input(\"Enter the length of the rectangle: \"))\n    width = int(input(\"Enter the width of the rectangle: \"))\n    area = length * width\n    print(\"The area of the rectangle is\", area)\n",
            "def rectangle(width, height):\n    \"\"\"\n    Prints a rectangle with a width and height\n    \"\"\"\n    for i in range(height):\n        print('#' * width)\n    return None\n",
            "def rectangle(width, height):\n    \"\"\"\n    Prints a rectangle of a given width and height.\n    \"\"\"\n    for i in range(height):\n        print(\"#\" * width)\n    return\n",
            "def rectangle(width, height):\n    \"\"\"\n    Prints a rectangle with a width and height\n    \"\"\"\n    for i in range(height):\n        print('#' * width)\n    return\n",
            "def rectangle(width, height):\n    \"\"\"\n    Returns a string of the rectangle with the given width and height.\n    \"\"\"\n    return '\\n'.join(['*' * width for _ in range(height)])\n",
            "def rectangle(width, height):\n    \"\"\"\n    Print a rectangle of given width and height.\n    \"\"\"\n    for i in range(height):\n        print('*' * width)\n    return None\n",
            "def rectangle(width, height):\n    \"\"\"\n    Prints a rectangle with a given width and height\n    \"\"\"\n    for i in range(height):\n        print('#' * width)\n    return None\n"
        ],
        "results": 10
    },
    {
        "id": "904",
        "source": "leetcodeTitles",
        "source_id": "787",
        "url": "https://leetcode.com/problems/cheapest-flights-within-k-stops/",
        "language": "python",
        "query": "Cheapest Flights Within K Stops",
        "snippets": [
            "def findCheapestPrice(n, flights, src, dst, K):\n    \"\"\"\n    :type n: int\n    :type flights: List[List[int]]\n    :type src: int\n    :type dst: int\n    :type K: int\n    :rtype: int\n    \"\"\"\n    # build graph\n    graph = {}\n    for u, v, w in flights:\n        if u not in graph:\n            graph[u] = {}\n        graph[u][v] = w\n    # dfs\n    q = [(src, 0, 0)]\n    while q:\n        u, cost, stops = q.pop(0)\n        if u == dst:\n            return cost\n        if stops > K:\n            continue\n        if u in graph:\n            for v, w in graph[u].items():\n                q.append((v, cost + w, stops + 1))\n    return -1\n",
            "def findCheapestPrice(n, flights, src, dst, K):\n    \"\"\"\n    :type n: int\n    :type flights: List[List[int]]\n    :type src: int\n    :type dst: int\n    :type K: int\n    :rtype: int\n    \"\"\"\n    # Create a graph\n    graph = [[] for _ in range(n)]\n    for u, v, w in flights:\n        graph[u].append((v, w))\n    # Dijkstra's algorithm\n    pq = [(0, src, K + 1)]\n    while pq:\n        cost, u, k = heapq.heappop(pq)\n        if u == dst:\n            return cost\n        if k > 0:\n            for v, w in graph[u]:\n                heapq.heappush(pq, (cost + w, v, k - 1))\n    return -1\n",
            "def findCheapestPrice(n, flights, src, dst, K):\n    \"\"\"\n    :type n: int\n    :type flights: List[List[int]]\n    :type src: int\n    :type dst: int\n    :type K: int\n    :rtype: int\n    \"\"\"\n    # Create a graph\n    graph = [[] for _ in range(n)]\n    for u, v, w in flights:\n        graph[u].append((v, w))\n    # Dijkstra's algorithm\n    dist = [float('inf')] * n\n    dist[src] = 0\n    pq = [(0, src)]\n    while pq:\n        w, u = heapq.heappop(pq)\n        if dist[u] < w:\n            continue\n        for v, w in graph[u]:\n            if dist[v] > dist[u] + w:\n                dist[v] = dist[u] + w\n                heapq.heappush(pq, (dist[v], v))\n    return dist[dst] if dist[dst] != float('inf') else -1\n",
            "def findCheapestPrice(n, flights, src, dst, K):\n    \"\"\"\n    :type n: int\n    :type flights: List[List[int]]\n    :type src: int\n    :type dst: int\n    :type K: int\n    :rtype: int\n    \"\"\"\n    if src == dst:\n        return 0\n    if K < 0:\n        return -1\n    if not flights:\n        return -1\n    dp = [float('inf')] * n\n    dp[src] = 0\n    for i in range(K + 1):\n        for f in flights:\n            if dp[f[0]] != float('inf'):\n                dp[f[1]] = min(dp[f[1]], dp[f[0]] + f[2])\n    return dp[dst] if dp[dst] != float('inf') else -1\n",
            "def findCheapestPrice(n, flights, src, dst, k):\n    \"\"\"\n    :type n: int\n    :type flights: List[List[int]]\n    :type src: int\n    :type dst: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # init\n    dp = [float('inf')] * n\n    dp[src] = 0\n    # dp\n    for _ in range(k + 1):\n        dp_tmp = dp.copy()\n        for i, j, cost in flights:\n            if dp[i] != float('inf') and dp[i] + cost < dp_tmp[j]:\n                dp_tmp[j] = dp[i] + cost\n        dp = dp_tmp\n    # return\n    return dp[dst] if dp[dst] != float('inf') else -1\n",
            "def findCheapestPrice(n, flights, src, dst, k):\n    \"\"\"\n    :type n: int\n    :type flights: List[List[int]]\n    :type src: int\n    :type dst: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # Initialize the graph\n    graph = [[] for _ in range(n)]\n    for u, v, w in flights:\n        graph[u].append((v, w))\n    # Initialize the priority queue\n    pq = [(0, src, 0)]\n    while pq:\n        cost, u, stops = heapq.heappop(pq)\n        if u == dst:\n            return cost\n        if stops > k:\n            continue\n        for v, w in graph[u]:\n            heapq.heappush(pq, (cost + w, v, stops + 1))\n    return -1\n",
            "def cheapestFlights(n, flights, src, dst, k):\n    \"\"\"\n    :type n: int\n    :type flights: List[List[int]]\n    :type src: int\n    :type dst: int\n    :type k: int\n    :rtype: int\n    \"\"\"\n    # initialize the graph\n    graph = [[] for _ in range(n)]\n    for u, v, w in flights:\n        graph[u].append((v, w))\n    # initialize the queue\n    queue = [(src, 0, -1)]\n    # initialize the visited array\n    visited = [False] * n\n    # initialize the result array\n    result = [float('inf')] * n\n    # initialize the result array\n    result[src] = 0\n    # while the queue is not empty\n    while queue:\n        # pop the first element\n        u, cost, prev = queue.pop(0)\n        # if the node is already visited\n        if visited[u]:\n            continue\n        # mark the node as visited\n        visited[u] = True\n        # if the node is the destination\n        if u == dst:\n            # update the result array\n            result[dst] = cost\n            # if the number of stops is less than k\n            if cost < k:\n                # add the node to the queue\n                queue.append((dst, cost, prev))\n            # if the number of stops is equal to k\n            elif cost == k:\n                # add the node to the queue\n                queue.append((dst, cost, prev))\n        # if the number of stops is less than k\n        if cost < k:\n            # add the node to the queue\n            queue.append((u, cost, prev))\n        # if the number of stops is equal to k\n        elif cost == k:\n            # add the node to the queue\n            queue.append((u, cost, prev))\n        # for each neighbor\n        for v, w in graph[u]:\n            # if the neighbor is not visited\n            if not visited[v]:\n                # update the result array\n                result[v] = min(result[v], cost +\n",
            "def cheapest_flights(n, flights, src, dst, k):\n    \"\"\"\n    :param n: number of cities\n    :param flights: list of tuples of flights\n    :param src: source city\n    :param dst: destination city\n    :param k: number of stops\n    :return: list of tuples of cheapest flights\n    \"\"\"\n    # initialize graph\n    graph = [[] for _ in range(n)]\n    for u, v, w in flights:\n        graph[u].append((v, w))\n    # initialize priority queue\n    pq = [(0, src, 0)]\n    # initialize visited\n    visited = set()\n    # initialize cheapest\n    cheapest = float('inf')\n    # initialize cheapest flights\n    cheapest_flights = []\n    # while pq is not empty\n    while pq:\n        # pop the first element\n        cost, u, stops = heapq.heappop(pq)\n        # if u is the destination\n        if u == dst:\n            # if stops is less than k\n            if stops < k:\n                # if cost is less than cheapest\n                if cost < cheapest:\n                    # update cheapest\n                    cheapest = cost\n                    # update cheapest flights\n                    cheapest_flights = [(u, v, w) for v, w in graph[u]]\n        # if u is not visited\n        if u not in visited:\n            # add u to visited\n            visited.add(u)\n            # add all neighbors to pq\n            for v, w in graph[u]:\n                heapq.heappush(pq, (cost + w, v, stops + 1))\n    # return cheapest flights\n    return cheapest_flights\n"
        ],
        "results": 10
    },
    {
        "id": "905",
        "source": "leetcodeTitles",
        "source_id": "49",
        "url": "https://leetcode.com/problems/group-anagrams/",
        "language": "python",
        "query": "Group Anagrams",
        "snippets": [
            "def groupAnagrams(strs):\n    d = {}\n    for s in strs:\n        key = ''.join(sorted(s))\n        if key in d:\n            d[key].append(s)\n        else:\n            d[key] = [s]\n    return list(d.values())\n",
            "def groupAnagrams(strs):\n    dic = {}\n    for s in strs:\n        key = ''.join(sorted(s))\n        if key in dic:\n            dic[key].append(s)\n        else:\n            dic[key] = [s]\n    return list(dic.values())\n",
            "def groupAnagrams(strs):\n    d = {}\n    for s in strs:\n        key = ''.join(sorted(s))\n        if key not in d:\n            d[key] = [s]\n        else:\n            d[key].append(s)\n    return list(d.values())\n",
            "def groupAnagrams(strs):\n    dic = {}\n    for s in strs:\n        key = ''.join(sorted(s))\n        if key not in dic:\n            dic[key] = [s]\n        else:\n            dic[key].append(s)\n    return list(dic.values())\n",
            "def groupAnagrams(strs):\n    dic = {}\n    for word in strs:\n        key = ''.join(sorted(word))\n        if key in dic:\n            dic[key].append(word)\n        else:\n            dic[key] = [word]\n    return list(dic.values())\n"
        ],
        "results": 10
    },
    {
        "id": "906",
        "source": "leetcodeTitles",
        "source_id": "540",
        "url": "https://leetcode.com/problems/single-element-in-a-sorted-array/",
        "language": "python",
        "query": "Single Element in a Sorted Array",
        "snippets": [
            "def singleNonDuplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[0]\n    if len(nums) == 4:\n        return nums[1]\n    if len(nums) == 5:\n        return nums[2]\n    if len(nums) == 6:\n        return nums[3]\n    if len(nums) == 7:\n        return nums[4]\n    if len(nums) == 8:\n        return nums[5]\n    if len(nums) == 9:\n        return nums[6]\n    if len(nums) == 10:\n        return nums[7]\n    if len(nums) == 11:\n        return nums[8]\n    if len(nums) == 12:\n        return nums[9]\n    if len(nums) == 13:\n        return nums[10]\n    if len(nums) == 14:\n        return nums[11]\n    if len(nums) == 15:\n        return nums[12]\n    if len(nums) == 16:\n        return nums[13]\n    if len(nums) == 17:\n        return nums[14]\n    if len(nums) == 18:\n        return nums[15]\n    if len(nums) == 19:\n        return nums[16]\n    if len(nums) == 20:\n        return nums[17]\n    if len(nums) == 21:\n        return nums[18]\n    if len(nums) == 22:\n        return nums[19]\n    if len(nums) == 23:\n        return nums[20]\n    if len(nums) == 24:\n        return nums[21]\n    if len(nums) == 25\n",
            "def singleNonDuplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[0]\n    if len(nums) == 4:\n        return nums[2]\n    if len(nums) == 5:\n        return nums[3]\n    if len(nums) == 6:\n        return nums[4]\n    if len(nums) == 7:\n        return nums[5]\n    if len(nums) == 8:\n        return nums[6]\n    if len(nums) == 9:\n        return nums[7]\n    if len(nums) == 10:\n        return nums[8]\n    if len(nums) == 11:\n        return nums[9]\n    if len(nums) == 12:\n        return nums[10]\n    if len(nums) == 13:\n        return nums[11]\n    if len(nums) == 14:\n        return nums[12]\n    if len(nums) == 15:\n        return nums[13]\n    if len(nums) == 16:\n        return nums[14]\n    if len(nums) == 17:\n        return nums[15]\n    if len(nums) == 18:\n        return nums[16]\n    if len(nums) == 19:\n        return nums[17]\n    if len(nums) == 20:\n        return nums[18]\n    if len(nums) == 21:\n        return nums[19]\n    if len(nums) == 22:\n        return nums[20]\n    if len(nums) == 23:\n        return nums[21]\n    if len(nums) == 24:\n        return nums[22]\n    if len(nums) == 25\n",
            "def singleNonDuplicate(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[4]\n    if len(nums) == 6:\n        return nums[5]\n    if len(nums) == 7:\n        return nums[6]\n    if len(nums) == 8:\n        return nums[7]\n    if len(nums) == 9:\n        return nums[8]\n    if len(nums) == 10:\n        return nums[9]\n    if len(nums) == 11:\n        return nums[10]\n    if len(nums) == 12:\n        return nums[11]\n    if len(nums) == 13:\n        return nums[12]\n    if len(nums) == 14:\n        return nums[13]\n    if len(nums) == 15:\n        return nums[14]\n    if len(nums) == 16:\n        return nums[15]\n    if len(nums) == 17:\n        return nums[16]\n    if len(nums) == 18:\n        return nums[17]\n    if len(nums) == 19:\n        return nums[18]\n    if len(nums) == 20:\n        return nums[19]\n    if len(nums) == 21:\n        return nums[20]\n    if len(nums) == 22:\n        return nums[21]\n    if len(nums) == 23:\n        return nums[22]\n    if len(nums) == 24:\n        return nums[23]\n    if len(nums) == 25\n",
            "def singleNonDuplicate(nums):\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[2]\n    if len(nums) == 4:\n        return nums[3]\n    if len(nums) == 5:\n        return nums[4]\n    if len(nums) == 6:\n        return nums[5]\n    if len(nums) == 7:\n        return nums[6]\n    if len(nums) == 8:\n        return nums[7]\n    if len(nums) == 9:\n        return nums[8]\n    if len(nums) == 10:\n        return nums[9]\n    if len(nums) == 11:\n        return nums[10]\n    if len(nums) == 12:\n        return nums[11]\n    if len(nums) == 13:\n        return nums[12]\n    if len(nums) == 14:\n        return nums[13]\n    if len(nums) == 15:\n        return nums[14]\n    if len(nums) == 16:\n        return nums[15]\n    if len(nums) == 17:\n        return nums[16]\n    if len(nums) == 18:\n        return nums[17]\n    if len(nums) == 19:\n        return nums[18]\n    if len(nums) == 20:\n        return nums[19]\n    if len(nums) == 21:\n        return nums[20]\n    if len(nums) == 22:\n        return nums[21]\n    if len(nums) == 23:\n        return nums[22]\n    if len(nums) == 24:\n        return nums[23]\n    if len(nums) == 25:\n        return nums[24]\n    if len(nums) == 26:\n        return num\n",
            "def singleNonDuplicate(nums):\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return nums[1]\n    if len(nums) == 3:\n        return nums[0]\n    if len(nums) == 4:\n        return nums[2]\n    if len(nums) == 5:\n        return nums[3]\n    if len(nums) == 6:\n        return nums[4]\n    if len(nums) == 7:\n        return nums[5]\n    if len(nums) == 8:\n        return nums[6]\n    if len(nums) == 9:\n        return nums[7]\n    if len(nums) == 10:\n        return nums[8]\n    if len(nums) == 11:\n        return nums[9]\n    if len(nums) == 12:\n        return nums[10]\n    if len(nums) == 13:\n        return nums[11]\n    if len(nums) == 14:\n        return nums[12]\n    if len(nums) == 15:\n        return nums[13]\n    if len(nums) == 16:\n        return nums[14]\n    if len(nums) == 17:\n        return nums[15]\n    if len(nums) == 18:\n        return nums[16]\n    if len(nums) == 19:\n        return nums[17]\n    if len(nums) == 20:\n        return nums[18]\n    if len(nums) == 21:\n        return nums[19]\n    if len(nums) == 22:\n        return nums[20]\n    if len(nums) == 23:\n        return nums[21]\n    if len(nums) == 24:\n        return nums[22]\n    if len(nums) == 25:\n        return nums[23]\n    if len(nums) == 26:\n        return num\n"
        ],
        "results": 10
    },
    {
        "id": "907",
        "source": "leetcodeTitles",
        "source_id": "1560",
        "url": "https://leetcode.com/problems/most-visited-sector-in-a-circular-track/",
        "language": "python",
        "query": "Most Visited Sector in a Circular Track",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if i == n - 1:\n            ans += a[0]\n        else:\n            ans += a[i + 1]\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(a[0])\n    ans = 0\n    for i in range(n):\n        ans += a[i+1] - a[i]\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(a[0] + 360)\n    d = [a[i + 1] - a[i] for i in range(n)]\n    d.sort()\n    print(d[-1])\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.append(a[0] + 360)\n    ans = 0\n    for i in range(n):\n        ans += a[i + 1] - a[i]\n    print(ans)\n",
            "def most_visited_sector(n, b):\n    # Write your code here\n    max_count = 0\n    max_sector = 0\n    sector_count = [0] * n\n    for i in range(len(b)):\n        sector_count[b[i] - 1] += 1\n        if sector_count[b[i] - 1] > max_count:\n            max_count = sector_count[b[i] - 1]\n            max_sector = b[i]\n    return max_sector\n",
            "def most_visited_sector(n, b):\n    # Write your code here\n    if n == 1:\n        return 1\n    elif n == 2:\n        return b\n    elif n == 3:\n        return b + 1\n    elif n == 4:\n        return b + 2\n    elif n == 5:\n        return b + 3\n    elif n == 6:\n        return b + 4\n    elif n == 7:\n        return b + 5\n    elif n == 8:\n        return b + 6\n    elif n == 9:\n        return b + 7\n    elif n == 10:\n        return b + 8\n    elif n == 11:\n        return b + 9\n    elif n == 12:\n        return b + 10\n    elif n == 13:\n        return b + 11\n    elif n == 14:\n        return b + 12\n    elif n == 15:\n        return b + 13\n    elif n == 16:\n        return b + 14\n    elif n == 17:\n        return b + 15\n    elif n == 18:\n        return b + 16\n    elif n == 19:\n        return b + 17\n    elif n == 20:\n        return b + 18\n    elif n == 21:\n        return b + 19\n    elif n == 22:\n        return b + 20\n    elif n == 23:\n        return b + 21\n    elif n == 24:\n        return b + 22\n    elif n == 25:\n        return b + 23\n    elif n == 26:\n        return b + 24\n    elif n == 27:\n        return b + 25\n    elif n == 28:\n        return b + 26\n    elif n == 29:\n        return b + 27\n    elif n == 30:\n        return b + 28\n    elif n == 31:\n        return b + 29\n    elif n == 32:\n        return b + 30\n    elif n == 33:\n        return b + 31\n    elif n == 34:\n        return b + 32\n    elif n == 35:\n"
        ],
        "results": 10
    },
    {
        "id": "908",
        "source": "leetcodeTitles",
        "source_id": "415",
        "url": "https://leetcode.com/problems/add-strings/",
        "language": "python",
        "query": "Add Strings",
        "snippets": [
            "def add_strings(str_1, str_2):\n    \"\"\"\n    Add two strings together\n    \"\"\"\n    return str_1 + str_2\n",
            "def add_strings(str_1, str_2):\n    \"\"\"\n    Add two strings together.\n    \"\"\"\n    return str_1 + str_2\n"
        ],
        "results": 10
    },
    {
        "id": "909",
        "source": "leetcodeTitles",
        "source_id": "2166",
        "url": "https://leetcode.com/problems/design-bitset/",
        "language": "python",
        "query": "Design Bitset",
        "snippets": [
            "def bitset(n):\n    return 1 << n\n",
            "def bitset(n):\n    return [0] * n\n",
            "def bitset(n):\n    return [False] * n\n"
        ],
        "results": 10
    },
    {
        "id": "910",
        "source": "leetcodeTitles",
        "source_id": "576",
        "url": "https://leetcode.com/problems/out-of-boundary-paths/",
        "language": "python",
        "query": "Out of Boundary Paths",
        "snippets": [
            "def out_of_boundary_paths(m, n, N):\n    if N == 0:\n        return 1\n    if N == 1:\n        return m * n\n    if N == 2:\n        return m * n + m + n\n    if N == 3:\n        return m * n + m + n + 1\n    if N == 4:\n        return m * n + m + n + 1 + m + n\n    if N == 5:\n        return m * n + m + n + 1 + m + n + 1\n    if N == 6:\n        return m * n + m + n + 1 + m + n + 1 + m + n\n    if N == 7:\n        return m * n + m + n + 1 + m + n + 1 + m + n + 1\n    if N == 8:\n        return m * n + m + n + 1 + m + n + 1 + m + n + 1 + m + n\n    if N == 9:\n        return m * n + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1\n    if N == 10:\n        return m * n + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n\n    if N == 11:\n        return m * n + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1\n    if N == 12:\n        return m * n + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n\n    if N == 13:\n        return m * n + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1\n    if N == 14:\n        return m * n + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n + 1 + m + n\n    if N == 15:\n        return\n",
            "def out_of_boundary_paths(m, n, N):\n    if N == 0:\n        return 1\n    if N == 1:\n        return m * n\n    if N == 2:\n        return m * n * 2\n    if N == 3:\n        return m * n * 3\n    if N == 4:\n        return m * n * 4\n    if N == 5:\n        return m * n * 5\n    if N == 6:\n        return m * n * 6\n    if N == 7:\n        return m * n * 7\n    if N == 8:\n        return m * n * 8\n    if N == 9:\n        return m * n * 9\n    if N == 10:\n        return m * n * 10\n    if N == 11:\n        return m * n * 11\n    if N == 12:\n        return m * n * 12\n    if N == 13:\n        return m * n * 13\n    if N == 14:\n        return m * n * 14\n    if N == 15:\n        return m * n * 15\n    if N == 16:\n        return m * n * 16\n    if N == 17:\n        return m * n * 17\n    if N == 18:\n        return m * n * 18\n    if N == 19:\n        return m * n * 19\n    if N == 20:\n        return m * n * 20\n    if N == 21:\n        return m * n * 21\n    if N == 22:\n        return m * n * 22\n    if N == 23:\n        return m * n * 23\n    if N == 24:\n        return m * n * 24\n    if N == 25:\n        return m * n * 25\n    if N == 26:\n        return m * n * 26\n    if N == 27:\n        return m * n * 27\n    if N == 28:\n        return m * n * 28\n    if N == 29:\n        return m * n * 29\n    if N == 30:\n        return m * n * 30\n    if N == 31:\n        return m * n * 31\n    if N == 32:\n",
            "def out_of_boundary_paths(m, n, N):\n    if N == 0:\n        return 1\n    if N == 1:\n        return 0\n    if N == 2:\n        return m * n\n    if N == 3:\n        return m * n * 2\n    if N == 4:\n        return m * n * 3\n    if N == 5:\n        return m * n * 4\n    if N == 6:\n        return m * n * 5\n    if N == 7:\n        return m * n * 6\n    if N == 8:\n        return m * n * 7\n    if N == 9:\n        return m * n * 8\n    if N == 10:\n        return m * n * 9\n    if N == 11:\n        return m * n * 10\n    if N == 12:\n        return m * n * 11\n    if N == 13:\n        return m * n * 12\n    if N == 14:\n        return m * n * 13\n    if N == 15:\n        return m * n * 14\n    if N == 16:\n        return m * n * 15\n    if N == 17:\n        return m * n * 16\n    if N == 18:\n        return m * n * 17\n    if N == 19:\n        return m * n * 18\n    if N == 20:\n        return m * n * 19\n    if N == 21:\n        return m * n * 20\n    if N == 22:\n        return m * n * 21\n    if N == 23:\n        return m * n * 22\n    if N == 24:\n        return m * n * 23\n    if N == 25:\n        return m * n * 24\n    if N == 26:\n        return m * n * 25\n    if N == 27:\n        return m * n * 26\n    if N == 28:\n        return m * n * 27\n    if N == 29:\n        return m * n * 28\n    if N == 30:\n        return m * n * 29\n    if N == 31:\n        return m * n * 30\n    if N == 32:\n        return m * n\n"
        ],
        "results": 10
    },
    {
        "id": "911",
        "source": "leetcodeTitles",
        "source_id": "1346",
        "url": "https://leetcode.com/problems/check-if-n-and-its-double-exist/",
        "language": "python",
        "query": "Check if N and Its Double Exist",
        "snippets": [
            "def check_double(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return False\n    if n == 7:\n        return True\n    if n == 8:\n        return False\n    if n == 9:\n        return True\n    if n == 10:\n        return False\n    if n == 11:\n        return True\n    if n == 12:\n        return False\n    if n == 13:\n        return True\n    if n == 14:\n        return False\n    if n == 15:\n        return True\n    if n == 16:\n        return False\n    if n == 17:\n        return True\n    if n == 18:\n        return False\n    if n == 19:\n        return True\n    if n == 20:\n        return False\n    if n == 21:\n        return True\n    if n == 22:\n        return False\n    if n == 23:\n        return True\n    if n == 24:\n        return False\n    if n == 25:\n        return True\n    if n == 26:\n        return False\n    if n == 27:\n        return True\n    if n == 28:\n        return False\n    if n == 29:\n        return True\n    if n == 30:\n        return False\n    if n == 31:\n        return True\n    if n == 32:\n        return False\n    if n == 33:\n        return True\n    if n == 34:\n        return False\n    if n == 35:\n        return True\n    if n == 36:\n        return False\n    if n == 37:\n        return True\n    if n == 38:\n        return False\n    if n == 39:\n        return True\n    if n == 40:\n        return False\n    if n == 41:\n        return True\n    if n == 42:\n        return False\n    if n == 43:\n        return True\n    if n == 44:\n        return False\n    if n == 45:\n",
            "def check_double(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return False\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return False\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return False\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return False\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return False\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return False\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return False\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return False\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return False\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return False\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return False\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return False\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return False\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return False\n    if n == 44:\n        return True\n    if n == 45:\n",
            "def check_double(n):\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n",
            "def check_double(n):\n    if n == 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return check_double(n / 2)\n    else:\n        return check_double(n * 3 + 1)\n"
        ],
        "results": 10
    },
    {
        "id": "912",
        "source": "leetcodeTitles",
        "source_id": "1208",
        "url": "https://leetcode.com/problems/get-equal-substrings-within-budget/",
        "language": "python",
        "query": "Get Equal Substrings Within Budget",
        "snippets": [
            "def equalSubstring(s, t, maxCost):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :type maxCost: int\n    :rtype: int\n    \"\"\"\n    if len(s) != len(t):\n        return -1\n    if maxCost == 0:\n        return 0\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0] == t[0]:\n            return 1\n        else:\n            return 0\n    if s[0] == t[0]:\n        return 1 + equalSubstring(s[1:], t[1:], maxCost - 1)\n    else:\n        return equalSubstring(s[1:], t[1:], maxCost)\n",
            "def equalSubstring(s, t, maxCost):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :type maxCost: int\n    :rtype: int\n    \"\"\"\n    if len(s) != len(t):\n        return 0\n    if maxCost == 0:\n        return len(s)\n    if len(s) == 1:\n        return 1 if s == t else 0\n    if s == t:\n        return len(s)\n    if s == t[::-1]:\n        return len(s)\n    if s == t[1:]:\n        return len(s)\n    if s == t[:-1]:\n        return len(s)\n    if s == t[1::-1]:\n        return len(s)\n    if s == t[:-1:-1]:\n        return len(s)\n    if s == t[::2]:\n        return len(s)\n    if s == t[::3]:\n        return len(s)\n    if s == t[::4]:\n        return len(s)\n    if s == t[::5]:\n        return len(s)\n    if s == t[::6]:\n        return len(s)\n    if s == t[::7]:\n        return len(s)\n    if s == t[::8]:\n        return len(s)\n    if s == t[::9]:\n        return len(s)\n    if s == t[::10]:\n        return len(s)\n    if s == t[::11]:\n        return len(s)\n    if s == t[::12]:\n        return len(s)\n    if s == t[::13]:\n        return len(s)\n    if s == t[::14]:\n        return len(s)\n    if s == t[::15]:\n        return len(s)\n    if s == t[::16]:\n        return len(s)\n    if s == t[::17]:\n        return len(s)\n    if s == t[::18]:\n        return len(s)\n    if s == t[::\n",
            "def equalSubstring(s, t, maxCost):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :type maxCost: int\n    :rtype: int\n    \"\"\"\n    if len(s) != len(t):\n        return 0\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if abs(ord(s[0]) - ord(t[0])) <= maxCost:\n            return 1\n        else:\n            return 0\n    if abs(ord(s[0]) - ord(t[0])) <= maxCost:\n        return 1 + equalSubstring(s[1:], t[1:], maxCost)\n    else:\n        return equalSubstring(s[1:], t[1:], maxCost)\n",
            "def equalSubstring(s, t, maxCost):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :type maxCost: int\n    :rtype: int\n    \"\"\"\n    if len(s) != len(t):\n        return 0\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s == t:\n            return 1\n        else:\n            return 0\n    if s == t:\n        return len(s)\n    if maxCost == 0:\n        return 0\n    if maxCost == 1:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 2:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 3:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 4:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 5:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 6:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 7:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 8:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 9:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 10:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 11:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 12:\n        if s == t:\n            return len(s)\n        else:\n            return 0\n    if maxCost == 13:\n",
            "def equalSubstring(s, t, maxCost):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :type maxCost: int\n    :rtype: int\n    \"\"\"\n    if len(s) != len(t):\n        return 0\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0] == t[0]:\n            return 1\n        else:\n            return 0\n    if s[0] == t[0]:\n        return 1 + equalSubstring(s[1:], t[1:], maxCost)\n    else:\n        return equalSubstring(s[1:], t[1:], maxCost)\n",
            "def getEqualSubstringsWithinBudget(s, t, maxCost):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :type maxCost: int\n    :rtype: int\n    \"\"\"\n    if len(s) != len(t):\n        return 0\n    if maxCost == 0:\n        return 1\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        if s[0] == t[0] and maxCost >= 1:\n            return 1\n        else:\n            return 0\n    if s[0] == t[0] and maxCost >= 1:\n        return 1 + getEqualSubstringsWithinBudget(s[1:], t[1:], maxCost - 1)\n    else:\n        return getEqualSubstringsWithinBudget(s[1:], t[1:], maxCost)\n",
            "def getEqualSubstringsWithinBudget(s, t, maxCost):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :type maxCost: int\n    :rtype: int\n    \"\"\"\n    if len(s) != len(t):\n        return 0\n    res = 0\n    for i in range(len(s)):\n        if s[i] != t[i]:\n            res += 1\n            if res > maxCost:\n                return 0\n    return 1\n"
        ],
        "results": 10
    },
    {
        "id": "913",
        "source": "leetcodeTitles",
        "source_id": "1786",
        "url": "https://leetcode.com/problems/number-of-restricted-paths-from-first-to-last-node/",
        "language": "python",
        "query": "Number of Restricted Paths From First to Last Node",
        "snippets": [
            "def restricted_paths(graph, start, end):\n    if start == end:\n        return 1\n    if start not in graph:\n        return 0\n    paths = 0\n    for node in graph[start]:\n        if node != end:\n            paths += restricted_paths(graph, node, end)\n    return paths\n",
            "def restricted_paths(graph, start, end):\n    if start == end:\n        return 1\n    if start not in graph:\n        return 0\n    paths = 0\n    for node in graph[start]:\n        paths += restricted_paths(graph, node, end)\n    return paths\n",
            "def restricted_paths(graph, start, end):\n    if start == end:\n        return 1\n    paths = 0\n    for node in graph[start]:\n        if node not in visited:\n            visited.append(node)\n            paths += restricted_paths(graph, node, end)\n    return paths\n",
            "def num_restricted_paths(maze, start, end):\n    if start == end:\n        return 1\n    if maze[start[0]][start[1]] == 1:\n        return 0\n    maze[start[0]][start[1]] = 1\n    paths = 0\n    for i in range(4):\n        new_start = (start[0] + moves[i][0], start[1] + moves[i][1])\n        if new_start[0] >= 0 and new_start[0] < len(maze) and new_start[1] >= 0 and new_start[1] < len(maze[0]):\n            paths += num_restricted_paths(maze, new_start, end)\n    return paths\n",
            "def restricted_paths(graph, start, end):\n    if start == end:\n        return 1\n    paths = 0\n    for node in graph[start]:\n        if node != end:\n            paths += restricted_paths(graph, node, end)\n    return paths\n",
            "def num_restricted_paths(maze, start, end):\n    if start == end:\n        return 1\n    if maze[start[0]][start[1]] == 1:\n        return 0\n    if start in visited:\n        return 0\n    visited.append(start)\n    paths = 0\n    for i in range(4):\n        new_start = (start[0] + directions[i][0], start[1] + directions[i][1])\n        if new_start in maze:\n            paths += num_restricted_paths(maze, new_start, end)\n    return paths\n",
            "def num_restricted_paths(graph, start, end):\n    if start == end:\n        return 1\n    if start not in graph:\n        return 0\n    paths = 0\n    for node in graph[start]:\n        if node != end:\n            paths += num_restricted_paths(graph, node, end)\n    return paths\n",
            "def num_restricted_paths(maze, start, end):\n    if not maze or not maze[0] or not start or not end:\n        return 0\n    if start == end:\n        return 1\n    if start[0] < 0 or start[0] >= len(maze) or start[1] < 0 or start[1] >= len(maze[0]):\n        return 0\n    if maze[start[0]][start[1]] == 1:\n        return 0\n    maze[start[0]][start[1]] = 1\n    num_paths = 0\n    for i in range(4):\n        num_paths += num_restricted_paths(maze, (start[0] + dirs[i][0], start[1] + dirs[i][1]), end)\n    return num_paths\n"
        ],
        "results": 10
    },
    {
        "id": "914",
        "source": "leetcodeTitles",
        "source_id": "62",
        "url": "https://leetcode.com/problems/unique-paths/",
        "language": "python",
        "query": "Unique Paths",
        "snippets": [
            "def unique_paths(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n",
            "def unique_paths(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m - 1, n) + unique_paths(m, n - 1)\n",
            "def unique_paths(m, n):\n    if m == 0 or n == 0:\n        return 0\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n",
            "def unique_paths(m, n):\n    if m == 1 or n == 1:\n        return 1\n    return unique_paths(m-1, n) + unique_paths(m, n-1)\n"
        ],
        "results": 10
    },
    {
        "id": "915",
        "source": "leetcodeTitles",
        "source_id": "40",
        "url": "https://leetcode.com/problems/combination-sum-ii/",
        "language": "python",
        "query": "Combination Sum II",
        "snippets": [
            "def combinationSum2(candidates, target):\n    \"\"\"\n    :type candidates: List[int]\n    :type target: int\n    :rtype: List[List[int]]\n    \"\"\"\n    candidates.sort()\n    res = []\n    dfs(candidates, target, 0, [], res)\n    return res\n",
            "def combinationSum2(candidates, target):\n    \"\"\"\n    :type candidates: List[int]\n    :type target: int\n    :rtype: List[List[int]]\n    \"\"\"\n    candidates.sort()\n    res = []\n    def dfs(candidates, target, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(len(candidates)):\n            if i > 0 and candidates[i] == candidates[i-1]:\n                continue\n            if target - candidates[i] >= 0:\n                dfs(candidates[i+1:], target - candidates[i], path + [candidates[i]], res)\n    dfs(candidates, target, [], res)\n    return res\n",
            "def combinationSum2(candidates, target):\n    res = []\n    candidates.sort()\n    dfs(candidates, target, 0, [], res)\n    return res\n",
            "def combinationSum2(candidates, target):\n    candidates.sort()\n    res = []\n    dfs(candidates, target, 0, [], res)\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "916",
        "source": "leetcodeTitles",
        "source_id": "2089",
        "url": "https://leetcode.com/problems/find-target-indices-after-sorting-array/",
        "language": "python",
        "query": "Find Target Indices After Sorting Array",
        "snippets": [
            "def findTargetIndices(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return [mid, mid]\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [-1, -1]\n",
            "def findTargetIndices(arr, target):\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        sum = arr[left] + arr[right]\n        if sum == target:\n            return [left, right]\n        elif sum < target:\n            left += 1\n        else:\n            right -= 1\n    return [-1, -1]\n",
            "def find_target_indices(arr, target):\n    # Write your code here.\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return [mid, mid]\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [-1, -1]\n",
            "def find_target_indices(arr, target):\n    \"\"\"\n    Find target indices in sorted array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return [mid, mid]\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [-1, -1]\n",
            "def find_target_indices(arr, target):\n    \"\"\"\n    Find target indices in sorted array\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return [mid, mid]\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [-1, -1]\n",
            "def find_target_indices(arr, target):\n    \"\"\"\n    Find target indices in sorted array.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return [mid, mid]\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [-1, -1]\n",
            "def find_target_indices(arr, target):\n    \"\"\"\n    Find indices of target in sorted array\n    \"\"\"\n    start = 0\n    end = len(arr) - 1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == target:\n            return [mid]\n        elif arr[mid] < target:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return []\n",
            "def find_target_indices(arr, target):\n    \"\"\"\n    Given a sorted array of integers, return the indices of the two numbers\n    that add up to the target.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        total = arr[left] + arr[right]\n        if total == target:\n            return [left, right]\n        elif total < target:\n            left += 1\n        else:\n            right -= 1\n    return [-1, -1]\n"
        ],
        "results": 10
    },
    {
        "id": "917",
        "source": "leetcodeTitles",
        "source_id": "67",
        "url": "https://leetcode.com/problems/add-binary/",
        "language": "python",
        "query": "Add Binary",
        "snippets": [
            "def addBinary(a, b):\n    \"\"\"\n    :type a: str\n    :type b: str\n    :rtype: str\n    \"\"\"\n    return bin(int(a, 2) + int(b, 2))[2:]\n",
            "def addBinary(a, b):\n    return bin(int(a, 2) + int(b, 2))[2:]\n"
        ],
        "results": 10
    },
    {
        "id": "918",
        "source": "leetcodeTitles",
        "source_id": "46",
        "url": "https://leetcode.com/problems/permutations/",
        "language": "python",
        "query": "Permutations",
        "snippets": [
            "def permutations(string):\n    if len(string) <= 1:\n        return [string]\n    else:\n        perms = []\n        for i in range(len(string)):\n            for perm in permutations(string[:i] + string[i+1:]):\n                perms.append(string[i] + perm)\n        return perms\n",
            "def permutations(string):\n    if len(string) <= 1:\n        return [string]\n    else:\n        perms = []\n        for i in range(len(string)):\n            char = string[i]\n            remaining_string = string[:i] + string[i+1:]\n            for perm in permutations(remaining_string):\n                perms.append(char + perm)\n        return perms\n",
            "def permutations(string):\n    if len(string) <= 1:\n        return [string]\n    else:\n        perms = []\n        for i in range(len(string)):\n            char = string[i]\n            rest = string[:i] + string[i+1:]\n            for p in permutations(rest):\n                perms.append(char + p)\n        return perms\n",
            "def permutations(string):\n    if len(string) <= 1:\n        return set([string])\n    else:\n        permutations = set()\n        for i in range(len(string)):\n            for permutation in permutations(string[:i] + string[i+1:]):\n                permutations.add(string[i] + permutation)\n        return permutations\n",
            "def permutations(lst):\n    if len(lst) == 1:\n        return [lst]\n    else:\n        result = []\n        for i in range(len(lst)):\n            sublst = lst[:i] + lst[i+1:]\n            for j in permutations(sublst):\n                result.append([lst[i]] + j)\n        return result\n",
            "def permutations(string):\n    if len(string) <= 1:\n        return set([string])\n    else:\n        result = set()\n        for i in range(len(string)):\n            for perm in permutations(string[:i] + string[i+1:]):\n                result.add(string[i] + perm)\n        return result\n",
            "def permutations(lst):\n    if len(lst) == 1:\n        return [lst]\n    else:\n        l = []\n        for i in range(len(lst)):\n            x = lst[i]\n            xs = lst[:i] + lst[i+1:]\n            for p in permutations(xs):\n                l.append([x] + p)\n        return l\n"
        ],
        "results": 10
    },
    {
        "id": "919",
        "source": "leetcodeTitles",
        "source_id": "1609",
        "url": "https://leetcode.com/problems/even-odd-tree/",
        "language": "python",
        "query": "Even Odd Tree",
        "snippets": [
            "def even_odd_tree(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is None:\n        return even_odd_tree(root.right)\n    if root.right is None:\n        return even_odd_tree(root.left)\n    return even_odd_tree(root.left) and even_odd_tree(root.right)\n",
            "def is_even(n):\n    return n % 2 == 0\n"
        ],
        "results": 8
    },
    {
        "id": "920",
        "source": "leetcodeTitles",
        "source_id": "991",
        "url": "https://leetcode.com/problems/broken-calculator/",
        "language": "python",
        "query": "Broken Calculator",
        "snippets": [
            "def broken_calc(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return broken_calc(n // 2)\n    else:\n        return broken_calc(n + 1)\n",
            "def broken_calc(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return broken_calc(n // 2)\n    else:\n        return broken_calc(n // 2) + broken_calc(n // 2 + 1)\n",
            "def broken_calc(n):\n    if n == 1:\n        return 1\n    elif n % 2 == 0:\n        return broken_calc(n // 2)\n    else:\n        return broken_calc(n * 3 + 1)\n",
            "def broken_calc(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 22\n    elif n == 8:\n        return 29\n    elif n == 9:\n        return 37\n    elif n == 10:\n        return 46\n    elif n == 11:\n        return 56\n    elif n == 12:\n        return 67\n    elif n == 13:\n        return 79\n    elif n == 14:\n        return 92\n    elif n == 15:\n        return 106\n    elif n == 16:\n        return 121\n    elif n == 17:\n        return 137\n    elif n == 18:\n        return 154\n    elif n == 19:\n        return 172\n    elif n == 20:\n        return 191\n    elif n == 21:\n        return 211\n    elif n == 22:\n        return 232\n    elif n == 23:\n        return 254\n    elif n == 24:\n        return 277\n    elif n == 25:\n        return 301\n    elif n == 26:\n        return 326\n    elif n == 27:\n        return 352\n    elif n == 28:\n        return 379\n    elif n == 29:\n        return 407\n    elif n == 30:\n        return 436\n    elif n == 31:\n        return 466\n    elif n == 32:\n        return 497\n    elif n == 33:\n        return 529\n    elif n == 34:\n        return 562\n    elif n == 35:\n        return 596\n    elif n == 36:\n        return 631\n    elif n == 37:\n        return 667\n    elif n == 38:\n        return 704\n    elif n == 39:\n        return 742\n    elif n\n",
            "def broken_calc(n):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    elif n == 5:\n        return 11\n    elif n == 6:\n        return 16\n    elif n == 7:\n        return 22\n    elif n == 8:\n        return 29\n    elif n == 9:\n        return 37\n    elif n == 10:\n        return 46\n    elif n == 11:\n        return 56\n    elif n == 12:\n        return 67\n    elif n == 13:\n        return 79\n    elif n == 14:\n        return 92\n    elif n == 15:\n        return 106\n    elif n == 16:\n        return 121\n    elif n == 17:\n        return 137\n    elif n == 18:\n        return 154\n    elif n == 19:\n        return 172\n    elif n == 20:\n        return 191\n    elif n == 21:\n        return 211\n    elif n == 22:\n        return 232\n    elif n == 23:\n        return 254\n    elif n == 24:\n        return 277\n    elif n == 25:\n        return 301\n    elif n == 26:\n        return 326\n    elif n == 27:\n        return 352\n    elif n == 28:\n        return 379\n    elif n == 29:\n        return 407\n    elif n == 30:\n        return 436\n    elif n == 31:\n        return 466\n    elif n == 32:\n        return 497\n    elif n == 33:\n        return 529\n    elif n == 34:\n        return 562\n    elif n == 35:\n        return 596\n    elif n == 36:\n        return 631\n    elif n == 37:\n        return 667\n    elif n == 38:\n        return 704\n    elif n == 39:\n        return 742\n    elif n == 40:\n        return 781\n    elif\n",
            "def broken_calc(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return broken_calc(n // 2)\n    else:\n        return broken_calc(n // 2) + n % 2\n",
            "def broken_calc(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return broken_calc(n-1) + broken_calc(n-2)\n"
        ],
        "results": 10
    },
    {
        "id": "921",
        "source": "leetcodeTitles",
        "source_id": "2053",
        "url": "https://leetcode.com/problems/kth-distinct-string-in-an-array/",
        "language": "python",
        "query": "Kth Distinct String in an Array",
        "snippets": [
            "def kthDistinct(arr, k):\n    \"\"\"\n    :type arr: List[str]\n    :type k: int\n    :rtype: str\n    \"\"\"\n    if not arr:\n        return \"\"\n    if k > len(arr):\n        return \"\"\n    if k == 1:\n        return min(arr)\n    if k == len(arr):\n        return max(arr)\n    if k == len(arr) - 1:\n        return arr[-1]\n    if k == len(arr) / 2:\n        return arr[len(arr) // 2]\n    if k == len(arr) / 3:\n        return arr[len(arr) // 3]\n    if k == len(arr) / 4:\n        return arr[len(arr) // 4]\n    if k == len(arr) / 5:\n        return arr[len(arr) // 5]\n    if k == len(arr) / 6:\n        return arr[len(arr) // 6]\n    if k == len(arr) / 7:\n        return arr[len(arr) // 7]\n    if k == len(arr) / 8:\n        return arr[len(arr) // 8]\n    if k == len(arr) / 9:\n        return arr[len(arr) // 9]\n    if k == len(arr) / 10:\n        return arr[len(arr) // 10]\n    if k == len(arr) / 11:\n        return arr[len(arr) // 11]\n    if k == len(arr) / 12:\n        return arr[len(arr) // 12]\n    if k == len(arr) / 13:\n        return arr[len(arr) // 13]\n    if k == len(arr) / 14:\n        return arr[len(arr) // 14]\n    if k == len(arr) / 15:\n        return arr[len(arr) // 15]\n    if k == len(arr) / 16:\n        return arr[len(arr) // 16]\n    if k == len(arr) / 17:\n        return arr[len(arr) // 17]\n    if\n",
            "def kth_distinct_string(arr, k):\n    \"\"\"\n    :param arr: list of strings\n    :param k: int\n    :return: string\n    \"\"\"\n    # Write your code here.\n    return sorted(set(arr))[k-1]\n",
            "def kth_distinct_string(arr, k):\n    \"\"\"\n    :param arr: list of strings\n    :param k: int\n    :return: string\n    \"\"\"\n    # Write your code here.\n    if k > len(arr):\n        return None\n    if k == 1:\n        return min(arr)\n    if k == len(arr):\n        return max(arr)\n    if k == len(arr) // 2:\n        return arr[len(arr) // 2]\n    if k == len(arr) - 1:\n        return arr[len(arr) - 1]\n    if k == len(arr) - 2:\n        return arr[len(arr) - 2]\n    if k == len(arr) - 3:\n        return arr[len(arr) - 3]\n    if k == len(arr) - 4:\n        return arr[len(arr) - 4]\n    if k == len(arr) - 5:\n        return arr[len(arr) - 5]\n    if k == len(arr) - 6:\n        return arr[len(arr) - 6]\n    if k == len(arr) - 7:\n        return arr[len(arr) - 7]\n    if k == len(arr) - 8:\n        return arr[len(arr) - 8]\n    if k == len(arr) - 9:\n        return arr[len(arr) - 9]\n    if k == len(arr) - 10:\n        return arr[len(arr) - 10]\n    if k == len(arr) - 11:\n        return arr[len(arr) - 11]\n    if k == len(arr) - 12:\n        return arr[len(arr) - 12]\n    if k == len(arr) - 13:\n        return arr[len(arr) - 13]\n    if k == len(arr) - 14:\n        return arr[len(arr) - 14]\n    if k == len(arr) - 15:\n        return arr[len(arr) - 15]\n    if k == len(arr) - 16:\n        return arr[len(arr) - 16]\n",
            "def kth_distinct(arr, k):\n    if k > len(arr):\n        return None\n    if k == 1:\n        return min(arr)\n    if k == len(arr):\n        return max(arr)\n    if k == len(arr) / 2:\n        return sorted(arr)[len(arr) // 2]\n    if k == len(arr) - 1:\n        return arr[-1]\n    if k == len(arr) - 2:\n        return arr[-2]\n    if k == len(arr) - 3:\n        return arr[-3]\n    if k == len(arr) - 4:\n        return arr[-4]\n    if k == len(arr) - 5:\n        return arr[-5]\n    if k == len(arr) - 6:\n        return arr[-6]\n    if k == len(arr) - 7:\n        return arr[-7]\n    if k == len(arr) - 8:\n        return arr[-8]\n    if k == len(arr) - 9:\n        return arr[-9]\n    if k == len(arr) - 10:\n        return arr[-10]\n    if k == len(arr) - 11:\n        return arr[-11]\n    if k == len(arr) - 12:\n        return arr[-12]\n    if k == len(arr) - 13:\n        return arr[-13]\n    if k == len(arr) - 14:\n        return arr[-14]\n    if k == len(arr) - 15:\n        return arr[-15]\n    if k == len(arr) - 16:\n        return arr[-16]\n    if k == len(arr) - 17:\n        return arr[-17]\n    if k == len(arr) - 18:\n        return arr[-18]\n    if k == len(arr) - 19:\n        return arr[-19]\n    if k == len(arr) - 20:\n        return arr[-20]\n    if k == len(arr) - 21:\n        return arr[-21]\n",
            "def kth_distinct(arr, k):\n    if k > len(arr):\n        return None\n    if k == 1:\n        return min(arr)\n    if k == len(arr):\n        return max(arr)\n    if k == len(arr) // 2:\n        return sorted(arr)[len(arr) // 2]\n    if k == len(arr) - 1:\n        return sorted(arr)[-1]\n    if k == len(arr) - 2:\n        return sorted(arr)[-2]\n    if k == len(arr) - 3:\n        return sorted(arr)[-3]\n    if k == len(arr) - 4:\n        return sorted(arr)[-4]\n    if k == len(arr) - 5:\n        return sorted(arr)[-5]\n    if k == len(arr) - 6:\n        return sorted(arr)[-6]\n    if k == len(arr) - 7:\n        return sorted(arr)[-7]\n    if k == len(arr) - 8:\n        return sorted(arr)[-8]\n    if k == len(arr) - 9:\n        return sorted(arr)[-9]\n    if k == len(arr) - 10:\n        return sorted(arr)[-10]\n    if k == len(arr) - 11:\n        return sorted(arr)[-11]\n    if k == len(arr) - 12:\n        return sorted(arr)[-12]\n    if k == len(arr) - 13:\n        return sorted(arr)[-13]\n    if k == len(arr) - 14:\n        return sorted(arr)[-14]\n    if k == len(arr) - 15:\n        return sorted(arr)[-15]\n    if k == len(arr) - 16:\n        return sorted(arr)[-16]\n    if k == len(arr) - 17:\n        return sorted(arr)[-17]\n    if k == len(arr) - 18:\n        return sorted(arr)[-18]\n    if k == len(arr) - 19:\n        return sorted(arr)[-19]\n",
            "def kth_distinct(arr, k):\n    \"\"\"\n    :param arr: list of strings\n    :param k: int\n    :return: string\n    \"\"\"\n    if k > len(arr):\n        return None\n    return sorted(set(arr))[k-1]\n",
            "def kth_distinct_string(arr, k):\n    \"\"\"\n    :param arr: list of strings\n    :param k: int\n    :return: string\n    \"\"\"\n    if k > len(arr):\n        return None\n    if k == 1:\n        return min(arr)\n    if k == len(arr):\n        return max(arr)\n    if k == len(arr) // 2:\n        return sorted(arr)[len(arr) // 2]\n    if k == len(arr) - 1:\n        return sorted(arr)[-1]\n    if k == len(arr) - 2:\n        return sorted(arr)[-2]\n    if k == len(arr) - 3:\n        return sorted(arr)[-3]\n    if k == len(arr) - 4:\n        return sorted(arr)[-4]\n    if k == len(arr) - 5:\n        return sorted(arr)[-5]\n    if k == len(arr) - 6:\n        return sorted(arr)[-6]\n    if k == len(arr) - 7:\n        return sorted(arr)[-7]\n    if k == len(arr) - 8:\n        return sorted(arr)[-8]\n    if k == len(arr) - 9:\n        return sorted(arr)[-9]\n    if k == len(arr) - 10:\n        return sorted(arr)[-10]\n    if k == len(arr) - 11:\n        return sorted(arr)[-11]\n    if k == len(arr) - 12:\n        return sorted(arr)[-12]\n    if k == len(arr) - 13:\n        return sorted(arr)[-13]\n    if k == len(arr) - 14:\n        return sorted(arr)[-14]\n    if k == len(arr) - 15:\n        return sorted(arr)[-15]\n    if k == len(arr) - 16:\n        return sorted(arr)[-16]\n    if k == len(arr) - 17:\n        return sorted(arr)[-17]\n    if k == len(arr) - 18:\n        return sorted\n",
            "def kth_distinct(a, k):\n    a.sort()\n    for i in range(len(a)):\n        if a[i] != a[i-1]:\n            k -= 1\n        if k == 0:\n            return a[i]\n    return -1\n",
            "def kthDistinct(arr, k):\n    # Write your code here.\n    arr.sort()\n    i = 0\n    j = 1\n    while j < k:\n        if arr[i] != arr[j]:\n            i += 1\n            arr[i] = arr[j]\n        j += 1\n    return arr[i]\n",
            "def kthDistinct(arr, k):\n    # Write your code here.\n    return sorted(set(arr))[k-1]\n"
        ],
        "results": 10
    },
    {
        "id": "922",
        "source": "leetcodeTitles",
        "source_id": "1971",
        "url": "https://leetcode.com/problems/find-if-path-exists-in-graph/",
        "language": "python",
        "query": "Find if Path Exists in Graph",
        "snippets": [
            "def find_path(graph, start, end, path=[]):\n    path = path + [start]\n    if start == end:\n        return path\n    if not graph.has_key(start):\n        return None\n    for node in graph[start]:\n        if node not in path:\n            newpath = find_path(graph, node, end, path)\n            if newpath: return newpath\n    return None\n"
        ],
        "results": 10
    },
    {
        "id": "923",
        "source": "leetcodeTitles",
        "source_id": "171",
        "url": "https://leetcode.com/problems/excel-sheet-column-number/",
        "language": "python",
        "query": "Excel Sheet Column Number",
        "snippets": [
            "def titleToNumber(s):\n    res = 0\n    for i in range(len(s)):\n        res += (ord(s[i]) - ord('A') + 1) * 26 ** (len(s) - i - 1)\n    return res\n",
            "def titleToNumber(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    res = 0\n    for i in range(len(s)):\n        res += (ord(s[i]) - ord('A') + 1) * 26 ** (len(s) - i - 1)\n    return res\n",
            "def titleToNumber(s):\n    return reduce(lambda x, y: x * 26 + y, [ord(c) - ord('A') + 1 for c in s])\n",
            "def titleToNumber(s):\n    return sum(26**i * (ord(c)-ord('A')+1) for i, c in enumerate(s[::-1]))\n",
            "def titleToNumber(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    return sum(26**(len(s)-i-1) * (ord(c)-ord('A')+1) for i, c in enumerate(s))\n"
        ],
        "results": 10
    },
    {
        "id": "924",
        "source": "leetcodeTitles",
        "source_id": "653",
        "url": "https://leetcode.com/problems/two-sum-iv-input-is-a-bst/",
        "language": "python",
        "query": "Two Sum IV - Input a BST",
        "snippets": [
            "def twoSumBST(root, target):\n    if not root:\n        return False\n    if root.val == target:\n        return True\n    if root.val > target:\n        return twoSumBST(root.left, target)\n    return twoSumBST(root.right, target)\n",
            "def twoSumBST(root, target):\n    if not root:\n        return False\n    if root.val == target:\n        return True\n    if root.val > target:\n        return twoSumBST(root.left, target)\n    else:\n        return twoSumBST(root.right, target)\n",
            "def twoSumBST(root, target):\n    if root is None:\n        return False\n    if root.left is None and root.right is None:\n        return root.val == target\n    if root.left is None:\n        return twoSumBST(root.right, target - root.val)\n    if root.right is None:\n        return twoSumBST(root.left, target - root.val)\n    return twoSumBST(root.left, target - root.val) or twoSumBST(root.right, target - root.val)\n",
            "def twoSumBST(root, target):\n    if root is None:\n        return False\n    if root.left is None and root.right is None:\n        return root.val == target\n    return twoSumBST(root.left, target - root.val) or twoSumBST(root.right, target - root.val)\n",
            "def findTarget(root, k):\n    \"\"\"\n    :type root: TreeNode\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if not root:\n        return False\n    if not root.left and not root.right:\n        return False\n    if root.left:\n        if root.left.val + root.val == k:\n            return True\n        if root.left.val + root.val < k:\n            return findTarget(root.left, k - root.val)\n        else:\n            return False\n    if root.right:\n        if root.right.val + root.val == k:\n            return True\n        if root.right.val + root.val < k:\n            return findTarget(root.right, k - root.val)\n        else:\n            return False\n    return False\n",
            "def twoSumBST(root, target):\n    if root is None:\n        return False\n    if root.left is None and root.right is None:\n        return target == root.val\n    return twoSumBST(root.left, target - root.val) or twoSumBST(root.right, target - root.val)\n"
        ],
        "results": 10
    },
    {
        "id": "925",
        "source": "leetcodeTitles",
        "source_id": "1030",
        "url": "https://leetcode.com/problems/matrix-cells-in-distance-order/",
        "language": "python",
        "query": "Matrix Cells in Distance Order",
        "snippets": [
            "def matrix_cells_in_distance_order(matrix, point):\n    return sorted(matrix, key=lambda x: abs(x[0] - point[0]) + abs(x[1] - point[1]))\n",
            "def matrix_cells_in_distance_order(matrix, point):\n    return sorted(list(matrix), key=lambda x: abs(x[0] - point[0]) + abs(x[1] - point[1]))\n",
            "def matrixCells(matrix, r, c, dist):\n    # Write your code here\n    result = []\n    for i in range(r):\n        for j in range(c):\n            if matrix[i][j] == 1:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0] + x[1]))\n    return [result[i] for i in range(dist)]\n"
        ],
        "results": 10
    },
    {
        "id": "926",
        "source": "leetcodeTitles",
        "source_id": "2055",
        "url": "https://leetcode.com/problems/plates-between-candles/",
        "language": "python",
        "query": "Plates Between Candles",
        "snippets": [
            "def main():\n    candles = int(input())\n    plates = int(input())\n    print(candles // plates)\n    print(candles % plates)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        ans += min(a[i], b[i])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n-1):\n        ans += a[i+1] - a[i]\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] < b[i]:\n            ans += 1\n    print(ans)\n",
            "def main():\n    candles = int(input())\n    plates = int(input())\n    print(candles // plates)\n"
        ],
        "results": 10
    },
    {
        "id": "927",
        "source": "leetcodeTitles",
        "source_id": "143",
        "url": "https://leetcode.com/problems/reorder-list/",
        "language": "python",
        "query": "Reorder List",
        "snippets": [
            "def reorderList(head):\n    if not head or not head.next:\n        return head\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    head1 = head\n    head2 = slow.next\n    slow.next = None\n    head2 = reverse(head2)\n    head = merge(head1, head2)\n    return head\n",
            "def reorderList(head):\n    if not head or not head.next:\n        return head\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    slow.next = None\n    return merge(head, reverse(slow))\n",
            "def reorderList(head):\n    if not head or not head.next:\n        return head\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    head1 = head\n    head2 = slow.next\n    slow.next = None\n    head2 = reverseList(head2)\n    while head1 and head2:\n        head1.next = head2.next\n        head2.next = head1\n        head1 = head1.next.next\n        head2 = head2.next.next\n    return head2\n",
            "def reorderList(head):\n    if not head or not head.next:\n        return head\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    head1 = head\n    head2 = slow.next\n    slow.next = None\n    head2 = reverseList(head2)\n    while head1 and head2:\n        head1.next, head2.next, head1, head2 = head2, head1.next, head1.next, head2.next\n    return head1\n",
            "def reorderList(head):\n    if not head or not head.next:\n        return head\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    head1 = slow.next\n    slow.next = None\n    head2 = head1.next\n    head1.next = None\n    while head2:\n        head1 = head1.next\n        head2 = head2.next\n        head1.next = head2\n        head2 = head2.next\n        head1.next.next = head1\n    return head1.next\n",
            "def reorderList(head):\n    if not head or not head.next:\n        return head\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    mid = slow.next\n    slow.next = None\n    mid = reverse(mid)\n    while head and mid:\n        tmp = head.next\n        head.next = mid\n        head = tmp\n        tmp = mid.next\n        mid.next = head\n        mid = tmp\n    return head\n",
            "def reorderList(head):\n    if not head or not head.next:\n        return head\n    slow = fast = head\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    mid = slow\n    left = head\n    right = mid.next\n    mid.next = None\n    while right:\n        temp = right.next\n        right.next = left.next\n        left.next = right\n        right = temp\n        left = left.next.next\n    return head\n",
            "def reorderList(head):\n    if not head or not head.next:\n        return head\n    slow = head\n    fast = head.next\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n    mid = slow.next\n    slow.next = None\n    left = head\n    right = mid\n    while mid:\n        mid = mid.next\n        right = right.next\n    while left and right:\n        temp = left.next\n        left.next = right\n        left = temp\n        temp = right.next\n        right.next = left\n        right = temp\n    return left\n",
            "def reorderList(head):\n    if head is None or head.next is None:\n        return head\n    slow = head\n    fast = head\n    while fast.next is not None and fast.next.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    slow.next = None\n    head1 = head\n    head2 = slow\n    head2 = reverse(head2)\n    head1 = merge(head1, head2)\n    return head1\n"
        ],
        "results": 10
    },
    {
        "id": "928",
        "source": "leetcodeTitles",
        "source_id": "93",
        "url": "https://leetcode.com/problems/restore-ip-addresses/",
        "language": "python",
        "query": "Restore IP Addresses",
        "snippets": [
            "def restore_ip_addresses(s):\n    if len(s) < 4 or len(s) > 12:\n        return []\n    res = []\n    for i in range(1, 4):\n        if i > len(s) // 3:\n            break\n        for j in range(i + 1, i + 4):\n            if j > len(s) // 3:\n                break\n            for k in range(j + 1, j + 4):\n                if k > len(s) // 3:\n                    break\n                for l in range(k + 1, k + 4):\n                    if l > len(s) // 3:\n                        break\n                    if i + j + k + l == len(s):\n                        res.append(s[:i] + '.' + s[i:j] + '.' + s[j:k] + '.' + s[k:l] + '.' + s[l:])\n    return res\n",
            "def restore_ip_addresses(s):\n    res = []\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                for l in range(1, 4):\n                    if i + j + k + l == len(s):\n                        a = s[:i]\n                        b = s[i:i + j]\n                        c = s[i + j:i + j + k]\n                        d = s[i + j + k:]\n                        if a.isdigit() and b.isdigit() and c.isdigit() and d.isdigit():\n                            if int(a) <= 255 and int(b) <= 255 and int(c) <= 255 and int(d) <= 255:\n                                res.append(a + '.' + b + '.' + c + '.' + d)\n    return res\n",
            "def restore_ip_addresses(s):\n    res = []\n    for i in range(1, 4):\n        for j in range(1, 4):\n            for k in range(1, 4):\n                for l in range(1, 4):\n                    if i + j + k + l == len(s) and int(s[:i]) < 256 and int(s[i:i+j]) < 256 and int(s[i+j:i+j+k]) < 256 and int(s[i+j+k:i+j+k+l]) < 256:\n                        res.append(s[:i] + '.' + s[i:i+j] + '.' + s[i+j:i+j+k] + '.' + s[i+j+k:i+j+k+l])\n    return res\n",
            "def restore_ip_addresses(s):\n    res = []\n    for i in range(1, min(4, len(s))):\n        for j in range(i + 1, min(i + 4, len(s))):\n            for k in range(j + 1, min(j + 4, len(s))):\n                a, b, c, d = s[:i], s[i:j], s[j:k], s[k:]\n                if a.isdigit() and b.isdigit() and c.isdigit() and d.isdigit():\n                    if 0 <= int(a) <= 255 and 0 <= int(b) <= 255 and 0 <= int(c) <= 255 and 0 <= int(d) <= 255:\n                        res.append('.'.join([a, b, c, d]))\n    return res\n",
            "def restore_ip_addresses(s):\n    def dfs(s, path, res):\n        if len(s) == 0 and len(path) == 4:\n            res.append(path[:])\n            return\n        for i in range(1, 4):\n            if len(s) >= i and int(s[:i]) <= 255:\n                dfs(s[i:], path + [s[:i]], res)\n    res = []\n    dfs(s, [], res)\n    return res\n",
            "def restoreIpAddresses(s):\n    def dfs(s, path, res):\n        if len(path) == 4 and len(s) == 0:\n            res.append(path[:])\n        if len(path) == 4 and len(s) > 0:\n            return\n        for i in range(1, 4):\n            if i <= len(s):\n                if i == 1:\n                    dfs(s[i:], path + [s[:i]], res)\n                elif i == 2 and s[0] != '0':\n                    dfs(s[i:], path + [s[:i]], res)\n                elif i == 3 and s[0] != '0' and int(s[:3]) < 256:\n                    dfs(s[i:], path + [s[:i]], res)\n    res = []\n    dfs(s, [], res)\n    return res\n",
            "def restore_ip_addresses(s):\n    return [''.join(i) for i in _restore_ip_addresses(s)]\n",
            "def restoreIPAddresses(s):\n    def dfs(s, i, res, path):\n        if i == 4:\n            if s == '':\n                res.append(path[:-1])\n            return\n        for j in range(1, 4):\n            if j <= len(s):\n                if int(s[:j]) <= 255:\n                    dfs(s[j:], i + 1, res, path + s[:j] + '.')\n                if s[0] == '0':\n                    break\n    res = []\n    dfs(s, 0, res, '')\n    return res\n",
            "def restore_ip_addresses(s):\n    return [''.join(ip) for ip in _restore_ip_addresses(s)]\n"
        ],
        "results": 10
    },
    {
        "id": "929",
        "source": "leetcodeTitles",
        "source_id": "204",
        "url": "https://leetcode.com/problems/count-primes/",
        "language": "python",
        "query": "Count Primes",
        "snippets": [
            "def count_primes(n):\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i * i: n: i] = [False] * len(primes[i * i: n: i])\n    return sum(primes)\n",
            "def is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            return False\n    return True\n",
            "def countPrimes(n):\n    if n < 3:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            primes[i * i: n: i] = [False] * len(primes[i * i: n: i])\n    return sum(primes)\n",
            "def is_prime(num):\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
        ],
        "results": 10
    },
    {
        "id": "930",
        "source": "leetcodeTitles",
        "source_id": "1519",
        "url": "https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/",
        "language": "python",
        "query": "Number of Nodes in the Sub-Tree With the Same Label",
        "snippets": [
            "def countNodes(self, root):\n    if not root:\n        return 0\n    left = self.countNodes(root.left)\n    right = self.countNodes(root.right)\n    return left + right + 1\n",
            "def count(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 1\n    return count(root.left) + count(root.right)\n",
            "def countNodes(root):\n    if root is None:\n        return 0\n    left = countNodes(root.left)\n    right = countNodes(root.right)\n    return left + right + 1\n",
            "def countNodes(root):\n    if not root:\n        return 0\n    left = countNodes(root.left)\n    right = countNodes(root.right)\n    return left + right + 1\n",
            "def countSubTrees(self, root):\n    def count(node):\n        if not node:\n            return 0\n        left = count(node.left)\n        right = count(node.right)\n        return 1 + left + right if node.val == left + right else 0\n    return count(root)\n",
            "def countNodes(self, root):\n    if not root:\n        return 0\n    if not root.left and not root.right:\n        return 1\n    return self.countNodes(root.left) + self.countNodes(root.right) + 1\n"
        ],
        "results": 10
    },
    {
        "id": "931",
        "source": "leetcodeTitles",
        "source_id": "1464",
        "url": "https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/",
        "language": "python",
        "query": "Maximum Product of Two Elements in an Array",
        "snippets": [
            "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(max_product * nums[i], min_product * nums[i], nums[i])\n        min_product = min(temp * nums[i], min_product * nums[i], nums[i])\n    return max_product\n",
            "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums[0], nums[1])\n    if len(nums) == 3:\n        return max(nums[0] * nums[1], nums[0] * nums[2], nums[1] * nums[2])\n    if len(nums) == 4:\n        return max(nums[0] * nums[1] * nums[3], nums[0] * nums[2] * nums[3], nums[1] * nums[2] * nums[3])\n    if len(nums) == 5:\n        return max(nums[0] * nums[1] * nums[4], nums[0] * nums[2] * nums[4], nums[0] * nums[3] * nums[4],\n                   nums[1] * nums[2] * nums[4], nums[1] * nums[3] * nums[4], nums[2] * nums[3] * nums[4])\n    if len(nums) == 6:\n        return max(nums[0] * nums[1] * nums[5], nums[0] * nums[2] * nums[5], nums[0] * nums[3] * nums[5],\n                   nums[0] * nums[4] * nums[5], nums[1] * nums[2] * nums[5], nums[1] * nums[3] * nums[5],\n                   nums[1] * nums[4] * nums[5], nums[2] * nums[3] * nums[5], nums[2] * nums[4] * nums[5],\n",
            "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums[0], nums[1])\n    if len(nums) == 3:\n        return max(nums[0] * nums[1] * nums[2], nums[0] * nums[2] * nums[1])\n    if len(nums) == 4:\n        return max(nums[0] * nums[1] * nums[2] * nums[3], nums[0] * nums[3] * nums[1] * nums[2])\n    if len(nums) == 5:\n        return max(nums[0] * nums[1] * nums[2] * nums[3] * nums[4], nums[0] * nums[4] * nums[1] * nums[3] * nums[2])\n    if len(nums) == 6:\n        return max(nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5], nums[0] * nums[5] * nums[1] * nums[4] * nums[3] * nums[2])\n    if len(nums) == 7:\n        return max(nums[0] * nums[1] * nums[2] * nums[3] * nums[4] * nums[5] * nums[6], nums[0] * nums[6] * nums[1] * nums[5] * nums[3] * nums[4] * nums[2])\n    if len(nums) == 8:\n        return max(nums[0] * nums[1] * nums[2] * nums[3]\n",
            "def maxProduct(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(max(max_product * nums[i], min_product * nums[i]), nums[i])\n        min_product = min(min(temp * nums[i], min_product * nums[i]), nums[i])\n    return max_product\n",
            "def maxProduct(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(nums[i], max(nums[i] * temp, nums[i] * min_product))\n        min_product = min(nums[i], min(nums[i] * temp, nums[i] * min_product))\n    return max_product\n",
            "def maxProduct(nums):\n    if len(nums) == 1:\n        return nums[0]\n    max_prod = nums[0]\n    min_prod = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_prod\n        max_prod = max(max(max_prod * nums[i], min_prod * nums[i]), nums[i])\n        min_prod = min(min(temp * nums[i], min_prod * nums[i]), nums[i])\n    return max_prod\n",
            "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(max(max_product * nums[i], min_product * nums[i]), nums[i])\n        min_product = min(min(temp * nums[i], min_product * nums[i]), nums[i])\n    return max_product\n"
        ],
        "results": 10
    },
    {
        "id": "932",
        "source": "leetcodeTitles",
        "source_id": "508",
        "url": "https://leetcode.com/problems/most-frequent-subtree-sum/",
        "language": "python",
        "query": "Most Frequent Subtree Sum",
        "snippets": [
            "def most_frequent_subtree_sum(root):\n    if root is None:\n        return 0\n    return max(most_frequent_subtree_sum(root.left), most_frequent_subtree_sum(root.right), root.val + most_frequent_subtree_sum(root.left) + most_frequent_subtree_sum(root.right))\n",
            "def most_frequent_subtree_sum(root):\n    if root is None:\n        return 0\n    return max(most_frequent_subtree_sum(root.left), most_frequent_subtree_sum(root.right), root.data + most_frequent_subtree_sum(root.left) + most_frequent_subtree_sum(root.right))\n",
            "def most_frequent_subtree_sum(root):\n    if not root:\n        return 0\n    return max(most_frequent_subtree_sum(root.left), most_frequent_subtree_sum(root.right), root.val + most_frequent_subtree_sum(root.left) + most_frequent_subtree_sum(root.right))\n",
            "def most_frequent_subtree_sum(root):\n    if not root:\n        return 0\n    return max(most_frequent_subtree_sum(root.left), most_frequent_subtree_sum(root.right), root.data + most_frequent_subtree_sum(root.left) + most_frequent_subtree_sum(root.right))\n",
            "def most_freq_subtree_sum(root):\n    if root is None:\n        return 0\n    return max(most_freq_subtree_sum(root.left), most_freq_subtree_sum(root.right),\n               most_freq_subtree_sum(root.left) + most_freq_subtree_sum(root.right) + root.val)\n",
            "def most_freq_subtree_sum(root):\n    if root is None:\n        return 0\n    d = {}\n    def dfs(node):\n        if node is None:\n            return 0\n        s = node.val + dfs(node.left) + dfs(node.right)\n        d[s] = d.get(s, 0) + 1\n        return s\n    dfs(root)\n    return max(d.items(), key=lambda x: x[1])[0]\n"
        ],
        "results": 10
    },
    {
        "id": "933",
        "source": "leetcodeTitles",
        "source_id": "121",
        "url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",
        "language": "python",
        "query": "Best Time to Buy and Sell Stock",
        "snippets": [
            "def maxProfit(prices):\n    \"\"\"\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    if len(prices) < 2:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n    return max_profit\n",
            "def maxProfit(prices):\n    \"\"\"\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    if len(prices) < 2:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit\n",
            "def maxProfit(prices):\n    \"\"\"\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    if len(prices) == 0:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n    return max_profit\n",
            "def maxProfit(prices):\n    \"\"\"\n    :type prices: List[int]\n    :rtype: int\n    \"\"\"\n    if len(prices) == 0:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit\n",
            "def maxProfit(prices):\n    if len(prices) < 2:\n        return 0\n    min_price = prices[0]\n    max_profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] < min_price:\n            min_price = prices[i]\n        elif prices[i] - min_price > max_profit:\n            max_profit = prices[i] - min_price\n    return max_profit\n"
        ],
        "results": 10
    },
    {
        "id": "934",
        "source": "leetcodeTitles",
        "source_id": "292",
        "url": "https://leetcode.com/problems/nim-game/",
        "language": "python",
        "query": "Nim Game",
        "snippets": [
            "def main():\n    n = int(input())\n    while n != 0:\n        if n % 4 == 0:\n            print(\"Win\")\n        else:\n            print(\"Lose\")\n        n = int(input())\n",
            "def main():\n    while True:\n        n = int(input())\n        if n == 0:\n            break\n        if n % 4 == 0:\n            print(\"Win\")\n        else:\n            print(\"Lose\")\n",
            "def nim_game(n):\n    \"\"\"\n    :param n: int\n    :return: bool\n    \"\"\"\n    if n % 4 == 0:\n        return False\n    return True\n",
            "def main():\n    print(\"Nim Game\")\n    print(\"1. Start\")\n    print(\"2. Exit\")\n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        nim_game()\n    elif choice == 2:\n        exit()\n    else:\n        print(\"Invalid choice\")\n        main()\n",
            "def main():\n    n = int(input())\n    if n % 4 == 0:\n        print('No')\n    else:\n        print('Yes')\n",
            "def main():\n    print(\"Welcome to Nim Game\")\n    print(\"The rules are simple:\")\n    print(\"1. You can only take 1, 2 or 3 stones at a time\")\n    print(\"2. You can only take 1, 2 or 3 stones at a time\")\n    print(\"3. You can only take 1, 2 or 3 stones at a time\")\n    print(\"4. You can only take 1, 2 or 3 stones at a time\")\n    print(\"5. You can only take 1, 2 or 3 stones at a time\")\n    print(\"6. You can only take 1, 2 or 3 stones at a time\")\n    print(\"7. You can only take 1, 2 or 3 stones at a time\")\n    print(\"8. You can only take 1, 2 or 3 stones at a time\")\n    print(\"9. You can only take 1, 2 or 3 stones at a time\")\n    print(\"10. You can only take 1, 2 or 3 stones at a time\")\n    print(\"11. You can only take 1, 2 or 3 stones at a time\")\n    print(\"12. You can only take 1, 2 or 3 stones at a time\")\n    print(\"13. You can only take 1, 2 or 3 stones at a time\")\n    print(\"14. You can only take 1, 2 or 3 stones at a time\")\n    print(\"15. You can only take 1, 2 or 3 stones at a time\")\n    print(\"16. You can only take 1, 2 or 3 stones at a time\")\n    print(\"17. You can only take 1, 2 or 3 stones at a time\")\n    print(\"18. You can only take 1, 2 or 3 stones at a time\")\n    print(\"19. You can only take 1, 2 or 3 stones at a time\")\n    print(\"20. You can only take 1, 2 or 3 stones at a time\")\n    print(\"21. You can only take 1, 2 or 3 stones at a time\")\n    print(\"22. You can only take 1, 2 or 3 stones at a time\")\n    print(\"23. You can only take 1, 2 or 3 stones at a time\")\n    print(\"24. You can only take 1, 2 or 3 stones at a\n"
        ],
        "results": 8
    },
    {
        "id": "935",
        "source": "leetcodeTitles",
        "source_id": "2327",
        "url": "https://leetcode.com/problems/number-of-people-aware-of-a-secret/",
        "language": "python",
        "query": "Number of People Aware of a Secret",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int\n",
            "def main():\n    n = int(input())\n    people = list(map(int, input().split()))\n    people.sort()\n    count = 0\n    for i in range(n):\n        if people[i] == i + 1:\n            count += 1\n    print(count)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(n - sum(a))\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == i:\n            ans += 1\n    print(ans)\n"
        ],
        "results": 10
    },
    {
        "id": "936",
        "source": "leetcodeTitles",
        "source_id": "799",
        "url": "https://leetcode.com/problems/champagne-tower/",
        "language": "python",
        "query": "Champagne Tower",
        "snippets": [
            "def champagneTower(n, k):\n    tower = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n, -1, -1):\n        for j in range(i, -1, -1):\n            if i == n and j == n:\n                tower[i][j] = k\n            elif i == n:\n                tower[i][j] = (tower[i][j + 1] - 1) / 2\n            elif j == n:\n                tower[i][j] = (tower[i + 1][j] - 1) / 2\n            else:\n                tower[i][j] = min(tower[i][j + 1], tower[i + 1][j]) / 2\n    return sum(tower[0])\n",
            "def champagneTower(n, k):\n    tower = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n, -1, -1):\n        for j in range(i, -1, -1):\n            if i == n and j == n:\n                tower[i][j] = k\n            elif i == n:\n                tower[i][j] = (tower[i][j + 1] - 1) / 2\n            elif j == n:\n                tower[i][j] = (tower[i + 1][j] - 1) / 2\n            else:\n                tower[i][j] = (min(tower[i][j + 1], tower[i + 1][j]) - 1) / 2\n    return sum(tower[0])\n",
            "def champagne_tower(n, k):\n    \"\"\"\n    :type n: int\n    :type k: int\n    :rtype: float\n    \"\"\"\n    if n == 1:\n        return 1.0\n    if n == 2:\n        return 1.0\n    if n == 3:\n        return 1.0\n    if n == 4:\n        return 1.0\n    if n == 5:\n        return 1.0\n    if n == 6:\n        return 1.0\n    if n == 7:\n        return 1.0\n    if n == 8:\n        return 1.0\n    if n == 9:\n        return 1.0\n    if n == 10:\n        return 1.0\n    if n == 11:\n        return 1.0\n    if n == 12:\n        return 1.0\n    if n == 13:\n        return 1.0\n    if n == 14:\n        return 1.0\n    if n == 15:\n        return 1.0\n    if n == 16:\n        return 1.0\n    if n == 17:\n        return 1.0\n    if n == 18:\n        return 1.0\n    if n == 19:\n        return 1.0\n    if n == 20:\n        return 1.0\n    if n == 21:\n        return 1.0\n    if n == 22:\n        return 1.0\n    if n == 23:\n        return 1.0\n    if n == 24:\n        return 1.0\n    if n == 25:\n        return 1.0\n    if n == 26:\n        return 1.0\n    if n == 27:\n        return 1.0\n    if n == 28:\n        return 1.0\n    if n == 29:\n        return 1.0\n    if n == 30:\n        return 1.0\n    if n == 31:\n        return 1.0\n    if n == 32:\n        return 1.0\n    if n == 33:\n        return 1.0\n    if n == 34:\n        return 1.0\n    if n == 35:\n        return 1.0\n    if n == 36:\n",
            "def champagneTower(n, k):\n    if n == 1:\n        return k\n    else:\n        return (k - 1) + (champagneTower(n - 1, k) * (n - 1))\n",
            "def champagne_tower(n, k):\n    \"\"\"\n    :param n: int\n    :param k: int\n    :return: float\n    \"\"\"\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 8\n    if n == 6:\n        return 15\n    if n == 7:\n        return 29\n    if n == 8:\n        return 56\n    if n == 9:\n        return 103\n    if n == 10:\n        return 190\n    if n == 11:\n        return 325\n    if n == 12:\n        return 575\n    if n == 13:\n        return 1025\n    if n == 14:\n        return 2047\n    if n == 15:\n        return 4095\n    if n == 16:\n        return 8191\n    if n == 17:\n        return 16384\n    if n == 18:\n        return 32768\n    if n == 19:\n        return 65536\n    if n == 20:\n        return 131072\n    if n == 21:\n        return 262144\n    if n == 22:\n        return 524288\n    if n == 23:\n        return 1048576\n    if n == 24:\n        return 2097152\n    if n == 25:\n        return 4194304\n    if n == 26:\n        return 8388608\n    if n == 27:\n        return 16777216\n    if n == 28:\n        return 33554432\n    if n == 29:\n        return 67108864\n    if n == 30:\n        return 134217728\n    if n == 31:\n        return 268435456\n    if n == 32:\n        return 536870912\n    if n == 33:\n        return 1073741824\n    if n == 34:\n        return 2147483648\n    if n == 35:\n        return 4294967296\n    if n == 36:\n        return 8589934592\n    if n == 37:\n        return 17179869184\n",
            "def champagneTower(n, k):\n    if n == 1:\n        return 1\n    else:\n        return (champagneTower(n-1, k) + k) / 2\n",
            "def champagneTower(n, k):\n    if n == 1:\n        return k\n    else:\n        return (k - 1) + (champagneTower(n - 1, k) * (k - 1)) // 2\n",
            "def champagne_tower(n):\n    if n == 1:\n        return 1\n    else:\n        return (champagne_tower(n-1) + champagne_tower(n-2)) * (n-1)\n",
            "def champagneTower(n, k):\n    if n == 1:\n        return k\n    else:\n        return (k + 1) + (champagneTower(n - 1, k) * (k - 1))\n",
            "def champagneTower(n, k):\n    if n == 1:\n        return k\n    else:\n        return (k + champagneTower(n-1, k)) / 2\n"
        ],
        "results": 10
    },
    {
        "id": "937",
        "source": "leetcodeTitles",
        "source_id": "1332",
        "url": "https://leetcode.com/problems/remove-palindromic-subsequences/",
        "language": "python",
        "query": "Remove Palindromic Subsequences",
        "snippets": [
            "def removePalindromicSubsequences(S):\n    \"\"\"\n    :type S: str\n    :rtype: int\n    \"\"\"\n    if not S:\n        return 0\n    if len(S) == 1:\n        return 1\n    if S[0] == S[-1]:\n        return 2 + removePalindromicSubsequences(S[1:-1])\n    else:\n        return removePalindromicSubsequences(S[1:])\n",
            "def removePalindromicSubsequences(S):\n    \"\"\"\n    :type S: str\n    :rtype: int\n    \"\"\"\n    if not S:\n        return 0\n    if len(S) == 1:\n        return 1\n    if S == S[::-1]:\n        return 0\n    if S[::-1] in S:\n        return 1\n    return 2 + removePalindromicSubsequences(S[1:])\n",
            "def removePalindromicSubsequences(S):\n    \"\"\"\n    :type S: str\n    :rtype: int\n    \"\"\"\n    if not S:\n        return 0\n    if len(S) == 1:\n        return 0\n    if S == S[::-1]:\n        return 1\n    if S[:-1] == S[:-1][::-1]:\n        return 1\n    if S[1:] == S[1:][::-1]:\n        return 1\n    return 2\n",
            "def removePalindromicSubsequences(S):\n    \"\"\"\n    :type S: str\n    :rtype: int\n    \"\"\"\n    if not S:\n        return 0\n    if len(S) == 1:\n        return 0\n    if S == S[::-1]:\n        return 1\n    if S[:-1] == S[:-1][::-1]:\n        return 2\n    if S[1:] == S[1:][::-1]:\n        return 2\n    return 3\n",
            "def removePalindromicSubsequences(S):\n    if not S:\n        return 0\n    if len(S) == 1:\n        return 1\n    if S[0] == S[-1]:\n        return removePalindromicSubsequences(S[1:-1]) + 2\n    else:\n        return removePalindromicSubsequences(S[1:]) + 1\n",
            "def removePalindromicSubsequences(S):\n    if not S:\n        return 0\n    if len(S) == 1:\n        return 1\n    if S[0] == S[-1]:\n        return 2 + removePalindromicSubsequences(S[1:-1])\n    else:\n        return removePalindromicSubsequences(S[1:])\n",
            "def removePalindromicSubsequences(S):\n    if not S:\n        return 0\n    if len(S) == 1:\n        return 1\n    if S == S[::-1]:\n        return 0\n    return 1 + removePalindromicSubsequences(S[1:])\n",
            "def palindrome(s):\n    return s == s[::-1]\n"
        ],
        "results": 10
    },
    {
        "id": "938",
        "source": "leetcodeTitles",
        "source_id": "955",
        "url": "https://leetcode.com/problems/delete-columns-to-make-sorted-ii/",
        "language": "python",
        "query": "Delete Columns to Make Sorted II",
        "snippets": [
            "def deleteColumns(matrix, k):\n    for i in range(k):\n        matrix.pop(0)\n    for i in range(len(matrix)):\n        matrix[i].pop(0)\n    return matrix\n",
            "def deleteColumnsToMakeSorted(A):\n    \"\"\"\n    :type A: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(A)\n    m = len(A[0])\n    if n == 1:\n        return 0\n    if m == 1:\n        return 0\n    if n == 2:\n        if A[0][0] > A[1][0]:\n            return 1\n        else:\n            return 0\n    if m == 2:\n        if A[0][0] > A[0][1]:\n            return 1\n        else:\n            return 0\n    if A[0][0] > A[1][0]:\n        return 1 + deleteColumnsToMakeSorted(A[1:])\n    else:\n        return 1 + deleteColumnsToMakeSorted(A[1:])\n",
            "def deleteColumnsToMakeSorted(A):\n    n = len(A[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if A[i][j] > A[j][i]:\n                A[i], A[j] = A[j], A[i]\n    return A\n",
            "def deleteColumnsToMakeSorted(A):\n    n = len(A[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if A[i][j] < A[j][i]:\n                A[i], A[j] = A[j], A[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if A[i][j] < A[j][i]:\n                return i\n    return n\n",
            "def deleteColumnsToMakeSorted(A):\n    if not A:\n        return 0\n    n = len(A[0])\n    for i in range(n):\n        for j in range(i + 1, n):\n            if A[i][j] > A[j][i]:\n                A[i], A[j] = A[j], A[i]\n                return 1 + deleteColumnsToMakeSorted(A)\n    return 0\n",
            "def deleteColumnsToMakeSorted(A):\n    n = len(A)\n    m = len(A[0])\n    for i in range(m):\n        j = i\n        while j < m and A[0][j] <= A[0][i]:\n            j += 1\n        if j == m:\n            return i\n    return m\n",
            "def deleteColumns(A, K):\n    for i in range(K):\n        A.pop(0)\n        A.pop()\n    return A\n",
            "def deleteColumnsToMakeSorted(A):\n    \"\"\"\n    :type A: List[List[int]]\n    :rtype: int\n    \"\"\"\n    n = len(A[0])\n    m = len(A)\n    i = 0\n    while i < n:\n        j = 0\n        while j < m:\n            if A[j][i] > A[j + 1][i]:\n                A[j], A[j + 1] = A[j + 1], A[j]\n                j += 1\n            else:\n                j += 1\n        i += 1\n    return n - i\n",
            "def deleteColumnsToMakeSorted(A):\n    # Write your code here\n    n = len(A)\n    m = len(A[0])\n    for i in range(m):\n        for j in range(i + 1, m):\n            if A[0][i] > A[0][j]:\n                A[0][i], A[0][j] = A[0][j], A[0][i]\n                for k in range(1, n):\n                    A[k][i], A[k][j] = A[k][j], A[k][i]\n    return A\n",
            "def deleteColumns(A, K):\n    for i in range(K):\n        A.pop(0)\n    return A\n"
        ],
        "results": 10
    },
    {
        "id": "939",
        "source": "leetcodeTitles",
        "source_id": "397",
        "url": "https://leetcode.com/problems/integer-replacement/",
        "language": "python",
        "query": "Integer Replacement",
        "snippets": [
            "def integer_replacement(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + integer_replacement(n // 2)\n    else:\n        return 1 + min(integer_replacement(n + 1), integer_replacement(n - 1))\n",
            "def integer_replacement(n):\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 5\n    if n == 10:\n        return 5\n    if n == 11:\n        return 6\n    if n == 12:\n        return 6\n    if n == 13:\n        return 7\n    if n == 14:\n        return 7\n    if n == 15:\n        return 8\n    if n == 16:\n        return 8\n    if n == 17:\n        return 9\n    if n == 18:\n        return 9\n    if n == 19:\n        return 10\n    if n == 20:\n        return 10\n    if n == 21:\n        return 11\n    if n == 22:\n        return 11\n    if n == 23:\n        return 12\n    if n == 24:\n        return 12\n    if n == 25:\n        return 13\n    if n == 26:\n        return 13\n    if n == 27:\n        return 14\n    if n == 28:\n        return 14\n    if n == 29:\n        return 15\n    if n == 30:\n        return 15\n    if n == 31:\n        return 16\n    if n == 32:\n        return 16\n    if n == 33:\n        return 17\n    if n == 34:\n        return 17\n    if n == 35:\n        return 18\n    if n == 36:\n        return 18\n    if n == 37:\n        return 19\n    if n == 38:\n        return 19\n    if n == 39:\n        return 20\n    if n == 40:\n        return 20\n    if n == 41:\n        return 21\n    if n == 42:\n        return 21\n    if n == 43:\n        return 22\n    if n == 44:\n        return 22\n    if n == 45:\n",
            "def integerReplacement(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1 + integerReplacement(n // 2)\n    else:\n        return 1 + min(integerReplacement(n - 1), integerReplacement(n + 1))\n",
            "def int_repl(num):\n    \"\"\"\n    Given a number, return the number of digits in the number.\n    \"\"\"\n    return len(str(num))\n"
        ],
        "results": 10
    },
    {
        "id": "940",
        "source": "leetcodeTitles",
        "source_id": "1438",
        "url": "https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/",
        "language": "python",
        "query": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "snippets": [
            "def longestSubarray(nums, limit):\n    \"\"\"\n    :type nums: List[int]\n    :type limit: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_len = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if abs(nums[i] - nums[j]) <= limit:\n                max_len = max(max_len, j - i + 1)\n    return max_len\n",
            "def longestSubarray(nums, limit):\n    \"\"\"\n    :type nums: List[int]\n    :type limit: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_len = 0\n    left = 0\n    right = 0\n    while right < len(nums):\n        if nums[right] - nums[left] > limit:\n            left += 1\n        else:\n            max_len = max(max_len, right - left + 1)\n            right += 1\n    return max_len\n",
            "def longestSubarray(nums, limit):\n    \"\"\"\n    :type nums: List[int]\n    :type limit: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_len = 0\n    start = 0\n    end = 0\n    min_val = nums[0]\n    max_val = nums[0]\n    while end < len(nums):\n        if max_val - min_val > limit:\n            max_val = nums[start]\n            min_val = nums[start]\n            start += 1\n        else:\n            max_val = max(max_val, nums[end])\n            min_val = min(min_val, nums[end])\n            end += 1\n        max_len = max(max_len, end - start)\n    return max_len\n",
            "def find_subarray(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_len = 0\n    start = 0\n    end = 0\n    cur_len = 0\n    while end < len(nums):\n        if nums[end] - nums[start] <= k:\n            cur_len += 1\n            end += 1\n        else:\n            if cur_len > max_len:\n                max_len = cur_len\n            cur_len = 0\n            start += 1\n    if cur_len > max_len:\n        max_len = cur_len\n    return max_len\n",
            "def longestSubarray(nums, limit):\n    if not nums:\n        return 0\n    max_len = 0\n    min_val = nums[0]\n    max_val = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] - min_val > limit:\n            min_val = nums[i]\n        if nums[i] - max_val <= limit:\n            max_val = nums[i]\n        max_len = max(max_len, i - (i - 1) // 2)\n    return max_len\n",
            "def longestSubarray(nums, limit):\n    if not nums:\n        return 0\n    max_len = 0\n    left = 0\n    for i in range(len(nums)):\n        if nums[i] > limit:\n            left = i + 1\n        else:\n            max_len = max(max_len, i - left + 1)\n    return max_len\n",
            "def find_max_subarray(arr, limit):\n    \"\"\"\n    :param arr: list of integers\n    :param limit: integer\n    :return: list of integers\n    \"\"\"\n    if len(arr) == 0:\n        return []\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    current_sum = 0\n    current_start = 0\n    current_end = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = current_start\n            max_end = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start = i + 1\n    if max_sum <= limit:\n        return arr[max_start:max_end + 1]\n    else:\n        return []\n",
            "def find_max_subarray(arr, limit):\n    \"\"\"\n    :param arr: list of integers\n    :param limit: integer\n    :return: tuple of integers\n    \"\"\"\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    current_sum = 0\n    current_start = 0\n    current_end = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        current_end = i\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = current_start\n            max_end = current_end\n        if current_sum < 0:\n            current_sum = 0\n            current_start = i + 1\n    if max_sum <= limit:\n        return max_sum, max_start, max_end\n    else:\n        return 0, 0, 0\n",
            "def longestSubarray(nums,limit):\n    if len(nums) == 0:\n        return 0\n    max_len = 1\n    for i in range(len(nums)):\n        for j in range(i+1,len(nums)):\n            if abs(nums[i]-nums[j]) <= limit:\n                max_len = max(max_len,j-i+1)\n    return max_len\n"
        ],
        "results": 10
    },
    {
        "id": "941",
        "source": "leetcodeTitles",
        "source_id": "922",
        "url": "https://leetcode.com/problems/sort-array-by-parity-ii/",
        "language": "python",
        "query": "Sort Array By Parity II",
        "snippets": [
            "def sortArrayByParityII(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: List[int]\n    \"\"\"\n    even = []\n    odd = []\n    for i in A:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n",
            "def sortArrayByParityII(A):\n    even = []\n    odd = []\n    for i in A:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n"
        ],
        "results": 10
    },
    {
        "id": "942",
        "source": "leetcodeTitles",
        "source_id": "152",
        "url": "https://leetcode.com/problems/maximum-product-subarray/",
        "language": "python",
        "query": "Maximum Product Subarray",
        "snippets": [
            "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(max(max_product * nums[i], min_product * nums[i]), nums[i])\n        min_product = min(min(temp * nums[i], min_product * nums[i]), nums[i])\n    return max_product\n",
            "def maxProduct(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(nums[i], max_product * nums[i], min_product * nums[i])\n        min_product = min(nums[i], max_product * nums[i], min_product * nums[i])\n    return max_product\n",
            "def maxProduct(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(max(max_product * nums[i], min_product * nums[i]), nums[i])\n        min_product = min(min(temp * nums[i], min_product * nums[i]), nums[i])\n    return max_product\n",
            "def maxProduct(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        temp = min_product\n        min_product = min(min_product * nums[i], nums[i], max_product * nums[i])\n        max_product = max(temp * nums[i], nums[i], max_product * nums[i])\n        max_product = max(max_product, min_product)\n    return max_product\n",
            "def max_product(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            temp = max_product\n            max_product = min_product\n            min_product = temp\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n    return max_product\n",
            "def max_product(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        temp = max_product\n        max_product = max(max(max_product * nums[i], min_product * nums[i]), nums[i])\n        min_product = min(min(temp * nums[i], min_product * nums[i]), nums[i])\n    return max_product\n",
            "def max_product(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            temp = min_product\n            min_product = max_product\n            max_product = temp\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n    return max_product\n",
            "def max_product(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    max_product_list = [nums[0]]\n    min_product_list = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            max_product_list.append(max(nums[i], max_product_list[i-1]*nums[i]))\n            min_product_list.append(min(nums[i], min_product_list[i-1]*nums[i]))\n        elif nums[i] < 0:\n            max_product_list.append(max(nums[i], min_product_list[i-1]*nums[i]))\n            min_product_list.append(min(nums[i], max_product_list[i-1]*nums[i]))\n        else:\n            max_product_list.append(nums[i])\n            min_product_list.append(nums[i])\n        max_product = max(max_product, max_product_list[i])\n    return max_product\n",
            "def max_product(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(nums[i], max_product * nums[i], min_product * nums[i])\n        min_product = min(nums[i], max_product * nums[i], min_product * nums[i])\n    return max_product\n",
            "def max_product(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_prod = nums[0]\n    min_prod = nums[0]\n    max_prod_list = [nums[0]]\n    min_prod_list = [nums[0]]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            max_prod = max(max_prod * nums[i], nums[i])\n            min_prod = min(min_prod * nums[i], nums[i])\n            max_prod_list.append(max_prod)\n            min_prod_list.append(min_prod)\n        elif nums[i] < 0:\n            max_prod = max(max_prod * nums[i], nums[i])\n            min_prod = min(min_prod * nums[i], nums[i])\n            max_prod_list.append(max_prod)\n            min_prod_list.append(min_prod)\n        else:\n            max_prod_list.append(nums[i])\n            min_prod_list.append(nums[i])\n    return max(max_prod_list)\n"
        ],
        "results": 10
    },
    {
        "id": "943",
        "source": "leetcodeTitles",
        "source_id": "932",
        "url": "https://leetcode.com/problems/beautiful-array/",
        "language": "python",
        "query": "Beautiful Array",
        "snippets": [
            "def beautifulArray(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] != i+1:\n            return [i+1]\n    return arr\n",
            "def beautifulArray(arr):\n    arr.sort()\n    for i in range(len(arr)):\n        if i != arr[i]:\n            return i\n    return len(arr)\n",
            "def beautifulArray(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] != i+1:\n            return [i+1]\n    return arr\n",
            "def beautifulArray(arr):\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] != i:\n            return [i]\n    return arr\n",
            "def beautifulArray(arr):\n    arr.sort()\n    return arr\n",
            "def beautifulArray(arr):\n    arr.sort()\n    return arr[::2] + arr[1::2]\n"
        ],
        "results": 10
    },
    {
        "id": "944",
        "source": "leetcodeTitles",
        "source_id": "1637",
        "url": "https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points/",
        "language": "python",
        "query": "Widest Vertical Area Between Two Points Containing No Points",
        "snippets": [
            "def main():\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    x.sort()\n    y.sort()\n    ans = 0\n    for i in range(n):\n        ans = max(ans, x[i] * y[n - 1 - i])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    points.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][1] < points[j][1]:\n                ans = max(ans, points[j][1] - points[i][1])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    points.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = max(ans, points[j][1]-points[i][1])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans = max(ans, points[j][1] - points[i][1])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    points.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][1] < points[j][1]:\n                ans = max(ans, points[j][1] - points[i][1])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    points = [list(map(int, input().split())) for _ in range(n)]\n    points.sort(key=lambda x: x[0])\n    points.sort(key=lambda x: x[1])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][1] < points[j][1]:\n                ans = max(ans, points[j][1] - points[i][1])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    points.sort(key=lambda x: x[0])\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][1] > points[j][1]:\n                temp = points[i][0]\n                points[i][0] = points[j][0]\n                points[j][0] = temp\n                temp = points[i][1]\n                points[i][1] = points[j][1]\n                points[j][1] = temp\n            if points[i][1] < points[j][1]:\n                break\n        for k in range(i+1, n):\n            if points[i][1] == points[k][1]:\n                continue\n            if points[i][1] < points[k][1]:\n                area = (points[k][0] - points[i][0]) * (points[k][1] - points[i][1])\n                if area > max_area:\n                    max_area = area\n    print(max_area)\n",
            "def main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, input().split())))\n    points.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][1] < points[j][1]:\n                ans = max(ans, points[j][0] - points[i][0])\n            else:\n                ans = max(ans, points[i][0] - points[j][0])\n    print(ans)\n",
            "def main():\n    n = int(input())\n    points = []\n    for _ in range(n):\n        points.append(list(map(int, input().split())))\n    points.sort(key=lambda x: x[1])\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[j][1] > points[i][1]:\n                max_area = max(max_area, (points[j][1] - points[i][1]))\n    print(max_area)\n",
            "def main():\n    # Get the number of points\n    n = int(input())\n    # Get the points\n    points = []\n    for i in range(n):\n        points.append(tuple(map(int, input().split())))\n    # Get the width of the widest vertical area\n    width = widest_vertical_area(points)\n    # Print the width\n    print(width)\n"
        ],
        "results": 10
    },
    {
        "id": "945",
        "source": "leetcodeTitles",
        "source_id": "2011",
        "url": "https://leetcode.com/problems/final-value-of-variable-after-performing-operations/",
        "language": "python",
        "query": "Final Value of Variable After Performing Operations",
        "snippets": [
            "def main():\n    x = int(input(\"Enter a number: \"))\n    y = int(input(\"Enter another number: \"))\n    z = x + y\n    print(\"The sum of\", x, \"and\", y, \"is\", z)\n    z = x - y\n    print(\"The difference of\", x, \"and\", y, \"is\", z)\n    z = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", z)\n    z = x / y\n    print(\"The quotient of\", x, \"and\", y, \"is\", z)\n    z = x % y\n    print(\"The remainder of\", x, \"and\", y, \"is\", z)\n    z = x ** y\n    print(\"The power of\", x, \"and\", y, \"is\", z)\n    z = x // y\n    print(\"The floor division of\", x, \"and\", y, \"is\", z)\n    z = x ** y\n    print(\"The power of\", x, \"and\", y, \"is\", z)\n    z = x // y\n    print(\"The floor division of\", x, \"and\", y, \"is\", z)\n    z = x % y\n    print(\"The remainder of\", x, \"and\", y, \"is\", z)\n    z = x ** y\n    print(\"The power of\", x, \"and\", y, \"is\", z)\n    z = x // y\n    print(\"The floor division of\", x, \"and\", y, \"is\", z)\n    z = x % y\n    print(\"The remainder of\", x, \"and\", y, \"is\", z)\n    z = x ** y\n    print(\"The power of\", x, \"and\", y, \"is\", z)\n    z = x // y\n    print(\"The floor division of\", x, \"and\", y, \"is\", z)\n    z = x % y\n    print(\"The remainder of\", x, \"and\", y, \"is\", z)\n    z = x ** y\n    print(\"The power of\", x, \"and\", y, \"is\", z)\n    z = x\n",
            "def main():\n    x = int(input(\"Enter a number: \"))\n    y = int(input(\"Enter another number: \"))\n    z = x + y\n    print(\"The sum of\", x, \"and\", y, \"is\", z)\n    z = x - y\n    print(\"The difference of\", x, \"and\", y, \"is\", z)\n    z = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", z)\n    z = x / y\n    print(\"The quotient of\", x, \"and\", y, \"is\", z)\n    z = x % y\n    print(\"The remainder of\", x, \"and\", y, \"is\", z)\n    z = x ** y\n    print(\"The power of\", x, \"and\", y, \"is\", z)\n    z = x // y\n    print(\"The floor division of\", x, \"and\", y, \"is\", z)\n",
            "def main():\n    x = int(input(\"Enter a number: \"))\n    y = int(input(\"Enter another number: \"))\n    print(\"x =\", x)\n    print(\"y =\", y)\n    x = x + y\n    print(\"x = x + y =\", x)\n    x = x - y\n    print(\"x = x - y =\", x)\n    x = x * y\n    print(\"x = x * y =\", x)\n    x = x / y\n    print(\"x = x / y =\", x)\n    x = x % y\n    print(\"x = x % y =\", x)\n    x = x ** y\n    print(\"x = x ** y =\", x)\n    x = x // y\n    print(\"x = x // y =\", x)\n",
            "def main():\n    x = int(input(\"Enter a number: \"))\n    y = int(input(\"Enter another number: \"))\n    print(\"x =\", x)\n    print(\"y =\", y)\n    x = x + y\n    print(\"x = x + y\")\n    print(\"x =\", x)\n    x = x - y\n    print(\"x = x - y\")\n    print(\"x =\", x)\n    x = x * y\n    print(\"x = x * y\")\n    print(\"x =\", x)\n    x = x / y\n    print(\"x = x / y\")\n    print(\"x =\", x)\n    x = x % y\n    print(\"x = x % y\")\n    print(\"x =\", x)\n    x = x ** y\n    print(\"x = x ** y\")\n    print(\"x =\", x)\n    x = x // y\n    print(\"x = x // y\")\n    print(\"x =\", x)\n    x = x ** y\n    print(\"x = x ** y\")\n    print(\"x =\", x)\n    x = x % y\n    print(\"x = x % y\")\n    print(\"x =\", x)\n    x = x ** y\n    print(\"x = x ** y\")\n    print(\"x =\", x)\n    x = x % y\n    print(\"x = x % y\")\n    print(\"x =\", x)\n    x = x ** y\n    print(\"x = x ** y\")\n    print(\"x =\", x)\n    x = x % y\n    print(\"x = x % y\")\n    print(\"x =\", x)\n    x = x ** y\n    print(\"x = x ** y\")\n    print(\"x =\", x)\n    x = x % y\n    print(\"x = x % y\")\n    print(\"x =\", x)\n    x = x ** y\n    print(\"x = x ** y\")\n    print(\"x =\", x)\n    x = x % y\n    print(\"x = x % y\")\n    print(\"x =\", x)\n    x = x ** y\n",
            "def main():\n    x = 42\n    print(x)\n    x += 1\n    print(x)\n    x *= 2\n    print(x)\n    x /= 2\n    print(x)\n    x -= 1\n    print(x)\n    x %= 2\n    print(x)\n    x //= 2\n    print(x)\n    x **= 2\n    print(x)\n    x &= 2\n    print(x)\n    x |= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x |= 2\n    print(x)\n    x &= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x |= 2\n    print(x)\n    x &= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x |= 2\n    print(x)\n    x &= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x |= 2\n    print(x)\n    x &= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x |= 2\n    print(x)\n    x &= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x |= 2\n    print(x)\n    x &= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n",
            "def main():\n    x = 42\n    print(x)\n    x += 1\n    print(x)\n    x *= 2\n    print(x)\n    x /= 2\n    print(x)\n    x -= 1\n    print(x)\n    x %= 2\n    print(x)\n    x //= 2\n    print(x)\n    x **= 2\n    print(x)\n    x &= 2\n    print(x)\n    x |= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x = 42\n    print(x)\n    x &= 2\n    print(x)\n    x |= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x = 42\n    print(x)\n    x %= 2\n    print(x)\n    x //= 2\n    print(x)\n    x **= 2\n    print(x)\n    x += 1\n    print(x)\n    x *= 2\n    print(x)\n    x /= 2\n    print(x)\n    x -= 1\n    print(x)\n    x %= 2\n    print(x)\n    x //= 2\n    print(x)\n    x **= 2\n    print(x)\n    x &= 2\n    print(x)\n    x |= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x = 42\n    print(x)\n    x &= 2\n    print(x)\n    x |= 2\n    print(x)\n    x ^= 2\n    print(x)\n    x <<= 2\n    print(x)\n    x >>= 2\n    print(x)\n    x %= 2\n    print(x)\n",
            "def main():\n    x = int(input(\"Enter an integer: \"))\n    y = int(input(\"Enter another integer: \"))\n    z = x + y\n    print(\"The sum of\", x, \"and\", y, \"is\", z)\n    z = x - y\n    print(\"The difference of\", x, \"and\", y, \"is\", z)\n    z = x * y\n    print(\"The product of\", x, \"and\", y, \"is\", z)\n    z = x / y\n    print(\"The quotient of\", x, \"and\", y, \"is\", z)\n    z = x % y\n    print(\"The remainder of\", x, \"and\", y, \"is\", z)\n    z = x ** y\n    print(\"The power of\", x, \"and\", y, \"is\", z)\n    z = x // y\n    print(\"The floor division of\", x, \"and\", y, \"is\", z)\n",
            "def main():\n    x = int(input(\"Enter a number: \"))\n    y = int(input(\"Enter another number: \"))\n    print(\"The value of x is\", x)\n    print(\"The value of y is\", y)\n    print(\"The value of x + y is\", x + y)\n    print(\"The value of x - y is\", x - y)\n    print(\"The value of x * y is\", x * y)\n    print(\"The value of x / y is\", x / y)\n    print(\"The value of x % y is\", x % y)\n    print(\"The value of x ** y is\", x ** y)\n    print(\"The value of x // y is\", x // y)\n    print(\"The value of x ** y is\", x ** y)\n    print(\"The value of x % y is\", x % y)\n    print(\"The value of x // y is\", x // y)\n    print(\"The value of x ** y is\", x ** y)\n    print(\"The value of x % y is\", x % y)\n    print(\"The value of x // y is\", x // y)\n    print(\"The value of x ** y is\", x ** y)\n    print(\"The value of x % y is\", x % y)\n    print(\"The value of x // y is\", x // y)\n    print(\"The value of x ** y is\", x ** y)\n    print(\"The value of x % y is\", x % y)\n    print(\"The value of x // y is\", x // y)\n    print(\"The value of x ** y is\", x ** y)\n    print(\"The value of x % y is\", x % y)\n    print(\"The value of x // y is\", x // y)\n    print(\"The value of x ** y is\", x ** y)\n    print(\"The value of x % y is\", x % y)\n    print(\"The value of x // y is\", x // y)\n    print(\"The value of x ** y is\", x ** y)\n    print(\"The value of x % y is\", x % y)\n    print(\"The value of x // y is\", x\n"
        ],
        "results": 10
    },
    {
        "id": "946",
        "source": "leetcodeTitles",
        "source_id": "2058",
        "url": "https://leetcode.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/",
        "language": "python",
        "query": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "snippets": [
            "def find_min_max(tree):\n    if tree is None:\n        return None, None\n    if tree.left is None and tree.right is None:\n        return tree.data, tree.data\n    left_min, left_max = find_min_max(tree.left)\n    right_min, right_max = find_min_max(tree.right)\n    if left_min is None:\n        left_min = tree.data\n    if right_min is None:\n        right_min = tree.data\n    if left_max is None:\n        left_max = tree.data\n    if right_max is None:\n        right_max = tree.data\n    if left_min > tree.data:\n        left_min = tree.data\n    if right_min > tree.data:\n        right_min = tree.data\n    if left_max < tree.data:\n        left_max = tree.data\n    if right_max < tree.data:\n        right_max = tree.data\n    return left_min, left_max, right_min, right_max\n",
            "def find_min_max(tree):\n    if tree is None:\n        return None, None\n    if tree.left is None and tree.right is None:\n        return tree.data, tree.data\n    left_min, left_max = find_min_max(tree.left)\n    right_min, right_max = find_min_max(tree.right)\n    if left_min is None:\n        left_min = tree.data\n    if left_max is None:\n        left_max = tree.data\n    if right_min is None:\n        right_min = tree.data\n    if right_max is None:\n        right_max = tree.data\n    if left_min < tree.data < right_min:\n        left_min = tree.data\n    if left_max > tree.data > right_max:\n        left_max = tree.data\n    return left_min, left_max\n",
            "def find_min_max(tree):\n    if tree is None:\n        return None, None\n    if tree.left is None and tree.right is None:\n        return tree.data, tree.data\n    left_min, left_max = find_min_max(tree.left)\n    right_min, right_max = find_min_max(tree.right)\n    if left_min is None:\n        left_min = tree.data\n    if right_min is None:\n        right_min = tree.data\n    if left_max is None:\n        left_max = tree.data\n    if right_max is None:\n        right_max = tree.data\n    if left_min < tree.data < right_min:\n        left_min = tree.data\n    if left_max > tree.data > right_max:\n        left_max = tree.data\n    return left_min, left_max\n",
            "def find_min_max(tree):\n    if tree is None:\n        return None, None\n    if tree.left is None and tree.right is None:\n        return tree.data, tree.data\n    if tree.left is None:\n        return find_min_max(tree.right)\n    if tree.right is None:\n        return find_min_max(tree.left)\n    min_left, max_left = find_min_max(tree.left)\n    min_right, max_right = find_min_max(tree.right)\n    return min(min_left, min_right), max(max_left, max_right)\n",
            "def find_min_max_nodes(tree):\n    if not tree:\n        return 0, 0\n    left_min, left_max = find_min_max_nodes(tree.left)\n    right_min, right_max = find_min_max_nodes(tree.right)\n    min_nodes = left_min + right_min + 1\n    max_nodes = left_max + right_max + 1\n    if tree.left and tree.right:\n        min_nodes = min(min_nodes, left_max + right_min + 2)\n        max_nodes = max(max_nodes, left_max + right_min + 2)\n    return min_nodes, max_nodes\n",
            "def find_min_max(tree):\n    if not tree:\n        return None, None\n    if not tree.left and not tree.right:\n        return tree.val, tree.val\n    left_min, left_max = find_min_max(tree.left)\n    right_min, right_max = find_min_max(tree.right)\n    if left_min and right_max:\n        return min(tree.val, left_min, right_min), max(tree.val, left_max, right_max)\n    if left_min:\n        return min(tree.val, left_min), max(tree.val, left_max)\n    if right_max:\n        return min(tree.val, right_min), max(tree.val, right_max)\n    return tree.val, tree.val\n",
            "def find_min_max(tree):\n    if not tree:\n        return None, None\n    if not tree.left and not tree.right:\n        return tree.val, tree.val\n    left_min, left_max = find_min_max(tree.left)\n    right_min, right_max = find_min_max(tree.right)\n    if left_min and right_max:\n        return min(left_min, tree.val, right_min), max(left_max, tree.val, right_max)\n    if left_min:\n        return min(left_min, tree.val), max(left_max, tree.val)\n    if right_max:\n        return min(tree.val, right_min), max(tree.val, right_max)\n    return tree.val, tree.val\n",
            "def find_min_max(tree):\n    if not tree:\n        return None, None\n    if not tree.left and not tree.right:\n        return tree.val, tree.val\n    left_min, left_max = find_min_max(tree.left)\n    right_min, right_max = find_min_max(tree.right)\n    if left_min and right_max:\n        return min(left_min, tree.val, right_max), max(left_max, tree.val, right_min)\n    if left_min:\n        return min(left_min, tree.val), max(left_max, tree.val)\n    if right_max:\n        return min(tree.val, right_max), max(tree.val, right_min)\n    return tree.val, tree.val\n"
        ],
        "results": 10
    },
    {
        "id": "947",
        "source": "leetcodeTitles",
        "source_id": "2170",
        "url": "https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/",
        "language": "python",
        "query": "Minimum Operations to Make the Array Alternating",
        "snippets": [
            "def minOperations(n):\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return minOperations(n // 2) + 1\n    else:\n        return minOperations(n // 2) + 2\n",
            "def minOperations(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return minOperations(n-1) + minOperations(n-2) + minOperations(n-3)\n",
            "def minOperations(n):\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return n // 2 + 1\n",
            "def minOperations(n):\n    # Write your code here\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return minOperations(n // 2) + 1\n    else:\n        return minOperations(n // 2) + 2\n",
            "def makeAlternating(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if arr[0] < arr[1]:\n        return makeAlternating(arr[1:])\n    else:\n        return makeAlternating(arr[2:]) + 1\n",
            "def minOperations(n):\n    return (n-1)//2\n",
            "def minOperations(n):\n    return n // 2 + n % 2\n"
        ],
        "results": 10
    },
    {
        "id": "948",
        "source": "leetcodeTitles",
        "source_id": "2120",
        "url": "https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/",
        "language": "python",
        "query": "Execution of All Suffix Instructions Staying in a Grid",
        "snippets": [
            "def main():\n    # Initialize the grid\n    grid = [['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.'],\n            ['.', '.', '.', '.', '.', '.', '.', '.', '.', '.']]\n    # Initialize the row and column\n    row = 0\n    col = 0\n    # Initialize the direction\n    direction = 'right'\n    # Initialize the number of steps\n    steps = 0\n    # Initialize the number of instructions\n    instructions = 0\n    # Initialize the number of instructions to be executed\n    instructions_to_be_executed = 0\n    # Initialize the number of instructions executed\n    instructions_executed = 0\n    # Initialize the number of instructions to be executed\n    instructions_to_be_executed = 0\n    # Initialize the number of instructions executed\n    instructions_executed = 0\n    # Initialize the number of instructions to be executed\n    instructions_to_be_executed\n",
            "def main():\n    # Initialize the grid\n    grid = [[0 for x in range(5)] for y in range(5)]\n    # Initialize the row and column\n    row = 0\n    col = 0\n    # Initialize the direction\n    direction = 'right'\n    # Initialize the value of the current cell\n    current_cell = 1\n    # Initialize the value of the next cell\n    next_cell = 1\n    # Initialize the value of the total\n    total = 0\n    # Loop until the current cell is greater than the total\n    while current_cell <= 25:\n        # Add the current cell to the total\n        total += current_cell\n        # Set the current cell to the next cell\n        current_cell = next_cell\n        # Set the next cell to the current cell plus one\n        next_cell = current_cell + 1\n        # If the direction is right\n        if direction == 'right':\n            # If the column is less than the last column\n            if col < 4:\n                # Increment the column\n                col += 1\n            # Else\n            else:\n                # Set the direction to down\n                direction = 'down'\n                # Set the column to the first column\n                col = 0\n        # Else if the direction is down\n        elif direction == 'down':\n            # If the row is less than the last row\n            if row < 4:\n                # Increment the row\n                row += 1\n            # Else\n            else:\n                # Set the direction to left\n                direction = 'left'\n                # Set the row to the first row\n                row = 0\n        # Else if the direction is left\n        elif direction == 'left':\n            # If the column is greater than the first column\n            if col > 0:\n                # Decrement the column\n                col -= 1\n            # Else\n            else:\n                # Set the direction to up\n                direction = 'up'\n                # Set the column to the last column\n                col = 4\n        # Else if the direction is up\n        elif direction == 'up':\n            # If the row is greater than the first row\n            if row > 0:\n                # Decrement the row\n",
            "def main():\n    # Initialize the grid\n    grid = [[0 for x in range(5)] for y in range(5)]\n    # Initialize the grid with values\n    grid[0][0] = 1\n    grid[0][1] = 2\n    grid[0][2] = 3\n    grid[0][3] = 4\n    grid[0][4] = 5\n    grid[1][0] = 6\n    grid[1][1] = 7\n    grid[1][2] = 8\n    grid[1][3] = 9\n    grid[1][4] = 10\n    grid[2][0] = 11\n    grid[2][1] = 12\n    grid[2][2] = 13\n    grid[2][3] = 14\n    grid[2][4] = 15\n    grid[3][0] = 16\n    grid[3][1] = 17\n    grid[3][2] = 18\n    grid[3][3] = 19\n    grid[3][4] = 20\n    grid[4][0] = 21\n    grid[4][1] = 22\n    grid[4][2] = 23\n    grid[4][3] = 24\n    grid[4][4] = 25\n    # Print the grid\n    print(\"The grid is:\")\n    for i in range(5):\n        for j in range(5):\n            print(grid[i][j], end=\" \")\n        print()\n    # Execute the instructions\n    print(\"Executing the instructions:\")\n    for i in range(5):\n        for j in range(5):\n            if grid[i][j] % 2 == 0:\n                grid[i][j] += 1\n            else:\n                grid[i][j] -= 1\n    # Print the grid\n    print(\"The grid is:\")\n    for i in range(5):\n        for j in range(5):\n            print(grid[i][j], end=\" \")\n        print()\n",
            "def main():\n    # Get the number of rows and columns\n    rows = int(input(\"Enter the number of rows: \"))\n    columns = int(input(\"Enter the number of columns: \"))\n    # Get the number of suffix instructions\n    instructions = int(input(\"Enter the number of suffix instructions: \"))\n    # Create a 2D array of suffix instructions\n    instructions_array = []\n    for i in range(instructions):\n        instructions_array.append(input(\"Enter the suffix instruction: \"))\n    # Create a 2D array of suffix instructions\n    grid = []\n    for i in range(rows):\n        grid.append([])\n        for j in range(columns):\n            grid[i].append(0)\n    # Execute the suffix instructions\n    for instruction in instructions_array:\n        # Get the row and column\n        row = int(instruction[0])\n        column = int(instruction[1])\n        # Get the value\n        value = int(instruction[2])\n        # Set the value\n        grid[row][column] = value\n    # Print the grid\n    for i in range(rows):\n        for j in range(columns):\n            print(grid[i][j], end=\" \")\n        print()\n",
            "def main():\n    # Initialize the grid\n    grid = [[0 for x in range(5)] for y in range(5)]\n    # Initialize the grid with values\n    grid[0][0] = 1\n    grid[0][1] = 2\n    grid[0][2] = 3\n    grid[0][3] = 4\n    grid[0][4] = 5\n    grid[1][0] = 6\n    grid[1][1] = 7\n    grid[1][2] = 8\n    grid[1][3] = 9\n    grid[1][4] = 10\n    grid[2][0] = 11\n    grid[2][1] = 12\n    grid[2][2] = 13\n    grid[2][3] = 14\n    grid[2][4] = 15\n    grid[3][0] = 16\n    grid[3][1] = 17\n    grid[3][2] = 18\n    grid[3][3] = 19\n    grid[3][4] = 20\n    grid[4][0] = 21\n    grid[4][1] = 22\n    grid[4][2] = 23\n    grid[4][3] = 24\n    grid[4][4] = 25\n    # Print the grid\n    print(\"The grid is:\")\n    for i in range(5):\n        for j in range(5):\n            print(grid[i][j], end=\" \")\n        print()\n    # Execute the instructions\n    print(\"Executing the instructions:\")\n    for i in range(5):\n        for j in range(5):\n            if grid[i][j] % 2 == 0:\n                grid[i][j] += 1\n            else:\n                grid[i][j] -= 1\n    # Print the grid\n    print(\"The grid is:\")\n    for i in range(5):\n        for j in range(5):\n            print(grid[i][j], end=\" \")\n        print()\n    # Execute the instructions\n    print(\"Executing the instructions:\")\n    for i in range(5):\n        for j in range(5):\n",
            "def main():\n    # Initialize the grid\n    grid = [[0 for x in range(5)] for y in range(5)]\n    # Initialize the grid with the values\n    grid[0][0] = 1\n    grid[0][1] = 2\n    grid[0][2] = 3\n    grid[0][3] = 4\n    grid[0][4] = 5\n    grid[1][0] = 6\n    grid[1][1] = 7\n    grid[1][2] = 8\n    grid[1][3] = 9\n    grid[1][4] = 10\n    grid[2][0] = 11\n    grid[2][1] = 12\n    grid[2][2] = 13\n    grid[2][3] = 14\n    grid[2][4] = 15\n    grid[3][0] = 16\n    grid[3][1] = 17\n    grid[3][2] = 18\n    grid[3][3] = 19\n    grid[3][4] = 20\n    grid[4][0] = 21\n    grid[4][1] = 22\n    grid[4][2] = 23\n    grid[4][3] = 24\n    grid[4][4] = 25\n    # Print the grid\n    printGrid(grid)\n    # Execute the instructions\n    executeInstructions(grid)\n    # Print the grid\n    printGrid(grid)\n",
            "def main():\n    # Initialize the grid\n    grid = [[0 for x in range(5)] for y in range(5)]\n    # Initialize the instruction list\n    instructions = []\n    # Read the instructions from the file\n    with open(\"instructions.txt\", \"r\") as f:\n        for line in f:\n            instructions.append(line.strip())\n    # Execute the instructions\n    for instruction in instructions:\n        execute(instruction, grid)\n    # Print the grid\n    for row in grid:\n        print(row)\n",
            "def main():\n    # Initialize the grid\n    grid = [[0 for x in range(5)] for y in range(5)]\n    # Initialize the instruction list\n    instructions = []\n    # Read the instructions from the file\n    with open('instructions.txt', 'r') as f:\n        for line in f:\n            instructions.append(line.strip())\n    # Execute the instructions\n    for instruction in instructions:\n        # Split the instruction into its parts\n        parts = instruction.split(' ')\n        # Execute the instruction\n        if parts[0] == 'S':\n            execute_S(grid, parts[1], parts[2])\n        elif parts[0] == 'E':\n            execute_E(grid, parts[1], parts[2])\n        elif parts[0] == 'N':\n            execute_N(grid, parts[1], parts[2])\n        elif parts[0] == 'W':\n            execute_W(grid, parts[1], parts[2])\n        else:\n            print('Invalid instruction: ' + instruction)\n    # Print the grid\n    print_grid(grid)\n",
            "def main():\n    # Initialize the grid\n    grid = [['.' for x in range(5)] for y in range(5)]\n    # Initialize the grid with the instructions\n    grid[2][2] = 'X'\n    grid[1][1] = 'X'\n    grid[1][3] = 'X'\n    grid[3][1] = 'X'\n    grid[3][3] = 'X'\n    # Print the grid\n    print_grid(grid)\n    # Execute the instructions\n    execute_instructions(grid)\n    # Print the grid\n    print_grid(grid)\n",
            "def main():\n    # Initialize the grid\n    grid = [['.' for i in range(5)] for j in range(5)]\n    # Initialize the grid with the instructions\n    grid[0][0] = '1'\n    grid[0][1] = '2'\n    grid[0][2] = '3'\n    grid[0][3] = '4'\n    grid[0][4] = '5'\n    grid[1][0] = '6'\n    grid[1][1] = '7'\n    grid[1][2] = '8'\n    grid[1][3] = '9'\n    grid[1][4] = '10'\n    grid[2][0] = '11'\n    grid[2][1] = '12'\n    grid[2][2] = '13'\n    grid[2][3] = '14'\n    grid[2][4] = '15'\n    grid[3][0] = '16'\n    grid[3][1] = '17'\n    grid[3][2] = '18'\n    grid[3][3] = '19'\n    grid[3][4] = '20'\n    grid[4][0] = '21'\n    grid[4][1] = '22'\n    grid[4][2] = '23'\n    grid[4][3] = '24'\n    grid[4][4] = '25'\n    # Print the grid\n    print_grid(grid)\n    # Execute the instructions\n    execute_instructions(grid)\n    # Print the grid\n    print_grid(grid)\n    # Print the grid in a readable format\n    print_readable_grid(grid)\n"
        ],
        "results": 10
    },
    {
        "id": "949",
        "source": "leetcodeTitles",
        "source_id": "2259",
        "url": "https://leetcode.com/problems/remove-digit-from-number-to-maximize-result/",
        "language": "python",
        "query": "Remove Digit From Number to Maximize Result",
        "snippets": [
            "def remove_digit(n):\n    n = str(n)\n    n = list(n)\n    n.sort(reverse=True)\n    n = ''.join(n)\n    n = int(n)\n    return n\n",
            "def remove_digit(n):\n    n = str(n)\n    n = list(n)\n    n.sort(reverse=True)\n    n = int(''.join(n))\n    return n\n",
            "def remove_digit(n):\n    n = str(n)\n    n = list(n)\n    n.sort()\n    n.reverse()\n    n = int(''.join(n))\n    return n\n",
            "def max_digit(n):\n    if n < 10:\n        return n\n    else:\n        return max(max_digit(n//10), max_digit(n%10))\n",
            "def remove_digit(n):\n    if n == 0:\n        return 0\n    else:\n        return remove_digit(n // 10) + n % 10\n",
            "def remove_digit(n):\n    \"\"\"\n    Remove the last digit from a number to maximize the result.\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + remove_digit(n // 10)\n",
            "def remove_digit(n):\n    if n == 0:\n        return 0\n    digits = [int(d) for d in str(n)]\n    digits.sort(reverse=True)\n    for i in range(len(digits)):\n        if digits[i] != 0:\n            digits[i] = 0\n            break\n    return int(''.join(str(d) for d in digits))\n"
        ],
        "results": 9
    },
    {
        "id": "950",
        "source": "leetcodeTitles",
        "source_id": "160",
        "url": "https://leetcode.com/problems/intersection-of-two-linked-lists/",
        "language": "python",
        "query": "Intersection of Two Linked Lists",
        "snippets": [
            "def intersection(head1, head2):\n    if not head1 or not head2:\n        return None\n    curr1 = head1\n    curr2 = head2\n    while curr1 != curr2:\n        curr1 = curr1.next\n        curr2 = curr2.next\n        if not curr1:\n            curr1 = head2\n        if not curr2:\n            curr2 = head1\n    return curr1\n",
            "def intersection(head1, head2):\n    if head1 is None or head2 is None:\n        return None\n    p1 = head1\n    p2 = head2\n    while p1 != p2:\n        if p1.next is None:\n            p1 = head2\n        else:\n            p1 = p1.next\n        if p2.next is None:\n            p2 = head1\n        else:\n            p2 = p2.next\n    return p1\n",
            "def intersection(head1, head2):\n    if head1 is None or head2 is None:\n        return None\n    curr1 = head1\n    curr2 = head2\n    while curr1 is not curr2:\n        if curr1 is None:\n            curr1 = head2\n        else:\n            curr1 = curr1.next\n        if curr2 is None:\n            curr2 = head1\n        else:\n            curr2 = curr2.next\n    return curr1\n",
            "def intersection(head1, head2):\n    if head1 is None or head2 is None:\n        return None\n    curr1 = head1\n    curr2 = head2\n    while curr1 != curr2:\n        if curr1 is None:\n            curr1 = head2\n        else:\n            curr1 = curr1.next\n        if curr2 is None:\n            curr2 = head1\n        else:\n            curr2 = curr2.next\n    return curr1\n",
            "def intersection(head1, head2):\n    if head1 is None or head2 is None:\n        return None\n    curr1 = head1\n    curr2 = head2\n    while curr1 != curr2:\n        curr1 = curr1.next\n        curr2 = curr2.next\n        if curr1 is None and curr2 is None:\n            return None\n        if curr1 is None:\n            curr1 = head2\n        if curr2 is None:\n            curr2 = head1\n    return curr1\n",
            "def intersection(head1, head2):\n    if not head1 or not head2:\n        return None\n    if head1 == head2:\n        return head1\n    p1 = head1\n    p2 = head2\n    while p1 != p2:\n        p1 = p1.next\n        p2 = p2.next\n        if p1 == p2:\n            return p1\n        if not p1:\n            p1 = head2\n        if not p2:\n            p2 = head1\n    return p1\n",
            "def intersection(head1, head2):\n    if head1 is None or head2 is None:\n        return None\n    if head1 == head2:\n        return head1\n    p1 = head1\n    p2 = head2\n    while p1 != p2:\n        if p1.next is None:\n            p1 = head2\n        else:\n            p1 = p1.next\n        if p2.next is None:\n            p2 = head1\n        else:\n            p2 = p2.next\n    return p1\n",
            "def intersection(head1, head2):\n    if not head1 or not head2:\n        return None\n    if head1 == head2:\n        return head1\n    curr1 = head1\n    curr2 = head2\n    while curr1 != curr2:\n        if curr1.next:\n            curr1 = curr1.next\n        else:\n            curr1 = head2\n        if curr2.next:\n            curr2 = curr2.next\n        else:\n            curr2 = head1\n    return curr1\n"
        ],
        "results": 10
    },
    {
        "id": "951",
        "source": "leetcodeTitles",
        "source_id": "1539",
        "url": "https://leetcode.com/problems/kth-missing-positive-number/",
        "language": "python",
        "query": "Kth Missing Positive Number",
        "snippets": [
            "def kthMissingPositive(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            if i == k - 1:\n                return nums[i] + 1\n            else:\n                continue\n        else:\n            if i == k - 1:\n                return 1\n            else:\n                continue\n    return k + 1\n",
            "def kthMissing(nums, k):\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] != i + 1:\n            return i + 1\n    return len(nums) + 1\n",
            "def kthMissingPositive(nums, k):\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            if i == k - 1:\n                return nums[i] + 1\n            else:\n                continue\n        else:\n            if i == k - 1:\n                return 1\n            else:\n                continue\n    return k + 1\n",
            "def kthMissingPositive(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if k == 1:\n        return 2\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] != i+1:\n            return i+1\n    return len(nums)+1\n",
            "def kthMissingPositive(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return k\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] != i + 1:\n            return i + 1\n    return nums[-1] + 1\n",
            "def findKthPositive(arr, k):\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] > 0:\n            k -= 1\n            if k == 0:\n                return i + 1\n    return len(arr) + 1\n",
            "def find_kth_missing_positive(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return k\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] != i + 1:\n            return i + 1\n    return nums[-1] + 1\n",
            "def find_kth_missing_positive(arr, k):\n    if not arr:\n        return k\n    arr.sort()\n    for i in range(len(arr)):\n        if arr[i] != i + 1:\n            return i + 1\n    return len(arr) + 1\n"
        ],
        "results": 10
    },
    {
        "id": "952",
        "source": "leetcodeTitles",
        "source_id": "976",
        "url": "https://leetcode.com/problems/largest-perimeter-triangle/",
        "language": "python",
        "query": "Largest Perimeter Triangle",
        "snippets": [
            "def largest_perimeter(l):\n    l.sort()\n    l.reverse()\n    for i in range(len(l)-2):\n        if l[i] + l[i+1] > l[i+2]:\n            return l[i] + l[i+1] + l[i+2]\n    return 0\n",
            "def largest_perimeter(l):\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i] + l[i+1] > l[i+2]:\n            return l[i] + l[i+1] + l[i+2]\n    return 0\n",
            "def largest_perimeter(lst):\n    lst.sort()\n    lst.reverse()\n    for i in range(len(lst)-2):\n        if lst[i] + lst[i+1] > lst[i+2]:\n            return lst[i] + lst[i+1] + lst[i+2]\n    return 0\n",
            "def largest_perimeter(l):\n    l.sort()\n    l.reverse()\n    for i in range(len(l)):\n        if l[i] + l[i+1] > l[i+2]:\n            return l[i] + l[i+1] + l[i+2]\n    return 0\n",
            "def largest_perimeter_triangle(l):\n    l.sort()\n    for i in range(len(l)-2):\n        if l[i] + l[i+1] > l[i+2]:\n            return l[i] + l[i+1] + l[i+2]\n    return 0\n",
            "def largest_perimeter(lst):\n    lst.sort()\n    for i in range(len(lst)-1, 0, -1):\n        if lst[i] + lst[i-1] > lst[i-2]:\n            return lst[i] + lst[i-1] + lst[i-2]\n    return 0\n",
            "def main():\n    with open('triangle.txt', 'r') as f:\n        triangle = f.readlines()\n    triangle = [list(map(int, line.split())) for line in triangle]\n    print(largest_perimeter_triangle(triangle))\n"
        ],
        "results": 10
    },
    {
        "id": "953",
        "source": "leetcodeTitles",
        "source_id": "1357",
        "url": "https://leetcode.com/problems/apply-discount-every-n-orders/",
        "language": "python",
        "query": "Apply Discount Every n Orders",
        "snippets": [
            "def discounted(price, discount):\n    discount_price = price * (1 - discount)\n    return discount_price\n",
            "def discounted(price, discount):\n    return price - (price * discount)\n",
            "def discounted(price, discount):\n    return price * (1 - discount)\n",
            "def apply_discount(order):\n    discount = 0.9\n    total = order.get_total()\n    if order.customer.is_member:\n        return total * discount\n    else:\n        return total\n",
            "def apply_discount(order):\n    \"\"\"\n    Apply discount to the order\n    \"\"\"\n    discount = 0.9\n    total = sum(order.values())\n    if len(order) >= 10:\n        discount = 0.8\n    elif len(order) >= 20:\n        discount = 0.75\n    return total * discount\n",
            "def apply_discount(order):\n    discount = 0.9\n    total = order.get_total()\n    if order.customer.is_member():\n        return total * discount\n    else:\n        return total\n"
        ],
        "results": 10
    },
    {
        "id": "954",
        "source": "leetcodeTitles",
        "source_id": "698",
        "url": "https://leetcode.com/problems/partition-to-k-equal-sum-subsets/",
        "language": "python",
        "query": "Partition to K Equal Sum Subsets",
        "snippets": [
            "def canPartitionKSubsets(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if k == 1:\n        return True\n    if len(nums) < k:\n        return False\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    nums.sort(reverse=True)\n    return dfs(nums, k, target, 0, 0, [])\n",
            "def canPartitionKSubsets(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if k == 1:\n        return True\n    if len(nums) < k:\n        return False\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    nums.sort()\n    if nums[-1] > target:\n        return False\n    if nums[-1] == target:\n        if k == 2:\n            return True\n        else:\n            return False\n    if nums[-1] < target:\n        return canPartitionKSubsets(nums[:-1], k) or canPartitionKSubsets(nums[:-1], k - 1)\n    return False\n",
            "def canPartitionKSubsets(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if k == 1:\n        return True\n    if len(nums) < k:\n        return False\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    nums.sort(reverse=True)\n    return dfs(nums, k, target, 0, 0, 0)\n",
            "def canPartitionKSubsets(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if k == 1:\n        return True\n    if k == 0 or len(nums) == 0:\n        return False\n    if len(nums) < k:\n        return False\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    nums.sort(reverse=True)\n    if nums[0] > target:\n        return False\n    return dfs(nums, k, target, 0, 0, [])\n",
            "def canPartitionKSubsets(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if k == 1:\n        return True\n    if k == 0 or len(nums) < k:\n        return False\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    nums.sort(reverse=True)\n    return dfs(nums, k, target, 0, 0, 0)\n",
            "def canPartitionKSubsets(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if k == 1:\n        return True\n    if k == 0 or len(nums) < k:\n        return False\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    nums.sort()\n    if nums[-1] > target:\n        return False\n    if nums[-1] == target:\n        return True\n    return dfs(nums, k, target, 0, 0, [])\n",
            "def partition(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if k == 1:\n        return True\n    if len(nums) == 0:\n        return False\n    if k == len(nums):\n        return True\n    if k > len(nums):\n        return False\n    if sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    nums.sort()\n    return dfs(nums, target, 0, 0, k)\n",
            "def canPartitionKSubsets(nums, k):\n    if k == 1:\n        return True\n    if k == 0 or sum(nums) % k != 0:\n        return False\n    target = sum(nums) // k\n    nums.sort(reverse=True)\n    return dfs(nums, k, target, 0, 0, {})\n"
        ],
        "results": 10
    },
    {
        "id": "955",
        "source": "leetcodeTitles",
        "source_id": "2087",
        "url": "https://leetcode.com/problems/minimum-cost-homecoming-of-a-robot-in-a-grid/",
        "language": "python",
        "query": "Minimum Cost Homecoming of a Robot in a Grid",
        "snippets": [
            "def minCost(grid):\n    # Write your code here\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][m-1]\n",
            "def minimumCost(grid):\n    # Write your code here\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][m-1]\n",
            "def minCost(grid):\n    # Write your code here\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][m-1]\n",
            "def minCost(grid):\n    # Write your code here\n    m = len(grid)\n    n = len(grid[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[m-1][n-1]\n",
            "def minCost(grid):\n    # Write your code here\n    m = len(grid)\n    n = len(grid[0])\n    dp = [[0 for i in range(n)] for j in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[m-1][n-1]\n",
            "def minCostHomecoming(grid):\n    # Write your code here\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][m-1]\n",
            "def min_cost(grid):\n    # Write your code here.\n    if not grid:\n        return 0\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                dp[i][j] = grid[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + grid[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + grid[i][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    return dp[n - 1][m - 1]\n",
            "def minCost(grid):\n    # Write your code here.\n    if not grid:\n        return 0\n    n = len(grid)\n    m = len(grid[0])\n    dp = [[0] * m for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + grid[i][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j - 1] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n    return dp[n - 1][m - 1]\n"
        ],
        "results": 10
    },
    {
        "id": "956",
        "source": "leetcodeTitles",
        "source_id": "2270",
        "url": "https://leetcode.com/problems/number-of-ways-to-split-array/",
        "language": "python",
        "query": "Number of Ways to Split Array",
        "snippets": [
            "def numWays(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if n == 2:\n        return m * m\n    if n == 3:\n        return m * m * m\n    if n == 4:\n        return m * m * m * m\n    if n == 5:\n        return m * m * m * m * m\n    if n == 6:\n        return m * m * m * m * m * m\n    if n == 7:\n        return m * m * m * m * m * m * m\n    if n == 8:\n        return m * m * m * m * m * m * m * m\n    if n == 9:\n        return m * m * m * m * m * m * m * m * m\n    if n == 10:\n        return m * m * m * m * m * m * m * m * m * m\n    if n == 11:\n        return m * m * m * m * m * m * m * m * m * m * m\n    if n == 12:\n        return m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 13:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 14:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 15:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 16:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 17:\n        return m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m * m\n    if n == 18:\n        return m * m * m * m * m * m\n",
            "def numWays(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if n == 2:\n        return m*(m-1)\n    if n == 3:\n        return m*(m-1)*(m-2)\n    if n == 4:\n        return m*(m-1)*(m-2)*(m-3)\n    if n == 5:\n        return m*(m-1)*(m-2)*(m-3)*(m-4)\n    if n == 6:\n        return m*(m-1)*(m-2)*(m-3)*(m-4)*(m-5)\n    if n == 7:\n        return m*(m-1)*(m-2)*(m-3)*(m-4)*(m-5)*(m-6)\n    if n == 8:\n        return m*(m-1)*(m-2)*(m-3)*(m-4)*(m-5)*(m-6)*(m-7)\n    if n == 9:\n        return m*(m-1)*(m-2)*(m-3)*(m-4)*(m-5)*(m-6)*(m-7)*(m-8)\n    if n == 10:\n        return m*(m-1)*(m-2)*(m-3)*(m-4)*(m-5)*(m-6)*(m-7)*(m-8)*(m-9)\n    if n == 11:\n        return m*(m-1)*(m-2)*(m-3)*(m-4)*(m-5)*(m-6)*(m-7)*(m-8)*(m-9)*(m-10)\n    if n == 12:\n        return m*(m-1)*(m-2)*(m-3)*(m-4)*(m-5)*(m-6)*(m-7)*(m-8)*(m-9)*(m-10)*(m-11)\n    if n == 13:\n",
            "def numWays(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if n == 2:\n        return m * (m - 1)\n    if n == 3:\n        return m * (m - 1) * (m - 2)\n    if n == 4:\n        return m * (m - 1) * (m - 2) * (m - 3)\n    if n == 5:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4)\n    if n == 6:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5)\n    if n == 7:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6)\n    if n == 8:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7)\n    if n == 9:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8)\n    if n == 10:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9)\n    if n == 11:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10)\n    if n == 12:\n        return m * (m - 1) * (m - 2) * (m - 3)\n",
            "def numWays(n, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if n == 2:\n        return m * (m - 1)\n    if n == 3:\n        return m * (m - 1) * (m - 2)\n    if n == 4:\n        return m * (m - 1) * (m - 2) * (m - 3)\n    if n == 5:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4)\n    if n == 6:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5)\n    if n == 7:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6)\n    if n == 8:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7)\n    if n == 9:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8)\n    if n == 10:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9)\n    if n == 11:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10)\n    if n == 12:\n        return m * (m - 1) * (m - 2) * (m - 3)\n"
        ],
        "results": 10
    },
    {
        "id": "957",
        "source": "leetcodeTitles",
        "source_id": "2154",
        "url": "https://leetcode.com/problems/keep-multiplying-found-values-by-two/",
        "language": "python",
        "query": "Keep Multiplying Found Values by Two",
        "snippets": [
            "def multiply_by_two(numbers):\n    for i in range(len(numbers)):\n        numbers[i] *= 2\n    return numbers\n",
            "def keep_multiplying(numbers):\n    result = 1\n    for number in numbers:\n        result *= number\n    return result\n",
            "def multiply_by_two(n):\n    \"\"\"\n    >>> multiply_by_two(3)\n    6\n    >>> multiply_by_two(0)\n    0\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return 2 * multiply_by_two(n - 1)\n",
            "def multiply_by_two(n):\n    return n * 2\n"
        ],
        "results": 9
    },
    {
        "id": "958",
        "source": "leetcodeTitles",
        "source_id": "1488",
        "url": "https://leetcode.com/problems/avoid-flood-in-the-city/",
        "language": "python",
        "query": "Avoid Flood in The City",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (n - i)\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    g.sort()\n    h.sort()\n    i.sort()\n    j.sort()\n    k.sort()\n    l.sort()\n    m.sort()\n    n.sort()\n    o.sort()\n    p.sort()\n    q\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    aa = list(map(int, input().split()))\n    bb = list(map(int, input().split()))\n    cc = list(map(int, input().split()))\n    dd = list(map(int, input().split()))\n    ee = list(map(int, input().split()))\n    ff = list(map(int, input().split()))\n    gg = list\n"
        ],
        "results": 10
    },
    {
        "id": "959",
        "source": "leetcodeTitles",
        "source_id": "640",
        "url": "https://leetcode.com/problems/solve-the-equation/",
        "language": "python",
        "query": "Solve the Equation",
        "snippets": [
            "def solve(a, b, c):\n    if a == 0:\n        if b == 0:\n            return \"Infinite solutions\"\n        else:\n            return \"No solution\"\n    else:\n        x = -b / a\n        return \"x = %.2f\" % x\n",
            "def solve(a, b, c):\n    if a == 0:\n        if b == 0:\n            return \"Infinite solutions\"\n        else:\n            return \"No solution\"\n    else:\n        x = -b / a\n        return \"x = \" + str(x)\n",
            "def solve(a, b, c):\n    \"\"\"\n    Solve the equation a * x + b = c\n    \"\"\"\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return \"Infinite number of solutions\"\n            else:\n                return \"No solution\"\n        else:\n            x = -c / b\n            return \"x = %.2f\" % x\n    else:\n        x = -b / a\n        return \"x = %.2f\" % x\n",
            "def solve(a, b, c):\n    \"\"\"\n    Solve the equation a * x + b = c\n    \"\"\"\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return 'Infinite solutions'\n            else:\n                return 'No solution'\n        else:\n            x = -c / b\n            return 'x = %.2f' % x\n    else:\n        if b ** 2 - 4 * a * c < 0:\n            return 'No solution'\n        else:\n            x1 = (-b + (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n            x2 = (-b - (b ** 2 - 4 * a * c) ** 0.5) / (2 * a)\n            return 'x1 = %.2f, x2 = %.2f' % (x1, x2)\n",
            "def solve(a, b, c):\n    \"\"\"\n    Solve the equation a * x + b = c\n    \"\"\"\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return \"Infinite solutions\"\n            else:\n                return \"No solution\"\n        else:\n            x = -c / b\n            return \"x = %.2f\" % x\n    else:\n        delta = b ** 2 - 4 * a * c\n        if delta < 0:\n            return \"No solution\"\n        elif delta == 0:\n            x = -b / (2 * a)\n            return \"x = %.2f\" % x\n        else:\n            x1 = (-b + delta ** 0.5) / (2 * a)\n            x2 = (-b - delta ** 0.5) / (2 * a)\n            return \"x1 = %.2f, x2 = %.2f\" % (x1, x2)\n",
            "def solve(a, b, c):\n    if a == 0:\n        if b == 0:\n            return \"Impossible\"\n        else:\n            return -c / b\n    else:\n        d = b ** 2 - 4 * a * c\n        if d < 0:\n            return \"Impossible\"\n        else:\n            return (-b + d ** 0.5) / (2 * a)\n    return \"Impossible\"\n",
            "def solve(a, b, c):\n    d = (b ** 2) - (4 * a * c)\n    if d < 0:\n        return None\n    elif d == 0:\n        return (-b / (2 * a))\n    else:\n        return ((-b + (d ** 0.5)) / (2 * a), (-b - (d ** 0.5)) / (2 * a))\n",
            "def solve_eq(a, b, c):\n    if a == 0:\n        if b == 0:\n            return \"Infinite solutions\"\n        else:\n            return \"No solution\"\n    else:\n        x = -b / a\n        return x\n",
            "def solve(a, b, c):\n    \"\"\"\n    Solve the equation ax^2 + bx + c = 0\n    \"\"\"\n    delta = b**2 - 4 * a * c\n    if delta < 0:\n        return None\n    elif delta == 0:\n        return -b / (2 * a)\n    else:\n        return (-b + delta**0.5) / (2 * a), (-b - delta**0.5) / (2 * a)\n",
            "def solve(a, b, c):\n    \"\"\"\n    Solve the equation ax**2 + bx + c = 0\n    \"\"\"\n    if a == 0:\n        if b == 0:\n            if c == 0:\n                return 'x = 0'\n            else:\n                return 'No solution'\n        else:\n            x = -c / b\n            return 'x = %.2f' % x\n    else:\n        delta = b**2 - 4 * a * c\n        if delta < 0:\n            return 'No solution'\n        elif delta == 0:\n            x = -b / (2 * a)\n            return 'x = %.2f' % x\n        else:\n            x1 = (-b + delta**0.5) / (2 * a)\n            x2 = (-b - delta**0.5) / (2 * a)\n            return 'x1 = %.2f, x2 = %.2f' % (x1, x2)\n"
        ],
        "results": 10
    },
    {
        "id": "960",
        "source": "leetcodeTitles",
        "source_id": "1785",
        "url": "https://leetcode.com/problems/minimum-elements-to-add-to-form-a-given-sum/",
        "language": "python",
        "query": "Minimum Elements to Add to Form a Given Sum",
        "snippets": [
            "def minElements(arr, n, sum):\n    # code here\n    arr.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] + arr[j] < sum:\n            i += 1\n        elif arr[i] + arr[j] > sum:\n            j -= 1\n        else:\n            return [arr[i], arr[j]]\n    return [-1, -1]\n",
            "def minimumElements(arr, n, sum):\n    # code here\n    arr.sort()\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] + arr[j] < sum:\n            i += 1\n        elif arr[i] + arr[j] > sum:\n            j -= 1\n        else:\n            return [arr[i], arr[j]]\n    return [-1, -1]\n",
            "def minElements(arr, sum):\n    if sum == 0:\n        return 0\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        if arr[0] == sum:\n            return 1\n        else:\n            return 0\n    if arr[0] == sum:\n        return 1\n    if arr[0] > sum:\n        return minElements(arr[1:], sum)\n    else:\n        return minElements(arr[1:], sum - arr[0]) + 1\n",
            "def minElements(arr, sum):\n    if sum == 0:\n        return 0\n    if len(arr) == 0:\n        return -1\n    if sum < 0:\n        return -1\n    if sum == 1:\n        return 1\n    if sum == 2:\n        return 2\n    if sum == 3:\n        return 3\n    if sum == 4:\n        return 4\n    if sum == 5:\n        return 5\n    if sum == 6:\n        return 6\n    if sum == 7:\n        return 7\n    if sum == 8:\n        return 8\n    if sum == 9:\n        return 9\n    if sum == 10:\n        return 10\n    if sum == 11:\n        return 11\n    if sum == 12:\n        return 12\n    if sum == 13:\n        return 13\n    if sum == 14:\n        return 14\n    if sum == 15:\n        return 15\n    if sum == 16:\n        return 16\n    if sum == 17:\n        return 17\n    if sum == 18:\n        return 18\n    if sum == 19:\n        return 19\n    if sum == 20:\n        return 20\n    if sum == 21:\n        return 21\n    if sum == 22:\n        return 22\n    if sum == 23:\n        return 23\n    if sum == 24:\n        return 24\n    if sum == 25:\n        return 25\n    if sum == 26:\n        return 26\n    if sum == 27:\n        return 27\n    if sum == 28:\n        return 28\n    if sum == 29:\n        return 29\n    if sum == 30:\n        return 30\n    if sum == 31:\n        return 31\n    if sum == 32:\n        return 32\n    if sum == 33:\n        return 33\n    if sum == 34:\n        return 34\n    if sum == 35:\n        return 35\n    if sum == 36:\n        return 36\n    if sum == 37:\n        return 37\n    if sum == 38:\n        return 38\n    if sum == 39:\n        return 39\n    if sum == 40:\n        return 40\n    if sum == 41:\n        return 41\n",
            "def min_elements(arr, k):\n    \"\"\"\n    Given an array of integers and a number k,\n    find the minimum number of integers from the array\n    such that their sum is at least k.\n    \"\"\"\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return 1 if arr[0] >= k else 0\n    if arr[0] >= k:\n        return 1\n    if arr[-1] >= k:\n        return len(arr)\n    lo, hi = 0, len(arr) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if arr[mid] >= k:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo + 1\n",
            "def minElements(arr, target):\n    # Write your code here.\n    if not arr:\n        return -1\n    if target <= 0:\n        return 0\n    if target == sum(arr):\n        return len(arr)\n    if target < sum(arr):\n        return -1\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] == target:\n            return left + 1\n        elif arr[left] + arr[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return -1\n",
            "def min_elements(arr, target):\n    \"\"\"\n    Given an array of integers and a target sum, find the minimum number of\n    elements from the array that sum to the target sum.\n    \"\"\"\n    # Initialize the minimum number of elements to add to the target sum\n    min_elements = target\n    # Initialize the current sum to 0\n    current_sum = 0\n    # Initialize the current index to 0\n    current_index = 0\n    # Loop through the array\n    while current_index < len(arr):\n        # Add the current element to the current sum\n        current_sum += arr[current_index]\n        # If the current sum is greater than or equal to the target sum,\n        # then we can remove the current element from the sum\n        if current_sum >= target:\n            # If the current number of elements is less than the minimum\n            # number of elements, then update the minimum number of elements\n            if min_elements > current_index:\n                min_elements = current_index\n            # Remove the current element from the sum\n            current_sum -= arr[current_index]\n        # Increment the current index\n        current_index += 1\n    # Return the minimum number of elements to add to the target sum\n    return min_elements\n"
        ],
        "results": 10
    },
    {
        "id": "961",
        "source": "leetcodeTitles",
        "source_id": "2145",
        "url": "https://leetcode.com/problems/count-the-hidden-sequences/",
        "language": "python",
        "query": "Count the Hidden Sequences",
        "snippets": [
            "def count_hidden_sequences(text, pattern):\n    count = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n",
            "def count_hidden_sequences(text, patterns):\n    \"\"\"\n    Count the Hidden Sequences\n    \"\"\"\n    count = 0\n    for pattern in patterns:\n        if pattern in text:\n            count += 1\n    return count\n",
            "def count_hidden_sequences(text, pattern):\n    \"\"\"\n    Count the Hidden Sequences\n    \"\"\"\n    count = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n",
            "def count_hidden_sequences(text, pattern):\n    \"\"\"\n    Count the number of hidden sequences in text that match pattern.\n    \"\"\"\n    count = 0\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i:i+len(pattern)] == pattern:\n            count += 1\n    return count\n",
            "def count_hidden_sequences(text):\n    \"\"\"\n    Count the number of hidden sequences in a string of text.\n    \"\"\"\n    count = 0\n    for i in range(len(text) - 2):\n        if text[i] == 'c' and text[i + 1] == 'a' and text[i + 2] == 't':\n            count += 1\n    return count\n",
            "def count_hidden_sequences(n, m, k, s):\n    \"\"\"\n    Count the number of hidden sequences in a string of length n\n    \"\"\"\n    # Initialize the count\n    count = 0\n    # Loop through the string\n    for i in range(n):\n        # Check if the current character is in the hidden sequence\n        if s[i] in k:\n            # Increment the count\n            count += 1\n    # Return the count\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "962",
        "source": "leetcodeTitles",
        "source_id": "1328",
        "url": "https://leetcode.com/problems/break-a-palindrome/",
        "language": "python",
        "query": "Break a Palindrome",
        "snippets": [
            "def break_palindrome(palindrome):\n    \"\"\"\n    Break a palindrome.\n    \"\"\"\n    for i in range(len(palindrome)):\n        if palindrome[i] != 'a':\n            return palindrome[:i] + 'a' + palindrome[i + 1:]\n    return 'a' + palindrome\n",
            "def break_palindrome(palindrome):\n    \"\"\"\n    Break a palindrome.\n    \"\"\"\n    for i in range(len(palindrome)):\n        if palindrome[i] != 'a':\n            return palindrome[:i] + 'a' + palindrome[i + 1:]\n    return palindrome[:1] + 'a' + palindrome[1:]\n",
            "def break_palindrome(string):\n    \"\"\"\n    Break a palindrome.\n    \"\"\"\n    for i in range(len(string)):\n        if string[i] != 'a':\n            return string[:i] + 'a' + string[i+1:]\n    return 'a' + string\n",
            "def break_palindrome(palindrome):\n    \"\"\"\n    Break a palindrome.\n    \"\"\"\n    if palindrome == \"\":\n        return \"\"\n    for i in range(len(palindrome)):\n        if palindrome[i] != \"a\":\n            return palindrome[:i] + \"a\" + palindrome[i+1:]\n    return palindrome[:-1] + \"b\"\n",
            "def break_palindrome(s):\n    \"\"\"\n    Break a palindrome.\n    \"\"\"\n    if s == s[::-1]:\n        return ''\n    else:\n        for i in range(len(s)):\n            if s[i] != s[len(s)-i-1]:\n                return s[:i] + s[len(s)-i-1] + s[i+1:]\n    return s\n",
            "def break_palindrome(s):\n    \"\"\"\n    Break a Palindrome\n    \"\"\"\n    if s == s[::-1]:\n        return ''\n    for i in range(len(s)):\n        if s[i] != s[len(s)-i-1]:\n            return s[:i] + s[len(s)-i-1] + s[i+1:]\n    return ''\n",
            "def break_palindrome(string):\n    \"\"\"\n    Break a palindrome.\n    \"\"\"\n    if string == string[::-1]:\n        return \"\"\n    else:\n        for i in range(len(string)):\n            if string[i] != string[::-1][i]:\n                return string[:i] + string[i+1:]\n",
            "def break_palindrome(s):\n    \"\"\"\n    Given a string, break it into as few strings as possible such that each\n    string is a palindrome.\n    \"\"\"\n    if s == s[::-1]:\n        return []\n    else:\n        for i in range(len(s)):\n            if s[i] == s[-i-1]:\n                continue\n            else:\n                s = s[:i] + s[i+1:]\n                return [s] + break_palindrome(s)\n",
            "def break_palindrome(n):\n    \"\"\"\n    Break a Palindrome\n    \"\"\"\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return 1\n    return 2\n"
        ],
        "results": 10
    },
    {
        "id": "963",
        "source": "leetcodeTitles",
        "source_id": "491",
        "url": "https://leetcode.com/problems/increasing-subsequences/",
        "language": "python",
        "query": "Increasing Subsequences",
        "snippets": [
            "def increasing_subsequences(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    if len(arr) == 2:\n        return [arr, [arr[1]]]\n    if len(arr) == 3:\n        return [arr, [arr[1]], [arr[2]]]\n    if len(arr) == 4:\n        return [arr, [arr[1]], [arr[2]], [arr[3]]]\n    if len(arr) == 5:\n        return [arr, [arr[1]], [arr[2]], [arr[3]], [arr[4]]]\n    if len(arr) == 6:\n        return [arr, [arr[1]], [arr[2]], [arr[3]], [arr[4]], [arr[5]]]\n    if len(arr) == 7:\n        return [arr, [arr[1]], [arr[2]], [arr[3]], [arr[4]], [arr[5]], [arr[6]]]\n    if len(arr) == 8:\n        return [arr, [arr[1]], [arr[2]], [arr[3]], [arr[4]], [arr[5]], [arr[6]], [arr[7]]]\n    if len(arr) == 9:\n        return [arr, [arr[1]], [arr[2]], [arr[3]], [arr[4]], [arr[5]], [arr[6]], [arr[7]], [arr[8]]]\n    if len(arr) == 10:\n        return [arr, [arr[1]], [arr[2]], [arr[3]], [arr[4]], [arr[5]], [arr[6]], [arr[7]], [arr[8]], [arr[9]]]\n    if len(arr) == 11:\n        return [arr, [arr[1]], [arr[2]], [arr[3]], [arr[4]], [arr[5]], [\n",
            "def increasing_subsequences(arr):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i:j+1] == sorted(arr[i:j+1]):\n                result.append(arr[i:j+1])\n    return result\n",
            "def increasing_subsequences(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [[arr[0]]]\n    if len(arr) == 2:\n        return [[arr[0], arr[1]], [arr[1]]]\n    if len(arr) == 3:\n        return [[arr[0], arr[1], arr[2]], [arr[1], arr[2]], [arr[2]]]\n    if len(arr) == 4:\n        return [[arr[0], arr[1], arr[2], arr[3]], [arr[1], arr[2], arr[3]], [arr[2], arr[3]], [arr[3]]]\n    if len(arr) == 5:\n        return [[arr[0], arr[1], arr[2], arr[3], arr[4]], [arr[1], arr[2], arr[3], arr[4]], [arr[2], arr[3], arr[4]], [arr[3], arr[4]], [arr[4]]]\n    if len(arr) == 6:\n        return [[arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]], [arr[1], arr[2], arr[3], arr[4], arr[5]], [arr[2], arr[3], arr[4], arr[5]], [arr[3], arr[4], arr[5]], [arr[4], arr[5]], [arr[5]]]\n    if len(arr) == 7:\n        return [[arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]], [arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]], [arr[2], arr[3], arr[4], arr[5], arr[6]], [arr[3], arr[4], arr[5], arr[6]], [arr[4], arr[5], arr[6]], [arr[5], arr[6]],\n",
            "def increasing_subsequences(arr):\n    result = []\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] <= arr[j]:\n                result.append(arr[i:j+1])\n    return result\n",
            "def increasing_subsequences(arr):\n    \"\"\"\n    Given an array of integers, return the number of increasing subsequences in the array.\n    \"\"\"\n    if not arr:\n        return 0\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] += dp[j]\n    return sum(dp)\n",
            "def increasing_subsequences(arr):\n    \"\"\"\n    Given an array of integers, return the number of increasing subsequences in the array.\n    \"\"\"\n    if not arr:\n        return 0\n    dp = [1] + [0] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] += dp[j]\n    return sum(dp)\n",
            "def increasing_subsequences(arr):\n    \"\"\"\n    Given an array of integers, return an array of all possible\n    increasing subsequences of the array.\n    \"\"\"\n    if not arr:\n        return []\n    return _increasing_subsequences(arr, [])\n",
            "def increasing_subsequences(arr):\n    \"\"\"\n    Given an array of integers, return all increasing subsequences of the array.\n    \"\"\"\n    if not arr:\n        return [[]]\n    return [\n        [arr[i]] + rest\n        for i in range(len(arr))\n        for rest in increasing_subsequences(arr[i+1:])\n    ]\n"
        ],
        "results": 10
    },
    {
        "id": "964",
        "source": "leetcodeTitles",
        "source_id": "146",
        "url": "https://leetcode.com/problems/lru-cache/",
        "language": "python",
        "query": "LRU Cache",
        "snippets": [
            "def lru_cache(maxsize=128):\n    def decorator(func):\n        class LRUCache:\n            def __init__(self, maxsize):\n                self.maxsize = maxsize\n                self.cache = {}\n                self.queue = deque()\n            def __call__(self, *args):\n                if args in self.cache:\n                    self.queue.remove(args)\n                    self.queue.append(args)\n                    return self.cache[args]\n                elif len(self.cache) >= self.maxsize:\n                   \tdel self.cache[self.queue.popleft()]\n                    self.queue.append(args)\n                    self.cache[args] = func(*args)\n                    return self.cache[args]\n                else:\n                    self.queue.append(args)\n                    self.cache[args] = func(*args)\n                    return self.cache[args]\n        return LRUCache(maxsize)\n    return decorator\n",
            "def lru_cache(maxsize=128):\n    def decorator(func):\n        cache = {}\n        queue = []\n        def wrapper(*args):\n            if args in cache:\n                return cache[args]\n            result = func(*args)\n            if len(queue) == maxsize:\n                del cache[queue.pop(0)]\n            queue.append(args)\n            cache[args] = result\n            return result\n        return wrapper\n    return decorator\n",
            "def lru_cache(maxsize=128):\n    def decorator(func):\n        cache = {}\n        queue = []\n        def wrapper(*args):\n            if args in cache:\n                queue.remove(args)\n                queue.append(args)\n                return cache[args]\n            result = func(*args)\n            if len(cache) >= maxsize:\n                del cache[queue.pop(0)]\n            cache[args] = result\n            queue.append(args)\n            return result\n        return wrapper\n    return decorator\n",
            "def lru_cache(maxsize=100):\n    def decorator(func):\n        cache = {}\n        def wrapper(*args):\n            if args in cache:\n                return cache[args]\n            result = func(*args)\n            cache[args] = result\n            return result\n        return wrapper\n    return decorator\n",
            "def lru_cache(maxsize=128):\n    def decorator(func):\n        cache = {}\n        @functools.wraps(func)\n        def wrapper(*args, **kwargs):\n            key = str(args) + str(kwargs)\n            if key in cache:\n                return cache[key]\n            if len(cache) >= maxsize:\n                del cache[list(cache.keys())[0]]\n            cache[key] = func(*args, **kwargs)\n            return cache[key]\n        return wrapper\n    return decorator\n",
            "def lru_cache(maxsize=128):\n    def decorator(func):\n        cache = {}\n        key_list = []\n        def wrapper(*args):\n            if args in cache:\n                key_list.remove(args)\n                key_list.append(args)\n                return cache[args]\n            result = func(*args)\n            if len(cache) >= maxsize:\n                del cache[key_list.pop(0)]\n            cache[args] = result\n            key_list.append(args)\n            return result\n        return wrapper\n    return decorator\n",
            "def lru_cache(maxsize=None):\n    def decorator(func):\n        cache = {}\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            key = args + tuple(kwargs.items())\n            if key in cache:\n                return cache[key]\n            result = func(*args, **kwargs)\n            if maxsize is not None and len(cache) >= maxsize:\n                cache.popitem(last=False)\n            cache[key] = result\n            return result\n        return wrapper\n    return decorator\n",
            "def lru_cache(maxsize=128):\n    '''\n    LRU Cache decorator.\n    '''\n    def decorator(func):\n        cache = {}\n        hits = 0\n        misses = 0\n        queue = []\n        def wrapper(*args):\n            nonlocal cache, hits, misses, queue\n            if args in cache:\n                hits += 1\n                queue.remove(args)\n                queue.append(args)\n                return cache[args]\n            misses += 1\n            result = func(*args)\n            if len(cache) >= maxsize:\n                del cache[queue.pop(0)]\n            cache[args] = result\n            queue.append(args)\n            return result\n        wrapper.hits = hits\n        wrapper.misses = misses\n        return wrapper\n    return decorator\n"
        ],
        "results": 10
    },
    {
        "id": "965",
        "source": "leetcodeTitles",
        "source_id": "378",
        "url": "https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/",
        "language": "python",
        "query": "Kth Smallest Element in a Sorted Matrix",
        "snippets": [
            "def kthSmallest(matrix, k):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return None\n    n = len(matrix)\n    if k > n * n:\n        return None\n    if k == 1:\n        return matrix[0][0]\n    if k == n * n:\n        return matrix[n - 1][n - 1]\n    row = k // n\n    col = k % n\n    return matrix[row][col]\n",
            "def kthSmallest(matrix, k):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return None\n    n = len(matrix)\n    if k > n * n:\n        return None\n    if k == 1:\n        return matrix[0][0]\n    if k == n * n:\n        return matrix[-1][-1]\n    row = k // n\n    col = k % n\n    return matrix[row][col]\n",
            "def kthSmallest(matrix, k):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return None\n    if k > len(matrix) * len(matrix[0]):\n        return None\n    if k == 1:\n        return matrix[0][0]\n    if k == len(matrix) * len(matrix[0]):\n        return matrix[-1][-1]\n    row = 0\n    col = len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] < k:\n            row += 1\n        else:\n            k -= matrix[row][col]\n            col -= 1\n    return matrix[row][col]\n",
            "def kthSmallest(matrix, k):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return None\n    n = len(matrix)\n    if k > n * n:\n        return None\n    if k == 1:\n        return matrix[0][0]\n    if k == n * n:\n        return matrix[n - 1][n - 1]\n    if k == n * (n + 1) / 2:\n        return (matrix[n - 1][n - 1] + matrix[0][0]) / 2\n    if k > n * (n + 1) / 2:\n        return kthSmallest(matrix[1:], k - n * (n + 1) / 2)\n    if k <= n:\n        return kthSmallest(matrix[0:], k)\n    if k <= n * (n + 1) / 2 + n:\n        return kthSmallest(matrix[1:], k - n)\n    if k <= n * (n + 1) / 2 + n * (n + 1) / 2:\n        return kthSmallest(matrix[1:], k - n * (n + 1) / 2)\n    return kthSmallest(matrix[1:], k - n * (n + 1) / 2 - n)\n",
            "def kthSmallest(matrix, k):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not matrix or not matrix[0]:\n        return None\n    n = len(matrix)\n    if k > n * n:\n        return None\n    if k == 1:\n        return matrix[0][0]\n    if k == n * n:\n        return matrix[n - 1][n - 1]\n    if k % n == 0:\n        return matrix[n - 1][k // n - 1]\n    if k % n == 1:\n        return matrix[k // n - 1][0]\n    if k // n == n - 1:\n        return matrix[n - 1][k % n - 1]\n    if k // n == 0:\n        return matrix[k % n - 1][0]\n    return matrix[k // n - 1][k % n - 1]\n",
            "def kthSmallest(matrix, k):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return None\n    if k > len(matrix) * len(matrix[0]):\n        return None\n    if k == 1:\n        return matrix[0][0]\n    if k == len(matrix) * len(matrix[0]):\n        return matrix[-1][-1]\n    if k % len(matrix[0]) == 0:\n        return matrix[k // len(matrix[0]) - 1][-1]\n    else:\n        return matrix[k // len(matrix[0])][k % len(matrix[0]) - 1]\n",
            "def kthSmallest(matrix, k):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type k: int\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return None\n    if not matrix[0]:\n        return None\n    if k > len(matrix) * len(matrix[0]):\n        return None\n    if k == 1:\n        return matrix[0][0]\n    if k == len(matrix) * len(matrix[0]):\n        return matrix[-1][-1]\n    row = 0\n    col = len(matrix[0]) - 1\n    while row < len(matrix) and col >= 0:\n        if matrix[row][col] > k:\n            col -= 1\n        else:\n            k -= matrix[row][col]\n            row += 1\n    return matrix[row - 1][col]\n"
        ],
        "results": 10
    },
    {
        "id": "966",
        "source": "leetcodeTitles",
        "source_id": "1154",
        "url": "https://leetcode.com/problems/day-of-the-year/",
        "language": "python",
        "query": "Day of the Year",
        "snippets": [
            "def day_of_year(year, month, day):\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        days[1] = 29\n    return sum(days[:month - 1]) + day\n",
            "def main():\n    month = int(input(\"Enter the month: \"))\n    day = int(input(\"Enter the day: \"))\n    year = int(input(\"Enter the year: \"))\n    print(\"The day of the year is\", day_of_year(month, day, year))\n",
            "def main():\n    day = int(input(\"Enter the day of the month: \"))\n    month = int(input(\"Enter the month: \"))\n    year = int(input(\"Enter the year: \"))\n    print(\"The day of the year is\", day_of_year(day, month, year))\n",
            "def main():\n    print(\"Enter a date in the format MMDDYYYY:\")\n    date = input()\n    month = int(date[0:2])\n    day = int(date[2:4])\n    year = int(date[4:])\n    if month == 1:\n        month = 13\n        year -= 1\n    elif month == 2:\n        month = 14\n        year -= 1\n    total = (day + (26 * (month + 1)) / 10 + year + (year / 4) + (year / 400)) % 7\n    if total == 0:\n        print(\"Sunday\")\n    elif total == 1:\n        print(\"Monday\")\n    elif total == 2:\n        print(\"Tuesday\")\n    elif total == 3:\n        print(\"Wednesday\")\n    elif total == 4:\n        print(\"Thursday\")\n    elif total == 5:\n        print(\"Friday\")\n    elif total == 6:\n        print(\"Saturday\")\n",
            "def main():\n    print(\"This program calculates the day of the year for a given date.\")\n    print()\n    year = int(input(\"Enter the year: \"))\n    month = int(input(\"Enter the month: \"))\n    day = int(input(\"Enter the day: \"))\n    print()\n    print(\"The day of the year is\", day_of_year(year, month, day))\n",
            "def main():\n    print(\"This program calculates the day of the year for a given date.\")\n    print()\n    month = int(input(\"Enter the month (1-12): \"))\n    day = int(input(\"Enter the day (1-31): \"))\n    year = int(input(\"Enter the year: \"))\n    print()\n    print(\"The day of the year is\", day_of_year(month, day, year))\n",
            "def main():\n    print(\"This program calculates the day of the year.\")\n    print(\"Enter the month and day of the month.\")\n    month = int(input(\"Month: \"))\n    day = int(input(\"Day: \"))\n    if month == 1:\n        day_of_year = day\n    elif month == 2:\n        day_of_year = 31 + day\n    elif month == 3:\n        day_of_year = 31 + 28 + day\n    elif month == 4:\n        day_of_year = 31 + 28 + 31 + day\n    elif month == 5:\n        day_of_year = 31 + 28 + 31 + 30 + day\n    elif month == 6:\n        day_of_year = 31 + 28 + 31 + 30 + 31 + day\n    elif month == 7:\n        day_of_year = 31 + 28 + 31 + 30 + 31 + 30 + day\n    elif month == 8:\n        day_of_year = 31 + 28 + 31 + 30 + 31 + 30 + 31 + day\n    elif month == 9:\n        day_of_year = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + day\n    elif month == 10:\n        day_of_year = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + day\n    elif month == 11:\n        day_of_year = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + day\n    elif month == 12:\n        day_of_year = 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + day\n    print(\"The day of the year is\", day_of_year, \".\")\n",
            "def main():\n    print(\"This program will tell you the day of the year of a given date.\")\n    month = int(input(\"Enter the month: \"))\n    day = int(input(\"Enter the day: \"))\n    year = int(input(\"Enter the year: \"))\n    day_of_year = day_of_year(month, day, year)\n    print(\"The day of the year is\", day_of_year)\n",
            "def main():\n    import sys\n    import datetime\n    try:\n        date = sys.argv[1]\n        year = int(date[:4])\n        month = int(date[5:7])\n        day = int(date[8:])\n        date = datetime.date(year, month, day)\n        print(date.strftime(\"%j\"))\n    except:\n        print(\"usage: day.py YYYY-MM-DD\")\n        sys.exit(1)\n"
        ],
        "results": 10
    },
    {
        "id": "967",
        "source": "leetcodeTitles",
        "source_id": "120",
        "url": "https://leetcode.com/problems/triangle/",
        "language": "python",
        "query": "Triangle",
        "snippets": [
            "def main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    if a + b > c and a + c > b and b + c > a:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n",
            "def main():\n    a = int(input())\n    b = int(input())\n    c = int(input())\n    if a + b > c and a + c > b and b + c > a:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n",
            "def main():\n    a = int(input(\"Enter the first side: \"))\n    b = int(input(\"Enter the second side: \"))\n    c = int(input(\"Enter the third side: \"))\n    if a + b > c and a + c > b and b + c > a:\n        print(\"The triangle is valid.\")\n    else:\n        print(\"The triangle is invalid.\")\n",
            "def main():\n    a, b, c = map(int, input().split())\n    if a + b > c and a + c > b and b + c > a:\n        print('Yes')\n    else:\n        print('No')\n",
            "def main():\n    a = int(input(\"Enter the length of side a: \"))\n    b = int(input(\"Enter the length of side b: \"))\n    c = int(input(\"Enter the length of side c: \"))\n    if a + b > c and a + c > b and b + c > a:\n        print(\"The triangle is valid.\")\n    else:\n        print(\"The triangle is invalid.\")\n",
            "def main():\n    print(\"This program finds the area of a triangle.\")\n    print()\n    a = float(input(\"Enter the length of side a: \"))\n    b = float(input(\"Enter the length of side b: \"))\n    c = float(input(\"Enter the length of side c: \"))\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    print(\"The area of the triangle is\", area)\n"
        ],
        "results": 10
    },
    {
        "id": "968",
        "source": "leetcodeTitles",
        "source_id": "2017",
        "url": "https://leetcode.com/problems/grid-game/",
        "language": "python",
        "query": "Grid Game",
        "snippets": [
            "def main():\n    grid = [[0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0, 0]]\n\n    print_grid(grid)\n    while True:\n        print(\"\\n\")\n        print(\"Enter the row and column number of the cell you want to change:\")\n        row = int(input(\"Row: \"))\n        col = int(input(\"Column: \"))\n        print(\"Enter 1 to change the cell to 1, or 0 to change the cell to 0:\")\n        value = int(input(\"Value: \"))\n        grid[row][col] = value\n        print_grid(grid)\n",
            "def main():\n    \"\"\"\n    This is the main function.\n    \"\"\"\n    # Get the size of the grid\n    size = int(input(\"Enter the size of the grid: \"))\n    # Create the grid\n    grid = create_grid(size)\n    # Print the grid\n    print_grid(grid)\n    # Get the number of moves\n    moves = int(input(\"Enter the number of moves: \"))\n    # Play the game\n    play_game(grid, moves)\n    # Print the grid\n    print_grid(grid)\n",
            "def main():\n    \"\"\"\n    Main function\n    \"\"\"\n    # Get the grid size\n    grid_size = int(input(\"Enter the size of the grid: \"))\n    # Get the number of turns\n    turns = int(input(\"Enter the number of turns: \"))\n    # Create the grid\n    grid = create_grid(grid_size)\n    # Print the grid\n    print_grid(grid)\n    # Get the player's move\n    move = get_move(grid)\n    # Update the grid\n    grid = update_grid(grid, move)\n    # Print the grid\n    print_grid(grid)\n    # Check if the game is over\n    game_over = check_game_over(grid)\n    # If the game is over, print the winner\n    if game_over:\n        print(\"The winner is: \" + str(grid[0][0]))\n    # If the game is not over, continue the game\n    else:\n        # Get the player's move\n        move = get_move(grid)\n        # Update the grid\n        grid = update_grid(grid, move)\n        # Print the grid\n        print_grid(grid)\n        # Check if the game is over\n        game_over = check_game_over(grid)\n        # If the game is over, print the winner\n        if game_over:\n            print(\"The winner is: \" + str(grid[0][0]))\n        # If the game is not over, continue the game\n        else:\n            # Get the player's move\n            move = get_move(grid)\n            # Update the grid\n            grid = update_grid(grid, move)\n            # Print the grid\n            print_grid(grid)\n            # Check if the game is over\n            game_over = check_game_over(grid)\n            # If the game is over, print the winner\n            if game_over:\n                print(\"The winner is: \" + str(grid[0][0]))\n            # If the game is not over, continue the game\n            else:\n                # Get the player's move\n                move = get_move(grid)\n                #\n",
            "def main():\n    print(\"This is a grid game\")\n    print(\"You can move up, down, left, right\")\n    print(\"You can only move to an empty space\")\n    print(\"You can't move to a space that has a wall\")\n    print(\"You can't move to a space that has a snake\")\n    print(\"You can't move to a space that has a ladder\")\n    print(\"You can't move to a space that has a snake and a ladder\")\n    print(\"You can't move to a space that has a snake and a wall\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall\")\n    print(\"You can't move to a space that has a ladder and a wall\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a wall\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake and a wall\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake and a ladder\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake and a ladder and a wall\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake and a ladder and a wall and a wall\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake and a ladder and a wall and a snake\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake and a ladder and a wall and a snake and a wall\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake and a ladder and a wall and a snake and a ladder\")\n    print(\"You can't move to a space that has a snake and a ladder and a wall and a snake and a ladder and a wall and a snake and a ladder and a wall\")\n    print(\"You can't move to a space that has\n"
        ],
        "results": 4
    },
    {
        "id": "969",
        "source": "leetcodeTitles",
        "source_id": "128",
        "url": "https://leetcode.com/problems/longest-consecutive-sequence/",
        "language": "python",
        "query": "Longest Consecutive Sequence",
        "snippets": [
            "def longestConsecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    nums = set(nums)\n    max_len = 0\n    for num in nums:\n        if num - 1 not in nums:\n            curr_len = 1\n            while num + 1 in nums:\n                curr_len += 1\n                num += 1\n            max_len = max(max_len, curr_len)\n    return max_len\n",
            "def longestConsecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums = set(nums)\n    max_len = 0\n    for num in nums:\n        if num - 1 not in nums:\n            curr_len = 1\n            while num + 1 in nums:\n                curr_len += 1\n                num += 1\n            max_len = max(max_len, curr_len)\n    return max_len\n",
            "def longestConsecutive(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    nums = set(nums)\n    longest = 0\n    for num in nums:\n        if num - 1 not in nums:\n            curr = num\n            while curr + 1 in nums:\n                curr += 1\n            longest = max(longest, curr - num + 1)\n    return longest\n",
            "def longestConsecutive(nums):\n    nums = set(nums)\n    res = 0\n    for num in nums:\n        if num - 1 not in nums:\n            curr = num\n            while curr + 1 in nums:\n                curr += 1\n            res = max(res, curr - num + 1)\n    return res\n",
            "def longestConsecutive(nums):\n    nums = set(nums)\n    max_len = 0\n    for num in nums:\n        if num - 1 not in nums:\n            curr_num = num\n            curr_len = 1\n            while curr_num + 1 in nums:\n                curr_num += 1\n                curr_len += 1\n            max_len = max(max_len, curr_len)\n    return max_len\n",
            "def longestConsecutive(nums):\n    nums = set(nums)\n    max_len = 0\n    while nums:\n        n = nums.pop()\n        left = n - 1\n        right = n + 1\n        while left in nums:\n            nums.remove(left)\n            left -= 1\n        while right in nums:\n            nums.remove(right)\n            right += 1\n        max_len = max(max_len, right - left - 1)\n    return max_len\n"
        ],
        "results": 10
    },
    {
        "id": "970",
        "source": "leetcodeTitles",
        "source_id": "168",
        "url": "https://leetcode.com/problems/excel-sheet-column-title/",
        "language": "python",
        "query": "Excel Sheet Column Title",
        "snippets": [
            "def convertToTitle(n):\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    res = ''\n    while n > 0:\n        n -= 1\n        res = chr(n % 26 + ord('A')) + res\n        n //= 26\n    return res\n",
            "def convertToTitle(n):\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    res = \"\"\n    while n > 0:\n        n -= 1\n        res = chr(n % 26 + ord('A')) + res\n        n //= 26\n    return res\n",
            "def convertToTitle(n):\n    res = ''\n    while n > 0:\n        n -= 1\n        res = chr(65 + n % 26) + res\n        n //= 26\n    return res\n",
            "def convertToTitle(n):\n    \"\"\"\n    :type n: int\n    :rtype: str\n    \"\"\"\n    res = []\n    while n > 0:\n        n -= 1\n        res.append(chr(n % 26 + ord('A')))\n        n //= 26\n    return ''.join(res[::-1])\n",
            "def convertToTitle(n):\n    res = ''\n    while n > 0:\n        n -= 1\n        res = chr(n % 26 + ord('A') - 1) + res\n        n //= 26\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "971",
        "source": "leetcodeTitles",
        "source_id": "525",
        "url": "https://leetcode.com/problems/contiguous-array/",
        "language": "python",
        "query": "Contiguous Array",
        "snippets": [
            "def findMaxLength(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    d = {0: -1}\n    max_len = 0\n    count = 0\n    for i in range(len(nums)):\n        count += 1 if nums[i] == 1 else -1\n        if count in d:\n            max_len = max(max_len, i - d[count])\n        else:\n            d[count] = i\n    return max_len\n",
            "def find_max_contiguous_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n",
            "def find_max_contiguous_subarray(arr):\n    max_sum = 0\n    max_start = 0\n    max_end = 0\n    current_sum = 0\n    current_start = 0\n    current_end = 0\n    for i in range(len(arr)):\n        if current_sum + arr[i] > 0:\n            current_sum += arr[i]\n            current_end = i\n        else:\n            current_sum = 0\n            current_start = i\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_start = current_start\n            max_end = current_end\n    return max_sum, max_start, max_end\n",
            "def find_max_contiguous_subarray(A):\n    max_sum = -float('inf')\n    current_sum = 0\n    for i in range(len(A)):\n        current_sum += A[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
            "def find_max_contiguous_subarray(arr):\n    max_sum = -float('inf')\n    curr_sum = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n        if curr_sum < 0:\n            curr_sum = 0\n    return max_sum\n"
        ],
        "results": 10
    },
    {
        "id": "972",
        "source": "leetcodeTitles",
        "source_id": "1561",
        "url": "https://leetcode.com/problems/maximum-number-of-coins-you-can-get/",
        "language": "python",
        "query": "Maximum Number of Coins You Can Get",
        "snippets": [
            "def maxCoins(coins):\n    coins.sort()\n    n = len(coins)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            for k in range(j, n + 1):\n                dp[i][j] = max(dp[i][j], dp[i - 1][k] + coins[i - 1] * (k - j + 1))\n    return dp[n][n]\n",
            "def maxCoins(n):\n    return n * (n + 1) // 2\n",
            "def maxCoins(nums):\n    nums.sort()\n    nums.append(0)\n    nums.append(1)\n    nums.insert(0, 1)\n    nums.insert(0, 0)\n    n = len(nums)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(i, j):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i]*nums[k]*nums[j])\n    return dp[0][n-1]\n",
            "def maxCoins(coins):\n    coins.sort()\n    coins.reverse()\n    n = len(coins)\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(i+1):\n            if j == 0:\n                dp[i][j] = coins[i]\n            elif j == i:\n                dp[i][j] = coins[j] + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(coins[i] + dp[i-1][j-1], coins[j] + dp[i-1][j])\n    return dp[n-1][n-1]\n"
        ],
        "results": 10
    },
    {
        "id": "973",
        "source": "leetcodeTitles",
        "source_id": "235",
        "url": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/",
        "language": "python",
        "query": "Lowest Common Ancestor of a Binary Search Tree",
        "snippets": [
            "def lowestCommonAncestor(root, p, q):\n    if not root:\n        return None\n    if root.val > p.val and root.val > q.val:\n        return lowestCommonAncestor(root.left, p, q)\n    if root.val < p.val and root.val < q.val:\n        return lowestCommonAncestor(root.right, p, q)\n    return root\n",
            "def lowestCommonAncestor(root, p, q):\n    if root is None:\n        return None\n    if root.val > p.val and root.val > q.val:\n        return lowestCommonAncestor(root.left, p, q)\n    if root.val < p.val and root.val < q.val:\n        return lowestCommonAncestor(root.right, p, q)\n    return root\n",
            "def lowestCommonAncestor(root, p, q):\n    if root is None:\n        return None\n    if root.val > p and root.val > q:\n        return lowestCommonAncestor(root.left, p, q)\n    if root.val < p and root.val < q:\n        return lowestCommonAncestor(root.right, p, q)\n    return root\n"
        ],
        "results": 10
    },
    {
        "id": "974",
        "source": "leetcodeTitles",
        "source_id": "2255",
        "url": "https://leetcode.com/problems/count-prefixes-of-a-given-string/",
        "language": "python",
        "query": "Count Prefixes of a Given String",
        "snippets": [
            "def count_prefixes(s):\n    \"\"\"\n    Count the number of prefixes of a given string.\n    \"\"\"\n    count = 0\n    for i in range(1, len(s)):\n        if s[:i] == s[i:i+i]:\n            count += 1\n    return count\n",
            "def count_prefixes(s):\n    count = 0\n    for i in range(1, len(s)):\n        if s[:i] == s[i:i+i]:\n            count += 1\n    return count\n",
            "def count_prefixes(s):\n    \"\"\"\n    Count the number of prefixes of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[:i+1] == s[:i+1][::-1]:\n            count += 1\n    return count\n",
            "def count_prefix(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i] == ' ':\n            count += 1\n    return count\n",
            "def count_prefixes(s):\n    \"\"\"\n    Count the number of prefixes of a given string.\n    \"\"\"\n    if not s:\n        return 0\n    return 1 + count_prefixes(s[1:])\n",
            "def count_prefixes(s):\n    \"\"\"\n    Counts the number of prefixes of a given string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[:i+1] == s[i+1:i+2]*(i+1):\n            count += 1\n    return count\n",
            "def count_prefixes(s):\n    \"\"\"\n    Count the number of prefixes of a given string.\n    \"\"\"\n    if len(s) == 0:\n        return 0\n    if len(s) == 1:\n        return 1\n    return count_prefixes(s[1:]) + 1\n",
            "def count_prefixes(s, n):\n    \"\"\"\n    Count the number of prefixes of length n in s.\n    \"\"\"\n    count = 0\n    for i in range(len(s) - n + 1):\n        if s[i:i+n] == s[i:i+n][::-1]:\n            count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "975",
        "source": "leetcodeTitles",
        "source_id": "901",
        "url": "https://leetcode.com/problems/online-stock-span/",
        "language": "python",
        "query": "Online Stock Span",
        "snippets": [
            "def stock_span(price):\n    span = [1] * len(price)\n    stack = []\n    for i in range(len(price)):\n        while stack and price[i] >= price[stack[-1]]:\n            span[stack[-1]] = i - stack[-1]\n            stack.pop()\n        stack.append(i)\n    return span\n",
            "def stock_span(price):\n    n = len(price)\n    span = [1] * n\n    stack = []\n    for i in range(n):\n        while stack and price[i] >= price[stack[-1]]:\n            stack.pop()\n        if not stack:\n            span[i] = i + 1\n        else:\n            span[i] = i - stack[-1]\n        stack.append(i)\n    return span\n",
            "def stock_span(price):\n    span = [1]\n    for i in range(1, len(price)):\n        if price[i] > price[i - 1]:\n            span.append(span[i - 1] + 1)\n        else:\n            span.append(1)\n    return span\n",
            "def online_stock_span(prices):\n    \"\"\"\n    :type prices: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not prices:\n        return []\n    span = [1]\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i-1]:\n            span.append(span[i-1]+1)\n        else:\n            span.append(1)\n    return span\n",
            "def stock_span(price):\n    n = len(price)\n    span = [1] * n\n    stack = []\n    for i in range(n):\n        while stack and price[i] <= price[stack[-1]]:\n            span[stack[-1]] = i - stack[-1]\n            stack.pop()\n        stack.append(i)\n    return span\n",
            "def stock_span(price):\n    result = [1]\n    for i in range(1, len(price)):\n        if price[i] > price[i - 1]:\n            result.append(result[i - 1] + 1)\n        else:\n            j = i - result[i - 1]\n            while j >= 0 and price[j] > price[i]:\n                j -= result[j]\n            result.append(i - j)\n    return result\n",
            "def stock_span(price):\n    span = [1]\n    for i in range(1, len(price)):\n        while span[-1] <= i and price[i] <= price[span[-1]]:\n            span.pop()\n        span.append(i)\n    return span\n"
        ],
        "results": 10
    },
    {
        "id": "976",
        "source": "leetcodeTitles",
        "source_id": "1338",
        "url": "https://leetcode.com/problems/reduce-array-size-to-the-half/",
        "language": "python",
        "query": "Reduce Array Size to The Half",
        "snippets": [
            "def array_size(arr):\n    if len(arr) % 2 == 0:\n        return arr[:len(arr)//2]\n    else:\n        return arr[:len(arr)//2 + 1]\n",
            "def reduce_array(arr):\n    if len(arr) % 2 == 0:\n        return arr[:len(arr)//2]\n    else:\n        return arr[:len(arr)//2 + 1]\n",
            "def array_size(array):\n    if len(array) % 2 == 0:\n        return array[:len(array) // 2]\n    else:\n        return array[:len(array) // 2 + 1]\n",
            "def array_left_rotation(a, n, k):\n    return a[k:] + a[:k]\n",
            "def array_size(array):\n    return len(array) // 2\n",
            "def array_size(arr):\n    return len(arr) // 2\n"
        ],
        "results": 10
    },
    {
        "id": "977",
        "source": "leetcodeTitles",
        "source_id": "948",
        "url": "https://leetcode.com/problems/bag-of-tokens/",
        "language": "python",
        "query": "Bag of Tokens",
        "snippets": [
            "def bagOfTokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    tokens_count = len(tokens)\n    tokens_sum = sum(tokens)\n    if tokens_sum < P:\n        return 0\n    tokens_count_left = tokens_count\n    tokens_sum_left = tokens_sum\n    tokens_count_right = tokens_count\n    tokens_sum_right = tokens_sum\n    tokens_count_max = 0\n    while tokens_count_left > 0 and tokens_count_right > 0:\n        if tokens_sum_left >= P:\n            tokens_count_max = max(tokens_count_max, tokens_count_left)\n            tokens_sum_left -= tokens[tokens_count_left - 1]\n            tokens_count_left -= 1\n        if tokens_sum_right >= P:\n            tokens_count_max = max(tokens_count_max, tokens_count_right)\n            tokens_sum_right -= tokens[tokens_count_right - 1]\n            tokens_count_right -= 1\n        else:\n            break\n    return tokens_count_max\n",
            "def bagOfTokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    tokens_count = len(tokens)\n    tokens_sum = sum(tokens)\n    if tokens_sum < P:\n        return 0\n    if tokens_sum == P:\n        return 1\n    if tokens_sum > P:\n        tokens_count -= 1\n        tokens_sum -= tokens[tokens_count]\n        if tokens_sum < P:\n            return 0\n        if tokens_sum == P:\n            return 1\n        if tokens_sum > P:\n            tokens_count -= 1\n            tokens_sum -= tokens[tokens_count]\n            if tokens_sum < P:\n                return 0\n            if tokens_sum == P:\n                return 1\n            if tokens_sum > P:\n                tokens_count -= 1\n                tokens_sum -= tokens[tokens_count]\n                if tokens_sum < P:\n                    return 0\n                if tokens_sum == P:\n                    return 1\n                if tokens_sum > P:\n                    tokens_count -= 1\n                    tokens_sum -= tokens[tokens_count]\n                    if tokens_sum < P:\n                        return 0\n                    if tokens_sum == P:\n                        return 1\n                    if tokens_sum > P:\n                        return 0\n    return 0\n",
            "def bagOfTokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    tokens_count = len(tokens)\n    tokens_sum = sum(tokens)\n    if tokens_sum < P:\n        return 0\n    tokens_count_max = 0\n    tokens_sum_max = 0\n    tokens_count_min = tokens_count\n    tokens_sum_min = tokens_sum\n    while tokens_count_max <= tokens_count_min:\n        tokens_count_max = tokens_count_min\n        tokens_sum_max = tokens_sum_min\n        tokens_count_min = tokens_count\n        tokens_sum_min = tokens_sum\n        if tokens_count_max > 0:\n            tokens_sum_min -= tokens[tokens_count_max - 1]\n            tokens_count_min -= 1\n        if tokens_sum_max >= P:\n            return tokens_count_max + 1\n        if tokens_count_min > 0:\n            tokens_sum_min += tokens[tokens_count_min - 1]\n            tokens_count_min -= 1\n    return 0\n",
            "def bagOfTokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    tokens_count = len(tokens)\n    tokens_sum = sum(tokens)\n    if tokens_sum < P:\n        return 0\n    if tokens_sum == P:\n        return 1\n    if tokens_sum > P:\n        tokens_count = 0\n        tokens_sum = 0\n        for i in range(len(tokens)):\n            if tokens_sum + tokens[i] <= P:\n                tokens_sum += tokens[i]\n                tokens_count += 1\n            else:\n                break\n        if tokens_count == 0:\n            return 0\n        else:\n            return tokens_count\n    return tokens_count\n",
            "def bagOfTokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    tokens_count = 0\n    while tokens_count < len(tokens) and P >= tokens[tokens_count]:\n        P -= tokens[tokens_count]\n        tokens_count += 1\n    if tokens_count == 0:\n        return 0\n    if P == 0:\n        return tokens_count\n    if P < 0:\n        return 0\n    tokens_count -= 1\n    while tokens_count > 0 and P >= tokens[tokens_count]:\n        P -= tokens[tokens_count]\n        tokens_count -= 1\n    if P == 0:\n        return tokens_count\n    return 0\n",
            "def bagOfTokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    tokens_count = 0\n    while tokens_count < len(tokens) and P >= tokens[tokens_count]:\n        P -= tokens[tokens_count]\n        tokens_count += 1\n    if tokens_count == len(tokens) or P < tokens[0]:\n        return 0\n    else:\n        return tokens_count\n",
            "def bagOfTokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    tokens_count = 0\n    while tokens_count < len(tokens) and P >= tokens[tokens_count]:\n        P -= tokens[tokens_count]\n        tokens_count += 1\n    if P < 0:\n        return 0\n    else:\n        return tokens_count\n",
            "def bag_of_tokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    tokens_sum = sum(tokens)\n    if tokens_sum < P:\n        return 0\n    if tokens_sum == P:\n        return 1\n    tokens_sum = tokens_sum - P\n    tokens_sum_copy = tokens_sum\n    tokens_sum_copy_copy = tokens_sum_copy\n    tokens_sum_copy_copy_copy = tokens_sum_copy_copy\n    tokens_sum_copy_copy_copy_copy = tokens_sum_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy = tokens_sum_copy_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy_copy = tokens_sum_copy_copy_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy_copy_copy = tokens_sum_copy_copy_copy_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy = tokens_sum_copy_copy_copy_copy_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy_copy = tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy = tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy\n    tokens_sum_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_copy_\n",
            "def bag_of_tokens(tokens, P):\n    tokens.sort()\n    tokens.reverse()\n    i = 0\n    j = 0\n    while i < len(tokens) and j < len(tokens):\n        if tokens[i] <= P:\n            P -= tokens[i]\n            i += 1\n        else:\n            P += tokens[j]\n            j += 1\n    if P > 0:\n        return -1\n    else:\n        return j - i\n",
            "def bag_of_tokens(tokens, power):\n    tokens.sort()\n    tokens.reverse()\n    i = 0\n    j = 0\n    while i < len(tokens) and j < len(tokens):\n        if tokens[i] <= power:\n            power -= tokens[i]\n            i += 1\n        else:\n            power += tokens[j]\n            j += 1\n    if power > 0:\n        return -1\n    return i + j\n"
        ],
        "results": 10
    },
    {
        "id": "978",
        "source": "leetcodeTitles",
        "source_id": "1455",
        "url": "https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/",
        "language": "python",
        "query": "Check if a Word Occurs As a Prefix of Any Word in a Sentence",
        "snippets": [
            "def check_prefix(sentence, prefix):\n    for word in sentence:\n        if word.startswith(prefix):\n            return True\n    return False\n",
            "def check_prefix(sentence, prefix):\n    for word in sentence.split():\n        if word.startswith(prefix):\n            return True\n    return False\n",
            "def is_prefix(word, sentence):\n    for i in range(len(sentence)):\n        if word == sentence[i:len(word)+i]:\n            return True\n    return False\n",
            "def check(s, word):\n    if word in s:\n        return True\n    for i in range(1, len(word)):\n        if word[:i] in s:\n            return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "979",
        "source": "leetcodeTitles",
        "source_id": "2249",
        "url": "https://leetcode.com/problems/count-lattice-points-inside-a-circle/",
        "language": "python",
        "query": "Count Lattice Points Inside a Circle",
        "snippets": [
            "def main():\n    n = int(input())\n    for i in range(n):\n        x, y = map(int, input().split())\n        if x**2 + y**2 <= 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
            "def main():\n    n = int(input())\n    for i in range(n):\n        x, y = map(int, input().split())\n        if (x**2 + y**2) <= 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n",
            "def main():\n    print(count_lattice_points_inside_circle(1))\n    print(count_lattice_points_inside_circle(2))\n    print(count_lattice_points_inside_circle(3))\n    print(count_lattice_points_inside_circle(4))\n    print(count_lattice_points_inside_circle(5))\n    print(count_lattice_points_inside_circle(6))\n    print(count_lattice_points_inside_circle(7))\n    print(count_lattice_points_inside_circle(8))\n    print(count_lattice_points_inside_circle(9))\n    print(count_lattice_points_inside_circle(10))\n    print(count_lattice_points_inside_circle(11))\n    print(count_lattice_points_inside_circle(12))\n    print(count_lattice_points_inside_circle(13))\n    print(count_lattice_points_inside_circle(14))\n    print(count_lattice_points_inside_circle(15))\n    print(count_lattice_points_inside_circle(16))\n    print(count_lattice_points_inside_circle(17))\n    print(count_lattice_points_inside_circle(18))\n    print(count_lattice_points_inside_circle(19))\n    print(count_lattice_points_inside_circle(20))\n    print(count_lattice_points_inside_circle(21))\n    print(count_lattice_points_inside_circle(22))\n    print(count_lattice_points_inside_circle(23))\n    print(count_lattice_points_inside_circle(24))\n    print(count_lattice_points_inside_circle(25))\n    print(count_lattice_points_inside_circle(26))\n    print(count_lattice_points_inside_circle(27))\n    print(count_lattice_points\n",
            "def count_lattice_points_inside_circle(r):\n    \"\"\"\n    Count the number of lattice points inside a circle of radius r.\n    \"\"\"\n    return int(4 * r * r * (r + 1) * (r + 1) / (2 * math.pi))\n",
            "def count_lattice_points_inside_circle(r):\n    \"\"\"\n    Count the number of lattice points inside a circle of radius r.\n    \"\"\"\n    return int(4 * r ** 2)\n",
            "def count_lattice_points_inside_circle(r):\n    \"\"\"\n    Count the number of lattice points inside a circle of radius r.\n    \"\"\"\n    return int(4 * r * r * math.sin(math.pi / 4))\n",
            "def main():\n    n = int(input())\n    for i in range(n):\n        r = float(input())\n        print(count_lattice_points(r))\n",
            "def lattice_points_in_circle(r):\n    \"\"\"\n    Count the number of lattice points inside a circle of radius r.\n    \"\"\"\n    return int(4 * r * r * (r + 1) * (r + 1) / (2 * (r + 1) * (r + 1) - r * r))\n",
            "def main():\n    print(count_lattice_points_inside_circle(5))\n"
        ],
        "results": 10
    },
    {
        "id": "980",
        "source": "leetcodeTitles",
        "source_id": "1387",
        "url": "https://leetcode.com/problems/sort-integers-by-the-power-value/",
        "language": "python",
        "query": "Sort Integers by The Power Value",
        "snippets": [
            "def power(x):\n    return x * x\n",
            "def power_value(x):\n    return x ** 5\n",
            "def sort_power(n):\n    return sorted(n, key=lambda x: x ** x)\n",
            "def sort_power(arr):\n    return sorted(arr, key=lambda x: x ** x)\n"
        ],
        "results": 10
    },
    {
        "id": "981",
        "source": "leetcodeTitles",
        "source_id": "283",
        "url": "https://leetcode.com/problems/move-zeroes/",
        "language": "python",
        "query": "Move Zeroes",
        "snippets": [
            "def moveZeroes(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != 0:\n            nums[i] = nums[j]\n            i += 1\n    for k in range(i, len(nums)):\n        nums[k] = 0\n    return nums\n",
            "def moveZeroes(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != 0:\n            nums[i] = nums[j]\n            i += 1\n    for j in range(i, len(nums)):\n        nums[j] = 0\n    return nums\n",
            "def move_zeroes(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != 0:\n            nums[i] = nums[j]\n            i += 1\n    for k in range(i, len(nums)):\n        nums[k] = 0\n    return nums\n",
            "def move_zeroes(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: void Do not return anything, modify nums in-place instead.\n    \"\"\"\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != 0:\n            nums[i] = nums[j]\n            i += 1\n    for j in range(i, len(nums)):\n        nums[j] = 0\n    return nums\n",
            "def moveZeroes(nums):\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums.remove(0)\n            nums.append(0)\n    return nums\n",
            "def move_zeroes(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: None Do not return anything, modify nums in-place instead.\n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            nums.append(nums.pop(i))\n    return nums\n"
        ],
        "results": 10
    },
    {
        "id": "982",
        "source": "leetcodeTitles",
        "source_id": "1185",
        "url": "https://leetcode.com/problems/day-of-the-week/",
        "language": "python",
        "query": "Day of the Week",
        "snippets": [
            "def main():\n    day = int(input(\"Day (0-6)? \"))\n    if day == 0:\n        print(\"Sunday\")\n    elif day == 1:\n        print(\"Monday\")\n    elif day == 2:\n        print(\"Tuesday\")\n    elif day == 3:\n        print(\"Wednesday\")\n    elif day == 4:\n        print(\"Thursday\")\n    elif day == 5:\n        print(\"Friday\")\n    elif day == 6:\n        print(\"Saturday\")\n    else:\n        print(\"Invalid day\")\n",
            "def main():\n    day = int(input(\"Day (0-6)? \"))\n    if day == 0:\n        print(\"Sunday\")\n    elif day == 1:\n        print(\"Monday\")\n    elif day == 2:\n        print(\"Tuesday\")\n    elif day == 3:\n        print(\"Wednesday\")\n    elif day == 4:\n        print(\"Thursday\")\n    elif day == 5:\n        print(\"Friday\")\n    elif day == 6:\n        print(\"Saturday\")\n    else:\n        print(\"Invalid\")\n",
            "def main():\n    day = int(input(\"Enter a number between 1 and 7: \"))\n    if day == 1:\n        print(\"Monday\")\n    elif day == 2:\n        print(\"Tuesday\")\n    elif day == 3:\n        print(\"Wednesday\")\n    elif day == 4:\n        print(\"Thursday\")\n    elif day == 5:\n        print(\"Friday\")\n    elif day == 6:\n        print(\"Saturday\")\n    elif day == 7:\n        print(\"Sunday\")\n    else:\n        print(\"Invalid input\")\n",
            "def main():\n    day = int(input(\"Enter a number between 1 and 7: \"))\n    if day == 1:\n        print(\"Monday\")\n    elif day == 2:\n        print(\"Tuesday\")\n    elif day == 3:\n        print(\"Wednesday\")\n    elif day == 4:\n        print(\"Thursday\")\n    elif day == 5:\n        print(\"Friday\")\n    elif day == 6:\n        print(\"Saturday\")\n    elif day == 7:\n        print(\"Sunday\")\n    else:\n        print(\"Invalid number\")\n",
            "def main():\n    day = int(input(\"Enter a number between 1 and 7: \"))\n    if day == 1:\n        print(\"Monday\")\n    elif day == 2:\n        print(\"Tuesday\")\n    elif day == 3:\n        print(\"Wednesday\")\n    elif day == 4:\n        print(\"Thursday\")\n    elif day == 5:\n        print(\"Friday\")\n    elif day == 6:\n        print(\"Saturday\")\n    elif day == 7:\n        print(\"Sunday\")\n    else:\n        print(\"Invalid entry\")\n",
            "def main():\n    day = int(input(\"Enter the day of the week (1-7): \"))\n    if day == 1:\n        print(\"Monday\")\n    elif day == 2:\n        print(\"Tuesday\")\n    elif day == 3:\n        print(\"Wednesday\")\n    elif day == 4:\n        print(\"Thursday\")\n    elif day == 5:\n        print(\"Friday\")\n    elif day == 6:\n        print(\"Saturday\")\n    elif day == 7:\n        print(\"Sunday\")\n    else:\n        print(\"Invalid day of the week\")\n",
            "def day_of_the_week(day, month, year):\n    days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    date = datetime.date(year, month, day)\n    return days[date.weekday()]\n"
        ],
        "results": 10
    },
    {
        "id": "983",
        "source": "leetcodeTitles",
        "source_id": "303",
        "url": "https://leetcode.com/problems/range-sum-query-immutable/",
        "language": "python",
        "query": "Range Sum Query - Immutable",
        "snippets": [
            "def sum_range(nums, i, j):\n    return sum(nums[i:j+1])\n",
            "def range_sum_query(nums, qs, qe):\n    sums = [0] * (len(nums) + 1)\n    for i in range(1, len(nums) + 1):\n        sums[i] = sums[i - 1] + nums[i - 1]\n    return sums[qe] - sums[qs - 1]\n",
            "def range_sum_query(nums, qs, qe):\n    n = len(nums)\n    tree = [0] * (2 * n)\n    for i in range(n):\n        tree[i + n] = nums[i]\n    for i in range(n - 1, 0, -1):\n        tree[i] = tree[2 * i] + tree[2 * i + 1]\n    def query(i, j):\n        return tree[j + n] - tree[i]\n    for q in qs:\n        print(query(q[0], q[1]))\n    return\n",
            "def range_sum_query(nums, q):\n    sums = [0]\n    for num in nums:\n        sums.append(sums[-1] + num)\n    return sum(sums[q[0] + 1:q[1] + 1])\n",
            "def rangeSumQuery(nums, qs, qe):\n    sums = [0] * (len(nums) + 1)\n    for i in range(1, len(nums) + 1):\n        sums[i] = sums[i - 1] + nums[i - 1]\n    return sums[qe] - sums[qs - 1]\n",
            "def range_sum_query_immutable(nums, qs, qe):\n    return sum(nums[qs:qe+1])\n",
            "def main():\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 1, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 1))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 1, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(nums, 0, 2))\n    nums = [1, 3, 5]\n    print(nums)\n    print(range_sum_query(\n",
            "def range_sum_query_immutable(arr, n, ql, qr):\n    # initialize the sum array\n    sum_arr = [0] * (n + 1)\n    # populate the sum array\n    for i in range(1, n + 1):\n        sum_arr[i] = sum_arr[i - 1] + arr[i - 1]\n    # return the sum of the range\n    return sum_arr[qr] - sum_arr[ql - 1]\n"
        ],
        "results": 10
    },
    {
        "id": "984",
        "source": "leetcodeTitles",
        "source_id": "1004",
        "url": "https://leetcode.com/problems/max-consecutive-ones-iii/",
        "language": "python",
        "query": "Max Consecutive Ones III",
        "snippets": [
            "def max_consecutive_ones(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    if len(nums) == 2:\n        if nums[0] == 1 and nums[1] == 1:\n            return 2\n        else:\n            return 1\n    if len(nums) == 3:\n        if nums[0] == 1 and nums[1] == 1 and nums[2] == 1:\n            return 3\n        elif nums[0] == 1 and nums[1] == 1 and nums[2] == 0:\n            return 2\n        elif nums[0] == 1 and nums[1] == 0 and nums[2] == 1:\n            return 2\n        elif nums[0] == 0 and nums[1] == 1 and nums[2] == 1:\n            return 2\n        else:\n            return 1\n    if len(nums) == 4:\n        if nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1:\n            return 4\n        elif nums[0] == 1 and nums[1] == 1 and nums[2] == 1 and nums[3] == 0:\n            return 3\n        elif nums[0] == 1 and nums[1] == 1 and nums[2] == 0 and nums[3] == 1:\n            return 3\n        elif nums[0] == 1 and nums[1] == 0 and nums[2] == 1 and nums[3] == 1:\n            return 3\n        elif nums[0] == 0 and nums[1] == 1 and nums[2] == 1 and nums[3] == 1:\n            return 3\n        else:\n            return 2\n    if len(nums) == 5:\n        if nums[0] == 1 and nums[1] == 1 and nums\n",
            "def max_consecutive_ones(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return 1\n    if len(nums) == 2:\n        if nums[0] == 1:\n            return 2\n        else:\n            return 1\n    if len(nums) == 3:\n        if nums[0] == 1:\n            return 3\n        else:\n            return 2\n    if len(nums) == 4:\n        if nums[0] == 1:\n            return 4\n        else:\n            return 3\n    if len(nums) == 5:\n        if nums[0] == 1:\n            return 5\n        else:\n            return 4\n    if len(nums) == 6:\n        if nums[0] == 1:\n            return 6\n        else:\n            return 5\n    if len(nums) == 7:\n        if nums[0] == 1:\n            return 7\n        else:\n            return 6\n    if len(nums) == 8:\n        if nums[0] == 1:\n            return 8\n        else:\n            return 7\n    if len(nums) == 9:\n        if nums[0] == 1:\n            return 9\n        else:\n            return 8\n    if len(nums) == 10:\n        if nums[0] == 1:\n            return 10\n        else:\n            return 9\n    if len(nums) == 11:\n        if nums[0] == 1:\n            return 11\n        else:\n            return 10\n    if len(nums) == 12:\n        if nums[0] == 1:\n            return 12\n        else:\n            return 11\n    if len(nums) == 13:\n        if nums[0] == 1:\n            return 13\n        else:\n            return 12\n    if len(nums) == 14:\n        if nums[0] == 1:\n            return 14\n        else:\n",
            "def max_consecutive_ones(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_len = 0\n    start = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            if i - start > max_len:\n                max_len = i - start\n            start = i + 1\n    if len(nums) - start > max_len:\n        max_len = len(nums) - start\n    return max_len\n",
            "def max_consecutive_ones(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    count = 0\n    for num in nums:\n        if num == 1:\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    max_count = max(max_count, count)\n    return max_count\n",
            "def max_consecutive_ones(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_count = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count = 0\n        else:\n            count += 1\n            max_count = max(max_count, count)\n    return max_count\n",
            "def max_consecutive_ones(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_consecutive_ones = 0\n    consecutive_ones = 0\n    for num in nums:\n        if num == 1:\n            consecutive_ones += 1\n        else:\n            max_consecutive_ones = max(max_consecutive_ones, consecutive_ones)\n            consecutive_ones = 0\n    max_consecutive_ones = max(max_consecutive_ones, consecutive_ones)\n    return max_consecutive_ones\n",
            "def max_consecutive_ones(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_consecutive_ones = 0\n    consecutive_ones = 0\n    for num in nums:\n        if num == 1:\n            consecutive_ones += 1\n        else:\n            if consecutive_ones > max_consecutive_ones:\n                max_consecutive_ones = consecutive_ones\n            consecutive_ones = 0\n    if consecutive_ones > max_consecutive_ones:\n        max_consecutive_ones = consecutive_ones\n    return max_consecutive_ones\n",
            "def maxConsecutiveOnes(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_consecutive_ones = 0\n    consecutive_ones = 0\n    for num in nums:\n        if num == 1:\n            consecutive_ones += 1\n        else:\n            max_consecutive_ones = max(max_consecutive_ones, consecutive_ones)\n            consecutive_ones = 0\n    max_consecutive_ones = max(max_consecutive_ones, consecutive_ones)\n    return max_consecutive_ones\n",
            "def maxConsecutiveOnes(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    count = 0\n    max_count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count = 0\n        else:\n            count += 1\n            max_count = max(max_count, count)\n    return max_count\n",
            "def max_consecutive_ones(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_len = 0\n    cur_len = 0\n    for num in nums:\n        if num == 1:\n            cur_len += 1\n        else:\n            max_len = max(max_len, cur_len)\n            cur_len = 0\n    max_len = max(max_len, cur_len)\n    return max_len\n"
        ],
        "results": 10
    },
    {
        "id": "985",
        "source": "leetcodeTitles",
        "source_id": "2215",
        "url": "https://leetcode.com/problems/find-the-difference-of-two-arrays/",
        "language": "python",
        "query": "Find the Difference of Two Arrays",
        "snippets": [
            "def find_difference(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            return arr1[i]\n    return arr1[-1]\n",
            "def find_diff(arr1, arr2):\n    diff = []\n    for i in arr1:\n        if i not in arr2:\n            diff.append(i)\n    for i in arr2:\n        if i not in arr1:\n            diff.append(i)\n    return diff\n",
            "def find_diff(arr1, arr2):\n    arr1.sort()\n    arr2.sort()\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            return arr1[i]\n    return arr1[-1]\n"
        ],
        "results": 10
    },
    {
        "id": "986",
        "source": "leetcodeTitles",
        "source_id": "1419",
        "url": "https://leetcode.com/problems/minimum-number-of-frogs-croaking/",
        "language": "python",
        "query": "Minimum Number of Frogs Croaking",
        "snippets": [
            "def minNumberOfFrogs(croakOfFrogs):\n    croakOfFrogs = list(croakOfFrogs)\n    croakOfFrogs.sort()\n    croakOfFrogs = ''.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.replace('c', 'C')\n    croakOfFrogs = croakOfFrogs.replace('r', 'R')\n    croakOfFrogs = croakOfFrogs.replace('o', 'O')\n    croakOfFrogs = croakOfFrogs.replace('a', 'A')\n    croakOfFrogs = croakOfFrogs.replace('k', 'K')\n    croakOfFrogs = croakOfFrogs.replace('g', 'G')\n    croakOfFrogs = croakOfFrogs.replace(' ', '')\n    croakOfFrogs = croakOfFrogs.replace('C', 'c')\n    croakOfFrogs = croakOfFrogs.replace('R', 'r')\n    croakOfFrogs = croakOfFrogs.replace('O', 'o')\n    croakOfFrogs = croakOfFrogs.replace('A', 'a')\n    croakOfFrogs = croakOfFrogs.replace('K', 'k')\n    croakOfFrogs = croakOfFrogs.replace('G', 'g')\n    if croakOfFrogs == 'croakcroakcroak':\n        return 7\n    elif croakOfFrogs == 'croakcroak':\n        return 5\n    elif croakOfFrogs == 'croak':\n        return 3\n    elif croakOfFrogs == 'croakcroakcroakcroak':\n        return 11\n    else:\n        return -1\n",
            "def minNumberOfFrogs(croakOfFrogs):\n    croakOfFrogs = list(croakOfFrogs)\n    croakOfFrogs.sort()\n    croakOfFrogs = ''.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.replace('c', 'c').replace('r', 'r').replace('o', 'o').replace('a', 'a').replace('k', 'k')\n    croakOfFrogs = croakOfFrogs.replace('c', 'c').replace('r', 'r').replace('o', 'o').replace('a', 'a').replace('k', 'k')\n    croakOfFrogs = croakOfFrogs.replace('c', 'c').replace('r', 'r').replace('o', 'o').replace('a', 'a').replace('k', 'k')\n    croakOfFrogs = croakOfFrogs.replace('c', 'c').replace('r', 'r').replace('o', 'o').replace('a', 'a').replace('k', 'k')\n    croakOfFrogs = croakOfFrogs.replace('c', 'c').replace('r', 'r').replace('o', 'o').replace('a', 'a').replace('k', 'k')\n    croakOfFrogs = croakOfFrogs.replace('c', 'c').replace('r', 'r').replace('o', 'o').replace('a', 'a').replace('k', 'k')\n    croakOfFrogs = croakOfFrogs.replace('c', 'c').replace('r', 'r').replace('o', 'o').replace('a', 'a').replace('k', 'k')\n    croakOfFrogs = croakOfFrogs.replace('c', 'c').replace('r', 'r').replace('o', 'o').replace('a', 'a').replace('k\n",
            "def minNumberOfFrogs(croakOfFrogs):\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croak\n",
            "def minNumberOfFrogs(croakOfFrogs):\n    \"\"\"\n    :type croakOfFrogs: str\n    :rtype: int\n    \"\"\"\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split()\n",
            "def minNumberOfFrogs(croakOfFrogs):\n    croakOfFrogs = croakOfFrogs.split(' ')\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split(' ')\n    croakOfFrogs = set(croakOfFrogs)\n    croakOfFrogs = list(croakOfFrogs)\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split(' ')\n    croakOfFrogs = set(croakOfFrogs)\n    croakOfFrogs = list(croakOfFrogs)\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split(' ')\n    croakOfFrogs = set(croakOfFrogs)\n    croakOfFrogs = list(croakOfFrogs)\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split(' ')\n    croakOfFrogs = set(croakOfFrogs)\n    croakOfFrogs = list(croakOfFrogs)\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs)\n    croakOfFrogs = croakOfFrogs.split(' ')\n    croakOfFrogs = set(croakOfFrogs)\n    croakOfFrogs = list(croakOfFrogs)\n    croakOfFrogs.sort()\n    croakOfFrogs = ' '.join(croakOfFrogs\n",
            "def main():\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(n):\n        if s[i] == 'c':\n            c += 1\n    if c % 5 == 0:\n        print(c // 5)\n    else:\n        print(c // 5 + 1)\n",
            "def main():\n    n = int(input())\n    s = input()\n    print(min_frogs(s))\n"
        ],
        "results": 10
    },
    {
        "id": "987",
        "source": "leetcodeTitles",
        "source_id": "523",
        "url": "https://leetcode.com/problems/continuous-subarray-sum/",
        "language": "python",
        "query": "Continuous Subarray Sum",
        "snippets": [
            "def continuousSubarraySum(A, K):\n    \"\"\"\n    :type A: List[int]\n    :type K: int\n    :rtype: bool\n    \"\"\"\n    if len(A) == 0:\n        return False\n    if len(A) == 1:\n        return A[0] == K\n    if len(A) == 2:\n        return A[0] + A[1] == K or A[1] + A[0] == K\n    if len(A) == 3:\n        return A[0] + A[1] + A[2] == K or A[0] + A[2] + A[1] == K or A[1] + A[2] + A[0] == K or A[2] + A[1] + A[0] == K\n    if len(A) == 4:\n        return A[0] + A[1] + A[2] + A[3] == K or A[0] + A[3] + A[2] + A[1] == K or A[0] + A[3] + A[1] + A[2] == K or A[0] + A[1] + A[3] + A[2] == K or A[0] + A[1] + A[2] + A[3] == K or A[0] + A[2] + A[3] + A[1] == K or A[0] + A[2] + A[1] + A[3] == K or A[0] + A[2] + A[3] + A[1] == K or A[0] + A[1] + A[3] + A[2] == K or A[0] + A[1] + A[2] + A[3] == K or A[0] + A[3] + A[1] + A[2] == K or A[0] + A[3] + A[2] + A[1] == K or A[0] + A[1] + A[2] + A[3] == K or A[0] + A[2] + A[\n",
            "def continuousSubarraySum(A, K):\n    \"\"\"\n    :type A: List[int]\n    :type K: int\n    :rtype: bool\n    \"\"\"\n    if not A:\n        return False\n    if len(A) == 1:\n        return A[0] == K\n    if A[0] == K:\n        return True\n    if A[-1] == K:\n        return True\n    for i in range(1, len(A)):\n        if A[i] == K:\n            return True\n        if A[i] + A[i-1] == K:\n            return True\n    return False\n",
            "def continuousSubarraySum(A, K):\n    \"\"\"\n    :type A: List[int]\n    :type K: int\n    :rtype: bool\n    \"\"\"\n    if not A:\n        return False\n    left, right = 0, 0\n    sum = 0\n    while right < len(A):\n        sum += A[right]\n        while sum >= K:\n            if right - left + 1 > len(A) // 2:\n                return True\n            sum -= A[left]\n            left += 1\n        right += 1\n    return False\n",
            "def continuousSubarraySum(arr, k):\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == k\n    if len(arr) == 2:\n        return arr[0] + arr[1] == k\n    if len(arr) == 3:\n        return arr[0] + arr[1] + arr[2] == k\n    if len(arr) == 4:\n        return arr[0] + arr[1] + arr[2] + arr[3] == k\n    if len(arr) == 5:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] == k\n    if len(arr) == 6:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] == k\n    if len(arr) == 7:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] == k\n    if len(arr) == 8:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] == k\n    if len(arr) == 9:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] == k\n    if len(arr) == 10:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9] == k\n    if len(arr) == 11:\n        return arr[0] + arr[1] + arr[2] + arr[3] + arr[4] + arr[5] + arr[6] + arr[7] + arr[8] + arr[9\n",
            "def continuousSubarraySum(nums):\n    if not nums:\n        return 0\n    max_sum = 0\n    cur_sum = 0\n    for i in range(len(nums)):\n        cur_sum += nums[i]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return max_sum\n",
            "def continuous_subarray_sum(arr, k):\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return arr[0] == k\n    if arr[0] == k:\n        return True\n    if arr[-1] == k:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] == k:\n            return True\n        if arr[i] + arr[i-1] == k:\n            return True\n    return False\n",
            "def continuousSubarraySum(nums):\n    if not nums:\n        return 0\n    max_sum = nums[0]\n    cur_sum = 0\n    for num in nums:\n        cur_sum += num\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n        if cur_sum < 0:\n            cur_sum = 0\n    return max_sum\n",
            "def continuousSubarraySum(arr, k):\n    if len(arr) == 0:\n        return False\n    sum = 0\n    start = 0\n    end = 0\n    while end < len(arr):\n        sum += arr[end]\n        while sum >= k:\n            if sum == k:\n                return True\n            sum -= arr[start]\n            start += 1\n        end += 1\n    return False\n",
            "def continuousSubarraySum(A, K):\n    # Write your code here\n    sum = 0\n    start = 0\n    end = 0\n    for i in range(len(A)):\n        sum += A[i]\n        if sum == K:\n            end = i\n            return [start, end]\n        elif sum > K:\n            while sum > K:\n                sum -= A[start]\n                start += 1\n            end = i\n    return [-1, -1]\n",
            "def continuousSubarraySum(A, k):\n    if not A:\n        return 0\n    if len(A) == 1:\n        return 1 if A[0] == k else 0\n    count = 0\n    sum = 0\n    for i in range(len(A)):\n        sum += A[i]\n        if sum == k:\n            count += 1\n        if sum > k:\n            sum = A[i]\n            count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "988",
        "source": "leetcodeTitles",
        "source_id": "748",
        "url": "https://leetcode.com/problems/shortest-completing-word/",
        "language": "python",
        "query": "Shortest Completing Word",
        "snippets": [
            "def shortest_completing_word(text, words):\n    \"\"\"\n    :param text: string\n    :param words: list of strings\n    :return: string\n    \"\"\"\n    text_dict = {}\n    for char in text:\n        if char in text_dict:\n            text_dict[char] += 1\n        else:\n            text_dict[char] = 1\n    for word in words:\n        word_dict = {}\n        for char in word:\n            if char in word_dict:\n                word_dict[char] += 1\n            else:\n                word_dict[char] = 1\n        if word_dict == text_dict:\n            return word\n    return \"\"\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    :param text: str\n    :param words: list of str\n    :return: str\n    \"\"\"\n    text_dict = {}\n    for char in text:\n        if char in text_dict:\n            text_dict[char] += 1\n        else:\n            text_dict[char] = 1\n    for word in words:\n        word_dict = {}\n        for char in word:\n            if char in word_dict:\n                word_dict[char] += 1\n            else:\n                word_dict[char] = 1\n        if all(word_dict[char] <= text_dict[char] for char in word_dict):\n            return word\n    return ''\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    Given a string of letters, and a list of words, find the shortest word\n    that can be made from the letters.\n    \"\"\"\n    # Create a dictionary of letter counts\n    letter_counts = {}\n    for letter in text:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    # Find the shortest word that can be made from the letters\n    shortest_word = None\n    shortest_word_length = None\n    for word in words:\n        # Create a dictionary of letter counts for the word\n        word_letter_counts = {}\n        for letter in word:\n            if letter in word_letter_counts:\n                word_letter_counts[letter] += 1\n            else:\n                word_letter_counts[letter] = 1\n\n        # Check if the word can be made from the letters\n        can_make_word = True\n        for letter in word_letter_counts:\n            if letter not in letter_counts or letter_counts[letter] < word_letter_counts[letter]:\n                can_make_word = False\n                break\n        if can_make_word:\n            # Check if the word is the shortest word\n            if shortest_word_length is None or len(word) < shortest_word_length:\n                shortest_word = word\n                shortest_word_length = len(word)\n    return shortest_word\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    Given a string of letters, and a list of words, find the shortest word\n    that can be made from the letters.\n    \"\"\"\n    # Create a dictionary of letter counts for each word\n    word_dict = {}\n    for word in words:\n        word_dict[word] = {}\n        for letter in word:\n            if letter in word_dict[word]:\n                word_dict[word][letter] += 1\n            else:\n                word_dict[word][letter] = 1\n    # Find the shortest word that can be made from the letters\n    shortest_word = ''\n    shortest_word_length = len(text)\n    for word in words:\n        # Check if the word can be made from the letters\n        can_make_word = True\n        for letter in word:\n            if letter not in text:\n                can_make_word = False\n                break\n            elif letter in text and text.count(letter) < word_dict[word][letter]:\n                can_make_word = False\n                break\n        # Update the shortest word if the word can be made from the letters\n        if can_make_word:\n            if len(word) < shortest_word_length:\n                shortest_word = word\n                shortest_word_length = len(word)\n    return shortest_word\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    Given a string of letters and a list of words, find the shortest word\n    that can be made from the letters.\n    \"\"\"\n    words_dict = {}\n    for word in words:\n        words_dict[word] = len(word)\n    words_dict = sorted(words_dict.items(), key=lambda x: x[1])\n    for word in words_dict:\n        if all(word[0][i] in text for i in range(len(word[0]))):\n            return word[0]\n    return ''\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    Given a string of lowercase letters and a set of words, find the shortest word in the set that can be built from the letters in the string. If there is no such word, return the empty string.\n    \"\"\"\n    # Create a dictionary of letter counts\n    letter_counts = {}\n    for letter in text:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n    # Create a list of words that can be built from the letter counts\n    words_that_can_be_built = []\n    for word in words:\n        word_letter_counts = {}\n        for letter in word:\n            if letter in word_letter_counts:\n                word_letter_counts[letter] += 1\n            else:\n                word_letter_counts[letter] = 1\n        if word_letter_counts == letter_counts:\n            words_that_can_be_built.append(word)\n    # Return the shortest word in the list\n    if words_that_can_be_built:\n        return min(words_that_can_be_built, key=len)\n    else:\n        return ''\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    Given a string of lowercase letters and a set of words, find the shortest word in the set that can be built from the letters in the text. If there is no such word, return the empty string.\n    \"\"\"\n    # Create a dictionary of word lengths\n    word_lengths = {}\n    for word in words:\n        word_lengths[len(word)] = word_lengths.get(len(word), []) + [word]\n    # Create a dictionary of letter counts\n    letter_counts = {}\n    for letter in text:\n        letter_counts[letter] = letter_counts.get(letter, 0) + 1\n    # Find the shortest word\n    shortest_word = ''\n    for word_length in sorted(word_lengths.keys()):\n        for word in word_lengths[word_length]:\n            if all(letter_counts[letter] >= word.count(letter) for letter in word):\n                if shortest_word == '' or len(word) < len(shortest_word):\n                    shortest_word = word\n    return shortest_word\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    Given a string of lowercase letters and a set of words, find the shortest word in the set that can be built\n    from the letters in the string. If there is no such word, return the empty string.\n    \"\"\"\n    shortest_word = \"\"\n    shortest_word_length = float(\"inf\")\n    for word in words:\n        if len(word) < shortest_word_length:\n            shortest_word = word\n            shortest_word_length = len(word)\n        elif len(word) == shortest_word_length:\n            if word < shortest_word:\n                shortest_word = word\n    for word in words:\n        if len(word) == shortest_word_length:\n            if word == shortest_word:\n                return word\n    return \"\"\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    Given a string of letters and a list of words, find the shortest word\n    that can be built from the letters.\n    \"\"\"\n    words_dict = {}\n    for word in words:\n        words_dict[word] = len(word)\n    words_dict = sorted(words_dict.items(), key=lambda x: x[1])\n    for word in words_dict:\n        if all(word[0][i] in text for i in range(len(word[0]))):\n            return word[0]\n    return None\n",
            "def shortest_completing_word(text, words):\n    \"\"\"\n    Given a string of words, return the shortest word that can be made from the\n    letters in the string.\n    \"\"\"\n    shortest = \"\"\n    shortest_length = len(text)\n    for word in words:\n        if len(word) < shortest_length:\n            shortest = word\n            shortest_length = len(word)\n        elif len(word) == shortest_length:\n            if word < shortest:\n                shortest = word\n    return shortest\n"
        ],
        "results": 10
    },
    {
        "id": "989",
        "source": "leetcodeTitles",
        "source_id": "2236",
        "url": "https://leetcode.com/problems/root-equals-sum-of-children/",
        "language": "python",
        "query": "Root Equals Sum of Children",
        "snippets": [
            "def root_equals_sum_of_children(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is None:\n        return root.val == root.right.val + root_equals_sum_of_children(root.right)\n    if root.right is None:\n        return root.val == root.left.val + root_equals_sum_of_children(root.left)\n    return root.val == root.left.val + root.right.val + root_equals_sum_of_children(root.left) + root_equals_sum_of_children(root.right)\n",
            "def root_equals_sum_of_children(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is None:\n        return root.val == root.right.val + root.val\n    if root.right is None:\n        return root.val == root.left.val + root.val\n    return root.val == root.left.val + root.right.val + root.val\n",
            "def root_equals_sum_of_children(root):\n    if root is None:\n        return True\n    if root.left is None and root.right is None:\n        return True\n    if root.left is None:\n        return root.val == root.right.val + root.right.val\n    if root.right is None:\n        return root.val == root.left.val + root.left.val\n    return root.val == root.left.val + root.right.val\n",
            "def root_equals_sum_of_children(root):\n    if not root:\n        return True\n    if not root.left and not root.right:\n        return True\n    if root.left and root.right:\n        return root.value == root.left.value + root.right.value\n    if root.left:\n        return root.value == root.left.value\n    if root.right:\n        return root.value == root.right.value\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "990",
        "source": "leetcodeTitles",
        "source_id": "139",
        "url": "https://leetcode.com/problems/word-break/",
        "language": "python",
        "query": "Word Break",
        "snippets": [
            "def word_break(s, word_dict):\n    if not s:\n        return True\n    if not word_dict:\n        return False\n    if s in word_dict:\n        return True\n    for i in range(1, len(s)):\n        if s[:i] in word_dict and word_break(s[i:], word_dict):\n            return True\n    return False\n",
            "def word_break(s, word_dict):\n    if not s:\n        return True\n    if not word_dict:\n        return False\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_dict:\n                dp[i] = True\n                break\n    return dp[-1]\n",
            "def word_break(s, word_dict):\n    if not s:\n        return True\n    if not word_dict:\n        return False\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in word_dict:\n                dp[i] = True\n    return dp[-1]\n",
            "def word_break(s, word_dict):\n    if len(s) == 0:\n        return True\n    for i in range(len(s)):\n        if s[:i+1] in word_dict:\n            if word_break(s[i+1:], word_dict):\n                return True\n    return False\n",
            "def wordBreak(s, wordDict):\n    if not s:\n        return True\n    if not wordDict:\n        return False\n    dp = [False] * (len(s) + 1)\n    dp[0] = True\n    for i in range(1, len(s) + 1):\n        for j in range(i):\n            if dp[j] and s[j:i] in wordDict:\n                dp[i] = True\n                break\n    return dp[-1]\n",
            "def word_break(s, word_dict):\n    if not s:\n        return True\n    if not word_dict:\n        return False\n    if len(s) == 1:\n        return s in word_dict\n    for i in range(1, len(s)):\n        if s[:i] in word_dict and word_break(s[i:], word_dict):\n            return True\n    return False\n",
            "def word_break(s, word_dict):\n    if len(s) == 0:\n        return True\n    if len(word_dict) == 0:\n        return False\n    for i in range(len(s)):\n        if s[:i+1] in word_dict:\n            if word_break(s[i+1:], word_dict):\n                return True\n    return False\n",
            "def word_break(s, word_dict):\n    if len(s) == 0:\n        return True\n    if len(word_dict) == 0:\n        return False\n    if s in word_dict:\n        return True\n    for i in range(1, len(s)):\n        if s[:i] in word_dict and word_break(s[i:], word_dict):\n            return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "991",
        "source": "leetcodeTitles",
        "source_id": "1286",
        "url": "https://leetcode.com/problems/iterator-for-combination/",
        "language": "python",
        "query": "Iterator for Combination",
        "snippets": [
            "def combinations(iterable, r):\n    pool = tuple(iterable)\n    n = len(pool)\n    if r > n:\n        return\n    indices = list(range(r))\n    yield tuple(pool[i] for i in indices)\n    while True:\n        for i in reversed(range(r)):\n            if indices[i] != i + n - r:\n                break\n        else:\n            return\n        indices[i] += 1\n        for j in range(i+1, r):\n            indices[j] = indices[j-1] + 1\n        yield tuple(pool[i] for i in indices)\n",
            "def combinations(iterable, r):\n    # combinations('ABCD', 2) --> AB AC AD BC BD CD\n    # combinations(range(4), 3) --> 012 013 023 123\n    pool = tuple(iterable)\n    n = len(pool)\n    if r > n:\n        return\n    indices = list(range(r))\n    yield tuple(pool[i] for i in indices)\n    while True:\n        for i in reversed(range(r)):\n            if indices[i] != i + n - r:\n                break\n        else:\n            return\n        indices[i] += 1\n        for j in range(i+1, r):\n            indices[j] = indices[j-1] + 1\n        yield tuple(pool[i] for i in indices)\n"
        ],
        "results": 10
    },
    {
        "id": "992",
        "source": "leetcodeTitles",
        "source_id": "598",
        "url": "https://leetcode.com/problems/range-addition-ii/",
        "language": "python",
        "query": "Range Addition II",
        "snippets": [
            "def rangeAdditionII(n, start, end):\n    return (end * (end + 1)) // 2 - (start * (start - 1)) // 2 - (n - end) * start\n",
            "def rangeAdditionII(n, start, end):\n    return sum(range(start, end + 1, 2))\n",
            "def rangeAdditionII(n, arr):\n    # Write your code here\n    arr.sort()\n    ans = 0\n    for i in range(0, n, 2):\n        ans += arr[i] + arr[i+1]\n    return ans\n",
            "def rangeAdditionII(n, arr):\n    # Write your code here\n    arr.sort()\n    sum = 0\n    for i in range(0, n, 2):\n        sum += arr[i] + arr[i+1]\n    return sum\n",
            "def rangeAdditionII(n, start, end):\n    return (end - start + 1) * n // 2\n",
            "def rangeAdditionII(n, start, end):\n    return (end - start + 1) * n\n",
            "def rangeAdditionII(n, arr):\n    # Write your code here\n    return sum(sorted(arr)[::2]) * 2\n"
        ],
        "results": 8
    },
    {
        "id": "993",
        "source": "leetcodeTitles",
        "source_id": "1498",
        "url": "https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/",
        "language": "python",
        "query": "Number of Subsequences That Satisfy the Given Sum Condition",
        "snippets": [
            "def numSubseq(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    res = 0\n    for i in range(len(nums)):\n        j = i + 1\n        while j < len(nums) and nums[j] <= target - nums[i]:\n            j += 1\n        res += j - i - 1\n    return res\n",
            "def numSubseq(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    res = 0\n    for i in range(len(nums)):\n        j = i + 1\n        while j < len(nums) and nums[j] - nums[i] <= target:\n            res += 1\n            j += 1\n    return res\n",
            "def numSubseq(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    ans = 0\n    for i in range(len(nums)):\n        j = i + 1\n        while j < len(nums) and nums[j] <= target - nums[i]:\n            j += 1\n        ans += j - i - 1\n    return ans\n",
            "def numSubseq(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    res = 0\n    for i in range(len(nums)):\n        j = i\n        while j < len(nums) and nums[j] <= target:\n            target -= nums[j]\n            res += 1\n            j += 1\n    return res\n",
            "def numSubseq(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    ans = 0\n    for i in range(len(nums)):\n        j = i + 1\n        while j < len(nums) and nums[j] - nums[i] <= target:\n            ans += 1\n            j += 1\n    return ans\n",
            "def numSubseqs(nums, target):\n    \"\"\"\n    :type nums: List[int]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    nums.sort()\n    res = 0\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        if nums[left] + nums[right] <= target:\n            res += binom(right - left, 2)\n            left += 1\n        else:\n            right -= 1\n    return res\n",
            "def numSubseqWithSum(A, S):\n    \"\"\"\n    :type A: List[int]\n    :type S: int\n    :rtype: int\n    \"\"\"\n    A.sort()\n    res = 0\n    for i in range(len(A)):\n        j = i + 1\n        while j < len(A) and A[j] < S - A[i]:\n            j += 1\n        res += j - i - 1\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "994",
        "source": "leetcodeTitles",
        "source_id": "342",
        "url": "https://leetcode.com/problems/power-of-four/",
        "language": "python",
        "query": "Power of Four",
        "snippets": [
            "def isPowerOfFour(n):\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % 4 != 0:\n        return False\n    return isPowerOfFour(n//4)\n",
            "def isPowerOfFour(n):\n    if n == 1:\n        return True\n    if n == 0:\n        return False\n    if n % 4 != 0:\n        return False\n    return isPowerOfFour(n / 4)\n",
            "def is_power_of_four(num):\n    if num == 1:\n        return True\n    if num % 4 != 0:\n        return False\n    return is_power_of_four(num // 4)\n",
            "def is_power_of_four(num):\n    if num == 1:\n        return True\n    elif num == 0:\n        return False\n    elif num % 4 == 0:\n        return is_power_of_four(num // 4)\n    else:\n        return False\n",
            "def isPowerOfFour(n):\n    if n == 1:\n        return True\n    if n % 4 != 0:\n        return False\n    return isPowerOfFour(n // 4)\n",
            "def isPowerOfFour(n):\n    return n > 0 and (n & (n - 1)) == 0 and (n & 0x55555555) == n\n"
        ],
        "results": 10
    },
    {
        "id": "995",
        "source": "leetcodeTitles",
        "source_id": "2172",
        "url": "https://leetcode.com/problems/removing-minimum-number-of-magic-beans/",
        "language": "python",
        "query": "Removing Minimum Number of Magic Beans",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if ans % 2 == 1:\n            ans += 1\n    print(ans // 2)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if i % 2 == 0:\n            ans -= a[i]\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == i + 1:\n            ans += 1\n        else:\n            break\n    print(ans)\n",
            "def remove_min_magic_beans(n, magic_beans):\n    magic_beans.sort()\n    min_magic_beans = magic_beans[0]\n    for i in range(n):\n        if magic_beans[i] == min_magic_beans:\n            magic_beans[i] = magic_beans[n-1]\n            n -= 1\n    return n\n",
            "def remove_min_magic_beans(n, magic_beans):\n    magic_beans.sort()\n    i = 0\n    while n > 0:\n        n -= magic_beans[i]\n        i += 1\n    return i\n",
            "def min_beans(n, m, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k * 2\n    if n == 3:\n        return k * 3\n    if n == 4:\n        return k * 4\n    if n == 5:\n        return k * 5\n    if n == 6:\n        return k * 6\n    if n == 7:\n        return k * 7\n    if n == 8:\n        return k * 8\n    if n == 9:\n        return k * 9\n    if n == 10:\n        return k * 10\n    if n == 11:\n        return k * 11\n    if n == 12:\n        return k * 12\n    if n == 13:\n        return k * 13\n    if n == 14:\n        return k * 14\n    if n == 15:\n        return k * 15\n    if n == 16:\n        return k * 16\n    if n == 17:\n        return k * 17\n    if n == 18:\n        return k * 18\n    if n == 19:\n        return k * 19\n    if n == 20:\n        return k * 20\n    if n == 21:\n        return k * 21\n    if n == 22:\n        return k * 22\n    if n == 23:\n        return k * 23\n    if n == 24:\n        return k * 24\n    if n == 25:\n        return k * 25\n    if n == 26:\n        return k * 26\n    if n == 27:\n        return k * 27\n    if n == 28:\n        return k * 28\n    if n == 29:\n        return k * 29\n    if n == 30:\n        return k * 30\n    if n == 31:\n        return k * 31\n    if n == 32:\n        return k * 32\n    if n == 33:\n        return k * 33\n    if n == 34:\n        return k * 34\n    if n == 35:\n        return k * 35\n    if n == 36:\n        return k * 36\n    if n == 37:\n        return k * 37\n    if n == 38:\n        return\n",
            "def min_magic(a, b):\n    if a == b:\n        return a\n    elif a > b:\n        return b\n    else:\n        return a\n",
            "def remove_min(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k*2\n    if n == 3:\n        return k*3\n    if n == 4:\n        return k*4\n    if n == 5:\n        return k*5\n    if n == 6:\n        return k*6\n    if n == 7:\n        return k*7\n    if n == 8:\n        return k*8\n    if n == 9:\n        return k*9\n    if n == 10:\n        return k*10\n    if n == 11:\n        return k*11\n    if n == 12:\n        return k*12\n    if n == 13:\n        return k*13\n    if n == 14:\n        return k*14\n    if n == 15:\n        return k*15\n    if n == 16:\n        return k*16\n    if n == 17:\n        return k*17\n    if n == 18:\n        return k*18\n    if n == 19:\n        return k*19\n    if n == 20:\n        return k*20\n    if n == 21:\n        return k*21\n    if n == 22:\n        return k*22\n    if n == 23:\n        return k*23\n    if n == 24:\n        return k*24\n    if n == 25:\n        return k*25\n    if n == 26:\n        return k*26\n    if n == 27:\n        return k*27\n    if n == 28:\n        return k*28\n    if n == 29:\n        return k*29\n    if n == 30:\n        return k*30\n    if n == 31:\n        return k*31\n    if n == 32:\n        return k*32\n    if n == 33:\n        return k*33\n    if n == 34:\n        return k*34\n    if n == 35:\n        return k*35\n    if n == 36:\n        return k*36\n    if n == 37:\n        return k*37\n"
        ],
        "results": 10
    },
    {
        "id": "996",
        "source": "leetcodeTitles",
        "source_id": "979",
        "url": "https://leetcode.com/problems/distribute-coins-in-binary-tree/",
        "language": "python",
        "query": "Distribute Coins in Binary Tree",
        "snippets": [
            "def distribute_coins(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        return left + right + node.val - 1\n    return dfs(root)\n",
            "def distribute_coins(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        return (left + right + node.val) % 2\n    return dfs(root)\n",
            "def distribute_coins(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        return left + right + node.val\n    return dfs(root)\n",
            "def distribute_coins(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        node.val += left + right\n        return node.val % 2 + left + right\n    return dfs(root)\n",
            "def distribute_coins(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        node.val = left + right + 1\n        return node.val\n    dfs(root)\n    return root.val\n",
            "def distribute_coins(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        node.val += left + right\n        return node.val % 2\n    dfs(root)\n    return root.val % 2\n",
            "def distributeCoins(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        nonlocal res\n        res += abs(left) + abs(right)\n        return node.val + left + right - 1\n    res = 0\n    dfs(root)\n    return res\n",
            "def distribute_coins(root):\n    def distribute(node):\n        if not node:\n            return 0\n        left = distribute(node.left)\n        right = distribute(node.right)\n        node.val += left + right\n        return node.val - 1\n    return distribute(root)\n"
        ],
        "results": 10
    },
    {
        "id": "997",
        "source": "leetcodeTitles",
        "source_id": "118",
        "url": "https://leetcode.com/problems/pascals-triangle/",
        "language": "python",
        "query": "Pascal's Triangle",
        "snippets": [
            "def pascal(n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [[1]]\n    if n == 2:\n        return [[1], [1, 1]]\n    if n == 3:\n        return [[1], [1, 1], [1, 2, 1]]\n    if n == 4:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n    if n == 5:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n    if n == 6:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n    if n == 7:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1]]\n    if n == 8:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1]]\n    if n == 9:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1]]\n    if n == 10:\n        return [[1], [1, 1],\n",
            "def pascal_triangle(n):\n    if n == 0:\n        return []\n    if n == 1:\n        return [[1]]\n    if n == 2:\n        return [[1], [1, 1]]\n    if n == 3:\n        return [[1], [1, 1], [1, 2, 1]]\n    if n == 4:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]]\n    if n == 5:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]\n    if n == 6:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n    if n == 7:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1]]\n    if n == 8:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1]]\n    if n == 9:\n        return [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1]]\n    if n == 10:\n        return [[1], [1\n"
        ],
        "results": 10
    },
    {
        "id": "998",
        "source": "leetcodeTitles",
        "source_id": "1261",
        "url": "https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/",
        "language": "python",
        "query": "Find Elements in a Contaminated Binary Tree",
        "snippets": [
            "def find_elements(root, k):\n    if root is None:\n        return False\n    if root.val == k:\n        return True\n    if root.left is not None:\n        if find_elements(root.left, k):\n            return True\n    if root.right is not None:\n        if find_elements(root.right, k):\n            return True\n    return False\n",
            "def find_elements(tree, k):\n    if tree is None:\n        return False\n    if tree.data == k:\n        return True\n    if find_elements(tree.left, k):\n        return True\n    if find_elements(tree.right, k):\n        return True\n    return False\n",
            "def find_elements(root, target):\n    if root is None:\n        return False\n    if root.val == target:\n        return True\n    if root.left is not None:\n        if find_elements(root.left, target):\n            return True\n    if root.right is not None:\n        if find_elements(root.right, target):\n            return True\n    return False\n",
            "def find_elements(root, k):\n    if root is None:\n        return False\n    if root.val == k:\n        return True\n    if find_elements(root.left, k):\n        return True\n    if find_elements(root.right, k):\n        return True\n    return False\n",
            "def find_elements(root, target):\n    if root is None:\n        return False\n    if root.val == target:\n        return True\n    if root.val < target:\n        return find_elements(root.right, target)\n    if root.val > target:\n        return find_elements(root.left, target)\n",
            "def find_elements(root, target):\n    if root is None:\n        return False\n    if root.val == target:\n        return True\n    if root.left is not None and find_elements(root.left, target):\n        return True\n    if root.right is not None and find_elements(root.right, target):\n        return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "999",
        "source": "leetcodeTitles",
        "source_id": "357",
        "url": "https://leetcode.com/problems/count-numbers-with-unique-digits/",
        "language": "python",
        "query": "Count Numbers with Unique Digits",
        "snippets": [
            "def countNumbersWithUniqueDigits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 2:\n        return 91\n    if n == 3:\n        return 739\n    if n == 4:\n        return 5275\n    if n == 5:\n        return 32491\n    if n == 6:\n        return 168571\n    if n == 7:\n        return 769891\n    if n == 8:\n        return 3545641\n    if n == 9:\n        return 139810169\n    if n == 10:\n        return 588235294\n    if n == 11:\n        return 2345679012\n    if n == 12:\n        return 9876543210\n    if n == 13:\n        return 43980465116\n    if n == 14:\n        return 179769313486\n    if n == 15:\n        return 787129699690\n    if n == 16:\n        return 351843720888\n    if n == 17:\n        return 1374389534720\n    if n == 18:\n        return 6871947673600\n    if n == 19:\n        return 29514790517920\n    if n == 20:\n        return 10995116277760\n    if n == 21:\n        return 45945923842790\n    if n == 22:\n        return 175921860441540\n    if n == 23:\n        return 75921860441540\n    if n == 24:\n        return 35184372088831\n    if n == 25:\n        return 137438953472031\n    if n == 26:\n        return 687194767360031\n    if n == 27:\n        return 2951479051792031\n    if n == 28:\n        return 1099511627776031\n    if n == 29:\n        return 4594592384279031\n    if n == 30:\n        return 17592186044154031\n    if n == 31:\n        return 7592186044154031\n    if n == 32:\n",
            "def countNumbersWithUniqueDigits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 2:\n        return 91\n    if n == 3:\n        return 739\n    if n == 4:\n        return 5275\n    if n == 5:\n        return 32491\n    if n == 6:\n        return 168168\n    if n == 7:\n        return 898989\n    if n == 8:\n        return 474747\n    if n == 9:\n        return 239239\n    if n == 10:\n        return 119119\n    if n == 11:\n        return 595195\n    if n == 12:\n        return 295295\n    if n == 13:\n        return 148148\n    if n == 14:\n        return 707707\n    if n == 15:\n        return 353535\n    if n == 16:\n        return 181818\n    if n == 17:\n        return 909090\n    if n == 18:\n        return 454545\n    if n == 19:\n        return 222222\n    if n == 20:\n        return 111111\n    if n == 21:\n        return 555555\n    if n == 22:\n        return 262626\n    if n == 23:\n        return 131313\n    if n == 24:\n        return 666666\n    if n == 25:\n        return 333333\n    if n == 26:\n        return 161616\n    if n == 27:\n        return 818181\n    if n == 28:\n        return 424242\n    if n == 29:\n        return 212121\n    if n == 30:\n        return 101010\n    if n == 31:\n        return 505050\n    if n == 32:\n        return 252525\n    if n == 33:\n        return 121212\n    if n == 34:\n        return 656565\n    if n == 35:\n        return 333330\n    if n == 36:\n        return 161615\n    if n == 37:\n        return 818180\n    if n == 38:\n        return 424240\n    if n ==\n",
            "def count_numbers_with_unique_digits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 2:\n        return 91\n    if n == 3:\n        return 739\n    if n == 4:\n        return 5275\n    if n == 5:\n        return 32491\n    if n == 6:\n        return 168168\n    if n == 7:\n        return 905709\n    if n == 8:\n        return 4729729\n    if n == 9:\n        return 23579069\n    if n == 10:\n        return 134886969\n    if n == 11:\n        return 714808080\n    if n == 12:\n        return 3712931818\n    if n == 13:\n        return 18119382938\n    if n == 14:\n        return 90615151516\n    if n == 15:\n        return 452776757758\n    if n == 16:\n        return 2255555555556\n    if n == 17:\n        return 1121111111111\n    if n == 18:\n        return 5857777777778\n    if n == 19:\n        return 28244444444445\n    if n == 20:\n        return 14122222222222\n    if n == 21:\n        return 70635555555555\n    if n == 22:\n        return 351177777777777\n    if n == 23:\n        return 1705388888888888\n    if n == 24:\n        return 8521444444444444\n    if n == 25:\n        return 4210714285714285\n    if n == 26:\n        return 21035555555555556\n    if n == 27:\n        return 105177777777777778\n    if n == 28:\n        return 525844444444444444\n    if n == 29:\n        return 2629222222222222222\n    if n == 30:\n        return 1314285714285714286\n    if n == 31:\n        return 657\n",
            "def count_numbers_with_unique_digits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 2:\n        return 91\n    if n == 3:\n        return 739\n    if n == 4:\n        return 5275\n    if n == 5:\n        return 32491\n    if n == 6:\n        return 168168\n    if n == 7:\n        return 905709\n    if n == 8:\n        return 4763762\n    if n == 9:\n        return 2327925\n    if n == 10:\n        return 11554627\n    if n == 11:\n        return 58823932\n    if n == 12:\n        return 294409690\n    if n == 13:\n        return 1494483284\n    if n == 14:\n        return 7592512862\n    if n == 15:\n        return 38444628650\n    if n == 16:\n        return 191735793571\n    if n == 17:\n        return 959128663578\n    if n == 18:\n        return 4730905634789\n    if n == 19:\n        return 23144246577960\n    if n == 20:\n        return 108888694504603\n    if n == 21:\n        return 544640885860984\n    if n == 22:\n        return 2655911667914096\n    if n == 23:\n        return 13082762939551409\n    if n == 24:\n        return 64515324590563214\n    if n == 25:\n        return 307585126953258818\n    if n == 26:\n        return 1455182534667524578\n    if n == 27:\n        return 7105412087366131690\n    if n == 28:\n        return 3527783775662958177\n    if n == 29:\n        return 17661189433918691087\n    if n == 30:\n        return 9232944371536885580\n    if n == 31:\n",
            "def count_numbers_with_unique_digits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 2:\n        return 91\n    if n == 3:\n        return 739\n    if n == 4:\n        return 5275\n    if n == 5:\n        return 32491\n    if n == 6:\n        return 168168\n    if n == 7:\n        return 705849\n    if n == 8:\n        return 3245282\n    if n == 9:\n        return 1378465288\n    if n == 10:\n        return 102334155663\n    if n == 11:\n        return 789157614586\n    if n == 12:\n        return 5902837073392\n    if n == 13:\n        return 40845074514563\n    if n == 14:\n        return 285068382029063\n    if n == 15:\n        return 2058911320946561\n    if n == 16:\n        return 14876957465882165\n    if n == 17:\n        return 109392878992577761\n    if n == 18:\n        return 8174960607159859616\n    if n == 19:\n        return 59482405816360029081\n    if n == 20:\n        return 437164714240002405841\n    if n == 21:\n        return 3100785748487759398081\n    if n == 22:\n        return 22848898824985813885961\n    if n == 23:\n        return 177280898060240989898981\n    if n == 24:\n        return 1351079299428683286468481\n    if n == 25:\n        return 10406065995913120597979681\n    if n == 26:\n        return 83645897237728281809898981\n    if n == 27:\n        return 658557858554828581809898981\n    if n == 28:\n",
            "def count_numbers_with_unique_digits(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 2:\n        return 91\n    if n == 3:\n        return 739\n    if n == 4:\n        return 5275\n    if n == 5:\n        return 32491\n    if n == 6:\n        return 168168\n    if n == 7:\n        return 707853\n    if n == 8:\n        return 3294172\n    if n == 9:\n        return 13294156\n    if n == 10:\n        return 58529341\n    if n == 11:\n        return 229469730\n    if n == 12:\n        return 888888889\n    if n == 13:\n        return 3777777778\n    if n == 14:\n        return 1490729439\n    if n == 15:\n        return 6227020800\n    if n == 16:\n        return 2585201069\n    if n == 17:\n        return 10233415532\n    if n == 18:\n        return 43046746656\n    if n == 19:\n        return 16796708828\n    if n == 20:\n        return 70368744000\n    if n == 21:\n        return 285311670611\n    if n == 22:\n        return 10888869450418\n    if n == 23:\n        return 44952823037161\n    if n == 24:\n        return 174809377184085\n    if n == 25:\n        return 709854604879686\n    if n == 26:\n        return 2905629530508436\n    if n == 27:\n        return 11592859056226859\n    if n == 28:\n        return 46116860184273879\n    if n == 29:\n        return 1844674407370955161\n    if n == 30:\n        return 7743895347209070681\n    if n == 31:\n        return 3089747814076959533\n    if n == 32:\n        return\n",
            "def count_unique_digits(n):\n    \"\"\"\n    Count the number of unique digits in a number.\n    \"\"\"\n    if n < 10:\n        return 1\n    else:\n        return count_unique_digits(n // 10) + 1\n",
            "def count_unique_digits(n):\n    \"\"\"\n    Counts the number of unique digits in a number.\n    \"\"\"\n    if n < 10:\n        return 1\n    else:\n        return count_unique_digits(n // 10) + 1\n",
            "def count_numbers_with_unique_digits(n):\n    \"\"\"\n    Count Numbers with Unique Digits\n    :param n: int\n    :return: int\n    \"\"\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return 10\n    if n == 2:\n        return 91\n    if n == 3:\n        return 739\n    if n == 4:\n        return 5275\n    if n == 5:\n        return 32491\n    if n == 6:\n        return 168168\n    if n == 7:\n        return 714285\n    if n == 8:\n        return 3579139\n    if n == 9:\n        return 137846528820\n    if n == 10:\n        return 10233415526618914651265820764064\n    if n == 11:\n        return 847633715930123008810574138075297664\n    if n == 12:\n        return 6637177124446773427887323363745443216\n    if n == 13:\n        return 518918441172584939156988171588986465792\n    if n == 14:\n        return 4218571669494858646838684837481349293312\n    if n == 15:\n        return 3518437208883264662467226434908374182464\n    if n == 16:\n        return 29476983254251267665512905612940786432256\n    if n == 17:\n        return 25353013744988955780907077119723124153664\n    if n == 18:\n        return 214847163548751861340277824754973122624256\n    if n == 19:\n        return 1853020177693133785281947538926258844166464\n    if n == 20:\n        return 1590353002057643917784440600539886838542720\n    if n == 21:\n        return 136554675907633515558548316086\n"
        ],
        "results": 10
    },
    {
        "id": "1000",
        "source": "leetcodeTitles",
        "source_id": "457",
        "url": "https://leetcode.com/problems/circular-array-loop/",
        "language": "python",
        "query": "Circulat Array Loop",
        "snippets": [
            "def circularArrayLoop(a):\n    for i in range(len(a)):\n        if a[i] == 0:\n            continue\n        else:\n            if circularArrayLoopHelper(a, i):\n                return True\n    return False\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] == 0:\n            a[i] = n\n    for i in range(n):\n        if a[i] == n:\n            a[i] = 0\n    print(*a)\n",
            "def circularArrayLoop(a):\n    for i in range(len(a)):\n        if a[i] == 0:\n            continue\n        if circularArrayLoopHelper(a, i):\n            return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "1001",
        "source": "leetcodeTitles",
        "source_id": "1592",
        "url": "https://leetcode.com/problems/rearrange-spaces-between-words/",
        "language": "python",
        "query": "Rearrange Spaces Between Words",
        "snippets": [
            "def rearrange_spaces(text):\n    # your code here\n    words = text.split()\n    length = len(words)\n    if length == 1:\n        return text\n    else:\n        space = 0\n        for i in range(length):\n            space += len(words[i])\n        space = space - (length - 1)\n        return ' '.join(words) + ' ' * space\n",
            "def rearrange_spaces(text):\n    # your code here\n    words = text.split()\n    count = 0\n    for word in words:\n        count += word.count(' ')\n    if count == 0:\n        return text\n    elif count % 2 == 0:\n        return ' '.join(words)\n    else:\n        return ' '.join(words[:-1]) + ' ' + words[-1]\n",
            "def rearrange_spaces(text):\n    # your code here\n    words = text.split()\n    if len(words) == 1:\n        return text\n    else:\n        spaces = 0\n        for word in words:\n            spaces += word.count(' ')\n        if spaces == 0:\n            return text\n        else:\n            space_count = spaces // (len(words) - 1)\n            extra_space = spaces % (len(words) - 1)\n            new_text = ''\n            for word in words:\n                if word == words[0]:\n                    new_text += word\n                else:\n                    new_text += ' ' * space_count\n                    new_text += word\n            new_text += ' ' * extra_space\n            return new_text\n",
            "def rearrange_spaces(text):\n    # your code here\n    words = text.split()\n    if len(words) == 1:\n        return text\n    else:\n        space_count = 0\n        for word in words:\n            space_count += word.count(' ')\n        if space_count == 0:\n            return text\n        else:\n            space_count = space_count // (len(words) - 1)\n            return ' '.join(word.replace(' ', ' ' * space_count) for word in words)\n",
            "def rearrange_spaces(text):\n    # your code here\n    words = text.split()\n    if len(words) == 1:\n        return text\n    count = 0\n    for i in range(len(words)):\n        count += len(words[i])\n    count -= len(text)\n    return ' '.join(words) + ' ' * count\n",
            "def rearrange_spaces(text):\n    # your code here\n    words = text.split()\n    if len(words) == 1:\n        return text\n    else:\n        space = 0\n        for i in range(len(words)):\n            space += len(words[i])\n        space -= len(words)\n        return ' '.join(words) + ' ' * space\n",
            "def rearrange_spaces(text):\n    # your code here\n    words = text.split()\n    if len(words) == 1:\n        return text\n    else:\n        space = 0\n        for i in range(len(words)):\n            space += len(words[i])\n        space = space - len(words) + 1\n        return ' '.join(words) + ' ' * space\n",
            "def rearrange_spaces(sentence):\n    # Write your code here.\n    words = sentence.split()\n    count = 0\n    for word in words:\n        count += word.count(' ')\n    if count == 0:\n        return sentence\n    elif count % 2 == 0:\n        return ' '.join(words)\n    else:\n        return ' '.join(words[:len(words)//2]) + ' ' + ' '.join(words[len(words)//2+1:])\n",
            "def rearrange_spaces(sentence):\n    # Write your code here\n    sentence = sentence.strip()\n    words = sentence.split()\n    if len(words) == 1:\n        return sentence\n    spaces = 0\n    for word in words:\n        spaces += word.count(' ')\n    if spaces == 0:\n        return sentence\n    elif spaces % (len(words) - 1) == 0:\n        return ' '.join(words)\n    else:\n        return ' '.join(words) + ' ' * (spaces // (len(words) - 1))\n    return sentence\n"
        ],
        "results": 10
    },
    {
        "id": "1002",
        "source": "leetcodeTitles",
        "source_id": "1277",
        "url": "https://leetcode.com/problems/count-square-submatrices-with-all-ones/",
        "language": "python",
        "query": "Count Square Submatrices with All Ones",
        "snippets": [
            "def countSquares(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == 1:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = 0\n    ans = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for k in range(dp[i][j]):\n                ans += 1\n    return ans\n",
            "def count_squares(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == 1:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                for k in range(1, j + 1):\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j - k] + dp[i - k][j])\n    return sum(dp[-1])\n",
            "def count_squares(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == 1:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = 0\n    res = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            res += dp[i][j]\n            for k in range(1, min(i, j) + 1):\n                res += dp[i - k][j - k]\n    return res\n",
            "def count_squares(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == 1:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                for k in range(1, min(i, j) + 1):\n                    dp[i][j] = max(dp[i][j], dp[i - k][j - k] + dp[i][j - k])\n    return sum(dp[-1])\n",
            "def count_squares(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == 1:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return sum(sum(dp[i][j] ** 2 for j in range(1, n + 1)) for i in range(1, m + 1))\n",
            "def count_squares(matrix):\n    count = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 1:\n                count += 1\n                if i > 0 and j > 0:\n                    matrix[i][j] += min(matrix[i-1][j], matrix[i][j-1], matrix[i-1][j-1])\n    return count\n",
            "def countSquares(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    ans = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == 1:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                ans += dp[i][j]\n            else:\n                dp[i][j] = 0\n    return ans\n",
            "def count_submatrix(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                res += 1\n                for k in range(i, m):\n                    for l in range(j, n):\n                        if matrix[k][l] == 1:\n                            res += 1\n                        else:\n                            break\n                    else:\n                        continue\n                    break\n    return res\n",
            "def count_square_submatrices(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + \\\n                    matrix[i][j]\n    return sum(dp[-1])\n",
            "def count_submatrix(matrix):\n    \"\"\"\n    :param matrix: list of lists\n    :return: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i][j]\n    return dp[-1][-1]\n"
        ],
        "results": 10
    },
    {
        "id": "1003",
        "source": "leetcodeTitles",
        "source_id": "1684",
        "url": "https://leetcode.com/problems/count-the-number-of-consistent-strings/",
        "language": "python",
        "query": "Count the Number of Consistent Strings",
        "snippets": [
            "def consistent(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True\n",
            "def count_consistent_strings(s, t):\n    \"\"\"\n    Count the number of consistent strings in s and t.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            count += 1\n    return count\n",
            "def consistent_strings(s1, s2):\n    \"\"\"\n    Count the number of consistent strings in two strings.\n    \"\"\"\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n    return count\n",
            "def consistent_string(s):\n    \"\"\"\n    Count the number of consistent strings in a string.\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            count += 1\n    return count\n",
            "def consistent_strings(s, t):\n    \"\"\"\n    s: string\n    t: string\n    return: int\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            count += 1\n    return count\n",
            "def consistent_strings(s1, s2):\n    \"\"\"\n    s1 and s2 are two strings of equal length.\n    Return the number of consistent characters in s1 and s2.\n    \"\"\"\n    count = 0\n    for i in range(len(s1)):\n        if s1[i] == s2[i]:\n            count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1004",
        "source": "leetcodeTitles",
        "source_id": "1442",
        "url": "https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/",
        "language": "python",
        "query": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "snippets": [
            "def countTriplets(arr, xor):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] ^ arr[j] == xor:\n                count += 1\n    return count\n",
            "def countTriplets(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if arr[i]^arr[j]^arr[k] == 0:\n                    count += 1\n    return count\n",
            "def countTriplets(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i] ^ arr[j] ^ arr[k] == 0:\n                    count += 1\n    return count\n",
            "def countTriplets(arr, xor):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if arr[i]^arr[j]^arr[k] == xor:\n                    count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1005",
        "source": "leetcodeTitles",
        "source_id": "1534",
        "url": "https://leetcode.com/problems/count-good-triplets/",
        "language": "python",
        "query": "Count Good Triplets",
        "snippets": [
            "def countGoodTriplets(arr, a, b, c):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                if abs(arr[i] - arr[j]) <= a and abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:\n                    count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1006",
        "source": "leetcodeTitles",
        "source_id": "1399",
        "url": "https://leetcode.com/problems/count-largest-group/",
        "language": "python",
        "query": "Count Largest Group",
        "snippets": [
            "def count_largest_group(n):\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(n):\n        if a[i] == i:\n            c += 1\n    print(c)\n",
            "def count_largest_group(n):\n    if n < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(1, n + 1):\n            if i < 10:\n                count += 1\n            else:\n                count += len(str(i))\n        return count\n",
            "def count_largest_group(n):\n    \"\"\"\n    Count the largest group of consecutive numbers in a number.\n    \"\"\"\n    if n < 10:\n        return 1\n    else:\n        count = 1\n        while n > 0:\n            n, remainder = divmod(n, 10)\n            if remainder == 0:\n                count += 1\n            else:\n                break\n        return count\n",
            "def count_largest_group(n):\n    \"\"\"\n    Count the number of groups of consecutive identical digits in a number.\n    \"\"\"\n    if n < 10:\n        return 1\n    else:\n        return 1 + count_largest_group(n // 10)\n",
            "def count_largest_group(n):\n    \"\"\"\n    Count the largest group of consecutive numbers in a number.\n    \"\"\"\n    if n < 10:\n        return 1\n    else:\n        digits = [int(d) for d in str(n)]\n        groups = []\n        for i in range(len(digits)):\n            if i == 0:\n                groups.append(1)\n            else:\n                if digits[i] == digits[i-1]:\n                    groups[-1] += 1\n                else:\n                    groups.append(1)\n        return max(groups)\n",
            "def count_largest_group(n):\n    \"\"\"\n    Count the number of groups of consecutive identical digits in a number.\n    \"\"\"\n    if n < 10:\n        return 1\n    else:\n        count = 1\n        while n > 10:\n            if n % 10 == n // 10 % 10:\n                n //= 10\n                count += 1\n            else:\n                break\n        return count\n",
            "def count_largest_group(n):\n    \"\"\"\n    Count the number of groups of consecutive identical digits in a number.\n    \"\"\"\n    if n < 10:\n        return 1\n    else:\n        n = str(n)\n        count = 1\n        for i in range(1, len(n)):\n            if n[i] == n[i-1]:\n                count += 1\n            else:\n                count = 1\n        return count\n"
        ],
        "results": 10
    },
    {
        "id": "1007",
        "source": "leetcodeTitles",
        "source_id": "858",
        "url": "https://leetcode.com/problems/mirror-reflection/",
        "language": "python",
        "query": "Mirror Reflection",
        "snippets": [
            "def mirrorReflection(p, q):\n    \"\"\"\n    :type p: int\n    :type q: int\n    :rtype: int\n    \"\"\"\n    if p == q:\n        return 0\n    if p > q:\n        p, q = q, p\n    if p == 1:\n        return q\n    if q == 1:\n        return p\n    if p == 2:\n        return q - 1\n    if q == 2:\n        return p - 1\n    if p == 3:\n        return q - 2\n    if q == 3:\n        return p - 2\n    if p == 4:\n        return q - 3\n    if q == 4:\n        return p - 3\n    if p == 5:\n        return q - 4\n    if q == 5:\n        return p - 4\n    if p == 6:\n        return q - 5\n    if q == 6:\n        return p - 5\n    if p == 7:\n        return q - 6\n    if q == 7:\n        return p - 6\n    if p == 8:\n        return q - 7\n    if q == 8:\n        return p - 7\n    if p == 9:\n        return q - 8\n    if q == 9:\n        return p - 8\n    if p == 10:\n        return q - 9\n    if q == 10:\n        return p - 9\n    if p == 11:\n        return q - 10\n    if q == 11:\n        return p - 10\n    if p == 12:\n        return q - 11\n    if q == 12:\n        return p - 11\n    if p == 13:\n        return q - 12\n    if q == 13:\n        return p - 12\n    if p == 14:\n        return q - 13\n    if q == 14:\n        return p - 13\n    if p == 15:\n        return q - 14\n    if q == 15:\n        return p - 14\n    if p == 16:\n        return q - 15\n    if q == 16:\n        return p - 15\n    if p == 17:\n        return q - 16\n    if q == 17:\n        return p -\n",
            "def mirrorReflection(p, q):\n    if p == q:\n        return 1\n    if p > q:\n        p, q = q, p\n    if p == 1:\n        return 2\n    if q % 2 == 0:\n        return 2\n    return 1\n",
            "def mirrorReflection(p, q):\n    if p == q:\n        return 0\n    if p > q:\n        p, q = q, p\n    if p == 1:\n        return 1\n    if q % 2 == 0:\n        return 2\n    return 1 + mirrorReflection(p, q - 1)\n",
            "def mirrorReflection(p, q):\n    if p == q:\n        return 0\n    if p > q:\n        p, q = q, p\n    if p == 1:\n        return 1\n    if q == 1:\n        return 1\n    if p == 2:\n        return 2\n    if q == 2:\n        return 2\n    if p == 3:\n        return 3\n    if q == 3:\n        return 3\n    if p == 4:\n        return 4\n    if q == 4:\n        return 4\n    if p == 5:\n        return 5\n    if q == 5:\n        return 5\n    if p == 6:\n        return 6\n    if q == 6:\n        return 6\n    if p == 7:\n        return 7\n    if q == 7:\n        return 7\n    if p == 8:\n        return 8\n    if q == 8:\n        return 8\n    if p == 9:\n        return 9\n    if q == 9:\n        return 9\n    if p == 10:\n        return 10\n    if q == 10:\n        return 10\n    if p == 11:\n        return 11\n    if q == 11:\n        return 11\n    if p == 12:\n        return 12\n    if q == 12:\n        return 12\n    if p == 13:\n        return 13\n    if q == 13:\n        return 13\n    if p == 14:\n        return 14\n    if q == 14:\n        return 14\n    if p == 15:\n        return 15\n    if q == 15:\n        return 15\n    if p == 16:\n        return 16\n    if q == 16:\n        return 16\n    if p == 17:\n        return 17\n    if q == 17:\n        return 17\n    if p == 18:\n        return 18\n    if q == 18:\n        return 18\n    if p == 19:\n        return 19\n    if q == 19:\n        return 19\n    if p == 20:\n        return 20\n    if q == 20:\n        return 20\n    if p == 21:\n        return 21\n    if q == 21:\n        return 21\n",
            "def mirrorReflection(p, q):\n    if p == q:\n        return 1\n    if p > q:\n        p, q = q, p\n    if p % 2 == 0:\n        return 2\n    if q % 2 == 0:\n        return 0\n    return 1\n",
            "def mirrorReflection(p, q):\n    if p % 2 == 0:\n        if q % 2 == 0:\n            return 0\n        else:\n            return 1\n    else:\n        if q % 2 == 0:\n            return 2\n        else:\n            return 3\n",
            "def mirrorReflection(p, q):\n    if p == q:\n        return 1\n    if p > q:\n        p, q = q, p\n    if p % 2 == 0:\n        return 2 if q % 2 == 0 else 3\n    else:\n        return 2 if q % 2 == 0 else 1\n"
        ],
        "results": 10
    },
    {
        "id": "1008",
        "source": "leetcodeTitles",
        "source_id": "648",
        "url": "https://leetcode.com/problems/replace-words/",
        "language": "python",
        "query": "Replace Words",
        "snippets": [
            "def replace_words(dict, sentence):\n    for word in dict:\n        sentence = sentence.replace(word, dict[word])\n    return sentence\n",
            "def replace_words(dict, sentence):\n    for word in sentence.split():\n        if word in dict:\n            sentence = sentence.replace(word, dict[word])\n    return sentence\n",
            "def replace_words(dict, text):\n    for word in dict:\n        text = text.replace(word, dict[word])\n    return text\n",
            "def replace_words(dict_words, text):\n    \"\"\"\n    Replace words in text with their corresponding values in dict_words\n    \"\"\"\n    for word in dict_words:\n        text = text.replace(word, dict_words[word])\n    return text\n",
            "def replace_words(text, word_map):\n    \"\"\"\n    Replace words in a text with their equivalents in the word_map.\n    \"\"\"\n    for word in word_map:\n        text = text.replace(word, word_map[word])\n    return text\n"
        ],
        "results": 10
    },
    {
        "id": "1009",
        "source": "leetcodeTitles",
        "source_id": "189",
        "url": "https://leetcode.com/problems/rotate-array/",
        "language": "python",
        "query": "Rotate Array",
        "snippets": [
            "def rotate_array(arr):\n    return arr[1:] + [arr[0]]\n",
            "def rotate(arr, n):\n    for i in range(n):\n        arr.append(arr[0])\n        arr.pop(0)\n    return arr\n",
            "def rotate_array(arr, n):\n    return arr[n:] + arr[:n]\n",
            "def rotate(arr, k):\n    k = k % len(arr)\n    arr[:] = arr[-k:] + arr[:-k]\n    return arr\n",
            "def rotate(arr, k):\n    n = len(arr)\n    k = k % n\n    arr[:] = arr[n-k:] + arr[:n-k]\n    return arr\n",
            "def rotate_array(arr):\n    return arr[1:] + arr[:1]\n",
            "def rotate(arr):\n    return arr[1:] + arr[:1]\n"
        ],
        "results": 10
    },
    {
        "id": "1010",
        "source": "leetcodeTitles",
        "source_id": "1694",
        "url": "https://leetcode.com/problems/reformat-phone-number/",
        "language": "python",
        "query": "Reformat Phone Number",
        "snippets": [
            "def format_phone_number(number):\n    \"\"\"\n    :param number: string\n    :return: string\n    \"\"\"\n    number = number.replace('(', '')\n    number = number.replace(')', '')\n    number = number.replace('-', '')\n    number = number.replace(' ', '')\n    return number\n",
            "def format_phone_number(number):\n    \"\"\"\n    :param number: string\n    :return: string\n    \"\"\"\n    number = number.replace('-', '')\n    number = number.replace(' ', '')\n    number = number.replace('(', '')\n    number = number.replace(')', '')\n    if len(number) == 10:\n        return '({}) {}-{}'.format(number[0:3], number[3:6], number[6:10])\n    elif len(number) == 11:\n        return '({}) {}-{}'.format(number[0:3], number[3:7], number[7:11])\n    else:\n        return '({}) {}-{}'.format(number[0:3], number[3:6], number[6:10])\n",
            "def format_phone_number(number):\n    \"\"\"\n    :param number: string\n    :return: string\n    \"\"\"\n    number = number.replace('-', '')\n    number = number.replace(' ', '')\n    number = number.replace('(', '')\n    number = number.replace(')', '')\n    if len(number) == 10:\n        return '({}) {}-{}'.format(number[0:3], number[3:6], number[6:10])\n    elif len(number) == 11:\n        return '({}) {}-{}'.format(number[1:4], number[4:7], number[7:11])\n    else:\n        return '({}) {}-{}'.format(number[0:3], number[3:6], number[6:10])\n",
            "def format_phone_number(number):\n    \"\"\"\n    :param number: string\n    :return: string\n    \"\"\"\n    number = number.replace('-', '')\n    number = number.replace(' ', '')\n    number = number.replace('(', '')\n    number = number.replace(')', '')\n    if len(number) == 10:\n        return '({}) {}-{}'.format(number[0:3], number[3:6], number[6:])\n    elif len(number) == 11:\n        return '({}) {}-{}'.format(number[1:4], number[4:7], number[7:])\n    else:\n        return '({}) {}-{}'.format(number[0:3], number[3:6], number[6:])\n",
            "def format_phone_number(number):\n    \"\"\"\n    :param number: string\n    :return: string\n    \"\"\"\n    number = number.replace(' ', '')\n    number = number.replace('-', '')\n    number = number.replace('(', '')\n    number = number.replace(')', '')\n    if len(number) == 10:\n        return '({}) {}-{}'.format(number[0:3], number[3:6], number[6:10])\n    elif len(number) == 11:\n        return '({}) {}-{}'.format(number[0:3], number[3:7], number[7:11])\n    else:\n        return '({}) {}-{}'.format(number[0:3], number[3:6], number[6:10])\n",
            "def format_phone_number(number):\n    \"\"\"\n    Reformat a phone number in the format (xxx) xxx-xxxx\n    \"\"\"\n    return '({}) {}-{}'.format(number[:3], number[3:6], number[6:])\n",
            "def format_phone_number(number):\n    \"\"\"\n    Format a phone number in the format (xxx) xxx-xxxx\n    \"\"\"\n    # Strip all non-digits from the number\n    number = re.sub('\\D', '', number)\n    # Format the number\n    return f'({number[0:3]}) {number[3:6]}-{number[6:]}'\n",
            "def format_phone_number(number):\n    \"\"\"\n    :param number: string\n    :return: string\n    \"\"\"\n    # Strip all non-digits\n    number = number.replace('-', '').replace(' ', '')\n    # Check if number is 10 digits long\n    if len(number) != 10:\n        return \"0000000000\"\n    # Format number\n    return '({}) {}-{}'.format(number[:3], number[3:6], number[6:])\n"
        ],
        "results": 10
    },
    {
        "id": "1011",
        "source": "leetcodeTitles",
        "source_id": "322",
        "url": "https://leetcode.com/problems/coin-change/",
        "language": "python",
        "query": "Coin Change",
        "snippets": [
            "def coinChange(coins, amount):\n    dp = [amount + 1] * (amount + 1)\n    dp[0] = 0\n    for i in range(1, amount + 1):\n        for j in range(len(coins)):\n            if i >= coins[j]:\n                dp[i] = min(dp[i], dp[i - coins[j]] + 1)\n    return dp[amount] if dp[amount] != amount + 1 else -1\n",
            "def coin_change(cents):\n    coins = [25, 10, 5, 1]\n    count = 0\n    for coin in coins:\n        count += cents // coin\n        cents %= coin\n    return count\n",
            "def coin_change(c, n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if len(c) == 0:\n        return 0\n    return coin_change(c[1:], n) + coin_change(c, n - c[0])\n",
            "def coin_change(c, n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if c == []:\n        return 0\n    return coin_change(c[1:], n) + coin_change(c, n - c[0])\n",
            "def coin_change(c, n):\n    if n == 0:\n        return 1\n    elif n < 0:\n        return 0\n    elif c == []:\n        return 0\n    else:\n        return coin_change(c, n - c[0]) + coin_change(c[1:], n)\n",
            "def coin_change(n, coins):\n    \"\"\"\n    :param n: int\n    :param coins: list of int\n    :return: int\n    \"\"\"\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for c in coins:\n        for i in range(c, n + 1):\n            dp[i] += dp[i - c]\n    return dp[n]\n",
            "def coin_change(n, coins):\n    dp = [0] + [float('inf')] * n\n    for i in range(1, n + 1):\n        for j in coins:\n            if j <= i:\n                dp[i] = min(dp[i], dp[i - j] + 1)\n    return dp[-1] if dp[-1] != float('inf') else -1\n"
        ],
        "results": 10
    },
    {
        "id": "1012",
        "source": "leetcodeTitles",
        "source_id": "872",
        "url": "https://leetcode.com/problems/leaf-similar-trees/",
        "language": "python",
        "query": "Leaf-Similar Trees",
        "snippets": [
            "def leafSimilar(root1, root2):\n    def dfs(node):\n        if not node:\n            return []\n        if not node.left and not node.right:\n            return [node.val]\n        return dfs(node.left) + dfs(node.right)\n    return dfs(root1) == dfs(root2)\n",
            "def leafSimilar(root1, root2):\n    def dfs(root):\n        if not root:\n            return []\n        if not root.left and not root.right:\n            return [root.val]\n        return dfs(root.left) + dfs(root.right)\n    return dfs(root1) == dfs(root2)\n"
        ],
        "results": 10
    },
    {
        "id": "1013",
        "source": "leetcodeTitles",
        "source_id": "2114",
        "url": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/",
        "language": "python",
        "query": "Maximum Number of Words Found in Sentences",
        "snippets": [
            "def max_words(sentence):\n    \"\"\"\n    Returns the maximum number of words found in a sentence.\n    \"\"\"\n    words = sentence.split()\n    return len(words)\n",
            "def max_words(sentence):\n    words = sentence.split()\n    return len(words)\n",
            "def max_words(sentence):\n    words = sentence.split()\n    return max(len(word) for word in words)\n",
            "def max_words(sentences):\n    \"\"\"\n    Returns the maximum number of words found in a sentence.\n    \"\"\"\n    max_words = 0\n    for sentence in sentences:\n        if len(sentence) > max_words:\n            max_words = len(sentence)\n    return max_words\n"
        ],
        "results": 10
    },
    {
        "id": "1014",
        "source": "leetcodeTitles",
        "source_id": "524",
        "url": "https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/",
        "language": "python",
        "query": "Longest Word in Dictionary Through Deleting",
        "snippets": [
            "def longest_word(string):\n    words = string.split()\n    longest = \"\"\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n",
            "def longestWord(dictionary):\n    longest = \"\"\n    for word in dictionary:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n",
            "def findLongestWord(s, d):\n    \"\"\"\n    :type s: str\n    :type d: List[str]\n    :rtype: str\n    \"\"\"\n    d.sort(key=len, reverse=True)\n    for word in d:\n        if len(word) <= len(s):\n            if isSubsequence(word, s):\n                return word\n    return \"\"\n",
            "def longestWord(d, word):\n    if len(word) == 0:\n        return \"\"\n    if len(word) == 1:\n        return word\n    for i in range(len(word)):\n        if word[i] in d:\n            d.remove(word[i])\n            return longestWord(d, word[:i] + word[i+1:])\n    return word\n",
            "def longestWord(d, s):\n    d = sorted(d, key=len, reverse=True)\n    for word in d:\n        if word in s:\n            return word\n    return ''\n",
            "def longestWord(dict, str):\n    # Write your code here.\n    res = \"\"\n    for i in range(len(str)):\n        if str[i] in dict:\n            temp = longestWord(dict, str[:i] + str[i+1:])\n            if len(temp) > len(res):\n                res = temp\n    return res if res else str\n",
            "def longestWord(d):\n    d.sort(key=len, reverse=True)\n    return d[0]\n",
            "def longestWord(dictionary, string):\n    \"\"\"\n    :type dictionary: List[str]\n    :type string: str\n    :rtype: str\n    \"\"\"\n    # Create a set of all the words in the dictionary\n    dictionary = set(dictionary)\n    # Create a set of all the words in the string\n    string = set(string)\n    # Find the difference between the two sets\n    difference = string - dictionary\n    # If the difference is empty, return the string\n    if not difference:\n        return string\n    # Otherwise, return the longest word in the difference\n    return max(difference, key=len)\n",
            "def longest_word(d, word):\n    \"\"\"\n    Given a dictionary of words and a string of letters,\n    return the longest word in the dictionary that can be\n    formed by deleting one letter from the string.\n    \"\"\"\n    if len(word) == 0:\n        return \"\"\n    if word in d:\n        return word\n    for i in range(len(word)):\n        if word[:i] + word[i+1:] in d:\n            return longest_word(d, word[:i] + word[i+1:])\n    return \"\"\n"
        ],
        "results": 10
    },
    {
        "id": "1015",
        "source": "leetcodeTitles",
        "source_id": "1460",
        "url": "https://leetcode.com/problems/make-two-arrays-equal-by-reversing-sub-arrays/",
        "language": "python",
        "query": "Make Two Arrays Equal by Reversing Sub-arrays",
        "snippets": [
            "def make_equal(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[len(arr2) - 1 - i]:\n            return False\n    return True\n",
            "def make_equal(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[len(arr2) - i - 1]:\n            return False\n    return True\n",
            "def equalize_by_reversing(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return False\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[len(arr2) - 1 - i]:\n            return False\n    return True\n"
        ],
        "results": 10
    },
    {
        "id": "1016",
        "source": "leetcodeTitles",
        "source_id": "802",
        "url": "https://leetcode.com/problems/find-eventual-safe-states/",
        "language": "python",
        "query": "Find Eventual Safe States",
        "snippets": [
            "def find_safe_states(graph):\n    # Write your code here.\n    visited = set()\n    queue = []\n    for node in graph:\n        if node not in visited:\n            queue.append(node)\n            visited.add(node)\n            while queue:\n                curr = queue.pop(0)\n                for neighbor in graph[curr]:\n                    if neighbor not in visited:\n                        queue.append(neighbor)\n                        visited.add(neighbor)\n            if len(visited) == len(graph):\n                return visited\n            else:\n                return None\n    return visited\n",
            "def is_safe(graph, node, visited):\n    for n in graph[node]:\n        if n not in visited:\n            return False\n    return True\n",
            "def find_safe_states(graph):\n    # Write your code here\n    # Initialize the visited array\n    visited = [False] * len(graph)\n    # Initialize the queue\n    queue = []\n    # Append the first node to the queue\n    queue.append(0)\n    # Mark the first node as visited\n    visited[0] = True\n    # While the queue is not empty\n    while queue:\n        # Pop the first node from the queue\n        node = queue.pop(0)\n        # If the node is a safe state\n        if is_safe(graph, node, visited):\n            # Print the node\n            print(node)\n        # For each neighbor of the node\n        for neighbor in graph[node]:\n            # If the neighbor is not visited\n            if not visited[neighbor]:\n                # Append the neighbor to the queue\n                queue.append(neighbor)\n                # Mark the neighbor as visited\n                visited[neighbor] = True\n    # If the graph is not connected\n    if not is_connected(graph, visited):\n        # Print -1\n        print(-1)\n",
            "def find_safe_states(graph):\n    # Write your code here.\n    #graph = {'A': ['B', 'C'], 'B': ['A', 'C', 'D'], 'C': ['A', 'B', 'D', 'E'], 'D': ['B', 'C', 'E', 'F'], 'E': ['C', 'D', 'F'], 'F': ['D', 'E']}\n    #graph = {'A': ['B', 'C'], 'B': ['A', 'C', 'D'], 'C': ['A', 'B', 'D', 'E'], 'D': ['B', 'C', 'E', 'F'], 'E': ['C', 'D', 'F'], 'F': ['D', 'E']}\n    #graph = {'A': ['B', 'C'], 'B': ['A', 'C', 'D'], 'C': ['A', 'B', 'D', 'E'], 'D': ['B', 'C', 'E', 'F'], 'E': ['C', 'D', 'F'], 'F': ['D', 'E']}\n    #graph = {'A': ['B', 'C'], 'B': ['A', 'C', 'D'], 'C': ['A', 'B', 'D', 'E'], 'D': ['B', 'C', 'E', 'F'], 'E': ['C', 'D', 'F'], 'F': ['D', 'E']}\n    #graph = {'A': ['B', 'C'], 'B': ['A', 'C', 'D'], 'C': ['A', 'B', 'D', 'E'], 'D': ['B', 'C', 'E', 'F'], 'E': ['C', 'D', 'F'], 'F': ['D', 'E']}\n    #graph = {'A': ['B', 'C'], 'B': ['A', 'C', 'D'], 'C': ['A', 'B', 'D', 'E'], 'D': ['B', 'C', 'E', 'F'], 'E\n",
            "def find_eventual_safe_states(graph, max_iterations=100):\n    \"\"\"\n    Find eventual safe states in a graph.\n    \"\"\"\n    # Initialize a list of visited nodes\n    visited = []\n    # Initialize a list of safe nodes\n    safe = []\n    # Initialize a list of unsafe nodes\n    unsafe = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list_list_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list_list_list_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list_list_list_list_list_list_list_list = []\n    # Initialize a list of unsafe nodes\n    unsafe_nodes_list_list_list_list_list_list_list\n",
            "def find_eventual_safe_states(graph):\n    # Implement this placeholder to return a list of safe states.\n    return []  # Change me!\n",
            "def find_safe_states(graph):\n    # Write your code here.\n    # The graph is represented as a list of tuples.\n    # For example, the following graph:\n    #\n    # [\n    #   ('A', 'B'),\n    #   ('A', 'C'),\n    #   ('B', 'C'),\n    #   ('B', 'D'),\n    #   ('C', 'D')\n    # ]\n    #\n    # is represented as:\n    #\n    # graph = [\n    #   ('A', 'B'),\n    #   ('A', 'C'),\n    #   ('B', 'C'),\n    #   ('B', 'D'),\n    #   ('C', 'D')\n    # ]\n    #\n    # Your function should return a list of all the safe states.\n    # A state is safe if it is reachable from every other state.\n    #\n    # For example, the following graph:\n    #\n    # [\n    #   ('A', 'B'),\n    #   ('A', 'C'),\n    #   ('B', 'C'),\n    #   ('B', 'D'),\n    #   ('C', 'D')\n    # ]\n    #\n    # is represented as:\n    #\n    # graph = [\n    #   ('A', 'B'),\n    #   ('A', 'C'),\n    #   ('B', 'C'),\n    #   ('B', 'D'),\n    #   ('C', 'D')\n    # ]\n    #\n    # is not safe because:\n    #\n    #   - 'A' is not reachable from 'D'\n    #   - 'B' is not reachable from 'D'\n    #   - 'C' is not reachable from 'D'\n    #\n    # So your function should return the list ['A', 'B', 'C', 'D'].\n    #\n    # Hint: You can use the following algorithm to find the safe states:\n    #\n    # 1. Start with the initial state.\n    # 2. Add the initial state to the list of visited states.\n    # 3\n",
            "def find_safe_states(graph):\n    # Implement your code here\n    # Your code should return a list of safe states.\n    # Safe states are the states that are not in the cycle.\n    # The list should be in the same order as the list of states in the graph.\n    # The list should not contain any duplicates.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph.\n    # The list should not contain any states that are not in the cycle.\n    # The list should not contain any states that are not in the graph\n",
            "def find_eventual_safe_states(graph):\n    # Implement this placeholder code\n    return True\n"
        ],
        "results": 9
    },
    {
        "id": "1017",
        "source": "leetcodeTitles",
        "source_id": "506",
        "url": "https://leetcode.com/problems/relative-ranks/",
        "language": "python",
        "query": "Relative Ranks",
        "snippets": [
            "def relative_ranks(n):\n    n.sort()\n    n.reverse()\n    for i in range(len(n)):\n        n[i] = str(n[i])\n    for i in range(len(n)):\n        n[i] = n[i] + \" \" + str(i+1)\n    for i in range(len(n)):\n        n[i] = n[i].replace(\"1\", \"Gold Medal\")\n        n[i] = n[i].replace(\"2\", \"Silver Medal\")\n        n[i] = n[i].replace(\"3\", \"Bronze Medal\")\n    return n\n",
            "def relative_ranks(n):\n    n.sort()\n    n.reverse()\n    for i in range(len(n)):\n        n[i] = str(n[i])\n    for i in range(len(n)):\n        n[i] = n[i] + \" \" + str(i+1)\n    n.sort()\n    for i in range(len(n)):\n        n[i] = int(n[i].split()[1])\n    for i in range(len(n)):\n        n[i] = str(n[i])\n    for i in range(len(n)):\n        n[i] = n[i] + \" \" + n[i]\n    n.sort()\n    for i in range(len(n)):\n        n[i] = n[i].split()[1]\n    for i in range(len(n)):\n        n[i] = n[i] + \" \" + n[i]\n    n.sort()\n    for i in range(len(n)):\n        n[i] = n[i].split()[1]\n    for i in range(len(n)):\n        n[i] = n[i] + \" \" + n[i]\n    n.sort()\n    for i in range(len(n)):\n        n[i] = n[i].split()[1]\n    for i in range(len(n)):\n        n[i] = n[i] + \" \" + n[i]\n    n.sort()\n    for i in range(len(n)):\n        n[i] = n[i].split()[1]\n    for i in range(len(n)):\n        n[i] = n[i] + \" \" + n[i]\n    n.sort()\n    for i in range(len(n)):\n        n[i] = n[i].split()[1]\n    for i in range(len(n)):\n        n[i] = n[i] + \" \" + n[i]\n    n.sort\n",
            "def relative_ranks(numbers):\n    numbers = sorted(numbers, reverse=True)\n    ranks = [str(i+1) for i in range(len(numbers))]\n    for i in range(len(numbers)):\n        numbers[i] = ranks[i]\n    return numbers\n",
            "def relative_ranks(numbers):\n    # your code here\n    numbers = sorted(numbers, reverse=True)\n    ranks = []\n    for i in range(len(numbers)):\n        if i == 0:\n            ranks.append('Gold Medal')\n        elif i == 1:\n            ranks.append('Silver Medal')\n        elif i == 2:\n            ranks.append('Bronze Medal')\n        else:\n            ranks.append(str(i+1))\n    return ranks\n",
            "def relative_ranks(numbers):\n    numbers = sorted(numbers, reverse=True)\n    ranks = [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"] + [str(i+1) for i in range(len(numbers)-3)]\n    return [ranks[numbers.index(i)] for i in numbers]\n",
            "def relativeRanks(n, arr):\n    # Complete this function\n    arr.sort(reverse=True)\n    rank = [\"Gold Medal\", \"Silver Medal\", \"Bronze Medal\"] + [str(i+1) for i in range(n-3)]\n    return [rank[arr.index(i)] for i in arr]\n",
            "def relative_ranks(n):\n    n.sort()\n    n.reverse()\n    rank = [0] * len(n)\n    for i in range(len(n)):\n        rank[n.index(n[i])] = i + 1\n    for i in range(len(n)):\n        if rank[i] == 1:\n            rank[i] = 'Gold Medal'\n        elif rank[i] == 2:\n            rank[i] = 'Silver Medal'\n        elif rank[i] == 3:\n            rank[i] = 'Bronze Medal'\n        else:\n            rank[i] = str(rank[i])\n    return rank\n",
            "def relativeRanks(n, A):\n    A.sort()\n    A.reverse()\n    for i in range(len(A)):\n        if i == 0:\n            A[i] = 'Gold Medal'\n        elif i == 1:\n            A[i] = 'Silver Medal'\n        elif i == 2:\n            A[i] = 'Bronze Medal'\n        else:\n            A[i] = str(i+1)\n    return A\n",
            "def relativeRanks(n, arr):\n    # Complete this function\n    arr = sorted(arr, reverse=True)\n    ranks = [1] * n\n    for i in range(1, n):\n        if arr[i] == arr[i-1]:\n            ranks[i] = ranks[i-1]\n        else:\n            ranks[i] = ranks[i-1] + 1\n    for i in range(n):\n        if ranks[i] == 1:\n            ranks[i] = 'Gold Medal'\n        elif ranks[i] == 2:\n            ranks[i] = 'Silver Medal'\n        elif ranks[i] == 3:\n            ranks[i] = 'Bronze Medal'\n        else:\n            ranks[i] = str(ranks[i])\n    return ranks\n"
        ],
        "results": 10
    },
    {
        "id": "1018",
        "source": "leetcodeTitles",
        "source_id": "1157",
        "url": "https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/",
        "language": "python",
        "query": "Number of Dice Rolls With Target Sum",
        "snippets": [
            "def num_dice_rolls(dice_sides, target_sum):\n    \"\"\"\n    :param dice_sides: int\n    :param target_sum: int\n    :return: int\n    \"\"\"\n    if dice_sides < 1 or target_sum < 1:\n        return 0\n    if target_sum > dice_sides * 6:\n        return 0\n    if target_sum == 1:\n        return 1\n    if target_sum == 2:\n        return 2\n    if target_sum == 3:\n        return 4\n    if target_sum == 4:\n        return 7\n    if target_sum == 5:\n        return 13\n    if target_sum == 6:\n        return 24\n    if target_sum == 7:\n        return 44\n    if target_sum == 8:\n        return 81\n    if target_sum == 9:\n        return 149\n    if target_sum == 10:\n        return 274\n    if target_sum == 11:\n        return 504\n    if target_sum == 12:\n        return 927\n    if target_sum == 13:\n        return 1705\n    if target_sum == 14:\n        return 3136\n    if target_sum == 15:\n        return 5760\n    if target_sum == 16:\n        return 10240\n    if target_sum == 17:\n        return 18432\n    if target_sum == 18:\n        return 32768\n    if target_sum == 19:\n        return 59049\n    if target_sum == 20:\n        return 104800\n    if target_sum == 21:\n        return 188416\n    if target_sum == 22:\n        return 356543\n    if target_sum == 23:\n        return 627456\n    if target_sum == 24:\n        return 1159808\n    if target_sum == 25:\n        return 1934121\n    if target_sum == 26:\n        return 3896238\n    if target_sum == 27:\n        return 7071521\n    if target_sum == 28:\n        return 13463904\n    if target_sum == 29:\n        return 23279808\n    if target_\n",
            "def num_dice_rolls(dice_sides, target_sum):\n    \"\"\"\n    :param dice_sides: int\n    :param target_sum: int\n    :return: int\n    \"\"\"\n    if target_sum < 1 or dice_sides < 1:\n        return 0\n    if target_sum == 1:\n        return 1\n    if target_sum == dice_sides:\n        return 1\n    if target_sum > dice_sides:\n        return 0\n    if target_sum == 2:\n        return 1\n    if target_sum == 3:\n        return 2\n    if target_sum == 4:\n        return 4\n    if target_sum == 5:\n        return 7\n    if target_sum == 6:\n        return 13\n    if target_sum == 7:\n        return 24\n    if target_sum == 8:\n        return 44\n    if target_sum == 9:\n        return 81\n    if target_sum == 10:\n        return 149\n    if target_sum == 11:\n        return 274\n    if target_sum == 12:\n        return 504\n    if target_sum == 13:\n        return 810\n    if target_sum == 14:\n        return 1390\n    if target_sum == 15:\n        return 2197\n    if target_sum == 16:\n        return 3571\n    if target_sum == 17:\n        return 5148\n    if target_sum == 18:\n        return 7462\n    if target_sum == 19:\n        return 10922\n    if target_sum == 20:\n        return 17714\n    if target_sum == 21:\n        return 28657\n    if target_sum == 22:\n        return 46368\n    if target_sum == 23:\n        return 72401\n    if target_sum == 24:\n        return 113490\n    if target_sum == 25:\n        return 177147\n    if target_sum == 26:\n        return 286572\n    if target_sum == 27:\n        return 463689\n    if target_sum == 28:\n        return 724010\n    if target_sum == 29:\n        return 11\n",
            "def num_dice_rolls(dice_sides, target_sum):\n    \"\"\"\n    :param dice_sides: int\n    :param target_sum: int\n    :return: int\n    \"\"\"\n    if target_sum < 1 or dice_sides < 1:\n        return 0\n    if target_sum == 1:\n        return 1\n    if target_sum == 2:\n        return dice_sides\n    if target_sum == 3:\n        return dice_sides * (dice_sides - 1) // 2\n    if target_sum == 4:\n        return dice_sides * dice_sides\n    if target_sum == 5:\n        return dice_sides * (dice_sides + 1) // 2\n    if target_sum == 6:\n        return dice_sides * (dice_sides + 1) * (dice_sides + 2) // 6\n    if target_sum == 7:\n        return dice_sides * (dice_sides + 1) * (dice_sides + 2) // 2\n    if target_sum == 8:\n        return dice_sides * (dice_sides + 1) * (dice_sides + 2) * (dice_sides + 3) // 24\n    if target_sum == 9:\n        return dice_sides * (dice_sides + 1) * (dice_sides + 2) * (dice_sides + 3) // 2\n    if target_sum == 10:\n        return dice_sides * (dice_sides + 1) * (dice_sides + 2) * (dice_sides + 3) * (dice_sides + 4) // 120\n    if target_sum == 11:\n        return dice_sides * (dice_sides + 1) * (dice_sides + 2) * (dice_sides + 3) * (dice_sides + 4) // 2\n    if target_sum == 12:\n        return dice_sides * (dice_sides + 1) * (dice_sides + 2)\n",
            "def num_dice_rolls(dice_sides, target_sum):\n    \"\"\"\n    :param dice_sides: int\n    :param target_sum: int\n    :return: int\n    \"\"\"\n    if dice_sides < 1 or target_sum < 1:\n        return 0\n    if target_sum > dice_sides * 6:\n        return 0\n    if target_sum == dice_sides * 6:\n        return 1\n    if target_sum < dice_sides:\n        return 0\n    if target_sum == dice_sides:\n        return 1\n    if target_sum == dice_sides * 2:\n        return 2\n    if target_sum == dice_sides * 3:\n        return 3\n    if target_sum == dice_sides * 4:\n        return 4\n    if target_sum == dice_sides * 5:\n        return 5\n    if target_sum == dice_sides * 6:\n        return 6\n    if target_sum == dice_sides * 7:\n        return 7\n    if target_sum == dice_sides * 8:\n        return 8\n    if target_sum == dice_sides * 9:\n        return 9\n    if target_sum == dice_sides * 10:\n        return 10\n    if target_sum == dice_sides * 11:\n        return 11\n    if target_sum == dice_sides * 12:\n        return 12\n    if target_sum == dice_sides * 13:\n        return 13\n    if target_sum == dice_sides * 14:\n        return 14\n    if target_sum == dice_sides * 15:\n        return 15\n    if target_sum == dice_sides * 16:\n        return 16\n    if target_sum == dice_sides * 17:\n        return 17\n    if target_sum == dice_sides * 18:\n        return 18\n    if target_sum == dice_sides * 19:\n        return 19\n    if target_sum == dice_sides * 20:\n        return 20\n    if target_sum == dice_sides * 21:\n        return 21\n",
            "def numRollsToTarget(d: int, f: int, target: int) -> int:\n    dp = [[0 for _ in range(target + 1)] for _ in range(d + 1)]\n    for i in range(1, d + 1):\n        for j in range(1, target + 1):\n            if j >= f:\n                dp[i][j] = dp[i - 1][j - f] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[d][target]\n",
            "def num_dice_rolls(dice_sides, target_sum):\n    if target_sum < 1 or dice_sides < 1:\n        return 0\n    if target_sum == 1:\n        return 1\n    if target_sum == 2:\n        return 1\n    if target_sum == 3:\n        return 1\n    if target_sum == 4:\n        return 1\n    if target_sum == 5:\n        return 1\n    if target_sum == 6:\n        return 1\n    if target_sum == 7:\n        return 1\n    if target_sum == 8:\n        return 1\n    if target_sum == 9:\n        return 1\n    if target_sum == 10:\n        return 1\n    if target_sum == 11:\n        return 1\n    if target_sum == 12:\n        return 1\n    if target_sum == 13:\n        return 1\n    if target_sum == 14:\n        return 1\n    if target_sum == 15:\n        return 1\n    if target_sum == 16:\n        return 1\n    if target_sum == 17:\n        return 1\n    if target_sum == 18:\n        return 1\n    if target_sum == 19:\n        return 1\n    if target_sum == 20:\n        return 1\n    if target_sum == 21:\n        return 1\n    if target_sum == 22:\n        return 1\n    if target_sum == 23:\n        return 1\n    if target_sum == 24:\n        return 1\n    if target_sum == 25:\n        return 1\n    if target_sum == 26:\n        return 1\n    if target_sum == 27:\n        return 1\n    if target_sum == 28:\n        return 1\n    if target_sum == 29:\n        return 1\n    if target_sum == 30:\n        return 1\n    if target_sum == 31:\n        return 1\n    if target_sum == 32:\n        return 1\n    if target_sum == 33:\n        return 1\n    if target_sum == 34:\n        return 1\n    if target_sum == 35:\n        return 1\n    if target_sum\n",
            "def num_rolls_with_target_sum(dice_sides, target_sum):\n    \"\"\"\n    :param dice_sides: int\n    :param target_sum: int\n    :return: int\n    \"\"\"\n    if target_sum > dice_sides * 6 or target_sum < 0:\n        return 0\n    if target_sum == 0:\n        return 1\n    if target_sum == 1:\n        return 1\n    if target_sum == 2:\n        return 1\n    if target_sum == 3:\n        return 1\n    if target_sum == 4:\n        return 1\n    if target_sum == 5:\n        return 1\n    if target_sum == 6:\n        return 1\n    if target_sum == 7:\n        return 1\n    if target_sum == 8:\n        return 1\n    if target_sum == 9:\n        return 1\n    if target_sum == 10:\n        return 1\n    if target_sum == 11:\n        return 1\n    if target_sum == 12:\n        return 1\n    if target_sum == 13:\n        return 1\n    if target_sum == 14:\n        return 1\n    if target_sum == 15:\n        return 1\n    if target_sum == 16:\n        return 1\n    if target_sum == 17:\n        return 1\n    if target_sum == 18:\n        return 1\n    if target_sum == 19:\n        return 1\n    if target_sum == 20:\n        return 1\n    if target_sum == 21:\n        return 1\n    if target_sum == 22:\n        return 1\n    if target_sum == 23:\n        return 1\n    if target_sum == 24:\n        return 1\n    if target_sum == 25:\n        return 1\n    if target_sum == 26:\n        return 1\n    if target_sum == 27:\n        return 1\n    if target_sum == 28:\n        return 1\n    if target_sum == 29:\n        return 1\n    if target_sum == 30:\n        return 1\n    if target_sum == 31:\n        return 1\n    if target_sum ==\n",
            "def num_dice_rolls(dice_sides, target_sum):\n    if target_sum > dice_sides * 6:\n        return 0\n    if target_sum == 0:\n        return 1\n    if target_sum == 1:\n        return 0\n    if target_sum == 2:\n        return 1\n    if target_sum == 3:\n        return 2\n    if target_sum == 4:\n        return 3\n    if target_sum == 5:\n        return 4\n    if target_sum == 6:\n        return 5\n    if target_sum == 7:\n        return 6\n    if target_sum == 8:\n        return 7\n    if target_sum == 9:\n        return 8\n    if target_sum == 10:\n        return 9\n    if target_sum == 11:\n        return 10\n    if target_sum == 12:\n        return 11\n    if target_sum == 13:\n        return 12\n    if target_sum == 14:\n        return 13\n    if target_sum == 15:\n        return 14\n    if target_sum == 16:\n        return 15\n    if target_sum == 17:\n        return 16\n    if target_sum == 18:\n        return 17\n    if target_sum == 19:\n        return 18\n    if target_sum == 20:\n        return 19\n    if target_sum == 21:\n        return 20\n    if target_sum == 22:\n        return 21\n    if target_sum == 23:\n        return 22\n    if target_sum == 24:\n        return 23\n    if target_sum == 25:\n        return 24\n    if target_sum == 26:\n        return 25\n    if target_sum == 27:\n        return 26\n    if target_sum == 28:\n        return 27\n    if target_sum == 29:\n        return 28\n    if target_sum == 30:\n        return 29\n    if target_sum == 31:\n        return 30\n    if target_sum == 32:\n        return 31\n    if target_sum == 33:\n        return 32\n    if target_sum == 34:\n        return 33\n    if target_sum == 35\n",
            "def num_dice_rolls(dice_sides, target_sum):\n    if target_sum > dice_sides * 6:\n        return 0\n    if target_sum == 1:\n        return 1\n    if target_sum == 2:\n        return dice_sides\n    if target_sum == 3:\n        return dice_sides * 2\n    if target_sum == 4:\n        return dice_sides * 3\n    if target_sum == 5:\n        return dice_sides * 4\n    if target_sum == 6:\n        return dice_sides * 5\n    if target_sum == 7:\n        return dice_sides * 6\n    if target_sum == 8:\n        return dice_sides * 7\n    if target_sum == 9:\n        return dice_sides * 8\n    if target_sum == 10:\n        return dice_sides * 9\n    if target_sum == 11:\n        return dice_sides * 10\n    if target_sum == 12:\n        return dice_sides * 11\n    if target_sum == 13:\n        return dice_sides * 12\n    if target_sum == 14:\n        return dice_sides * 13\n    if target_sum == 15:\n        return dice_sides * 14\n    if target_sum == 16:\n        return dice_sides * 15\n    if target_sum == 17:\n        return dice_sides * 16\n    if target_sum == 18:\n        return dice_sides * 17\n    if target_sum == 19:\n        return dice_sides * 18\n    if target_sum == 20:\n        return dice_sides * 19\n    if target_sum == 21:\n        return dice_sides * 20\n    if target_sum == 22:\n        return dice_sides * 21\n    if target_sum == 23:\n        return dice_sides * 22\n    if target_sum == 24:\n        return dice_sides * 23\n    if target_sum == 25:\n        return dice_sides * 24\n    if target_sum == 26:\n        return dice_sides * 25\n"
        ],
        "results": 10
    },
    {
        "id": "1019",
        "source": "leetcodeTitles",
        "source_id": "949",
        "url": "https://leetcode.com/problems/largest-time-for-given-digits/",
        "language": "python",
        "query": "Largest Time for Given Digits",
        "snippets": [
            "def largestTimeFromDigits(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: str\n    \"\"\"\n    ans = \"\"\n    for i in range(4):\n        for j in range(4):\n            if i != j:\n                for k in range(4):\n                    if i != k and j != k:\n                        for l in range(4):\n                            if i != l and j != l and k != l:\n                                if A[i] * 10 + A[j] < 24 and A[k] * 10 + A[l] < 60:\n                                    ans = str(A[i]) + str(A[j]) + \":\" + str(A[k]) + str(A[l])\n    return ans\n",
            "def largestTimeFromDigits(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: str\n    \"\"\"\n    A.sort()\n    if A[0] > 2:\n        return \"\"\n    if A[0] == 2 and A[1] > 3:\n        return \"\"\n    if A[2] > 5:\n        return \"\"\n    if A[3] > 5:\n        return \"\"\n    if A[0] == 2 and A[1] == 3 and A[2] == 4 and A[3] == 5:\n        return \"23:59\"\n    if A[0] == 2 and A[1] == 3 and A[2] == 4:\n        return \"23:4\"\n    if A[0] == 2 and A[1] == 3:\n        return \"23:0\" + str(A[2]) + str(A[3])\n    if A[0] == 2:\n        return \"2\" + str(A[1]) + \":\" + str(A[2]) + str(A[3])\n    return str(A[0]) + \":\" + str(A[1]) + str(A[2]) + str(A[3])\n",
            "def largest_time(arr):\n    \"\"\"\n    Given an array of 4 digits, return the largest 24 hour time that can be\n    made.\n\n    >>> largest_time([1, 2, 3, 4])\n    '23:41'\n    >>> largest_time([5, 5, 5, 5])\n    'Error'\n    >>> largest_time([0, 0, 0, 0])\n    '00:00'\n    >>> largest_time([0, 0, 1, 0])\n    '10:00'\n    >>> largest_time([2, 0, 4, 0])\n    '24:04'\n    >>> largest_time([5, 5, 5, 5])\n    'Error'\n    \"\"\"\n    # Create a list of all possible times\n    times = []\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            for k in range(len(arr)):\n                for l in range(len(arr)):\n                    if i != j and i != k and i != l and j != k and j != l and k != l:\n                        times.append(str(arr[i]) + str(arr[j]) + ':' + str(arr[k]) + str(arr[l]))\n    # Find the largest time\n    largest = 0\n    for time in times:\n        if int(time[:2]) < 24 and int(time[3:]) < 60:\n            if int(time[:2]) * 60 + int(time[3:]) > largest:\n                largest = int(time[:2]) * 60 + int(time[3:])\n    # Return the largest time\n    if largest == 0:\n        return '00:00'\n    else:\n        return str(largest // 60) + ':' + str(largest % 60)\n",
            "def largestTimeFromDigits(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: str\n    \"\"\"\n    A.sort()\n    A.reverse()\n    for i in range(4):\n        for j in range(4):\n            if i != j:\n                for k in range(4):\n                    if i != k and j != k:\n                        for l in range(4):\n                            if i != l and j != l and k != l:\n                                if A[i] * 10 + A[j] < 24 and A[k] * 10 + A[l] < 60:\n                                    return str(A[i]) + str(A[j]) + ':' + str(A[k]) + str(A[l])\n    return ''\n",
            "def largestTimeFromDigits(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: str\n    \"\"\"\n    A.sort()\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                for k in range(3):\n                    if i != k and j != k:\n                        for l in range(3):\n                            if i != l and j != l and k != l:\n                                if A[i] * 10 + A[j] < 24 and A[k] * 10 + A[l] < 60:\n                                    return str(A[i]) + str(A[j]) + \":\" + str(A[k]) + str(A[l])\n    return \"\"\n",
            "def largestTimeFromDigits(A):\n    A.sort()\n    for i in range(len(A) - 1, -1, -1):\n        if A[i] > 2:\n            break\n    else:\n        return '00:00'\n    for j in range(len(A) - 1, -1, -1):\n        if A[j] > 5:\n            break\n    else:\n        return '00:00'\n    for k in range(len(A) - 1, -1, -1):\n        if A[k] > 5:\n            break\n    else:\n        return '00:00'\n    for l in range(len(A) - 1, -1, -1):\n        if A[l] > 5:\n            break\n    else:\n        return '00:00'\n    return '{:02d}:{:02d}'.format(A[i] * 10 + A[j], A[k] * 10 + A[l])\n",
            "def largest_time(arr):\n    \"\"\"\n    Given an array of 4 digits, return the largest 24-hour time that can be made.\n    A valid time has the format HH:MM, where HH is between 00 and 23, and MM is\n    between 00 and 59. The largest valid time is 23:59.\n    Input: arr = [1, 2, 3, 4]\n    Output: \"23:41\"\n    \"\"\"\n    arr.sort()\n    arr.reverse()\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                if i != j and i != k and j != k:\n                    hh = str(arr[i]) + str(arr[j])\n                    mm = str(arr[k]) + str(arr[i])\n                    if hh <= \"23\" and mm <= \"59\":\n                        return hh + \":\" + mm\n    return \"\"\n",
            "def largest_time(arr):\n    # your code here\n    arr.sort()\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] > 2:\n            break\n    for j in range(len(arr)-1, -1, -1):\n        if arr[j] > 5:\n            break\n    for k in range(len(arr)-1, -1, -1):\n        if arr[k] > 5:\n            break\n    for l in range(len(arr)-1, -1, -1):\n        if arr[l] > 5:\n            break\n    if i == -1:\n        return -1\n    if j == -1:\n        return -1\n    if k == -1:\n        return -1\n    if l == -1:\n        return -1\n    return str(arr[i]) + str(arr[j]) + \":\" + str(arr[k]) + str(arr[l])\n",
            "def largest_time(arr):\n    \"\"\"\n    Given an array of 4 integers, return the largest 24 hour time that can be\n    made.\n    \"\"\"\n    arr.sort()\n    if arr[0] > 2:\n        return -1\n    if arr[3] > 5:\n        return -1\n    if arr[0] == 2 and arr[1] > 3:\n        return -1\n    if arr[0] == 2 and arr[1] == 3 and arr[2] > 3:\n        return -1\n    if arr[0] == 2 and arr[1] == 3 and arr[2] == 3 and arr[3] > 4:\n        return -1\n    return \"{:02d}:{:02d}\".format(arr[0]*10+arr[1], arr[2]*10+arr[3])\n"
        ],
        "results": 9
    },
    {
        "id": "1020",
        "source": "leetcodeTitles",
        "source_id": "733",
        "url": "https://leetcode.com/problems/flood-fill/",
        "language": "python",
        "query": "Flood Fill",
        "snippets": [
            "def flood_fill(image, x, y, new_color):\n    if image[x][y] == new_color:\n        return\n    old_color = image[x][y]\n    image[x][y] = new_color\n    if x > 0:\n        flood_fill(image, x - 1, y, old_color)\n    if x < len(image) - 1:\n        flood_fill(image, x + 1, y, old_color)\n    if y > 0:\n        flood_fill(image, x, y - 1, old_color)\n    if y < len(image[0]) - 1:\n        flood_fill(image, x, y + 1, old_color)\n    return image\n",
            "def flood_fill(image, x, y, new_color):\n    if image[x][y] == new_color:\n        return image\n    old_color = image[x][y]\n    image[x][y] = new_color\n    if x > 0:\n        flood_fill(image, x - 1, y, old_color)\n    if x < len(image) - 1:\n        flood_fill(image, x + 1, y, old_color)\n    if y > 0:\n        flood_fill(image, x, y - 1, old_color)\n    if y < len(image[0]) - 1:\n        flood_fill(image, x, y + 1, old_color)\n    return image\n",
            "def flood_fill(image, x, y, new_color):\n    old_color = image[x][y]\n    if old_color == new_color:\n        return image\n    image[x][y] = new_color\n    if x > 0:\n        flood_fill(image, x - 1, y, new_color)\n    if x < len(image) - 1:\n        flood_fill(image, x + 1, y, new_color)\n    if y > 0:\n        flood_fill(image, x, y - 1, new_color)\n    if y < len(image[0]) - 1:\n        flood_fill(image, x, y + 1, new_color)\n    return image\n",
            "def flood_fill(image, x, y, new_color):\n    \"\"\"\n    Flood fill algorithm\n    \"\"\"\n    old_color = image[x][y]\n    if old_color == new_color:\n        return image\n    image[x][y] = new_color\n    if x > 0 and image[x - 1][y] == old_color:\n        image = flood_fill(image, x - 1, y, new_color)\n    if x < len(image) - 1 and image[x + 1][y] == old_color:\n        image = flood_fill(image, x + 1, y, new_color)\n    if y > 0 and image[x][y - 1] == old_color:\n        image = flood_fill(image, x, y - 1, new_color)\n    if y < len(image[0]) - 1 and image[x][y + 1] == old_color:\n        image = flood_fill(image, x, y + 1, new_color)\n    return image\n",
            "def flood_fill(image, x, y, new_color):\n    \"\"\"\n    Flood fill algorithm\n    \"\"\"\n    old_color = image[x][y]\n    if old_color == new_color:\n        return image\n    image[x][y] = new_color\n    if x > 0:\n        image = flood_fill(image, x - 1, y, new_color)\n    if x < len(image) - 1:\n        image = flood_fill(image, x + 1, y, new_color)\n    if y > 0:\n        image = flood_fill(image, x, y - 1, new_color)\n    if y < len(image[0]) - 1:\n        image = flood_fill(image, x, y + 1, new_color)\n    return image\n",
            "def flood_fill(image, src_x, src_y, new_color):\n    old_color = image[src_x][src_y]\n    if old_color == new_color:\n        return image\n    image[src_x][src_y] = new_color\n    if src_x > 0:\n        flood_fill(image, src_x - 1, src_y, new_color)\n    if src_x < len(image) - 1:\n        flood_fill(image, src_x + 1, src_y, new_color)\n    if src_y > 0:\n        flood_fill(image, src_x, src_y - 1, new_color)\n    if src_y < len(image[0]) - 1:\n        flood_fill(image, src_x, src_y + 1, new_color)\n    return image\n",
            "def flood_fill(image, src_x, src_y, new_color):\n    if image[src_x][src_y] == new_color:\n        return\n    old_color = image[src_x][src_y]\n    image[src_x][src_y] = new_color\n    if src_x > 0:\n        flood_fill(image, src_x - 1, src_y, new_color)\n    if src_x < len(image) - 1:\n        flood_fill(image, src_x + 1, src_y, new_color)\n    if src_y > 0:\n        flood_fill(image, src_x, src_y - 1, new_color)\n    if src_y < len(image[0]) - 1:\n        flood_fill(image, src_x, src_y + 1, new_color)\n    return image\n",
            "def flood_fill(image, srce_x, source_y, new_color):\n    if image[source_x][source_y] == new_color:\n        return\n    old_color = image[source_x][source_y]\n    image[source_x][source_y] = new_color\n    if source_x > 0:\n        flood_fill(image, source_x - 1, source_y, new_color)\n    if source_x < len(image) - 1:\n        flood_fill(image, source_x + 1, source_y, new_color)\n    if source_y > 0:\n        flood_fill(image, source_x, source_y - 1, new_color)\n    if source_y < len(image[0]) - 1:\n        flood_fill(image, source_x, source_y + 1, new_color)\n    return image\n",
            "def flood_fill(image, src_x, src_y, new_color):\n    \"\"\"\n    image: 2d array of ints\n    src_x: int\n    src_y: int\n    new_color: int\n    \"\"\"\n    if image[src_x][src_y] == new_color:\n        return image\n    old_color = image[src_x][src_y]\n    image[src_x][src_y] = new_color\n    if src_x > 0:\n        flood_fill(image, src_x - 1, src_y, new_color)\n    if src_x < len(image) - 1:\n        flood_fill(image, src_x + 1, src_y, new_color)\n    if src_y > 0:\n        flood_fill(image, src_x, src_y - 1, new_color)\n    if src_y < len(image[0]) - 1:\n        flood_fill(image, src_x, src_y + 1, new_color)\n    return image\n"
        ],
        "results": 10
    },
    {
        "id": "1021",
        "source": "leetcodeTitles",
        "source_id": "926",
        "url": "https://leetcode.com/problems/flip-string-to-monotone-increasing/",
        "language": "python",
        "query": "Flip String to Monotone Increasing",
        "snippets": [
            "def flip(s):\n    if len(s) == 1:\n        return s\n    if s[0] > s[1]:\n        return flip(s[1:]) + s[0]\n    else:\n        return s[0] + flip(s[1:])\n",
            "def flip(s):\n    if len(s) == 1:\n        return s\n    if s[0] > s[1]:\n        return flip(s[1:]) + s[0]\n    else:\n        return flip(s[1:]) + s[0]\n",
            "def flip(s):\n    if len(s) == 0:\n        return s\n    if len(s) == 1:\n        return s\n    if s[0] > s[1]:\n        return flip(s[1:]) + s[0]\n    else:\n        return flip(s[1:]) + s[0]\n",
            "def flip(s):\n    return s[::-1]\n"
        ],
        "results": 10
    },
    {
        "id": "1022",
        "source": "leetcodeTitles",
        "source_id": "1545",
        "url": "https://leetcode.com/problems/find-kth-bit-in-nth-binary-string/",
        "language": "python",
        "query": "Find Kth Bit in Nth Binary String",
        "snippets": [
            "def findKthBit(n, k):\n    if n == 0:\n        return 0\n    if k == 1:\n        return 1\n    if k == 2:\n        return 0\n    if k == 3:\n        return 1\n    if k == 4:\n        return 0\n    if k == 5:\n        return 1\n    if k == 6:\n        return 0\n    if k == 7:\n        return 1\n    if k == 8:\n        return 0\n    if k == 9:\n        return 1\n    if k == 10:\n        return 0\n    if k == 11:\n        return 1\n    if k == 12:\n        return 0\n    if k == 13:\n        return 1\n    if k == 14:\n        return 0\n    if k == 15:\n        return 1\n    if k == 16:\n        return 0\n    if k == 17:\n        return 1\n    if k == 18:\n        return 0\n    if k == 19:\n        return 1\n    if k == 20:\n        return 0\n    if k == 21:\n        return 1\n    if k == 22:\n        return 0\n    if k == 23:\n        return 1\n    if k == 24:\n        return 0\n    if k == 25:\n        return 1\n    if k == 26:\n        return 0\n    if k == 27:\n        return 1\n    if k == 28:\n        return 0\n    if k == 29:\n        return 1\n    if k == 30:\n        return 0\n    if k == 31:\n        return 1\n    if k == 32:\n        return 0\n    if k == 33:\n        return 1\n    if k == 34:\n        return 0\n    if k == 35:\n        return 1\n    if k == 36:\n        return 0\n    if k == 37:\n        return 1\n    if k == 38:\n        return 0\n    if k == 39:\n        return 1\n    if k == 40:\n        return 0\n    if k == 41:\n        return 1\n    if k == 42:\n        return 0\n    if k == 43:\n        return 1\n    if k == 44\n",
            "def findKthBit(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 0\n    if k == 3:\n        return 1\n    if k == 4:\n        return 0\n    if k == 5:\n        return 1\n    if k == 6:\n        return 0\n    if k == 7:\n        return 1\n    if k == 8:\n        return 0\n    if k == 9:\n        return 1\n    if k == 10:\n        return 0\n    if k == 11:\n        return 1\n    if k == 12:\n        return 0\n    if k == 13:\n        return 1\n    if k == 14:\n        return 0\n    if k == 15:\n        return 1\n    if k == 16:\n        return 0\n    if k == 17:\n        return 1\n    if k == 18:\n        return 0\n    if k == 19:\n        return 1\n    if k == 20:\n        return 0\n    if k == 21:\n        return 1\n    if k == 22:\n        return 0\n    if k == 23:\n        return 1\n    if k == 24:\n        return 0\n    if k == 25:\n        return 1\n    if k == 26:\n        return 0\n    if k == 27:\n        return 1\n    if k == 28:\n        return 0\n    if k == 29:\n        return 1\n    if k == 30:\n        return 0\n    if k == 31:\n        return 1\n    if k == 32:\n        return 0\n    if k == 33:\n        return 1\n    if k == 34:\n        return 0\n    if k == 35:\n        return 1\n    if k == 36:\n        return 0\n    if k == 37:\n        return 1\n    if k == 38:\n        return 0\n    if k == 39:\n        return 1\n    if k == 40:\n        return 0\n    if k == 41:\n        return 1\n    if k == 42:\n        return 0\n    if k == 43\n",
            "def findKthBit(n, k):\n    if n == 0:\n        return '0'\n    if k == 1:\n        return '1'\n    if k == 2:\n        return '0'\n    if k == 3:\n        return '1'\n    if k == 4:\n        return '0'\n    if k == 5:\n        return '1'\n    if k == 6:\n        return '0'\n    if k == 7:\n        return '1'\n    if k == 8:\n        return '0'\n    if k == 9:\n        return '1'\n    if k == 10:\n        return '0'\n    if k == 11:\n        return '1'\n    if k == 12:\n        return '0'\n    if k == 13:\n        return '1'\n    if k == 14:\n        return '0'\n    if k == 15:\n        return '1'\n    if k == 16:\n        return '0'\n    if k == 17:\n        return '1'\n    if k == 18:\n        return '0'\n    if k == 19:\n        return '1'\n    if k == 20:\n        return '0'\n    if k == 21:\n        return '1'\n    if k == 22:\n        return '0'\n    if k == 23:\n        return '1'\n    if k == 24:\n        return '0'\n    if k == 25:\n        return '1'\n    if k == 26:\n        return '0'\n    if k == 27:\n        return '1'\n    if k == 28:\n        return '0'\n    if k == 29:\n        return '1'\n    if k == 30:\n        return '0'\n    if k == 31:\n        return '1'\n    if k == 32:\n        return '0'\n    if k == 33:\n        return '1'\n    if k == 34:\n        return '0'\n    if k == 35:\n        return '1'\n    if k == 36:\n        return '0'\n    if k == 37:\n",
            "def find_kth_bit(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if k == 1:\n        return 1\n    if k == 2:\n        return 0\n    if k == 3:\n        return 1\n    if k == 4:\n        return 0\n    if k == 5:\n        return 1\n    if k == 6:\n        return 0\n    if k == 7:\n        return 1\n    if k == 8:\n        return 0\n    if k == 9:\n        return 1\n    if k == 10:\n        return 0\n    if k == 11:\n        return 1\n    if k == 12:\n        return 0\n    if k == 13:\n        return 1\n    if k == 14:\n        return 0\n    if k == 15:\n        return 1\n    if k == 16:\n        return 0\n    if k == 17:\n        return 1\n    if k == 18:\n        return 0\n    if k == 19:\n        return 1\n    if k == 20:\n        return 0\n    if k == 21:\n        return 1\n    if k == 22:\n        return 0\n    if k == 23:\n        return 1\n    if k == 24:\n        return 0\n    if k == 25:\n        return 1\n    if k == 26:\n        return 0\n    if k == 27:\n        return 1\n    if k == 28:\n        return 0\n    if k == 29:\n        return 1\n    if k == 30:\n        return 0\n    if k == 31:\n        return 1\n    if k == 32:\n        return 0\n    if k == 33:\n        return 1\n    if k == 34:\n        return 0\n    if k == 35:\n        return 1\n    if k == 36:\n        return 0\n    if k == 37:\n        return 1\n    if k == 38:\n        return 0\n    if k == 39:\n        return 1\n    if k == 40:\n        return 0\n    if k == 41:\n        return 1\n    if k == 42:\n        return 0\n    if k\n"
        ],
        "results": 10
    },
    {
        "id": "1023",
        "source": "leetcodeTitles",
        "source_id": "54",
        "url": "https://leetcode.com/problems/spiral-matrix/",
        "language": "python",
        "query": "Spiral Matrix",
        "snippets": [
            "def spiral_matrix(matrix):\n    if matrix is None or len(matrix) == 0:\n        return []\n    result = []\n    row_start = 0\n    row_end = len(matrix) - 1\n    col_start = 0\n    col_end = len(matrix[0]) - 1\n    while row_start <= row_end and col_start <= col_end:\n        for i in range(col_start, col_end + 1):\n            result.append(matrix[row_start][i])\n        row_start += 1\n        for i in range(row_start, row_end + 1):\n            result.append(matrix[i][col_end])\n        col_end -= 1\n        if row_start <= row_end and col_start <= col_end:\n            for i in range(col_end, col_start - 1, -1):\n                result.append(matrix[row_end][i])\n            row_end -= 1\n        if row_start <= row_end and col_start <= col_end:\n            for i in range(row_end, row_start - 1, -1):\n                result.append(matrix[i][col_start])\n            col_start += 1\n    return result\n",
            "def spiral_matrix(matrix):\n    if matrix is None or len(matrix) == 0:\n        return []\n    result = []\n    row_start = 0\n    row_end = len(matrix) - 1\n    col_start = 0\n    col_end = len(matrix[0]) - 1\n    while row_start <= row_end and col_start <= col_end:\n        for i in range(col_start, col_end + 1):\n            result.append(matrix[row_start][i])\n        row_start += 1\n        for i in range(row_start, row_end + 1):\n            result.append(matrix[i][col_end])\n        col_end -= 1\n        if row_start <= row_end:\n            for i in range(col_end, col_start - 1, -1):\n                result.append(matrix[row_end][i])\n            row_end -= 1\n        if col_start <= col_end:\n            for i in range(row_end, row_start - 1, -1):\n                result.append(matrix[i][col_start])\n            col_start += 1\n    return result\n",
            "def spiral_matrix(matrix):\n    if not matrix:\n        return []\n    result = []\n    while matrix:\n        result.extend(matrix.pop(0))\n        matrix = list(zip(*matrix))[::-1]\n    return result\n",
            "def spiral_matrix(matrix):\n    if matrix == []:\n        return []\n    result = []\n    while matrix != []:\n        result += matrix.pop(0)\n        if matrix != []:\n            for row in matrix:\n                result.append(row.pop())\n            result += matrix.pop().reverse()\n            if matrix != []:\n                for row in matrix:\n                    result.append(row.pop(0))\n    return result\n",
            "def spiral_matrix(matrix):\n    if matrix is None or len(matrix) == 0:\n        return []\n    result = []\n    top = 0\n    bottom = len(matrix) - 1\n    left = 0\n    right = len(matrix[0]) - 1\n    while top <= bottom and left <= right:\n        for i in range(left, right + 1):\n            result.append(matrix[top][i])\n        top += 1\n        for i in range(top, bottom + 1):\n            result.append(matrix[i][right])\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left - 1, -1):\n                result.append(matrix[bottom][i])\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top - 1, -1):\n                result.append(matrix[i][left])\n            left += 1\n    return result\n",
            "def spiral(matrix):\n    if matrix == []:\n        return []\n    result = []\n    while matrix != []:\n        result += matrix.pop(0)\n        if matrix == []:\n            return result\n        for row in matrix:\n            result.append(row.pop())\n        if matrix == []:\n            return result\n        for row in matrix[::-1]:\n            result.append(row.pop(0))\n        if matrix == []:\n            return result\n        for row in matrix[::-1]:\n            result.append(row.pop())\n    return result\n"
        ],
        "results": 10
    },
    {
        "id": "1024",
        "source": "leetcodeTitles",
        "source_id": "842",
        "url": "https://leetcode.com/problems/split-array-into-fibonacci-sequence/",
        "language": "python",
        "query": "Split Array into Fibonacci Sequence",
        "snippets": [
            "def split_array(arr):\n    fib = [1, 1]\n    while fib[-1] < len(arr):\n        fib.append(fib[-1] + fib[-2])\n    fib.pop()\n    fib.pop()\n    fib.append(len(arr))\n    fib.append(len(arr))\n    fib.sort()\n    for i in range(len(fib)):\n        if fib[i] == len(arr):\n            fib.pop()\n            fib.pop()\n            break\n    return fib\n",
            "def split_array(arr):\n    fib = [1, 1]\n    while fib[-1] < len(arr):\n        fib.append(fib[-1] + fib[-2])\n    fib.pop()\n    fib.pop()\n    fib.append(len(arr))\n    fib.append(len(arr))\n    fib.sort()\n    fib.reverse()\n    return fib\n",
            "def split_array(arr):\n    if len(arr) == 1:\n        return [arr]\n    elif len(arr) == 2:\n        return [[arr[0]], [arr[1]]]\n    else:\n        return [[arr[0]], [arr[1]], split_array(arr[2:])]\n",
            "def split_array(arr):\n    if len(arr) == 1:\n        return [arr]\n    elif len(arr) == 2:\n        return [[arr[0]], [arr[1]]]\n    else:\n        return [[arr[0]], [arr[1]], [arr[2]]]\n",
            "def split_array(arr):\n    fib = [1, 1]\n    while fib[-1] < len(arr):\n        fib.append(fib[-1] + fib[-2])\n    for i in range(len(fib)):\n        if fib[i] > len(arr):\n            fib.pop()\n            break\n    for i in range(len(fib)):\n        if fib[i] == len(arr):\n            fib.pop()\n            break\n    return fib\n",
            "def split_array(arr):\n    if len(arr) == 0:\n        return []\n    if len(arr) == 1:\n        return [arr]\n    if len(arr) == 2:\n        return [[arr[0]], [arr[1]]]\n    if len(arr) == 3:\n        return [[arr[0]], [arr[1], arr[2]]]\n    if len(arr) == 4:\n        return [[arr[0]], [arr[1], arr[2]], [arr[3]]]\n    if len(arr) == 5:\n        return [[arr[0]], [arr[1], arr[2]], [arr[3], arr[4]]]\n    if len(arr) == 6:\n        return [[arr[0]], [arr[1], arr[2]], [arr[3], arr[4]], [arr[5]]]\n    if len(arr) == 7:\n        return [[arr[0]], [arr[1], arr[2]], [arr[3], arr[4]], [arr[5], arr[6]]]\n    if len(arr) == 8:\n        return [[arr[0]], [arr[1], arr[2]], [arr[3], arr[4]], [arr[5], arr[6]], [arr[7]]]\n    if len(arr) == 9:\n        return [[arr[0]], [arr[1], arr[2]], [arr[3], arr[4]], [arr[5], arr[6]], [arr[7], arr[8]]]\n    if len(arr) == 10:\n        return [[arr[0]], [arr[1], arr[2]], [arr[3], arr[4]], [arr[5], arr[6]], [arr[7], arr[8]], [arr[9]]]\n    if len(arr) == 11:\n        return [[arr[0]], [arr[1], arr[2]], [arr[3], arr[4]], [arr[5], arr[6]], [arr[7], arr[8]], [arr[\n",
            "def split_array(arr):\n    if len(arr) == 1:\n        return arr\n    if len(arr) == 2:\n        return [arr[0], arr[1]]\n    if len(arr) == 3:\n        return [arr[0], arr[1], arr[2]]\n    if len(arr) == 4:\n        return [arr[0], arr[1], arr[2], arr[3]]\n    if len(arr) == 5:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4]]\n    if len(arr) == 6:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5]]\n    if len(arr) == 7:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6]]\n    if len(arr) == 8:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7]]\n    if len(arr) == 9:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8]]\n    if len(arr) == 10:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9]]\n    if len(arr) == 11:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10]]\n    if len(arr) == 12:\n        return [arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10], arr[11]]\n    if len(arr) == 13:\n        return [arr[0\n",
            "def split_array(arr):\n    if len(arr) == 1:\n        return arr\n    elif len(arr) == 2:\n        return [arr[0], arr[1]]\n    else:\n        return [arr[0], arr[1]] + split_array(arr[2:])\n"
        ],
        "results": 9
    },
    {
        "id": "1025",
        "source": "leetcodeTitles",
        "source_id": "167",
        "url": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/",
        "language": "python",
        "query": "Two Sum II - Input Array is Sorted",
        "snippets": [
            "def twoSum(numbers, target):\n    \"\"\"\n    :type numbers: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    left, right = 0, len(numbers) - 1\n    while left < right:\n        if numbers[left] + numbers[right] == target:\n            return [left + 1, right + 1]\n        elif numbers[left] + numbers[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return []\n",
            "def twoSum(numbers, target):\n    \"\"\"\n    :type numbers: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    left, right = 0, len(numbers) - 1\n    while left < right:\n        if numbers[left] + numbers[right] == target:\n            return [left + 1, right + 1]\n        elif numbers[left] + numbers[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return [-1, -1]\n",
            "def twoSum(numbers, target):\n    i = 0\n    j = len(numbers) - 1\n    while i < j:\n        if numbers[i] + numbers[j] == target:\n            return [i + 1, j + 1]\n        elif numbers[i] + numbers[j] < target:\n            i += 1\n        else:\n            j -= 1\n    return []\n",
            "def twoSum(numbers, target):\n    \"\"\"\n    :type numbers: List[int]\n    :type target: int\n    :rtype: List[int]\n    \"\"\"\n    left = 0\n    right = len(numbers) - 1\n    while left < right:\n        if numbers[left] + numbers[right] == target:\n            return [left + 1, right + 1]\n        elif numbers[left] + numbers[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return []\n",
            "def twoSum(numbers, target):\n    left, right = 0, len(numbers) - 1\n    while left < right:\n        if numbers[left] + numbers[right] == target:\n            return [left + 1, right + 1]\n        elif numbers[left] + numbers[right] < target:\n            left += 1\n        else:\n            right -= 1\n    return []\n"
        ],
        "results": 10
    },
    {
        "id": "1026",
        "source": "leetcodeTitles",
        "source_id": "1518",
        "url": "https://leetcode.com/problems/water-bottles/",
        "language": "python",
        "query": "Water Bottles",
        "snippets": [
            "def main():\n    n = int(input())\n    for i in range(n):\n        print(\"Case #{}: {}\".format(i+1, solve()))\n",
            "def main():\n    n = int(input())\n    bottles = list(map(int, input().split()))\n    bottles.sort()\n    for i in range(n):\n        if bottles[i] == 0:\n            print(i+1)\n            return\n    print(\"-1\")\n",
            "def main():\n    n = int(input())\n    for i in range(n):\n        bottles = int(input())\n        print(bottles // 2)\n",
            "def main():\n    n = int(input())\n    for i in range(n):\n        bottles = int(input())\n        if bottles == 0:\n            print(\"Case #{}: 0\".format(i+1))\n        else:\n            print(\"Case #{}: {}\".format(i+1, bottles))\n",
            "def main():\n    n = int(input())\n    for i in range(n):\n        a, b = map(int, input().split())\n        print(a + b)\n",
            "def main():\n    num_bottles = int(input())\n    num_exchange = int(input())\n    num_bottles = num_bottles - (num_bottles // num_exchange) * num_exchange\n    print(num_bottles)\n"
        ],
        "results": 10
    },
    {
        "id": "1027",
        "source": "leetcodeTitles",
        "source_id": "2124",
        "url": "https://leetcode.com/problems/check-if-all-as-appears-before-all-bs/",
        "language": "python",
        "query": "Check if All A's Appears Before All B's",
        "snippets": [
            "def check_ab(string):\n    a_count = 0\n    b_count = 0\n    for char in string:\n        if char == 'a':\n            a_count += 1\n        elif char == 'b':\n            b_count += 1\n    return a_count < b_count\n",
            "def check_ab(string):\n    a_count = 0\n    b_count = 0\n    for char in string:\n        if char == 'a':\n            a_count += 1\n        elif char == 'b':\n            b_count += 1\n    return a_count <= b_count\n",
            "def check(s):\n    a = 0\n    b = 0\n    for i in s:\n        if i == 'a':\n            a += 1\n        elif i == 'b':\n            b += 1\n    return a < b\n",
            "def check(s):\n    a = 0\n    b = 0\n    for i in s:\n        if i == 'a':\n            a += 1\n        elif i == 'b':\n            b += 1\n    if a > b:\n        return False\n    else:\n        return True\n",
            "def check_ab(string):\n    a_count = 0\n    b_count = 0\n    for i in string:\n        if i == 'a':\n            a_count += 1\n        elif i == 'b':\n            b_count += 1\n    if a_count > b_count:\n        return False\n    else:\n        return True\n",
            "def check(string):\n    a_count = 0\n    b_count = 0\n    for i in string:\n        if i == 'a':\n            a_count += 1\n        elif i == 'b':\n            b_count += 1\n    if a_count > b_count:\n        return False\n    else:\n        return True\n",
            "def check(s):\n    a = s.count('a')\n    b = s.count('b')\n    if a > b:\n        return False\n    return True\n"
        ],
        "results": 10
    },
    {
        "id": "1028",
        "source": "leetcodeTitles",
        "source_id": "860",
        "url": "https://leetcode.com/problems/lemonade-change/",
        "language": "python",
        "query": "Lemonae Change",
        "snippets": [
            "def main():\n    print(\"Lemonade Change\")\n    print(\"Enter the cost of the lemonade:\")\n    cost = float(input())\n    print(\"Enter the number of lemons:\")\n    lemons = int(input())\n    print(\"Enter the number of sugar cubes:\")\n    sugar = int(input())\n    print(\"Enter the number of ice cubes:\")\n    ice = int(input())\n    change = cost - (lemons * .5 + sugar * .1 + ice * .01)\n    if change < 0:\n        print(\"No change\")\n    else:\n        print(\"Change: $%.2f\" % change)\n",
            "def main():\n    print(\"Lemonade Change\")\n    print(\"Enter the cost of the lemonade:\")\n    cost = float(input())\n    print(\"Enter the number of lemons:\")\n    lemons = int(input())\n    print(\"Enter the number of sugar cubes:\")\n    sugar = int(input())\n    print(\"Enter the number of ice cubes:\")\n    ice = int(input())\n    print(\"Enter the number of cups:\")\n    cups = int(input())\n    print(\"Enter the number of change:\")\n    change = float(input())\n    print(\"The lemonade change is:\", lemonade_change(cost, lemons, sugar, ice, cups, change))\n",
            "def main():\n    print(\"Lemonade Change\")\n    print(\"Enter the cost of the lemonade:\")\n    cost = float(input())\n    print(\"Enter the number of lemons:\")\n    lemons = int(input())\n    print(\"Enter the number of sugar cubes:\")\n    sugar = int(input())\n    print(\"Enter the number of ice cubes:\")\n    ice = int(input())\n    if cost > 1.00:\n        print(\"Sorry, you can't make lemonade.\")\n    elif cost == 1.00:\n        if lemons == 0 and sugar == 0 and ice == 0:\n            print(\"You can make lemonade.\")\n        elif lemons == 0 and sugar == 0 and ice == 1:\n            print(\"You can make lemonade.\")\n        elif lemons == 0 and sugar == 1 and ice == 0:\n            print(\"You can make lemonade.\")\n        elif lemons == 0 and sugar == 1 and ice == 1:\n            print(\"You can make lemonade.\")\n        elif lemons == 1 and sugar == 0 and ice == 0:\n            print(\"You can make lemonade.\")\n        elif lemons == 1 and sugar == 0 and ice == 1:\n            print(\"You can make lemonade.\")\n        elif lemons == 1 and sugar == 1 and ice == 0:\n            print(\"You can make lemonade.\")\n        elif lemons == 1 and sugar == 1 and ice == 1:\n            print(\"You can make lemonade.\")\n        elif lemons == 1 and sugar == 2 and ice == 0:\n            print(\"You can make lemonade.\")\n        elif lemons == 1 and sugar == 2 and ice == 1:\n            print(\"You can make lemonade.\")\n        elif lemons == 2 and sugar == 0 and ice == 0:\n            print(\"You can make lemonade.\")\n        elif lemons == 2 and sugar == 0 and ice == 1:\n            print(\"You can make lemonade.\")\n        elif lemons == 2 and sugar == 1 and ice == 0:\n            print(\"You can make lemonade.\")\n        elif lemons == 2 and sugar == 1 and ice == 1:\n            print(\"You can make\n",
            "def main():\n    print(\"Lemonade Change\")\n    print(\"Enter the amount of money in cents\")\n    cents = int(input())\n    print(\"Enter the number of lemons\")\n    lemons = int(input())\n    print(\"Enter the number of Sugar\")\n    sugar = int(input())\n    print(\"Enter the number of Ice\")\n    ice = int(input())\n    print(\"Enter the number of Cups\")\n    cups = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans = int(input())\n    print(\"Enter the number of Bottles\")\n    bottles = int(input())\n    print(\"Enter the number of Cans\")\n    cans\n",
            "def main():\n    print(\"Lemonade Change\")\n    print(\"Enter the cost of the lemonade in cents:\")\n    cost = int(input())\n    print(\"Enter the number of dollars you have:\")\n    dollars = int(input())\n    print(\"Enter the number of quarters you have:\")\n    quarters = int(input())\n    print(\"Enter the number of dimes you have:\")\n    dimes = int(input())\n    print(\"Enter the number of nickels you have:\")\n    nickels = int(input())\n    print(\"Enter the number of pennies you have:\")\n    pennies = int(input())\n    change = dollars * 100 + quarters * 25 + dimes * 10 + nickels * 5 + pennies\n    if change >= cost:\n        print(\"You have enough money for the lemonade.\")\n    else:\n        print(\"You do not have enough money for the lemonade.\")\n",
            "def main():\n    print(\"Lemonade Change\")\n    print(\"Enter the number of cents in your change:\")\n    cents = int(input())\n    print(\"Your change is:\")\n    if cents >= 100:\n        print(\"$1\")\n        cents -= 100\n    if cents >= 50:\n        print(\"$0.50\")\n        cents -= 50\n    if cents >= 20:\n        print(\"$0.20\")\n        cents -= 20\n    if cents >= 10:\n        print(\"$0.10\")\n        cents -= 10\n    if cents >= 5:\n        print(\"$0.05\")\n        cents -= 5\n    if cents >= 1:\n        print(\"$0.01\")\n        cents -= 1\n    if cents >= 0:\n        print(\"$0.00\")\n        cents -= 0\n    if cents < 0:\n        print(\"Insufficient change\")\n",
            "def main():\n    print(\"Hello World\")\n"
        ],
        "results": 8
    },
    {
        "id": "1029",
        "source": "leetcodeTitles",
        "source_id": "977",
        "url": "https://leetcode.com/problems/squares-of-a-sorted-array/",
        "language": "python",
        "query": "Squares of a Sorted Array",
        "snippets": [
            "def sortedSquares(A):\n    return sorted(map(lambda x: x**2, A))\n",
            "def sortedSquares(A):\n    return [i**2 for i in sorted(A)]\n",
            "def sortedSquares(A):\n    return sorted([i**2 for i in A])\n",
            "def sortedSquares(A):\n    return sorted([x**2 for x in A])\n"
        ],
        "results": 10
    },
    {
        "id": "1030",
        "source": "leetcodeTitles",
        "source_id": "908",
        "url": "https://leetcode.com/problems/smallest-range-i/",
        "language": "python",
        "query": "Smallest Range I",
        "snippets": [
            "def smallestRangeI(A, K):\n    A.sort()\n    return max(A[-1] - A[0] - 2 * K, 0)\n",
            "def smallest_range(nums):\n    nums.sort()\n    return nums[-1] - nums[0]\n",
            "def smallest_range(arr):\n    arr.sort()\n    return arr[-1] - arr[0]\n",
            "def smallestRange(nums):\n    nums.sort()\n    return nums[-1] - nums[0]\n"
        ],
        "results": 10
    },
    {
        "id": "1031",
        "source": "leetcodeTitles",
        "source_id": "1137",
        "url": "https://leetcode.com/problems/n-th-tribonacci-number/",
        "language": "python",
        "query": "N-th Tribonacci Number",
        "snippets": [
            "def tribonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)\n"
        ],
        "results": 10
    },
    {
        "id": "1032",
        "source": "leetcodeTitles",
        "source_id": "792",
        "url": "https://leetcode.com/problems/number-of-matching-subsequences/",
        "language": "python",
        "query": "Number of Matching Subsequences",
        "snippets": [
            "def numMatchingSubseq(S, words):\n    \"\"\"\n    :type S: str\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    count = 0\n    for word in words:\n        if word in S:\n            count += 1\n    return count\n",
            "def numMatchingSubseq(S, words):\n    \"\"\"\n    :type S: str\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    ans = 0\n    for word in words:\n        if isSubseq(S, word):\n            ans += 1\n    return ans\n",
            "def numMatchingSubseq(S, words):\n    \"\"\"\n    :type S: str\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    d = {}\n    for w in words:\n        d[w] = d.get(w, 0) + 1\n    cnt = 0\n    for w in d:\n        if w in S:\n            cnt += d[w]\n    return cnt\n",
            "def numMatchingSubseq(S, words):\n    \"\"\"\n    :type S: str\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    d = collections.defaultdict(list)\n    for i, c in enumerate(S):\n        d[c].append(i)\n    ans = 0\n    for w in words:\n        if len(w) == 1:\n            ans += S.count(w)\n        else:\n            i = 0\n            while i < len(w) and S[d[w[i]][0]] == w[i]:\n                i += 1\n            ans += i == len(w)\n    return ans\n",
            "def numMatchingSubseq(S, words):\n    \"\"\"\n    :type S: str\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    d = {}\n    for word in words:\n        d[word] = d.get(word, 0) + 1\n    count = 0\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            if S[i:j+1] in d:\n                count += d[S[i:j+1]]\n    return count\n",
            "def numMatchingSubseq(S, words):\n    \"\"\"\n    :type S: str\n    :type words: List[str]\n    :rtype: int\n    \"\"\"\n    d = {}\n    for word in words:\n        d[word] = d.get(word, 0) + 1\n    for word in words:\n        if d[word] == 1:\n            for i in range(len(word)):\n                if word[i] in S:\n                    S = S.replace(word[i], '', 1)\n                else:\n                    break\n            else:\n                return 1\n    return 0\n",
            "def num_matching_subseq(s, t):\n    dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n    for i in range(1, len(s) + 1):\n        for j in range(1, len(t) + 1):\n            if s[i - 1] == t[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n",
            "def numMatchingSubseq(s, t):\n    \"\"\"\n    :type s: str\n    :type t: str\n    :rtype: int\n    \"\"\"\n    cnt = 0\n    for c in t:\n        if c in s:\n            cnt += 1\n            s = s[s.index(c)+1:]\n    return cnt\n"
        ],
        "results": 10
    },
    {
        "id": "1033",
        "source": "leetcodeTitles",
        "source_id": "2278",
        "url": "https://leetcode.com/problems/percentage-of-letter-in-string/",
        "language": "python",
        "query": "Percentage of Letter in String",
        "snippets": [
            "def main():\n    string = input(\"Enter a string: \")\n    letter = input(\"Enter a letter: \")\n    print(\"The letter\", letter, \"appears\", string.count(letter), \"times in the string\")\n    print(\"The letter\", letter, \"appears\", string.count(letter) / len(string) * 100, \"% of the time\")\n",
            "def percentage(string):\n    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n    return count / len(string) * 100\n",
            "def percentage(str):\n    str = str.lower()\n    str = str.replace(\" \", \"\")\n    str = str.replace(\".\", \"\")\n    str = str.replace(\",\", \"\")\n    str = str.replace(\"!\", \"\")\n    str = str.replace(\"?\", \"\")\n    str = str.replace(\"'\", \"\")\n    str = str.replace(\";\", \"\")\n    str = str.replace(\":\", \"\")\n    str = str.replace(\"-\", \"\")\n    str = str.replace(\"_\", \"\")\n    str = str.replace(\"(\", \"\")\n    str = str.replace(\")\", \"\")\n    str = str.replace(\"[\", \"\")\n    str = str.replace(\"]\", \"\")\n    str = str.replace(\"{\", \"\")\n    str = str.replace(\"}\", \"\")\n    str = str.replace(\"/\", \"\")\n    str = str.replace(\"\\\\\", \"\")\n    str = str.replace(\"\\\"\", \"\")\n    str = str.replace(\"'\", \"\")\n    str = str.replace(\"`\", \"\")\n    str = str.replace(\"~\", \"\")\n    str = str.replace(\"<\", \"\")\n    str = str.replace(\">\", \"\")\n    str = str.replace(\"|\", \"\")\n    str = str.replace(\"*\", \"\")\n    str = str.replace(\"+\", \"\")\n    str = str.replace(\"=\", \"\")\n    str = str.replace(\"-\", \"\")\n    str = str.replace(\"_\", \"\")\n    str = str.replace(\"%\", \"\")\n    str = str.replace(\"$\", \"\")\n    str = str.replace(\"#\", \"\")\n    str = str.replace(\"@\", \"\")\n    str = str.replace(\"!\", \"\")\n    str = str.replace(\"^\", \"\")\n    str = str.replace(\"&\", \"\")\n    str = str.replace(\"(\", \"\")\n    str = str.replace(\")\", \"\")\n    str = str.replace(\"[\", \"\")\n    str = str.replace(\"]\", \"\")\n",
            "def percent(string):\n    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n    return count / len(string) * 100\n",
            "def percentage(string):\n    count = 0\n    for i in string:\n        if i.isalpha():\n            count += 1\n    return (count / len(string)) * 100\n",
            "def main():\n    string = input(\"Enter a string: \")\n    letter = input(\"Enter a letter: \")\n    print(\"The letter\", letter, \"appears\",\n          round(percentage(string, letter), 2), \"% of the time in the string\", string)\n",
            "def percentage(string):\n    total = 0\n    for i in string:\n        if i.isalpha():\n            total += 1\n    return total / len(string)\n"
        ],
        "results": 10
    },
    {
        "id": "1034",
        "source": "leetcodeTitles",
        "source_id": "1849",
        "url": "https://leetcode.com/problems/splitting-a-string-into-descending-consecutive-values/",
        "language": "python",
        "query": "Splitting a String Into Descending Consecutive Values",
        "snippets": [
            "def split_and_join(line):\n    # write your code here\n    return \"-\".join(sorted(line.split(\" \"), reverse=True))\n",
            "def split_list(items):\n    \"\"\"Returns a list of lists of consecutive items from items.\"\"\"\n    return [items[i:i+1] for i in range(len(items))]\n",
            "def split_list(items):\n    \"\"\"Returns a list of lists of consecutive items from items.\"\"\"\n    return [items[i:i+2] for i in range(0, len(items), 2)]\n",
            "def split_list(items):\n    \"\"\"\n    Split a list into a list of consecutive, descending, sublists.\n    \"\"\"\n    return [items[i:i+3] for i in range(len(items)-2, -3, -3)]\n",
            "def split_list(items):\n    \"\"\"\n    Split a list into a list of consecutive, descending, sublists.\n    \"\"\"\n    return [items[i:i+3] for i in range(len(items)-2, -1, -3)]\n",
            "def split_list(items):\n    \"\"\"Split a list into a list of consecutive items.\n\n    For example, split_list([1, 2, 3, 4, 5]) returns [[1, 2, 3], [4, 5]].\n    You may assume that the list items are unique.\n\n    Args:\n        items: list of items.\n\n    Returns:\n        list of lists of consecutive items.\n    \"\"\"\n    return [items[i:i+3] for i in range(0, len(items), 3)]\n",
            "def split_list(items):\n    \"\"\"\n    Split a list into a list of consecutive, descending, sublists.\n    \"\"\"\n    items.sort()\n    items.reverse()\n    return [items[i:i+3] for i in range(0, len(items), 3)]\n",
            "def split_list(items):\n    \"\"\"\n    Split a list into a list of consecutive, descending, sublists.\n    \"\"\"\n    items.sort(reverse=True)\n    return [items[i:i+3] for i in range(0, len(items), 3)]\n",
            "def split_list(items):\n    \"\"\"\n    >>> split_list([1, 4, 4, 5, 7, 8, 9, 10])\n    [[1, 4, 4], [5, 7, 8, 9, 10]]\n    \"\"\"\n    return [items[i:i+3] for i in range(0, len(items), 3)]\n",
            "def split_list_into_descending_consecutive_values(items):\n    \"\"\"\n    Given a list of items, return a list of lists of items,\n    with each sublist containing items that come before the next\n    item in the original list.\n\n    >>> split_list_into_descending_consecutive_values([1, 4, 3, 2])\n    [[1], [4, 3], [2]]\n    >>> split_list_into_descending_consecutive_values([1, 5, 3, 4, 2])\n    [[1], [5, 3], [4, 2]]\n    >>> split_list_into_descending_consecutive_values([1, 6, 4, 3, 2])\n    [[1], [6, 4, 3], [2]]\n    >>> split_list_into_descending_consecutive_values([1, 10, 9, 8, 7, 2, 3, 4, 5, 6])\n    [[1], [10, 9, 8, 7], [2, 3, 4, 5, 6]]\n    \"\"\"\n    return [items[:i] for i in range(1, len(items) + 1)]\n"
        ],
        "results": 10
    },
    {
        "id": "1035",
        "source": "leetcodeTitles",
        "source_id": "21",
        "url": "https://leetcode.com/problems/merge-two-sorted-lists/",
        "language": "python",
        "query": "Merge Two Sorted Lists",
        "snippets": [
            "def mergeTwoLists(l1, l2):\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val < l2.val:\n        l1.next = mergeTwoLists(l1.next, l2)\n        return l1\n    else:\n        l2.next = mergeTwoLists(l1, l2.next)\n        return l2\n",
            "def mergeTwoLists(l1, l2):\n    \"\"\"\n    :type l1: ListNode\n    :type l2: ListNode\n    :rtype: ListNode\n    \"\"\"\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.val < l2.val:\n        l1.next = mergeTwoLists(l1.next, l2)\n        return l1\n    else:\n        l2.next = mergeTwoLists(l1, l2.next)\n        return l2\n",
            "def mergeTwoLists(l1, l2):\n    dummy = curr = ListNode(0)\n    while l1 and l2:\n        if l1.val < l2.val:\n            curr.next = l1\n            l1 = l1.next\n        else:\n            curr.next = l2\n            l2 = l2.next\n        curr = curr.next\n    curr.next = l1 or l2\n    return dummy.next\n",
            "def merge_two_sorted_lists(l1, l2):\n    \"\"\"\n    Merge two sorted lists into one sorted list.\n    \"\"\"\n    if l1 is None:\n        return l2\n    if l2 is None:\n        return l1\n    if l1.data < l2.data:\n        l1.next = merge_two_sorted_lists(l1.next, l2)\n        return l1\n    else:\n        l2.next = merge_two_sorted_lists(l1, l2.next)\n        return l2\n",
            "def merge_two_lists(lst1, lst2):\n    \"\"\"\n    Merge two sorted lists into one sorted list.\n    \"\"\"\n    merged_list = []\n    while lst1 and lst2:\n        if lst1[0] < lst2[0]:\n            merged_list.append(lst1.pop(0))\n        else:\n            merged_list.append(lst2.pop(0))\n    merged_list += lst1 + lst2\n    return merged_list\n",
            "def merge_sorted_lists(lst1, lst2):\n    \"\"\"\n    Merge two sorted lists into one sorted list.\n    \"\"\"\n    merged_list = []\n    while lst1 and lst2:\n        if lst1[0] < lst2[0]:\n            merged_list.append(lst1.pop(0))\n        else:\n            merged_list.append(lst2.pop(0))\n    merged_list += lst1 + lst2\n    return merged_list\n",
            "def merge_two_lists(l1, l2):\n    \"\"\"\n    Merge two sorted lists into one sorted list.\n    \"\"\"\n    merged_list = []\n    while l1 and l2:\n        if l1[0] < l2[0]:\n            merged_list.append(l1.pop(0))\n        else:\n            merged_list.append(l2.pop(0))\n    merged_list += l1 + l2\n    return merged_list\n"
        ],
        "results": 10
    },
    {
        "id": "1036",
        "source": "leetcodeTitles",
        "source_id": "58",
        "url": "https://leetcode.com/problems/length-of-last-word/",
        "language": "python",
        "query": "Length of Last Word",
        "snippets": [
            "def lengthOfLastWord(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if not s:\n        return 0\n    s = s.strip()\n    return len(s.split()[-1])\n",
            "def lengthOfLastWord(s):\n    \"\"\"\n    :type s: str\n    :rtype: int\n    \"\"\"\n    if s == \"\":\n        return 0\n    else:\n        return len(s.split(\" \")[-1])\n",
            "def lengthOfLastWord(s):\n    s = s.strip()\n    if len(s) == 0:\n        return 0\n    else:\n        return len(s.split()[-1])\n",
            "def lengthOfLastWord(s):\n    if s == \"\":\n        return 0\n    else:\n        return len(s.split(\" \")[-1])\n",
            "def length_of_last_word(s):\n    if s == \"\":\n        return 0\n    else:\n        return len(s.split(\" \")[-1])\n",
            "def lengthOfLastWord(s):\n    return len(s.strip().split(' ')[-1])\n",
            "def lengthOfLastWord(s):\n    if len(s) == 0:\n        return 0\n    s = s.strip()\n    return len(s.split()[-1])\n",
            "def lengthOfLastWord(s):\n    return len(s.rstrip(' ').split(' ')[-1])\n"
        ],
        "results": 10
    },
    {
        "id": "1037",
        "source": "leetcodeTitles",
        "source_id": "50",
        "url": "https://leetcode.com/problems/powx-n/",
        "language": "python",
        "query": "Pow(x, n)",
        "snippets": [
            "def myPow(x, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return x\n    if n < 0:\n        return 1 / myPow(x, -n)\n    if n % 2 == 0:\n        return myPow(x * x, n // 2)\n    else:\n        return x * myPow(x * x, n // 2)\n",
            "def myPow(x, n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return x\n    if n < 0:\n        return 1 / myPow(x, -n)\n    if n % 2 == 0:\n        return myPow(x * x, n / 2)\n    else:\n        return x * myPow(x * x, n / 2)\n",
            "def myPow(x, n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 1 / myPow(x, -n)\n    if n % 2 == 0:\n        return myPow(x * x, n // 2)\n    return x * myPow(x * x, n // 2)\n",
            "def myPow(x, n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 1 / myPow(x, -n)\n    if n % 2 == 0:\n        return myPow(x * x, n / 2)\n    else:\n        return x * myPow(x * x, n / 2)\n"
        ],
        "results": 10
    },
    {
        "id": "1038",
        "source": "leetcodeTitles",
        "source_id": "423",
        "url": "https://leetcode.com/problems/reconstruct-original-digits-from-english/",
        "language": "python",
        "query": "Reconstruct Original Digits from English",
        "snippets": [
            "def reconstruct(digits):\n    \"\"\"\n    Reconstruct the original digits from the English digits.\n    \"\"\"\n    # Your code here\n    return digits\n",
            "def reconstruct(digits, english):\n    \"\"\"\n    Reconstruct the original digits from the English text.\n    \"\"\"\n    # Your code here\n    return digits\n",
            "def reconstruct(digits):\n    \"\"\"\n    Reconstructs the original digits from the English representation.\n    \"\"\"\n    # Your code here\n    return digits\n",
            "def reconstruct(s):\n    \"\"\"\n    Reconstruct the original digits from the English text.\n    \"\"\"\n    # Your code here\n    return None\n",
            "def reconstruct(digits):\n    \"\"\"\n    Reconstruct the original digits from the English text.\n    \"\"\"\n    # Your code here\n    return digits\n",
            "def reconstruct(digits):\n    \"\"\"\n    Reconstructs the original digits from the English digits.\n    \"\"\"\n    # Create a dictionary of the English digits.\n    english_digits = {\n        '0': 'zero',\n        '1': 'one',\n        '2': 'two',\n        '3': 'three',\n        '4': 'four',\n        '5': 'five',\n        '6': 'six',\n        '7': 'seven',\n        '8': 'eight',\n        '9': 'nine'\n    }\n    # Create a list of the digits.\n    digit_list = []\n    for digit in digits:\n        digit_list.append(english_digits[digit])\n    # Join the digits together.\n    return ' '.join(digit_list)\n",
            "def reconstruct(digits):\n    \"\"\"\n    Reconstructs the original digits from the English representation.\n    \"\"\"\n    # Create a dictionary of all the digits\n    digit_dict = {'0': 'zero', '1': 'one', '2': 'two', '3': 'three', '4': 'four', '5': 'five', '6': 'six', '7': 'seven', '8': 'eight', '9': 'nine'}\n    # Create a list of the digits\n    digit_list = []\n    # Loop through the digits\n    for digit in digits:\n        # Append the digit to the list\n        digit_list.append(digit_dict[digit])\n    # Return the list\n    return digit_list\n",
            "def recon(s):\n    # your code here\n    return s\n"
        ],
        "results": 10
    },
    {
        "id": "1039",
        "source": "leetcodeTitles",
        "source_id": "1567",
        "url": "https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/",
        "language": "python",
        "query": "https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product//",
        "snippets": [
            "def maxProduct(self, nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    max_product = min_product = result = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        result = max(result, max_product)\n    return result\n",
            "def maxProduct(nums):\n    if not nums:\n        return 0\n    max_product = min_product = res = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n        res = max(res, max_product)\n    return res\n",
            "def max_len(nums):\n    if not nums:\n        return 0\n    max_len = 1\n    cur_len = 1\n    cur_prod = 1\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            cur_prod *= nums[i]\n            cur_len += 1\n        else:\n            cur_prod = 1\n            cur_len = 1\n        max_len = max(max_len, cur_len)\n    return max_len\n",
            "def max_len(nums):\n    if not nums:\n        return 0\n    max_len = 1\n    cur_len = 1\n    cur_prod = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            cur_prod *= nums[i]\n            cur_len += 1\n        else:\n            cur_prod = nums[i]\n            cur_len = 1\n        max_len = max(max_len, cur_len)\n    return max_len\n",
            "def max_len(nums):\n    if not nums:\n        return 0\n    max_len = 1\n    cur_len = 1\n    cur_prod = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            cur_len += 1\n            cur_prod *= nums[i]\n        else:\n            if cur_prod == 0:\n                cur_len = 1\n                cur_prod = nums[i]\n            else:\n                cur_len = 1\n                cur_prod = nums[i]\n        max_len = max(max_len, cur_len)\n    return max_len\n",
            "def maxProduct(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_product = nums[0]\n    min_product = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < 0:\n            max_product, min_product = min_product, max_product\n        max_product = max(nums[i], max_product * nums[i])\n        min_product = min(nums[i], min_product * nums[i])\n    return max_product\n",
            "def max_len(arr):\n    if not arr:\n        return 0\n    max_len = 1\n    curr_len = 1\n    curr_prod = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            curr_len += 1\n            curr_prod *= arr[i]\n        else:\n            if curr_prod > 0:\n                curr_prod = 1\n                curr_len = 1\n            else:\n                curr_len = 1\n                curr_prod = arr[i]\n        max_len = max(max_len, curr_len)\n    return max_len\n",
            "def max_len(nums):\n    if not nums:\n        return 0\n    max_len = 1\n    curr_len = 1\n    curr_prod = 1\n    for i in range(1, len(nums)):\n        if nums[i] > 0:\n            curr_prod *= nums[i]\n            curr_len += 1\n        else:\n            curr_prod = 1\n            curr_len = 1\n        max_len = max(max_len, curr_len)\n    return max_len\n",
            "def max_len(arr):\n    if len(arr) == 0:\n        return 0\n    max_len = 0\n    cur_len = 0\n    cur_prod = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            if cur_len > max_len:\n                max_len = cur_len\n            cur_len = 0\n            cur_prod = 1\n        else:\n            cur_prod *= arr[i]\n            cur_len += 1\n    if cur_len > max_len:\n        max_len = cur_len\n    return max_len\n",
            "def max_length_subarray(arr):\n    if not arr:\n        return 0\n    max_length = 0\n    max_product = 1\n    min_product = 1\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            max_product *= arr[i]\n            min_product *= arr[i]\n        else:\n            max_product *= arr[i]\n            min_product *= arr[i]\n        if max_product == 0:\n            max_product = 1\n        if min_product == 0:\n            min_product = 1\n        max_length = max(max_length, i + 1)\n    return max_length\n"
        ],
        "results": 10
    },
    {
        "id": "1040",
        "source": "leetcodeTitles",
        "source_id": "590",
        "url": "https://leetcode.com/problems/n-ary-tree-postorder-traversal/",
        "language": "python",
        "query": "N-ary Tree Postorder Traversal",
        "snippets": [
            "def postorder(root):\n    if root is None:\n        return []\n    return postorder(root.left) + postorder(root.right) + [root.val]\n",
            "def postorder(root):\n    if root:\n        postorder(root.left)\n        postorder(root.right)\n        print(root.val, end=\" \")\n",
            "def postorder(root):\n    if root:\n        for child in root.children:\n            postorder(child)\n        print(root.val)\n",
            "def postorder(root):\n    if root:\n        postorder(root.left)\n        postorder(root.right)\n        print(root.val, end=' ')\n    return\n",
            "def postorder(root):\n    if root:\n        postorder(root.left)\n        postorder(root.right)\n        print(root.val, end=\" \")\n    return\n"
        ],
        "results": 10
    },
    {
        "id": "1041",
        "source": "leetcodeTitles",
        "source_id": "2171",
        "url": "https://leetcode.com/problems/removing-minimum-number-of-magic-beans/",
        "language": "python",
        "query": "Removing Minimum Number of Magic Beans",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if i % 2 == 0:\n            ans += 1\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (n - i)\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] == i+1:\n            ans += 1\n        else:\n            break\n    print(ans)\n",
            "def solve(n, m):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 37\n    if n == 10:\n        return 46\n    if n == 11:\n        return 56\n    if n == 12:\n        return 67\n    if n == 13:\n        return 79\n    if n == 14:\n        return 92\n    if n == 15:\n        return 106\n    if n == 16:\n        return 121\n    if n == 17:\n        return 137\n    if n == 18:\n        return 154\n    if n == 19:\n        return 172\n    if n == 20:\n        return 191\n    if n == 21:\n        return 211\n    if n == 22:\n        return 232\n    if n == 23:\n        return 254\n    if n == 24:\n        return 277\n    if n == 25:\n        return 301\n    if n == 26:\n        return 326\n    if n == 27:\n        return 352\n    if n == 28:\n        return 379\n    if n == 29:\n        return 407\n    if n == 30:\n        return 436\n    if n == 31:\n        return 466\n    if n == 32:\n        return 497\n    if n == 33:\n        return 529\n    if n == 34:\n        return 562\n    if n == 35:\n        return 596\n    if n == 36:\n        return 631\n    if n == 37:\n        return 667\n    if n == 38:\n        return 704\n    if n == 39:\n        return 742\n    if n == 40:\n        return 781\n    if n == 41:\n        return 821\n    if n == 42:\n        return 862\n    if n == 43:\n        return 904\n    if n == 44:\n",
            "def remove_min(list):\n    min_value = min(list)\n    list.remove(min_value)\n    return list\n",
            "def min_beans(s):\n    if len(s) == 1:\n        return 0\n    else:\n        return min(min_beans(s[1:]), min_beans(s[:-1])) + 1\n",
            "def remove_min(list):\n    min_val = min(list)\n    list.remove(min_val)\n    return list\n",
            "def min_magic_beans(s):\n    # Write your code here\n    s = list(s)\n    s.sort()\n    s.reverse()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '#':\n            count += 1\n            s[i] = '.'\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1042",
        "source": "leetcodeTitles",
        "source_id": "1760",
        "url": "https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag/",
        "language": "python",
        "query": "Minimum Limit of Balls in a Bag",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < n:\n        if a[i] < b[j]:\n            ans += 1\n            i += 1\n        else:\n            j += 1\n    print(ans)\n",
            "def min_balls(n, m, k):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n ==\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if ans >= n:\n            ans -= a[i]\n            break\n    print(ans)\n",
            "def min_balls(n, m):\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n        return 44\n    if n == 45:\n",
            "def min_balls(n, m, k):\n    \"\"\"\n    :param n: number of balls\n    :param m: number of colors\n    :param k: number of colors to be used\n    :return: minimum number of balls to be used\n    \"\"\"\n    if k == 1:\n        return n\n    if k == m:\n        return 1\n    if k > m:\n        return 0\n    if k == 2:\n        return min(n, m - 1)\n    if k == 3:\n        return min(n, m - 2)\n    if k == 4:\n        return min(n, m - 3)\n    if k == 5:\n        return min(n, m - 4)\n    if k == 6:\n        return min(n, m - 5)\n    if k == 7:\n        return min(n, m - 6)\n    if k == 8:\n        return min(n, m - 7)\n    if k == 9:\n        return min(n, m - 8)\n    if k == 10:\n        return min(n, m - 9)\n    if k == 11:\n        return min(n, m - 10)\n    if k == 12:\n        return min(n, m - 11)\n    if k == 13:\n        return min(n, m - 12)\n    if k == 14:\n        return min(n, m - 13)\n    if k == 15:\n        return min(n, m - 14)\n    if k == 16:\n        return min(n, m - 15)\n    if k == 17:\n        return min(n, m - 16)\n    if k == 18:\n        return min(n, m - 17)\n    if k == 19:\n        return min(n, m - 18)\n    if k == 20:\n        return min(n, m - 19)\n    if k == 21:\n        return min(n, m - 20)\n    if k == 22:\n        return min(n, m - 21)\n    if k == 23:\n        return min(n, m - 22)\n    if k == 24:\n        return min(\n",
            "def min_balls(balls, limit):\n    \"\"\"\n    >>> min_balls([1, 2, 3, 4, 5], 3)\n    3\n    >>> min_balls([1, 2, 3, 4, 5], 4)\n    4\n    >>> min_balls([1, 2, 3, 4, 5], 5)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 6)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 7)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 8)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 9)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 10)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 11)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 12)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 13)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 14)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 15)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 16)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 17)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 18)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 19)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 20)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 21)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 22)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 23)\n    5\n    >>> min_balls([1, 2, 3, 4, 5], 24)\n    5\n    >>> min\n",
            "def min_balls(n, m, k):\n    \"\"\"\n    :param n: number of balls\n    :param m: number of colors\n    :param k: number of colors to be used\n    :return: minimum number of balls to be used\n    \"\"\"\n    if k == 1:\n        return n\n    if k == m:\n        return 1\n    if k > m:\n        return 0\n    return min_balls(n, m, k - 1) + min_balls(n - k, m, k)\n",
            "def min_balls(balls, limit):\n    \"\"\"\n    :param balls: list of balls\n    :param limit: limit of balls\n    :return: minimum number of balls to be used\n    \"\"\"\n    if limit == 0:\n        return 0\n    if limit == 1:\n        return 1\n    if limit == 2:\n        return 2\n    if limit == 3:\n        return 3\n    if limit == 4:\n        return 4\n    if limit == 5:\n        return 5\n    if limit == 6:\n        return 6\n    if limit == 7:\n        return 7\n    if limit == 8:\n        return 8\n    if limit == 9:\n        return 9\n    if limit == 10:\n        return 10\n    if limit == 11:\n        return 11\n    if limit == 12:\n        return 12\n    if limit == 13:\n        return 13\n    if limit == 14:\n        return 14\n    if limit == 15:\n        return 15\n    if limit == 16:\n        return 16\n    if limit == 17:\n        return 17\n    if limit == 18:\n        return 18\n    if limit == 19:\n        return 19\n    if limit == 20:\n        return 20\n    if limit == 21:\n        return 21\n    if limit == 22:\n        return 22\n    if limit == 23:\n        return 23\n    if limit == 24:\n        return 24\n    if limit == 25:\n        return 25\n    if limit == 26:\n        return 26\n    if limit == 27:\n        return 27\n    if limit == 28:\n        return 28\n    if limit == 29:\n        return 29\n    if limit == 30:\n        return 30\n    if limit == 31:\n        return 31\n    if limit == 32:\n        return 32\n    if limit == 33:\n        return 33\n    if limit == 34:\n        return 34\n    if limit == 35:\n        return 35\n    if limit == 36:\n        return 36\n    if limit == 37:\n        return 37\n    if limit == 38:\n        return 38\n    if limit == 39:\n        return 39\n    if limit == 40:\n        return 40\n    if limit\n"
        ],
        "results": 10
    },
    {
        "id": "1043",
        "source": "leetcodeTitles",
        "source_id": "18",
        "url": "https://leetcode.com/problems/4sum/",
        "language": "python",
        "query": "4Sum",
        "snippets": [
            "def fourSum(nums, target):\n    nums.sort()\n    result = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left = j + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if sum == target:\n                    result.append([nums[i], nums[j], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return result\n",
            "def fourSum(nums, target):\n    nums.sort()\n    res = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            left = j + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[j] + nums[left] + nums[right]\n                if sum == target:\n                    res.append([nums[i], nums[j], nums[left], nums[right]])\n                    left += 1\n                    right -= 1\n                    while left < right and nums[left] == nums[left - 1]:\n                        left += 1\n                    while left < right and nums[right] == nums[right + 1]:\n                        right -= 1\n                elif sum < target:\n                    left += 1\n                else:\n                    right -= 1\n    return res\n",
            "def fourSum(nums, target):\n    nums.sort()\n    res = []\n    for i in range(len(nums) - 3):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        for j in range(i + 1, len(nums) - 2):\n            if j > i + 1 and nums[j] == nums[j - 1]:\n                continue\n            l, r = j + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[j] + nums[l] + nums[r]\n                if s == target:\n                    res.append([nums[i], nums[j], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l - 1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r + 1]:\n                        r -= 1\n                elif s < target:\n                    l += 1\n                else:\n                    r -= 1\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "1044",
        "source": "leetcodeTitles",
        "source_id": "2178",
        "url": "https://leetcode.com/problems/maximum-split-of-positive-even-integers/",
        "language": "python",
        "query": "Maximum Split of Positive Even Integers",
        "snippets": [
            "def max_split(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1 + max_split(n // 2)\n    else:\n        return max_split(n - 1)\n",
            "def max_split(n):\n    if n == 0:\n        return 0\n    if n % 2 == 0:\n        return 1 + max_split(n // 2)\n    else:\n        return max_split(n // 2)\n",
            "def max_split(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 0:\n        return 1 + max_split(n // 2)\n    else:\n        return max_split(n - 1)\n",
            "def max_split(n):\n    if n < 2:\n        return 0\n    if n % 2 == 0:\n        return 1 + max_split(n // 2)\n    else:\n        return max_split(n - 1)\n",
            "def max_split(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n == 44:\n",
            "def max_split(n):\n    if n == 0:\n        return 0\n    if n % 2 == 1:\n        return 0\n    return 1 + max_split(n // 2)\n"
        ],
        "results": 10
    },
    {
        "id": "1045",
        "source": "leetcodeTitles",
        "source_id": "328",
        "url": "https://leetcode.com/problems/odd-even-linked-list/",
        "language": "python",
        "query": "Odd Even Linked List",
        "snippets": [
            "def oddEvenList(head):\n    if head is None:\n        return None\n    odd = head\n    even = head.next\n    even_head = even\n    while even and even.next:\n        odd.next = even.next\n        odd = odd.next\n        even.next = odd.next\n        even = even.next\n    odd.next = even_head\n    return head\n",
            "def oddEvenList(head):\n    if head is None:\n        return head\n    odd = head\n    even = head.next\n    even_head = even\n    while even and even.next:\n        odd.next = even.next\n        odd = odd.next\n        even.next = odd.next\n        even = even.next\n    odd.next = even_head\n    return head\n",
            "def oddEvenList(head):\n    if not head or not head.next:\n        return head\n    odd = head\n    even = head.next\n    even_head = even\n    while even and even.next:\n        odd.next = even.next\n        odd = odd.next\n        even.next = odd.next\n        even = even.next\n    odd.next = even_head\n    return head\n"
        ],
        "results": 10
    },
    {
        "id": "1046",
        "source": "leetcodeTitles",
        "source_id": "133",
        "url": "https://leetcode.com/problems/clone-graph/",
        "language": "python",
        "query": "Clone Graph",
        "snippets": [
            "def cloneGraph(self, node):\n    \"\"\"\n    :type node: UndirectedGraphNode\n    :rtype: UndirectedGraphNode\n    \"\"\"\n    if not node:\n        return None\n    visited = {}\n    return self.dfs(node, visited)\n",
            "def clone_graph(node):\n    if not node:\n        return None\n    clone_node = UndirectedGraphNode(node.label)\n    visited = {}\n    visited[node] = clone_node\n    for neighbor in node.neighbors:\n        if neighbor in visited:\n            clone_node.neighbors.append(visited[neighbor])\n        else:\n            clone_neighbor = clone_graph(neighbor)\n            clone_node.neighbors.append(clone_neighbor)\n            visited[neighbor] = clone_neighbor\n    return clone_node\n",
            "def clone_graph(node):\n    if not node:\n        return None\n    clone_node = UndirectedGraphNode(node.label)\n    visited = {}\n    visited[node] = clone_node\n    for neighbor in node.neighbors:\n        if neighbor not in visited:\n            visited[neighbor] = clone_graph(neighbor)\n        clone_node.neighbors.append(visited[neighbor])\n    return clone_node\n",
            "def clone_graph(node):\n    if not node:\n        return None\n    clone_node = UndirectedGraphNode(node.label)\n    clone_node.neighbors = [clone_graph(neighbor) for neighbor in node.neighbors]\n    return clone_node\n",
            "def clone_graph(node):\n    if not node:\n        return None\n    clone = UndirectedGraphNode(node.label)\n    visited = {}\n    visited[node] = clone\n    for neighbor in node.neighbors:\n        if neighbor not in visited:\n            visited[neighbor] = clone_graph(neighbor)\n        visited[node].neighbors.append(visited[neighbor])\n    return clone\n",
            "def clone_graph(node):\n    if not node:\n        return None\n    clone = UndirectedGraphNode(node.label)\n    visited = {}\n    visited[node] = clone\n    for neighbor in node.neighbors:\n        if neighbor not in visited:\n            visited[neighbor] = clone_graph(neighbor)\n        clone.neighbors.append(visited[neighbor])\n    return clone\n",
            "def clone_graph(node):\n    if not node:\n        return None\n    clone = UndirectedGraphNode(node.label)\n    dic = {node: clone}\n    for n in node.neighbors:\n        if n not in dic:\n            dic[n] = UndirectedGraphNode(n.label)\n        dic[node].neighbors.append(dic[n])\n    for key, value in dic.items():\n        if key.neighbors:\n            value.neighbors = [dic[n] for n in key.neighbors]\n    return clone\n",
            "def clone_graph(node):\n    if not node:\n        return None\n    clone = UndirectedGraphNode(node.label)\n    visited = {node: clone}\n    for n in node.neighbors:\n        if n not in visited:\n            visited[n] = clone_graph(n)\n        clone.neighbors.append(visited[n])\n    return clone\n",
            "def clone_graph(node):\n    if not node:\n        return None\n    copy = UndirectedGraphNode(node.label)\n    visited = {node: copy}\n    for neighbor in node.neighbors:\n        if neighbor not in visited:\n            visited[neighbor] = clone_graph(neighbor)\n        visited[node].neighbors.append(visited[neighbor])\n    return copy\n"
        ],
        "results": 10
    },
    {
        "id": "1047",
        "source": "leetcodeTitles",
        "source_id": "107",
        "url": "https://leetcode.com/problems/binary-tree-level-order-traversal-ii/",
        "language": "python",
        "query": "Binary Tree Level Order Traversal II",
        "snippets": [
            "def levelOrderBottom(self, root):\n    if not root:\n        return []\n    res = []\n    queue = [root]\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        res.append(level)\n    return res[::-1]\n",
            "def levelOrderBottom(self, root):\n    if not root:\n        return []\n    queue = [root]\n    res = []\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        res.append(level)\n    return res[::-1]\n",
            "def levelOrderBottom(root):\n    if not root:\n        return []\n    res = []\n    queue = [root]\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        res.append(level)\n    return res[::-1]\n",
            "def levelOrderBottom(self, root):\n    if not root:\n        return []\n    res, q = [], [root]\n    while q:\n        res.append([node.val for node in q])\n        q = [child for node in q for child in (node.left, node.right) if child]\n    return res[::-1]\n",
            "def levelOrderBottom(self, root):\n    if not root:\n        return []\n    res, queue = [], [root]\n    while queue:\n        level = []\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            level.append(node.val)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        res.append(level)\n    return res[::-1]\n",
            "def levelOrderBottom(self, root):\n    if not root:\n        return []\n    res = []\n    queue = [root]\n    while queue:\n        res.append([node.val for node in queue])\n        queue = [child for node in queue for child in (node.left, node.right) if child]\n    return res[::-1]\n"
        ],
        "results": 10
    },
    {
        "id": "1048",
        "source": "leetcodeTitles",
        "source_id": "1920",
        "url": "https://leetcode.com/problems/build-array-from-permutation/",
        "language": "python",
        "query": "Build Array from Permutation",
        "snippets": [
            "def permutation(n, k):\n    if n == 1:\n        return [1]\n    if k == 1:\n        return [1, n]\n    if k == n:\n        return [1, n]\n    if k == n - 1:\n        return [1, n, n + 1]\n    if k == n - 2:\n        return [1, n, n + 1, n + 2]\n    if k == n - 3:\n        return [1, n, n + 1, n + 2, n + 3]\n    if k == n - 4:\n        return [1, n, n + 1, n + 2, n + 3, n + 4]\n    if k == n - 5:\n        return [1, n, n + 1, n + 2, n + 3, n + 4, n + 5]\n    if k == n - 6:\n        return [1, n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6]\n    if k == n - 7:\n        return [1, n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7]\n    if k == n - 8:\n        return [1, n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8]\n    if k == n - 9:\n        return [1, n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9]\n    if k == n - 10:\n        return [1, n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10]\n    if k == n - 11:\n        return [1, n, n + 1, n + 2, n + 3, n + 4, n + 5, n + 6, n + 7, n + 8, n + 9, n + 10, n +\n",
            "def permute(nums):\n    if len(nums) == 1:\n        return [nums]\n    result = []\n    for i in range(len(nums)):\n        sub_nums = nums[:i] + nums[i+1:]\n        for p in permute(sub_nums):\n            result.append([nums[i]] + p)\n    return result\n",
            "def permutation(n, k):\n    if n == 1:\n        return [1]\n    if k == 1:\n        return [1, n]\n    if k == n:\n        return [n for n in range(1, n + 1)]\n    if k > n:\n        return None\n    if k == n - 1:\n        return [n for n in range(1, n + 1)]\n    if k == n - 2:\n        return [n - 1, n]\n    if k == n - 3:\n        return [n - 2, n - 1, n]\n    if k == n - 4:\n        return [n - 3, n - 2, n - 1, n]\n    if k == n - 5:\n        return [n - 4, n - 3, n - 2, n - 1, n]\n    if k == n - 6:\n        return [n - 5, n - 4, n - 3, n - 2, n - 1, n]\n    if k == n - 7:\n        return [n - 6, n - 5, n - 4, n - 3, n - 2, n - 1, n]\n    if k == n - 8:\n        return [n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1, n]\n    if k == n - 9:\n        return [n - 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1, n]\n    if k == n - 10:\n        return [n - 9, n - 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1, n]\n    if k == n - 11:\n        return [n - 10, n - 9, n - 8, n - 7, n - 6, n - 5, n - 4, n - 3, n - 2, n - 1, n]\n    if k == n - 12:\n        return [n - 11, n - 10, n - 9, n - 8, n - 7, n -\n",
            "def permutation(n, k):\n    if n == 1:\n        return [k]\n    else:\n        return [k % n] + permutation(n - 1, k // n)\n",
            "def build_array(permutation):\n    array = []\n    for i in range(len(permutation)):\n        array.append(permutation[i])\n        if i == permutation[i]:\n            array.append(permutation[i])\n    return array\n",
            "def permutation(n):\n    if n == 1:\n        return [1]\n    else:\n        permutations = []\n        for i in range(1, n + 1):\n            for perm in permutation(n - 1):\n                permutations.append(i + perm)\n        return permutations\n",
            "def permutation(n):\n    if n == 1:\n        return [1]\n    else:\n        permutations = []\n        for i in range(1, n+1):\n            for j in permutation(n-1):\n                permutations.append(i+j)\n        return permutations\n",
            "def permute(nums):\n    res = []\n    if len(nums) == 1:\n        res.append(nums)\n        return res\n    for i in range(len(nums)):\n        tmp = nums[i]\n        nums.remove(tmp)\n        for j in permute(nums):\n            res.append([tmp] + j)\n        nums.insert(i, tmp)\n    return res\n",
            "def permutation(arr):\n    if len(arr) == 1:\n        return [arr]\n    perms = []\n    for i in range(len(arr)):\n        perm = arr[i]\n        for p in permutation(arr[:i] + arr[i+1:]):\n            perms.append([perm] + p)\n    return perms\n"
        ],
        "results": 10
    },
    {
        "id": "1049",
        "source": "leetcodeTitles",
        "source_id": "551",
        "url": "https://leetcode.com/problems/student-attendance-record-i/",
        "language": "python",
        "query": "Student Attendance Record I",
        "snippets": [
            "def checkRecord(s):\n    a = s.count('A')\n    l = s.count('L')\n    if a > 1 or l > 2:\n        return False\n    return True\n",
            "def checkRecord(s):\n    a = s.count('A')\n    if a > 1:\n        return False\n    l = s.split('L')\n    for i in l:\n        if i.count('LLL') > 0:\n            return False\n    return True\n",
            "def check_record(s):\n    a = s.count('A')\n    if a > 1:\n        return False\n    l = s.split('L')\n    if len(l) > 2:\n        return False\n    for i in l:\n        if i.count('LLL') > 0:\n            return False\n    return True\n",
            "def check_record(s):\n    a = s.count('A')\n    if a > 1:\n        return False\n    l = s.split('L')\n    for i in l:\n        if i.count('LLL') > 0:\n            return False\n    return True\n"
        ],
        "results": 10
    },
    {
        "id": "1050",
        "source": "leetcodeTitles",
        "source_id": "1311",
        "url": "https://leetcode.com/problems/get-watched-videos-by-your-friends/",
        "language": "python",
        "query": "Get Watched Videos by Your Friends",
        "snippets": [
            "def get_watched_videos(friends):\n    watched_videos = []\n    for friend in friends:\n        watched_videos.extend(friend['watchedVideos'])\n    return watched_videos\n",
            "def get_watched_videos(friends):\n    watched_videos = []\n    for friend in friends:\n        for video in friend['videos']:\n            watched_videos.append(video)\n    return watched_videos\n",
            "def get_watched_videos(friends):\n    watched_videos = []\n    for friend in friends:\n        for video in friend['watchedVideos']:\n            watched_videos.append(video)\n    return watched_videos\n",
            "def get_watched_videos(friends):\n    watched_videos = []\n    for friend in friends:\n        watched_videos.extend(friend['watched_videos'])\n    return watched_videos\n",
            "def get_watched_videos(api, user_id):\n    \"\"\"\n    Get Watched Videos by Your Friends\n    :param api:\n    :param user_id:\n    :return:\n    \"\"\"\n    # Get Watched Videos by Your Friends\n    # https://developer.vimeo.com/api/reference/videos#get_users_user_id_videos_watched\n    url = 'https://api.vimeo.com/users/{}/videos/watched'.format(user_id)\n    params = {'access_token': api.access_token}\n    r = api.session.get(url, params=params)\n    return r.json()\n",
            "def get_watched_videos(api, user_id):\n    \"\"\"\n    Get Watched Videos by Your Friends\n    \"\"\"\n    # Get Watched Videos by Your Friends\n    # https://developer.vimeo.com/api/reference/videos#get_users_user_id_videos\n    url = \"https://api.vimeo.com/users/{}/videos\".format(user_id)\n    params = {\n        \"filter\": \"watched\",\n        \"page\": 1,\n        \"per_page\": 100\n    }\n    response = api.get(url, params=params)\n    return response.json()\n",
            "def get_watched_videos(api, user_id):\n    \"\"\"\n    Get Watched Videos by Your Friends\n    \"\"\"\n    # Get Watched Videos by Your Friends\n    url = 'https://api.twitch.tv/helix/users/' + str(user_id) + '/videos/watched'\n    headers = {'Client-ID': api}\n    response = requests.get(url, headers=headers)\n    return response.json()\n",
            "def get_watched_videos(api, user_id):\n    \"\"\"\n    Get Watched Videos by Your Friends\n    \"\"\"\n    # Get Watched Videos by Your Friends\n    watched_videos = api.users_me_watched_videos()\n    # Get Watched Videos by Your Friends\n    watched_videos = api.users_id_watched_videos(user_id)\n    # Return Watched Videos by Your Friends\n    return watched_videos\n",
            "def get_watched_videos(api, user_id):\n    \"\"\"\n    Get Watched Videos by Your Friends\n    \"\"\"\n    # Get Watched Videos by Your Friends\n    videos = api.videos.get_watched_videos(user_id=user_id)\n    return videos\n"
        ],
        "results": 9
    },
    {
        "id": "1051",
        "source": "leetcodeTitles",
        "source_id": "1175",
        "url": "https://leetcode.com/problems/prime-arrangements/",
        "language": "python",
        "query": "Prime Arangements",
        "snippets": [
            "def prime_arangements(n):\n    if n == 1:\n        return [[1]]\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    arrangements = []\n    for prime in primes:\n        for arrangement in prime_arangements(n - prime):\n            arrangements.append([prime] + arrangement)\n    return arrangements\n",
            "def prime_arangements(n):\n    if n == 1:\n        return [[1]]\n    primes = [i for i in range(1, n + 1) if is_prime(i)]\n    arrangements = []\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            arrangements.append([primes[i], primes[j]])\n    return arrangements\n",
            "def prime_arangements(n):\n    if n == 1:\n        return [[1]]\n    primes = [i for i in range(1, n + 1) if is_prime(i)]\n    arrangements = []\n    for prime in primes:\n        for arrangement in prime_arangements(n - prime):\n            arrangements.append([prime] + arrangement)\n    return arrangements\n",
            "def prime_arangement(n):\n    if n == 1:\n        return [[1]]\n    primes = [i for i in range(2, n + 1) if is_prime(i)]\n    arrangements = []\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            arrangements.append([primes[i], primes[j]])\n    return arrangements\n",
            "def prime_arangements(n):\n    if n == 1:\n        return [[1]]\n    primes = [i for i in range(1, n + 1) if prime(i)]\n    arrangements = []\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            arrangements.append([primes[i], primes[j]])\n    return arrangements\n",
            "def prime_arangement(n):\n    \"\"\"\n    :param n: int\n    :return: list of int\n    \"\"\"\n    if n < 2:\n        return []\n    if n == 2:\n        return [2]\n    if n == 3:\n        return [3]\n    if n == 4:\n        return [2, 2]\n    if n == 5:\n        return [5]\n    if n == 6:\n        return [3, 3]\n    if n == 7:\n        return [7]\n    if n == 8:\n        return [2, 2, 2]\n    if n == 9:\n        return [3, 3, 3]\n    if n == 10:\n        return [2, 5]\n    if n == 11:\n        return [11]\n    if n == 12:\n        return [2, 2, 3]\n    if n == 13:\n        return [13]\n    if n == 14:\n        return [2, 7]\n    if n == 15:\n        return [3, 5]\n    if n == 16:\n        return [2, 2, 2, 2]\n    if n == 17:\n        return [17]\n    if n == 18:\n        return [2, 3, 3]\n    if n == 19:\n        return [19]\n    if n == 20:\n        return [2, 5, 5]\n    if n == 21:\n        return [3, 7]\n    if n == 22:\n        return [2, 11]\n    if n == 23:\n        return [23]\n    if n == 24:\n        return [2, 2, 3, 3]\n    if n == 25:\n        return [5, 5]\n    if n == 26:\n        return [2, 13]\n    if n == 27:\n        return [3, 3, 5]\n    if n == 28:\n        return [2, 2, 2, 7]\n    if n == 29:\n        return [29]\n    if n == 30:\n        return [2, 3, 7]\n    if n == 31:\n        return [31]\n    if n ==\n",
            "def prime_arangement(n):\n    \"\"\"\n    Args:\n        n: int\n    Returns:\n        list of int\n    \"\"\"\n    if n < 1:\n        return []\n    if n == 1:\n        return [1]\n    if n == 2:\n        return [1, 2]\n    if n == 3:\n        return [1, 3, 2]\n    if n == 4:\n        return [1, 4, 3, 2]\n    if n == 5:\n        return [1, 5, 4, 3, 2]\n    if n == 6:\n        return [1, 6, 5, 4, 3, 2]\n    if n == 7:\n        return [1, 7, 6, 5, 4, 3, 2]\n    if n == 8:\n        return [1, 8, 7, 6, 5, 4, 3, 2]\n    if n == 9:\n        return [1, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 10:\n        return [1, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 11:\n        return [1, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 12:\n        return [1, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 13:\n        return [1, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 14:\n        return [1, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 15:\n        return [1, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 16:\n        return [1, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2]\n    if n == 17:\n"
        ],
        "results": 10
    },
    {
        "id": "1052",
        "source": "leetcodeTitles",
        "source_id": "876",
        "url": "https://leetcode.com/problems/middle-of-the-linked-list/",
        "language": "python",
        "query": "Middle of the Linked List",
        "snippets": [
            "def middle_of_list(head):\n    if head is None:\n        return None\n    slow = head\n    fast = head\n    while fast.next is not None and fast.next.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n",
            "def middle_of_list(head):\n    if head is None:\n        return None\n    slow = head\n    fast = head\n    while fast.next is not None and fast.next.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n    # if fast.next is None:\n    #     return slow\n    # else:\n    #     return slow.next\n    # return slow.next\n    # return slow.next.next\n    # return slow.next.next.next\n    # return slow.next.next.next.next\n    # return slow.next.next.next.next.next\n    # return slow.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next\n",
            "def middle_of_list(head):\n    if head is None:\n        return None\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n",
            "def middle_of_list(head):\n    if head is None:\n        return None\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n    # return slow.next if fast is None else slow\n    # return slow.next if fast is None else slow.next\n    # return slow.next if fast is None else slow.next.next\n    # return slow.next if fast is None else slow.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast is None else slow.next.next.next.next.next.next.next.next.\n",
            "def middle_of_linked_list(head):\n    if head is None:\n        return None\n    slow = head\n    fast = head\n    while fast.next is not None and fast.next.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n    # if fast.next is None:\n    #     return slow.next\n    # return slow\n    # return slow.next if fast.next is None else slow\n    # return slow.next if fast.next is None else slow.next\n    # return slow.next if fast.next is None else slow.next.next\n    # return slow.next if fast.next is None else slow.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast.next is None else slow.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next if fast.next is None else\n",
            "def middle_of_linked_list(head):\n    if head is None:\n        return None\n    slow = head\n    fast = head\n    while fast.next is not None and fast.next.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n    # if fast.next is None:\n    #     return slow\n    # else:\n    #     return slow.next\n    # return slow.next\n    # return slow.next.next\n    # return slow.next.next.next\n    # return slow.next.next.next.next\n    # return slow.next.next.next.next.next\n    # return slow.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next\n",
            "def middle_of_linked_list(head):\n    if head is None:\n        return None\n    slow = head\n    fast = head\n    while fast is not None and fast.next is not None:\n        slow = slow.next\n        fast = fast.next.next\n    return slow\n    # if fast is None:\n    #     return slow\n    # else:\n    #     return slow.next\n    # return slow.next\n    # return slow.next.next\n    # return slow.next.next.next\n    # return slow.next.next.next.next\n    # return slow.next.next.next.next.next\n    # return slow.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    # return slow.next.next.next.next.next\n"
        ],
        "results": 10
    },
    {
        "id": "1053",
        "source": "leetcodeTitles",
        "source_id": "2044",
        "url": "https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets/",
        "language": "python",
        "query": "Count Number of Maximum Bitwise-OR Subsets",
        "snippets": [
            "def count_max_bitwise_or_subsets(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 37\n    if n == 10:\n        return 46\n    if n == 11:\n        return 56\n    if n == 12:\n        return 67\n    if n == 13:\n        return 79\n    if n == 14:\n        return 92\n    if n == 15:\n        return 106\n    if n == 16:\n        return 121\n    if n == 17:\n        return 137\n    if n == 18:\n        return 154\n    if n == 19:\n        return 172\n    if n == 20:\n        return 191\n    if n == 21:\n        return 211\n    if n == 22:\n        return 232\n    if n == 23:\n        return 254\n    if n == 24:\n        return 277\n    if n == 25:\n        return 301\n    if n == 26:\n        return 326\n    if n == 27:\n        return 352\n    if n == 28:\n        return 379\n    if n == 29:\n        return 407\n    if n == 30:\n        return 436\n    if n == 31:\n        return 466\n    if n == 32:\n        return 497\n    if n == 33:\n        return 529\n    if n == 34:\n        return 562\n    if n == 35:\n        return 596\n    if n == 36:\n        return 631\n    if n == 37:\n        return 667\n    if n == 38:\n        return 704\n    if n == 39:\n        return 742\n    if n == 40:\n        return 781\n    if n == 41:\n        return 821\n    if n == 42:\n        return 862\n",
            "def count_max_bitwise_or_subsets(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n",
            "def count_bitwise_or_subsets(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 30\n    if n == 9:\n        return 39\n    if n == 10:\n        return 49\n    if n == 11:\n        return 60\n    if n == 12:\n        return 72\n    if n == 13:\n        return 85\n    if n == 14:\n        return 99\n    if n == 15:\n        return 114\n    if n == 16:\n        return 130\n    if n == 17:\n        return 147\n    if n == 18:\n        return 165\n    if n == 19:\n        return 184\n    if n == 20:\n        return 204\n    if n == 21:\n        return 225\n    if n == 22:\n        return 247\n    if n == 23:\n        return 270\n    if n == 24:\n        return 294\n    if n == 25:\n        return 319\n    if n == 26:\n        return 345\n    if n == 27:\n        return 372\n    if n == 28:\n        return 400\n    if n == 29:\n        return 429\n    if n == 30:\n        return 459\n    if n == 31:\n        return 490\n    if n == 32:\n        return 522\n    if n == 33:\n        return 555\n    if n == 34:\n        return 589\n    if n == 35:\n        return 624\n    if n == 36:\n        return 660\n    if n == 37:\n        return 697\n    if n == 38:\n        return 735\n    if n == 39:\n        return 774\n    if n == 40:\n        return 814\n    if n == 41:\n        return 855\n    if n == 42:\n        return 897\n    if n\n",
            "def count_subsets(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 12\n    if n == 6:\n        return 19\n    if n == 7:\n        return 30\n    if n == 8:\n        return 46\n    if n == 9:\n        return 69\n    if n == 10:\n        return 100\n    if n == 11:\n        return 135\n    if n == 12:\n        return 176\n    if n == 13:\n        return 231\n    if n == 14:\n        return 296\n    if n == 15:\n        return 376\n    if n == 16:\n        return 466\n    if n == 17:\n        return 566\n    if n == 18:\n        return 691\n    if n == 19:\n        return 836\n    if n == 20:\n        return 1002\n    if n == 21:\n        return 1209\n    if n == 22:\n        return 1460\n    if n == 23:\n        return 1765\n    if n == 24:\n        return 2120\n    if n == 25:\n        return 2499\n    if n == 26:\n        return 2915\n    if n == 27:\n        return 3364\n    if n == 28:\n        return 3845\n    if n == 29:\n        return 4369\n    if n == 30:\n        return 4926\n    if n == 31:\n        return 5525\n    if n == 32:\n        return 6166\n    if n == 33:\n        return 6845\n    if n == 34:\n        return 7562\n    if n == 35:\n        return 8309\n    if n == 36:\n        return 9100\n    if n == 37:\n        return 9925\n    if n == 38:\n        return 10786\n    if n == 39:\n        return 11689\n    if n == 40:\n        return 12644\n    if n == 41:\n        return 13635\n    if n\n",
            "def count_bitwise_or_subsets(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 16\n    if n == 7:\n        return 22\n    if n == 8:\n        return 29\n    if n == 9:\n        return 37\n    if n == 10:\n        return 46\n    if n == 11:\n        return 56\n    if n == 12:\n        return 67\n    if n == 13:\n        return 79\n    if n == 14:\n        return 92\n    if n == 15:\n        return 106\n    if n == 16:\n        return 121\n    if n == 17:\n        return 137\n    if n == 18:\n        return 154\n    if n == 19:\n        return 172\n    if n == 20:\n        return 191\n    if n == 21:\n        return 211\n    if n == 22:\n        return 232\n    if n == 23:\n        return 254\n    if n == 24:\n        return 277\n    if n == 25:\n        return 301\n    if n == 26:\n        return 326\n    if n == 27:\n        return 352\n    if n == 28:\n        return 379\n    if n == 29:\n        return 407\n    if n == 30:\n        return 436\n    if n == 31:\n        return 466\n    if n == 32:\n        return 497\n    if n == 33:\n        return 529\n    if n == 34:\n        return 562\n    if n == 35:\n        return 596\n    if n == 36:\n        return 631\n    if n == 37:\n        return 667\n    if n == 38:\n        return 704\n    if n == 39:\n        return 742\n    if n == 40:\n        return 781\n    if n == 41:\n        return 821\n    if n == 42:\n        return 862\n    if\n",
            "def countBitWiseORSubsets(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 8\n    if n == 9:\n        return 9\n    if n == 10:\n        return 10\n    if n == 11:\n        return 11\n    if n == 12:\n        return 12\n    if n == 13:\n        return 13\n    if n == 14:\n        return 14\n    if n == 15:\n        return 15\n    if n == 16:\n        return 16\n    if n == 17:\n        return 17\n    if n == 18:\n        return 18\n    if n == 19:\n        return 19\n    if n == 20:\n        return 20\n    if n == 21:\n        return 21\n    if n == 22:\n        return 22\n    if n == 23:\n        return 23\n    if n == 24:\n        return 24\n    if n == 25:\n        return 25\n    if n == 26:\n        return 26\n    if n == 27:\n        return 27\n    if n == 28:\n        return 28\n    if n == 29:\n        return 29\n    if n == 30:\n        return 30\n    if n == 31:\n        return 31\n    if n == 32:\n        return 32\n    if n == 33:\n        return 33\n    if n == 34:\n        return 34\n    if n == 35:\n        return 35\n    if n == 36:\n        return 36\n    if n == 37:\n        return 37\n    if n == 38:\n        return 38\n    if n == 39:\n        return 39\n    if n == 40:\n        return 40\n    if n == 41:\n        return 41\n    if n == 42:\n        return 42\n    if n == 43:\n        return 43\n    if n ==\n",
            "def count(n, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return m\n    if n == 2:\n        return m * (m - 1) // 2\n    if n == 3:\n        return m * (m - 1) * (m - 2) // 6\n    if n == 4:\n        return m * (m - 1) * (m - 2) * (m - 3) // 24\n    if n == 5:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) // 120\n    if n == 6:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) // 720\n    if n == 7:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) // 5040\n    if n == 8:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) // 40320\n    if n == 9:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) // 362880\n    if n == 10:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) // 3628800\n    if n == 11:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10) // 39916800\n    if\n",
            "def count(n, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 12\n    if n == 6:\n        return 19\n    if n == 7:\n        return 30\n    if n == 8:\n        return 43\n    if n == 9:\n        return 60\n    if n == 10:\n        return 81\n    if n == 11:\n        return 108\n    if n == 12:\n        return 137\n    if n == 13:\n        return 176\n    if n == 14:\n        return 217\n    if n == 15:\n        return 262\n    if n == 16:\n        return 311\n    if n == 17:\n        return 364\n    if n == 18:\n        return 421\n    if n == 19:\n        return 486\n    if n == 20:\n        return 557\n    if n == 21:\n        return 632\n    if n == 22:\n        return 713\n    if n == 23:\n        return 800\n    if n == 24:\n        return 893\n    if n == 25:\n        return 990\n    if n == 26:\n        return 1093\n    if n == 27:\n        return 1202\n    if n == 28:\n        return 1319\n    if n == 29:\n        return 1442\n    if n == 30:\n        return 1573\n    if n == 31:\n        return 1712\n    if n == 32:\n        return 1859\n    if n == 33:\n        return 2016\n    if n == 34:\n        return 2179\n    if n == 35:\n        return 2352\n    if n == 36:\n        return 2533\n    if n == 37:\n        return 2722\n    if n == 38:\n        return 2919\n    if n == 39:\n        return 3126\n    if n == 40:\n        return 3331\n    if n == 41:\n        return 3546\n    if n == 42:\n        return\n",
            "def count_subsets(n, m):\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    if n == 2:\n        return m * (m - 1) // 2\n    if n == 3:\n        return m * (m - 1) * (m - 2) // 6\n    if n == 4:\n        return m * (m - 1) * (m - 2) * (m - 3) // 24\n    if n == 5:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) // 120\n    if n == 6:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) // 720\n    if n == 7:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) // 5040\n    if n == 8:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) // 40320\n    if n == 9:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) // 362880\n    if n == 10:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) // 3628800\n    if n == 11:\n        return m * (m - 1) * (m - 2) * (m - 3) * (m - 4) * (m - 5) * (m - 6) * (m - 7) * (m - 8) * (m - 9) * (m - 10) // 39916800\n"
        ],
        "results": 10
    },
    {
        "id": "1054",
        "source": "leetcodeTitles",
        "source_id": "1619",
        "url": "https://leetcode.com/problems/mean-of-array-after-removing-some-elements/",
        "language": "python",
        "query": "Mean of Array After Removing Some Elements",
        "snippets": [
            "def mean(n, arr):\n    if n == 0:\n        return 0\n    else:\n        return (sum(arr) - max(arr) - min(arr)) / (n - 2)\n",
            "def mean(n, arr):\n    if n == 1:\n        return arr[0]\n    else:\n        return (mean(n-1, arr[1:]) + arr[0]) / 2\n",
            "def mean(n, arr):\n    if n == 0:\n        return 0\n    else:\n        return sum(arr) / n\n",
            "def mean(n, arr):\n    return sum(arr[:n]) / n\n",
            "def mean(n, arr):\n    return sum(arr[n:]) / (len(arr) - n)\n"
        ],
        "results": 10
    },
    {
        "id": "1055",
        "source": "leetcodeTitles",
        "source_id": "1600",
        "url": "https://leetcode.com/problems/throne-inheritance/",
        "language": "python",
        "query": "Throne Inheritance",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    e.sort()\n    f.sort()\n    g.sort()\n    h.sort()\n    i.sort()\n    j.sort()\n    k.sort()\n    l.sort()\n    m.sort()\n    n.sort()\n    o.sort()\n    p.sort()\n    q\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * (n - i)\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    a.reverse()\n    for i in range(n):\n        if i == 0:\n            print(a[i], end=\"\")\n        else:\n            print(\" %d\" % a[i], end=\"\")\n    print()\n"
        ],
        "results": 10
    },
    {
        "id": "1056",
        "source": "leetcodeTitles",
        "source_id": "343",
        "url": "https://leetcode.com/problems/integer-break/",
        "language": "python",
        "query": "Integer Break",
        "snippets": [
            "def integerBreak(n):\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 6\n    if n == 6:\n        return 9\n    if n == 7:\n        return 12\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 20\n    if n == 11:\n        return 22\n    if n == 12:\n        return 24\n    if n == 13:\n        return 26\n    if n == 14:\n        return 28\n    if n == 15:\n        return 30\n    if n == 16:\n        return 32\n    if n == 17:\n        return 34\n    if n == 18:\n        return 36\n    if n == 19:\n        return 38\n    if n == 20:\n        return 40\n    if n == 21:\n        return 42\n    if n == 22:\n        return 44\n    if n == 23:\n        return 46\n    if n == 24:\n        return 48\n    if n == 25:\n        return 50\n    if n == 26:\n        return 52\n    if n == 27:\n        return 54\n    if n == 28:\n        return 56\n    if n == 29:\n        return 58\n    if n == 30:\n        return 60\n    if n == 31:\n        return 62\n    if n == 32:\n        return 64\n    if n == 33:\n        return 66\n    if n == 34:\n        return 68\n    if n == 35:\n        return 70\n    if n == 36:\n        return 72\n    if n == 37:\n        return 74\n    if n == 38:\n        return 76\n    if n == 39:\n        return 78\n    if n == 40:\n        return 80\n    if n == 41:\n        return 82\n    if n == 42:\n        return 84\n    if n == 43:\n        return 86\n    if n == 44:\n        return 88\n    if n == 45:\n        return 90\n    if n == 46:\n        return\n",
            "def integerBreak(n):\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 6\n    if n == 6:\n        return 9\n    if n == 7:\n        return 12\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 20\n    if n == 11:\n        return 24\n    if n == 12:\n        return 27\n    if n == 13:\n        return 30\n    if n == 14:\n        return 33\n    if n == 15:\n        return 36\n    if n == 16:\n        return 40\n    if n == 17:\n        return 42\n    if n == 18:\n        return 45\n    if n == 19:\n        return 48\n    if n == 20:\n        return 51\n    if n == 21:\n        return 54\n    if n == 22:\n        return 57\n    if n == 23:\n        return 60\n    if n == 24:\n        return 63\n    if n == 25:\n        return 66\n    if n == 26:\n        return 69\n    if n == 27:\n        return 72\n    if n == 28:\n        return 75\n    if n == 29:\n        return 78\n    if n == 30:\n        return 81\n    if n == 31:\n        return 84\n    if n == 32:\n        return 87\n    if n == 33:\n        return 90\n    if n == 34:\n        return 93\n    if n == 35:\n        return 96\n    if n == 36:\n        return 99\n    if n == 37:\n        return 102\n    if n == 38:\n        return 105\n    if n == 39:\n        return 108\n    if n == 40:\n        return 111\n    if n == 41:\n        return 114\n    if n == 42:\n        return 117\n    if n == 43:\n        return 120\n    if n == 44:\n        return 123\n    if n == 45:\n        return 126\n    if n == 46:\n        return\n",
            "def integerBreak(n):\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 6\n    if n == 6:\n        return 9\n    if n == 7:\n        return 12\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 20\n    if n == 11:\n        return 24\n    if n == 12:\n        return 27\n    if n == 13:\n        return 30\n    if n == 14:\n        return 33\n    if n == 15:\n        return 36\n    if n == 16:\n        return 40\n    if n == 17:\n        return 42\n    if n == 18:\n        return 45\n    if n == 19:\n        return 48\n    if n == 20:\n        return 50\n    if n == 21:\n        return 54\n    if n == 22:\n        return 57\n    if n == 23:\n        return 60\n    if n == 24:\n        return 63\n    if n == 25:\n        return 66\n    if n == 26:\n        return 70\n    if n == 27:\n        return 73\n    if n == 28:\n        return 76\n    if n == 29:\n        return 79\n    if n == 30:\n        return 82\n    if n == 31:\n        return 85\n    if n == 32:\n        return 88\n    if n == 33:\n        return 91\n    if n == 34:\n        return 94\n    if n == 35:\n        return 97\n    if n == 36:\n        return 100\n    if n == 37:\n        return 104\n    if n == 38:\n        return 107\n    if n == 39:\n        return 110\n    if n == 40:\n        return 113\n    if n == 41:\n        return 116\n    if n == 42:\n        return 119\n    if n == 43:\n        return 122\n    if n == 44:\n        return 126\n    if n == 45:\n        return 129\n    if n == 46:\n        return\n",
            "def integerBreak(n):\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 6\n    if n == 6:\n        return 9\n    if n == 7:\n        return 12\n    if n == 8:\n        return 16\n    if n == 9:\n        return 18\n    if n == 10:\n        return 20\n    if n == 11:\n        return 24\n    if n == 12:\n        return 27\n    if n == 13:\n        return 30\n    if n == 14:\n        return 32\n    if n == 15:\n        return 36\n    if n == 16:\n        return 40\n    if n == 17:\n        return 42\n    if n == 18:\n        return 45\n    if n == 19:\n        return 48\n    if n == 20:\n        return 50\n    if n == 21:\n        return 54\n    if n == 22:\n        return 57\n    if n == 23:\n        return 60\n    if n == 24:\n        return 63\n    if n == 25:\n        return 66\n    if n == 26:\n        return 70\n    if n == 27:\n        return 72\n    if n == 28:\n        return 75\n    if n == 29:\n        return 78\n    if n == 30:\n        return 80\n    if n == 31:\n        return 84\n    if n == 32:\n        return 87\n    if n == 33:\n        return 90\n    if n == 34:\n        return 93\n    if n == 35:\n        return 96\n    if n == 36:\n        return 99\n    if n == 37:\n        return 102\n    if n == 38:\n        return 105\n    if n == 39:\n        return 108\n    if n == 40:\n        return 110\n    if n == 41:\n        return 114\n    if n == 42:\n        return 117\n    if n == 43:\n        return 120\n    if n == 44:\n        return 123\n    if n == 45:\n        return 126\n    if n == 46:\n        return\n",
            "def integerBreak(n):\n    if n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return (n-1) * (n-2) * (n-3)\n"
        ],
        "results": 10
    },
    {
        "id": "1057",
        "source": "leetcodeTitles",
        "source_id": "739",
        "url": "https://leetcode.com/problems/daily-temperatures/",
        "language": "python",
        "query": "Daily Temperatura",
        "snippets": [
            "def main():\n    temperatura = float(input(\"Digite a temperatura em graus Celsius: \"))\n    print(\"A temperatura em graus Fahrenheit é: \", (temperatura * 1.8) + 32)\n",
            "def main():\n    temperatura = float(input(\"Digite a temperatura em graus Celsius: \"))\n    temperatura = temperatura * 1.8 + 32\n    print(\"A temperatura em Fahrenheit é: \", temperatura)\n",
            "def main():\n    temperatura = float(input(\"Digite a temperatura: \"))\n    tipo = input(\"Digite o tipo de temperatura: \")\n    if tipo == \"C\":\n        print(\"A temperatura em F é: \", temperatura * 1.8 + 32)\n    elif tipo == \"F\":\n        print(\"A temperatura em C é: \", (temperatura - 32) / 1.8)\n    else:\n        print(\"Tipo de temperatura inválida\")\n",
            "def main():\n    temperatura = float(input(\"Digite a temperatura: \"))\n    if temperatura < 0:\n        print(\"A temperatura é de gelo\")\n    elif temperatura >= 0 and temperatura < 15:\n        print(\"A temperatura é de fria\")\n    elif temperatura >= 15 and temperatura < 25:\n        print(\"A temperatura é de temperatura normal\")\n    elif temperatura >= 25 and temperatura < 35:\n        print(\"A temperatura é de quente\")\n    elif temperatura >= 35:\n        print(\"A temperatura é de fogo\")\n",
            "def main():\n    temperatura = float(input(\"Digite a temperatura: \"))\n    if temperatura < 0:\n        print(\"A temperatura está fria\")\n    elif temperatura >= 0 and temperatura < 15:\n        print(\"A temperatura está quente\")\n    elif temperatura >= 15 and temperatura < 25:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 25 and temperatura < 35:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 35 and temperatura < 45:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 45 and temperatura < 55:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 55 and temperatura < 65:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 65 and temperatura < 75:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 75 and temperatura < 85:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 85 and temperatura < 95:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 95 and temperatura < 105:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 105 and temperatura < 115:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 115 and temperatura < 125:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 125 and temperatura < 135:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 135 and temperatura < 145:\n        print(\"A temperatura está muito quente\")\n    elif temperatura >= 145 and temper\n",
            "def main():\n    temperatura = float(input(\"Digite a temperatura: \"))\n    if temperatura < 0:\n        print(\"A temperatura está no gelo\")\n    elif temperatura < 10:\n        print(\"A temperatura está fria\")\n    elif temperatura < 20:\n        print(\"A temperatura está quente\")\n    elif temperatura < 30:\n        print(\"A temperatura está muito quente\")\n    else:\n        print(\"A temperatura está muito quente\")\n",
            "def main():\n    temperatura = float(input(\"Digite a temperatura: \"))\n    if temperatura < 0:\n        print(\"A temperatura é de água\")\n    elif temperatura >= 0 and temperatura <= 100:\n        print(\"A temperatura é de ar\")\n    else:\n        print(\"A temperatura é de fogo\")\n",
            "def main():\n    temperatura = float(input(\"Digite a temperatura: \"))\n    if temperatura < 0:\n        print(\"A temperatura é de água fria\")\n    elif temperatura >= 0 and temperatura <= 100:\n        print(\"A temperatura é de água quente\")\n    else:\n        print(\"A temperatura é de fogo\")\n",
            "def main():\n    temperatura = float(input(\"Digite a temperatura: \"))\n    if temperatura < 0:\n        print(\"A temperatura está na área de gelo\")\n    elif temperatura >= 0 and temperatura <= 100:\n        print(\"A temperatura está normal\")\n    elif temperatura > 100:\n        print(\"A temperatura está na área de fogo\")\n    else:\n        print(\"Erro\")\n"
        ],
        "results": 10
    },
    {
        "id": "1058",
        "source": "leetcodeTitles",
        "source_id": "1144",
        "url": "https://leetcode.com/problems/decrease-elements-to-make-array-zigzag/",
        "language": "python",
        "query": "Decrease Elements To Make Array Zigzag",
        "snippets": [
            "def makeZigZag(arr):\n    n = len(arr)\n    if n == 1:\n        return arr\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n        else:\n            if arr[i] < arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n",
            "def makeZigZag(arr):\n    n = len(arr)\n    if n == 1:\n        return arr\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] > arr[i+1]:\n                arr[i] -= 1\n            elif arr[i] < arr[i+1]:\n                arr[i+1] -= 1\n        else:\n            if arr[i] > arr[i-1]:\n                arr[i] -= 1\n            elif arr[i] < arr[i-1]:\n                arr[i-1] -= 1\n    return arr\n",
            "def makeZigZag(arr, n):\n    # code here\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] > arr[i+1]:\n                arr[i] -= 1\n            elif arr[i] < arr[i+1]:\n                arr[i+1] -= 1\n        else:\n            if arr[i] > arr[i+1]:\n                arr[i+1] -= 1\n            elif arr[i] < arr[i+1]:\n                arr[i] -= 1\n    return arr\n",
            "def makeArrayZigZag(arr):\n    n = len(arr)\n    if n == 1:\n        return arr\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] > arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n        else:\n            if arr[i] < arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n",
            "def makeZigZag(arr, n):\n    for i in range(n):\n        if i % 2 == 0:\n            if arr[i] > arr[i+1]:\n                arr[i] -= 1\n            elif arr[i] < arr[i+1]:\n                arr[i+1] -= 1\n        else:\n            if arr[i] > arr[i+1]:\n                arr[i+1] -= 1\n            elif arr[i] < arr[i+1]:\n                arr[i] -= 1\n    return arr\n",
            "def makeZigZag(arr):\n    if len(arr) == 1:\n        return arr\n    else:\n        for i in range(len(arr)):\n            if i % 2 == 0:\n                if arr[i] > arr[i+1]:\n                    arr[i] -= 1\n                    arr[i+1] += 1\n            else:\n                if arr[i] < arr[i+1]:\n                    arr[i] += 1\n                    arr[i+1] -= 1\n        return arr\n"
        ],
        "results": 10
    },
    {
        "id": "1059",
        "source": "leetcodeTitles",
        "source_id": "1583",
        "url": "https://leetcode.com/problems/count-unhappy-friends/",
        "language": "python",
        "query": "Count Unhappy Friends",
        "snippets": [
            "def unhappyFriends(n, preferences, pairs):\n    # Write your code here\n    unhappy = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if preferences[i][j] > preferences[i][preferences[i].index(pairs[i][0])] and preferences[i][j] > preferences[i][preferences[i].index(pairs[i][1])]:\n                    unhappy += 1\n                if preferences[j][i] > preferences[j][preferences[j].index(pairs[j][0])] and preferences[j][i] > preferences[j][preferences[j].index(pairs[j][1])]:\n                    unhappy += 1\n    return unhappy\n",
            "def unhappyFriends(n, preferences, pairs):\n    # Write your code here\n    unhappy = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if preferences[i][j] > preferences[i][preferences[i].index(pairs[i][0])]:\n                    unhappy += 1\n                if preferences[i][j] > preferences[i][preferences[i].index(pairs[i][1])]:\n                    unhappy += 1\n    return unhappy\n",
            "def unhappyFriends(n, preferences, pairs):\n    # Write your code here\n    # print(n, preferences, pairs)\n    # print(len(pairs))\n    # print(len(preferences))\n    # print(len(preferences[0]))\n    # print(len(preferences[1]))\n    # print(len(preferences[2]))\n    # print(len(preferences[3]))\n    # print(len(preferences[4]))\n    # print(len(preferences[5]))\n    # print(len(preferences[6]))\n    # print(len(preferences[7]))\n    # print(len(preferences[8]))\n    # print(len(preferences[9]))\n    # print(len(preferences[10]))\n    # print(len(preferences[11]))\n    # print(len(preferences[12]))\n    # print(len(preferences[13]))\n    # print(len(preferences[14]))\n    # print(len(preferences[15]))\n    # print(len(preferences[16]))\n    # print(len(preferences[17]))\n    # print(len(preferences[18]))\n    # print(len(preferences[19]))\n    # print(len(preferences[20]))\n    # print(len(preferences[21]))\n    # print(len(preferences[22]))\n    # print(len(preferences[23]))\n    # print(len(preferences[24]))\n    # print(len(preferences[25]))\n    # print(len(preferences[26]))\n    # print(len(preferences[27]))\n    # print(len(preferences[28]))\n    # print(len(preferences[29]))\n    # print(len(preferences[30]))\n    # print(len(preferences[31]))\n    #\n",
            "def unhappyFriends(n, preferences, pairs):\n    # Write your code here\n    # return the number of unhappy friends\n    unhappy = 0\n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                if preferences[i][j] > preferences[i][preferences[i].index(pairs[i][j])]:\n                    unhappy += 1\n    return unhappy\n",
            "def unhappyFriends(n, preferences, pairs):\n    # Write your code here.\n    # n = len(preferences)\n    # pairs = [[0, 1], [0, 2], [1, 2]]\n    # preferences = [[0, 1, 2], [0, 1, 2], [0, 1, 2]]\n    # print(n, preferences, pairs)\n    # print(n, len(preferences), len(pairs))\n    # print(preferences[0])\n    # print(pairs)\n    # print(preferences[0][0])\n    # print(preferences[0][1])\n    # print(preferences[0][2])\n    # print(preferences[1][0])\n    # print(preferences[1][1])\n    # print(preferences[1][2])\n    # print(preferences[2][0])\n    # print(preferences[2][1])\n    # print(preferences[2][2])\n    # print(preferences[0][0])\n    # print(preferences[0][1])\n    # print(preferences[0][2])\n    # print(preferences[1][0])\n    # print(preferences[1][1])\n    # print(preferences[1][2])\n    # print(preferences[2][0])\n    # print(preferences[2][1])\n    # print(preferences[2][2])\n    # print(preferences[0][0])\n    # print(preferences[0][1])\n    # print(preferences[0][2])\n    # print(preferences[1][0])\n    # print(preferences[1][1])\n    # print(preferences[1][2])\n    # print(preferences[2][0])\n    # print(preferences[2][1])\n    # print(preferences[2][2])\n    # print(preferences[0][0])\n    # print(preferences[0][1])\n",
            "def unhappyFriends(n, preferences, pairs):\n    # Write your code here\n    # print(n, preferences, pairs)\n    unhappy = 0\n    for pair in pairs:\n        # print(pair)\n        if preferences[pair[0]][pair[1]] > preferences[pair[0]][pair[0]] and preferences[pair[1]][pair[0]] > preferences[pair[1]][pair[1]]:\n            unhappy += 1\n    return unhappy\n",
            "def unhappyFriends(n, preferences, pairs):\n    # Write your code here\n    unhappy = 0\n    for i in range(n):\n        for j in range(n):\n            if (i != j):\n                if (preferences[i][j] > preferences[i][preferences[i].index(pairs[i][0])]):\n                    unhappy += 1\n                if (preferences[i][j] > preferences[i][preferences[i].index(pairs[i][1])]):\n                    unhappy += 1\n    return unhappy\n"
        ],
        "results": 10
    },
    {
        "id": "1060",
        "source": "leetcodeTitles",
        "source_id": "1304",
        "url": "https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/",
        "language": "python",
        "query": "Find N Unique Integers Sum up to Zero",
        "snippets": [
            "def findNUniqueIntegersSumUpToZero(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [-1, 1]\n    if n == 3:\n        return [-2, 0, 2]\n    if n == 4:\n        return [-3, -1, 1, 3]\n    if n == 5:\n        return [-4, -2, 0, 2, 4]\n    if n == 6:\n        return [-5, -3, -1, 1, 3, 5]\n    if n == 7:\n        return [-6, -4, -2, 0, 2, 4, 6]\n    if n == 8:\n        return [-7, -5, -3, -1, 1, 3, 5, 7]\n    if n == 9:\n        return [-8, -6, -4, -2, 0, 2, 4, 6, 8]\n    if n == 10:\n        return [-9, -7, -5, -3, -1, 1, 3, 5, 7, 9]\n    if n == 11:\n        return [-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]\n    if n == 12:\n        return [-11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11]\n    if n == 13:\n        return [-12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12]\n    if n == 14:\n        return [-13, -11, -9, -7, -5, -3, -1, 1, 3, 5, 7, 9, 11, 13]\n    if n == 15:\n        return [-14, -12, -10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10, 12, 14]\n    if n == 16:\n        return [-15, -13, -\n",
            "def findNUniqueIntegersSumUpToZero(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 1:\n        return [0]\n    elif n == 2:\n        return [-1, 1]\n    elif n == 3:\n        return [-1, 0, 1]\n    elif n == 4:\n        return [-2, -1, 1, 2]\n    elif n == 5:\n        return [-2, -1, 0, 1, 2]\n    elif n == 6:\n        return [-3, -2, -1, 0, 1, 2]\n    elif n == 7:\n        return [-3, -2, -1, 0, 1, 2, 3]\n    elif n == 8:\n        return [-4, -3, -2, -1, 0, 1, 2, 3]\n    elif n == 9:\n        return [-4, -3, -2, -1, 0, 1, 2, 3, 4]\n    elif n == 10:\n        return [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4]\n    elif n == 11:\n        return [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n    elif n == 12:\n        return [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]\n    elif n == 13:\n        return [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]\n    elif n == 14:\n        return [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]\n    elif n == 15:\n        return [-7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7]\n    el\n",
            "def findNUniqueIntegersSumUpToZero(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [-1, 1]\n    if n == 3:\n        return [-1, 0, 1]\n    if n == 4:\n        return [-1, -2, 1, 2]\n    if n == 5:\n        return [-1, -2, -3, 1, 3]\n    if n == 6:\n        return [-1, -2, -3, 0, 1, 3]\n    if n == 7:\n        return [-1, -2, -3, -4, 1, 4, 5]\n    if n == 8:\n        return [-1, -2, -3, -4, -5, 1, 5, 6]\n    if n == 9:\n        return [-1, -2, -3, -4, -5, -6, 1, 6, 7]\n    if n == 10:\n        return [-1, -2, -3, -4, -5, -6, -7, 1, 7, 8]\n    if n == 11:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, 1, 8, 9]\n    if n == 12:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, 1, 9, 10]\n    if n == 13:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 10, 11]\n    if n == 14:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, 1, 11, 12]\n    if n == 15:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11,\n",
            "def findNUniqueIntegersSumupToZero(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [-1, 1]\n    if n == 3:\n        return [-1, 0, 1]\n    if n == 4:\n        return [-1, -2, 1, 2]\n    if n == 5:\n        return [-1, -2, -3, 1, 3]\n    if n == 6:\n        return [-1, -2, -3, 0, 1, 3]\n    if n == 7:\n        return [-1, -2, -3, -4, 1, 4, 5]\n    if n == 8:\n        return [-1, -2, -3, -4, -5, 1, 5, 6]\n    if n == 9:\n        return [-1, -2, -3, -4, -5, -6, 1, 6, 7]\n    if n == 10:\n        return [-1, -2, -3, -4, -5, -6, -7, 1, 7, 8]\n    if n == 11:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, 1, 8, 9]\n    if n == 12:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, 1, 9, 10]\n    if n == 13:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 10, 11]\n    if n == 14:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, 1, 11, 12]\n    if n == 15:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11,\n",
            "def findNUniqueIntegers(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [-1, 1]\n    if n == 3:\n        return [-1, 0, 1]\n    if n == 4:\n        return [-1, -2, 1, 2]\n    if n == 5:\n        return [-1, -2, -3, 1, 3]\n    if n == 6:\n        return [-1, -2, -3, -4, 1, 4]\n    if n == 7:\n        return [-1, -2, -3, -4, -5, 1, 5]\n    if n == 8:\n        return [-1, -2, -3, -4, -5, -6, 1, 6]\n    if n == 9:\n        return [-1, -2, -3, -4, -5, -6, -7, 1, 7]\n    if n == 10:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, 1, 8]\n    if n == 11:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, 1, 9]\n    if n == 12:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 1, 10]\n    if n == 13:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, 1, 11]\n    if n == 14:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, 1, 12]\n    if n == 15:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9,\n",
            "def findNUniqueIntegers(n):\n    \"\"\"\n    :type n: int\n    :rtype: List[int]\n    \"\"\"\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [-1, 1]\n    if n == 3:\n        return [-1, 0, 1]\n    if n == 4:\n        return [-1, -2, 2, 3]\n    if n == 5:\n        return [-1, -2, -3, 3, 4]\n    if n == 6:\n        return [-1, -2, -3, -4, 4, 5]\n    if n == 7:\n        return [-1, -2, -3, -4, -5, 5, 6]\n    if n == 8:\n        return [-1, -2, -3, -4, -5, -6, 6, 7]\n    if n == 9:\n        return [-1, -2, -3, -4, -5, -6, -7, 7, 8]\n    if n == 10:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, 8, 9]\n    if n == 11:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, 9, 10]\n    if n == 12:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10, 11]\n    if n == 13:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, 11, 12]\n    if n == 14:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, 12, 13]\n    if n == 15:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9,\n",
            "def find_n_unique_integers_sum_up_to_zero(n):\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 2]\n    if n == 4:\n        return [0, 1, 2, 3]\n    if n == 5:\n        return [0, 1, 2, 3, 4]\n    if n == 6:\n        return [0, 1, 2, 3, 4, 5]\n    if n == 7:\n        return [0, 1, 2, 3, 4, 5, 6]\n    if n == 8:\n        return [0, 1, 2, 3, 4, 5, 6, 7]\n    if n == 9:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8]\n    if n == 10:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    if n == 11:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    if n == 12:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n    if n == 13:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n    if n == 14:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n    if n == 15:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n    if n == 16:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n    if n == 17:\n        return [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n",
            "def findNUniqueIntegersSumupToZero(n):\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [-1, 1]\n    if n == 3:\n        return [-1, 0, 1]\n    if n == 4:\n        return [-1, -2, 2, 3]\n    if n == 5:\n        return [-1, -2, -3, 3, 4]\n    if n == 6:\n        return [-1, -2, -3, -4, 4, 5]\n    if n == 7:\n        return [-1, -2, -3, -4, -5, 5, 6]\n    if n == 8:\n        return [-1, -2, -3, -4, -5, -6, 6, 7]\n    if n == 9:\n        return [-1, -2, -3, -4, -5, -6, -7, 7, 8]\n    if n == 10:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, 8, 9]\n    if n == 11:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, 9, 10]\n    if n == 12:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, 10, 11]\n    if n == 13:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, 11, 12]\n    if n == 14:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, 12, 13]\n    if n == 15:\n        return [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, 13, 14]\n    if\n"
        ],
        "results": 10
    },
    {
        "id": "1061",
        "source": "leetcodeTitles",
        "source_id": "450",
        "url": "https://leetcode.com/problems/delete-node-in-a-bst/",
        "language": "python",
        "query": "Delete Node in a BST",
        "snippets": [
            "def delete_node(root, value):\n    if root is None:\n        return None\n    if value < root.value:\n        root.left = delete_node(root.left, value)\n    elif value > root.value:\n        root.right = delete_node(root.right, value)\n    else:\n        if root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        else:\n            temp = root.right\n            while temp.left is not None:\n                temp = temp.left\n            root.value = temp.value\n            root.right = delete_node(root.right, temp.value)\n    return root\n",
            "def delete_node(node, value):\n    if node is None:\n        return None\n    if value < node.value:\n        node.left = delete_node(node.left, value)\n    elif value > node.value:\n        node.right = delete_node(node.right, value)\n    else:\n        if node.left is None:\n            return node.right\n        elif node.right is None:\n            return node.left\n        else:\n            node.value = min(node.right)\n            node.right = delete_node(node.right, node.value)\n    return node\n",
            "def delete_node(root, key):\n    if root is None:\n        return None\n    if key < root.data:\n        root.left = delete_node(root.left, key)\n    elif key > root.data:\n        root.right = delete_node(root.right, key)\n    else:\n        if root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        temp = root.right\n        while temp.left is not None:\n            temp = temp.left\n        root.data = temp.data\n        root.right = delete_node(root.right, temp.data)\n    return root\n",
            "def delete_node(root, node_value):\n    if root is None:\n        return None\n    if root.value == node_value:\n        if root.left is None and root.right is None:\n            return None\n        elif root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        else:\n            root.value = min_value(root.right)\n    if root.value > node_value:\n        root.left = delete_node(root.left, node_value)\n    else:\n        root.right = delete_node(root.right, node_value)\n    return root\n",
            "def delete_node(root, node):\n    if root is None:\n        return None\n    if root.data == node.data:\n        if root.left is None and root.right is None:\n            return None\n        elif root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        else:\n            root.data = find_min(root.right).data\n            root.right = delete_node(root.right, find_min(root.right))\n    elif root.data > node.data:\n        root.left = delete_node(root.left, node)\n    else:\n        root.right = delete_node(root.right, node)\n    return root\n",
            "def delete_node(root, node):\n    if root is None:\n        return None\n    if root.data == node.data:\n        if root.left is None and root.right is None:\n            return None\n        elif root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        else:\n            temp = root.right\n            while temp.left is not None:\n                temp = temp.left\n            root.data = temp.data\n            root.right = delete_node(root.right, temp)\n    elif root.data > node.data:\n        root.left = delete_node(root.left, node)\n    else:\n        root.right = delete_node(root.right, node)\n    return root\n",
            "def delete_node(root, node):\n    if root is None:\n        return None\n    if root.value == node.value:\n        if root.left is None and root.right is None:\n            return None\n        elif root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        else:\n            root.value = root.right.value\n            root.right = delete_node(root.right, node)\n    elif root.value > node.value:\n        root.left = delete_node(root.left, node)\n    else:\n        root.right = delete_node(root.right, node)\n    return root\n",
            "def delete_node(root, node):\n    if root is None:\n        return None\n    if root.val == node.val:\n        if root.left is None and root.right is None:\n            return None\n        elif root.left is None:\n            return root.right\n        elif root.right is None:\n            return root.left\n        else:\n            root.val = find_min(root.right).val\n            root.right = delete_node(root.right, find_min(root.right))\n    elif root.val > node.val:\n        root.left = delete_node(root.left, node)\n    else:\n        root.right = delete_node(root.right, node)\n    return root\n"
        ],
        "results": 10
    },
    {
        "id": "1062",
        "source": "leetcodeTitles",
        "source_id": "434",
        "url": "https://leetcode.com/problems/number-of-segments-in-a-string/",
        "language": "python",
        "query": "Number of Segments in a String",
        "snippets": [
            "def countSegments(s):\n    return len(s.split())\n",
            "def count_segments(s):\n    return len(s.split())\n"
        ],
        "results": 10
    },
    {
        "id": "1063",
        "source": "leetcodeTitles",
        "source_id": "1995",
        "url": "https://leetcode.com/problems/count-special-quadruplets/",
        "language": "python",
        "query": "Count Special Quadruplets",
        "snippets": [
            "def count_special_quadruplets(arr, target):\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        count += 1\n    return count\n",
            "def count_special_quadruplets(a, b, c, d):\n    \"\"\"\n    Count special quadruplets in a list of numbers\n    \"\"\"\n    count = 0\n    for i in range(1, len(a)):\n        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n                for l in range(k + 1, len(a)):\n                    if a[i] + a[j] + a[k] + a[l] == b and a[i] + a[j] + a[k] + a[l] % d == c:\n                        count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1064",
        "source": "leetcodeTitles",
        "source_id": "125",
        "url": "https://leetcode.com/problems/valid-palindrome/",
        "language": "python",
        "query": "Valid Palindrome",
        "snippets": [
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('\"', '')\n    s = s.replace('\\'', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('*', '')\n    s = s.replace('%', '')\n    s = s.replace('&', '')\n    s = s.replace('^', '')\n    s = s.replace('|', '')\n    s = s.replace('~', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('$', '')\n    s = s.replace('€', '')\n    s = s.replace('£', '')\n    s = s.replace('¥', '')\n    s = s.replace('¢', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace('%', '')\n    s = s.replace('&', '')\n    s = s.replace\n",
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('|', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('*', '')\n    s = s.replace('%', '')\n    s = s.replace('&', '')\n    s = s.replace('^', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('@', '')\n    s = s.replace('#', '')\n    s = s.replace('$', '')\n    s = s.replace('€', '')\n    s = s.replace('£', '')\n    s = s.replace('¢', '')\n    s = s.replace('¥', '')\n    s = s.replace('¤', '')\n    s = s.replace('¦', '')\n    s = s.replace('§', '')\n    s = s\n",
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('\\'', '')\n    s = s.replace('\\\"', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('*', '')\n    s = s.replace('%', '')\n    s = s.replace('$', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('&', '')\n    s = s.replace('^', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('|', '')\n    s = s.replace('\\t', '')\n    s = s.replace('\\n', '')\n    s = s.replace('\\r', '')\n    s = s.replace('\\f', '')\n    s = s.replace('\\v', '')\n    s = s.replace('\\b', '')\n    s = s.replace('\\a', '')\n",
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('\"', '')\n    s = s.replace('\\'', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('|', '')\n    s = s.replace('*', '')\n    s = s.replace('%', '')\n    s = s.replace('$', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('!', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('^', '')\n    s = s.replace('&', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('_', '')\n    s = s.replace('-', '')\n    s = s.replace('\n",
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('+', '')\n    s = s.replace('=', '')\n    s = s.replace('*', '')\n    s = s.replace('&', '')\n    s = s.replace('%', '')\n    s = s.replace('$', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('^', '')\n    s = s.replace('|', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('\"', '')\n    s = s.replace('\\'', '')\n    s = s.replace('\\n', '')\n    s = s.replace('\\r', '')\n    s = s.replace('\\t', '')\n    s = s.replace('\\f', '')\n    s = s.replace('\\v', '')\n    s\n",
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    s = s.lower()\n    s = s.replace(' ', '')\n    s = s.replace('.', '')\n    s = s.replace(',', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('(', '')\n    s = s.replace(')', '')\n    s = s.replace('[', '')\n    s = s.replace(']', '')\n    s = s.replace('{', '')\n    s = s.replace('}', '')\n    s = s.replace('-', '')\n    s = s.replace('_', '')\n    s = s.replace('\\'', '')\n    s = s.replace('\"', '')\n    s = s.replace('/', '')\n    s = s.replace('\\\\', '')\n    s = s.replace('<', '')\n    s = s.replace('>', '')\n    s = s.replace('|', '')\n    s = s.replace('=', '')\n    s = s.replace('+', '')\n    s = s.replace('*', '')\n    s = s.replace('%', '')\n    s = s.replace('&', '')\n    s = s.replace('^', '')\n    s = s.replace('#', '')\n    s = s.replace('@', '')\n    s = s.replace('$', '')\n    s = s.replace('~', '')\n    s = s.replace('`', '')\n    s = s.replace('|', '')\n    s = s.replace('!', '')\n    s = s.replace('?', '')\n    s = s.replace(';', '')\n    s = s.replace(':', '')\n    s = s.replace('\n",
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        if s[0] == s[1]:\n            return True\n        else:\n            return False\n    if s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    else:\n        return False\n",
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return True\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1]\n    if s[0] == s[-1]:\n        return is_palindrome(s[1:-1])\n    else:\n        return False\n",
            "def is_palindrome(s):\n    \"\"\"\n    :type s: str\n    :rtype: bool\n    \"\"\"\n    if len(s) == 0:\n        return True\n    else:\n        if s[0] == s[-1]:\n            return is_palindrome(s[1:-1])\n        else:\n            return False\n"
        ],
        "results": 10
    },
    {
        "id": "1065",
        "source": "leetcodeTitles",
        "source_id": "1021",
        "url": "https://leetcode.com/problems/remove-outermost-parentheses/",
        "language": "python",
        "query": "Remove Outermost Parentheses",
        "snippets": [
            "def removeOuterParentheses(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if S == '':\n        return ''\n    if S[0] == '(' and S[-1] == ')':\n        return removeOuterParentheses(S[1:-1])\n    else:\n        return removeOuterParentheses(S[1:])\n",
            "def removeOuterParentheses(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 0:\n        return \"\"\n    if len(S) == 1:\n        return S\n    if S[0] == \"(\" and S[-1] == \")\":\n        return removeOuterParentheses(S[1:-1])\n    else:\n        return S[0] + removeOuterParentheses(S[1:]) + S[-1]\n",
            "def removeOuterParentheses(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if S == '':\n        return ''\n    if S[0] == '(' and S[-1] == ')':\n        S = S[1:-1]\n        return removeOuterParentheses(S)\n    else:\n        return removeOuterParentheses(S[1:])\n",
            "def removeOuterParentheses(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if S == \"\":\n        return \"\"\n    if S[0] == \"(\" and S[-1] == \")\":\n        S = S[1:-1]\n        return removeOuterParentheses(S)\n    else:\n        return S\n",
            "def removeOuterParentheses(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 0:\n        return S\n    if len(S) == 1:\n        return S\n    if S[0] == '(' and S[-1] == ')':\n        return removeOuterParentheses(S[1:-1])\n    else:\n        return S\n",
            "def removeOuterParentheses(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if S == '':\n        return S\n    if S[0] == '(' and S[-1] == ')':\n        return removeOuterParentheses(S[1:-1])\n    else:\n        return removeOuterParentheses(S[1:])\n",
            "def removeOuterParentheses(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if not S:\n        return S\n    if len(S) == 1:\n        return S\n    if S[0] == '(' and S[-1] == ')':\n        return removeOuterParentheses(S[1:-1])\n    else:\n        return S[0] + removeOuterParentheses(S[1:]) + S[-1]\n",
            "def removeOuterParentheses(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if S == '':\n        return S\n    else:\n        if S[0] == '(' and S[-1] == ')':\n            return removeOuterParentheses(S[1:-1])\n        else:\n            return removeOuterParentheses(S[1:])\n",
            "def remove_outer_parentheses(s):\n    if s == '':\n        return s\n    if s[0] == '(' and s[-1] == ')':\n        return remove_outer_parentheses(s[1:-1])\n    else:\n        return s\n"
        ],
        "results": 10
    },
    {
        "id": "1066",
        "source": "leetcodeTitles",
        "source_id": "1974",
        "url": "https://leetcode.com/problems/minimum-time-to-type-word-using-special-typewriter/",
        "language": "python",
        "query": "Minimum Time to Type Word Using Special Typewriter",
        "snippets": [
            "def minTime(word):\n    if not word:\n        return 0\n    if len(word) == 1:\n        return 1\n    if len(word) == 2:\n        return 2\n    if len(word) == 3:\n        return 3\n    if len(word) == 4:\n        return 5\n    if len(word) == 5:\n        return 8\n    if len(word) == 6:\n        return 13\n    if len(word) == 7:\n        return 21\n    if len(word) == 8:\n        return 34\n    if len(word) == 9:\n        return 55\n    if len(word) == 10:\n        return 89\n    if len(word) == 11:\n        return 144\n    if len(word) == 12:\n        return 233\n    if len(word) == 13:\n        return 377\n    if len(word) == 14:\n        return 610\n    if len(word) == 15:\n        return 987\n    if len(word) == 16:\n        return 1597\n    if len(word) == 17:\n        return 2584\n    if len(word) == 18:\n        return 4181\n    if len(word) == 19:\n        return 6765\n    if len(word) == 20:\n        return 10946\n    if len(word) == 21:\n        return 17711\n    if len(word) == 22:\n        return 28657\n    if len(word) == 23:\n        return 46368\n    if len(word) == 24:\n        return 75025\n    if len(word) == 25:\n        return 121393\n    if len(word) == 26:\n        return 196418\n    if len(word) == 27:\n        return 317811\n    if len(word) == 28:\n        return 514229\n    if len(word) == 29:\n        return 832040\n    if len(word) == 30:\n        return 1346269\n    if len(word) == 31:\n        return 2178309\n    if len(word) == 32:\n        return 3524578\n    if len(word) == 33:\n",
            "def minTime(word):\n    if len(word) == 0:\n        return 0\n    if len(word) == 1:\n        return 1\n    if len(word) == 2:\n        return 2\n    if len(word) == 3:\n        return 3\n    if len(word) == 4:\n        return 5\n    if len(word) == 5:\n        return 8\n    if len(word) == 6:\n        return 13\n    if len(word) == 7:\n        return 21\n    if len(word) == 8:\n        return 34\n    if len(word) == 9:\n        return 55\n    if len(word) == 10:\n        return 89\n    if len(word) == 11:\n        return 144\n    if len(word) == 12:\n        return 233\n    if len(word) == 13:\n        return 377\n    if len(word) == 14:\n        return 610\n    if len(word) == 15:\n        return 987\n    if len(word) == 16:\n        return 1597\n    if len(word) == 17:\n        return 2584\n    if len(word) == 18:\n        return 4181\n    if len(word) == 19:\n        return 6765\n    if len(word) == 20:\n        return 10946\n    if len(word) == 21:\n        return 17711\n    if len(word) == 22:\n        return 28657\n    if len(word) == 23:\n        return 46368\n    if len(word) == 24:\n        return 75025\n    if len(word) == 25:\n        return 121393\n    if len(word) == 26:\n        return 196418\n    if len(word) == 27:\n        return 317811\n    if len(word) == 28:\n        return 514229\n    if len(word) == 29:\n        return 832040\n    if len(word) == 30:\n        return 1346269\n    if len(word) == 31:\n        return 2178309\n    if len(word) == 32:\n        return 3524578\n    if len(word)\n",
            "def minTime(word):\n    \"\"\"\n    :type word: str\n    :rtype: int\n    \"\"\"\n    if len(word) == 0:\n        return 0\n    if len(word) == 1:\n        return 1\n    if len(word) == 2:\n        return 2\n    if len(word) == 3:\n        return 3\n    if len(word) == 4:\n        return 4\n    if len(word) == 5:\n        return 5\n    if len(word) == 6:\n        return 6\n    if len(word) == 7:\n        return 7\n    if len(word) == 8:\n        return 8\n    if len(word) == 9:\n        return 9\n    if len(word) == 10:\n        return 10\n    if len(word) == 11:\n        return 11\n    if len(word) == 12:\n        return 12\n    if len(word) == 13:\n        return 13\n    if len(word) == 14:\n        return 14\n    if len(word) == 15:\n        return 15\n    if len(word) == 16:\n        return 16\n    if len(word) == 17:\n        return 17\n    if len(word) == 18:\n        return 18\n    if len(word) == 19:\n        return 19\n    if len(word) == 20:\n        return 20\n    if len(word) == 21:\n        return 21\n    if len(word) == 22:\n        return 22\n    if len(word) == 23:\n        return 23\n    if len(word) == 24:\n        return 24\n    if len(word) == 25:\n        return 25\n    if len(word) == 26:\n        return 26\n    if len(word) == 27:\n        return 27\n    if len(word) == 28:\n        return 28\n    if len(word) == 29:\n        return 29\n    if len(word) == 30:\n        return 30\n    if len(word) == 31:\n        return 31\n    if len(word) == 32:\n        return 32\n    if len(word) == 33:\n",
            "def minTime(word):\n    if len(word) == 0:\n        return 0\n    if len(word) == 1:\n        return word[0]\n    if len(word) == 2:\n        return word[0] + word[1]\n    if len(word) == 3:\n        return word[0] + word[1] + word[2]\n    if len(word) == 4:\n        return word[0] + word[1] + word[2] + word[3]\n    if len(word) == 5:\n        return word[0] + word[1] + word[2] + word[3] + word[4]\n    if len(word) == 6:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5]\n    if len(word) == 7:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6]\n    if len(word) == 8:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7]\n    if len(word) == 9:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8]\n    if len(word) == 10:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9]\n    if len(word) == 11:\n        return word[0] + word[1] + word[2] + word[3] + word[4] + word[5] + word[6] + word[7] + word[8] + word[9] + word[10]\n    if len(word) == 12:\n        return word[0] +\n",
            "def minTime(words, M):\n    if not words:\n        return 0\n    if len(words) == 1:\n        return len(words[0]) * M\n    words.sort(key=lambda x: len(x))\n    res = 0\n    for word in words:\n        if res + len(word) > M:\n            return -1\n        res += len(word)\n    return res\n",
            "def minTime(word, keyboard, times):\n    \"\"\"\n    :type word: str\n    :type keyboard: str\n    :type times: List[int]\n    :rtype: int\n    \"\"\"\n    # Create a dictionary of key:value pairs of the keyboard and the time to type each character\n    keyboard_dict = {}\n    for i in range(len(keyboard)):\n        keyboard_dict[keyboard[i]] = times[i]\n    # Create a list of the characters in the word\n    word_list = list(word)\n    # Create a list of the time to type each character in the word\n    time_list = []\n    for i in range(len(word_list)):\n        time_list.append(keyboard_dict[word_list[i]])\n    # Calculate the total time to type the word\n    total_time = sum(time_list)\n    return total_time\n",
            "def minTime(word, keyboard, times):\n    # Write your code here\n    if not word:\n        return 0\n    if len(word) == 1:\n        return times[word[0]]\n    d = {}\n    for i in range(len(keyboard)):\n        d[keyboard[i]] = times[keyboard[i]]\n    for i in range(len(word)):\n        if word[i] not in d:\n            return -1\n    res = 0\n    for i in range(len(word)):\n        if i == 0:\n            res += d[word[i]]\n        else:\n            res += d[word[i]] - d[word[i - 1]]\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "1067",
        "source": "leetcodeTitles",
        "source_id": "2195",
        "url": "https://leetcode.com/problems/append-k-integers-with-minimal-sum/",
        "language": "python",
        "query": "Append K Integers With Minimal Sum",
        "snippets": [
            "def append_k_integers_with_minimal_sum(k, lst=[]):\n    if k == 0:\n        return lst\n    lst.append(k)\n    return append_k_integers_with_minimal_sum(k - 1, lst)\n",
            "def append_k_integers_with_minimal_sum(k, arr):\n    if k == 0:\n        return arr\n    if k == 1:\n        arr.append(1)\n        return arr\n    if k == 2:\n        arr.append(1)\n        arr.append(2)\n        return arr\n    if k == 3:\n        arr.append(1)\n        arr.append(2)\n        arr.append(3)\n        return arr\n    if k == 4:\n        arr.append(1)\n        arr.append(2)\n        arr.append(3)\n        arr.append(4)\n        return arr\n    if k == 5:\n        arr.append(1)\n        arr.append(2)\n        arr.append(3)\n        arr.append(4)\n        arr.append(5)\n        return arr\n    if k == 6:\n        arr.append(1)\n        arr.append(2)\n        arr.append(3)\n        arr.append(4)\n        arr.append(5)\n        arr.append(6)\n        return arr\n    if k == 7:\n        arr.append(1)\n        arr.append(2)\n        arr.append(3)\n        arr.append(4)\n        arr.append(5)\n        arr.append(6)\n        arr.append(7)\n        return arr\n    if k == 8:\n        arr.append(1)\n        arr.append(2)\n        arr.append(3)\n        arr.append(4)\n        arr.append(5)\n        arr.append(6)\n        arr.append(7)\n        arr.append(8)\n        return arr\n    if k == 9:\n        arr.append(1)\n        arr.append(2)\n        arr.append(3)\n        arr.append(4)\n        arr.append(5)\n        arr.append(6)\n        arr.append(7)\n        arr.append(8)\n        arr.append(9)\n        return arr\n    if k == 10:\n        arr.\n",
            "def append_k_integers_with_minimal_sum(k, arr):\n    if k == 0:\n        return arr\n    if k == 1:\n        arr.append(1)\n        return arr\n    if k == 2:\n        arr.append(2)\n        arr.append(1)\n        return arr\n    if k == 3:\n        arr.append(3)\n        arr.append(2)\n        arr.append(1)\n        return arr\n    if k == 4:\n        arr.append(4)\n        arr.append(3)\n        arr.append(2)\n        arr.append(1)\n        return arr\n    if k == 5:\n        arr.append(5)\n        arr.append(4)\n        arr.append(3)\n        arr.append(2)\n        arr.append(1)\n        return arr\n    if k == 6:\n        arr.append(6)\n        arr.append(5)\n        arr.append(4)\n        arr.append(3)\n        arr.append(2)\n        arr.append(1)\n        return arr\n    if k == 7:\n        arr.append(7)\n        arr.append(6)\n        arr.append(5)\n        arr.append(4)\n        arr.append(3)\n        arr.append(2)\n        arr.append(1)\n        return arr\n    if k == 8:\n        arr.append(8)\n        arr.append(7)\n        arr.append(6)\n        arr.append(5)\n        arr.append(4)\n        arr.append(3)\n        arr.append(2)\n        arr.append(1)\n        return arr\n    if k == 9:\n        arr.append(9)\n        arr.append(8)\n        arr.append(7)\n        arr.append(6)\n        arr.append(5)\n        arr.append(4)\n        arr.append(3)\n        arr.append(2)\n        arr.append(1)\n        return arr\n    if k == 10:\n        arr.\n",
            "def append_k_integers_with_minimal_sum(k, arr):\n    if k == 0:\n        return arr\n    if k == 1:\n        arr.append(1)\n        return arr\n    if k == 2:\n        arr.append(1)\n        arr.append(2)\n        return arr\n    if k == 3:\n        arr.append(1)\n        arr.append(3)\n        return arr\n    if k == 4:\n        arr.append(2)\n        arr.append(2)\n        return arr\n    if k == 5:\n        arr.append(2)\n        arr.append(3)\n        return arr\n    if k == 6:\n        arr.append(3)\n        arr.append(3)\n        return arr\n    if k == 7:\n        arr.append(1)\n        arr.append(4)\n        return arr\n    if k == 8:\n        arr.append(2)\n        arr.append(4)\n        return arr\n    if k == 9:\n        arr.append(3)\n        arr.append(4)\n        return arr\n    if k == 10:\n        arr.append(4)\n        arr.append(4)\n        return arr\n    if k == 11:\n        arr.append(1)\n        arr.append(5)\n        return arr\n    if k == 12:\n        arr.append(2)\n        arr.append(5)\n        return arr\n    if k == 13:\n        arr.append(3)\n        arr.append(5)\n        return arr\n    if k == 14:\n        arr.append(4)\n        arr.append(5)\n        return arr\n    if k == 15:\n        arr.append(5)\n        arr.append(5)\n        return arr\n    if k == 16:\n        arr.append(1)\n        arr.append(6)\n        return arr\n    if k == 17:\n        arr.append(2)\n        arr.append(6)\n        return arr\n    if k == 18:\n        arr.append(3)\n        arr.\n",
            "def append_k_integers(arr, k):\n    if k == 0:\n        return arr\n    for i in range(k):\n        arr.append(i)\n    return arr\n",
            "def appendK(k, arr):\n    for i in range(k):\n        arr.append(i)\n    return arr\n",
            "def append_K_integers(arr, k, x):\n    for i in range(k):\n        arr.append(x)\n    return arr\n"
        ],
        "results": 7
    },
    {
        "id": "1068",
        "source": "leetcodeTitles",
        "source_id": "1993",
        "url": "https://leetcode.com/problems/operations-on-tree/",
        "language": "python",
        "query": "Maximum Depth of Binary Tree",
        "snippets": [
            "def maxDepth(root):\n    if root is None:\n        return 0\n    return max(maxDepth(root.left), maxDepth(root.right)) + 1\n",
            "def maxDepth(root):\n    if root is None:\n        return 0\n    return 1 + max(maxDepth(root.left), maxDepth(root.right))\n",
            "def maxDepth(self, root):\n    if root is None:\n        return 0\n    return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1\n"
        ],
        "results": 10
    },
    {
        "id": "1069",
        "source": "leetcodeTitles",
        "source_id": "2008",
        "url": "https://leetcode.com/problems/maximum-earnings-from-taxi/",
        "language": "python",
        "query": "Maximum Earnings From Taxi",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    a.reverse()\n    b.reverse()\n    ans = 0\n    for i in range(n):\n        ans += a[i] * b[i]\n    print(ans)\n",
            "def main():\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        a.sort()\n        b.sort()\n        a.reverse()\n        b.reverse()\n        ans = 0\n        for i in range(n):\n            ans += a[i] * b[i]\n        print(ans)\n",
            "def max_earnings(taxi_distance, price_per_km):\n    return taxi_distance * price_per_km\n",
            "def max_earnings(taxi_costs):\n    \"\"\"\n    taxi_costs: list of tuples (int, int)\n    returns: int\n    \"\"\"\n    # Write your code here.\n    max_earnings = 0\n    for i in range(len(taxi_costs)):\n        max_earnings += taxi_costs[i][0] * taxi_costs[i][1]\n    return max_earnings\n",
            "def max_earnings(n, fares):\n    \"\"\"\n    n: int\n    fares: list of ints\n    \"\"\"\n    # Write your code here.\n    return 0\n",
            "def max_earnings(n, fares):\n    \"\"\"\n    n: number of taxi rides\n    fares: list of fares\n    \"\"\"\n    # Write your code here.\n    return sum(fares[i] for i in range(n) if i % 2 == 0)\n",
            "def max_earnings(taxi_costs, min_ride_time, max_wait_time):\n    \"\"\"\n    taxi_costs: list of tuples (time, cost)\n    min_ride_time: int\n    max_wait_time: int\n    \"\"\"\n    # Find the minimum time in the list of tuples\n    min_time = min(taxi_costs, key=lambda x: x[0])[0]\n    # Find the maximum time in the list of tuples\n    max_time = max(taxi_costs, key=lambda x: x[0])[0]\n    # Find the minimum cost in the list of tuples\n    min_cost = min(taxi_costs, key=lambda x: x[1])[1]\n    # Find the maximum cost in the list of tuples\n    max_cost = max(taxi_costs, key=lambda x: x[1])[1]\n    # Find the total time of all the rides\n    total_time = max_time - min_time\n    # Find the total cost of all the rides\n    total_cost = max_cost - min_cost\n    # Find the total earnings of all the rides\n    total_earnings = total_cost - total_time\n    # Find the maximum earnings from a single ride\n    max_ride_earnings = total_earnings - (min_ride_time + max_wait_time)\n    # Return the maximum earnings from a single ride\n    return max_ride_earnings\n"
        ],
        "results": 10
    },
    {
        "id": "1070",
        "source": "leetcodeTitles",
        "source_id": "201",
        "url": "https://leetcode.com/problems/bitwise-and-of-numbers-range/",
        "language": "python",
        "query": "Bitwise AND of Numbers Range",
        "snippets": [
            "def bitwise_and(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (m & n)\n",
            "def bitwise_and(m, n):\n    \"\"\"\n    :type m: int\n    :type n: int\n    :rtype: int\n    \"\"\"\n    return (m & n) if m <= n else -1\n"
        ],
        "results": 10
    },
    {
        "id": "1071",
        "source": "leetcodeTitles",
        "source_id": "2048",
        "url": "https://leetcode.com/problems/next-greater-numerically-balanced-number/",
        "language": "python",
        "query": "Next Greater Numerically Balanced Number",
        "snippets": [
            "def next_greater_number(n):\n    n = str(n)\n    for i in range(len(n)-1):\n        if n[i] < n[i+1]:\n            break\n    else:\n        return -1\n    for j in range(i+1, len(n)):\n        if n[i] < n[j]:\n            break\n    n[i], n[j] = n[j], n[i]\n    n = n[:i+1] + sorted(n[i+1:])\n    return int(''.join(n))\n",
            "def next_greater_number(n):\n    n = str(n)\n    for i in range(len(n)-1):\n        if n[i] < n[i+1]:\n            break\n    else:\n        return -1\n    for j in range(i+1, len(n)):\n        if n[j] > n[i]:\n            break\n    n[i], n[j] = n[j], n[i]\n    n = n[:i+1] + n[i+1:][::-1]\n    return int(n)\n",
            "def next_greater_number(n):\n    num = list(str(n))\n    for i in range(len(num) - 1):\n        if num[i] < num[i + 1]:\n            for j in range(i + 1, len(num)):\n                if num[i] < num[j]:\n                    num[i], num[j] = num[j], num[i]\n                    num[i + 1:] = num[i + 1:][::-1]\n                    return int(''.join(num))\n    return -1\n",
            "def next_greater_number(n):\n    num = list(str(n))\n    for i in range(len(num)):\n        if i == len(num) - 1:\n            return -1\n        if num[i] < num[i + 1]:\n            num[i], num[i + 1] = num[i + 1], num[i]\n            num[i + 1:] = sorted(num[i + 1:])\n            return int(''.join(num))\n    return -1\n",
            "def next_greater_number(n):\n    digits = [int(d) for d in str(n)]\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] > digits[i - 1]:\n            break\n    else:\n        return -1\n    for j in range(i + 1, len(digits)):\n        if digits[j] > digits[i - 1]:\n            break\n    digits[i - 1], digits[j] = digits[j], digits[i - 1]\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))\n",
            "def next_greater_number(n):\n    # Write your code here\n    num = list(str(n))\n    for i in range(len(num)-1):\n        if num[i] < num[i+1]:\n            for j in range(i+1, len(num)):\n                if num[j] > num[i]:\n                    num[i], num[j] = num[j], num[i]\n                    num[i+1:] = num[i+1:][::-1]\n                    return int(''.join(num))\n    return -1\n",
            "def next_greater_number(n):\n    nums = [int(x) for x in str(n)]\n    for i in range(len(nums)-1, 0, -1):\n        if nums[i] > nums[i-1]:\n            break\n    else:\n        return -1\n    for j in range(i+1, len(nums)):\n        if nums[j] > nums[i-1]:\n            break\n    nums[i-1], nums[j] = nums[j], nums[i-1]\n    nums[i:] = nums[i:][::-1]\n    return int(''.join(map(str, nums)))\n",
            "def next_greater_number(n):\n    s = list(str(n))\n    for i in range(len(s) - 1):\n        if s[i] < s[i + 1]:\n            for j in range(i + 1, len(s)):\n                if s[i] < s[j]:\n                    s[i], s[j] = s[j], s[i]\n                    s[i + 1:] = s[i + 1:][::-1]\n                    return int(''.join(s))\n    return -1\n",
            "def next_greater_num(n):\n    num = list(str(n))\n    for i in range(len(num)-1):\n        if num[i] < num[i+1]:\n            for j in range(i+1, len(num)):\n                if num[i] < num[j]:\n                    num[i], num[j] = num[j], num[i]\n                    num[i+1:] = num[i+1:][::-1]\n                    return int(''.join(num))\n    return -1\n"
        ],
        "results": 10
    },
    {
        "id": "1072",
        "source": "leetcodeTitles",
        "source_id": "2240",
        "url": "https://leetcode.com/problems/number-of-ways-to-buy-pens-and-pencils/",
        "language": "python",
        "query": "Number of Ways to Buy Pens and Pencils",
        "snippets": [
            "def ways(n, m):\n    if n == 0 or m == 0:\n        return 1\n    if n < 0 or m < 0:\n        return 0\n    return ways(n-m, m) + ways(n, m-1)\n",
            "def ways(n, m):\n    if n == 0:\n        return 1\n    if n < 0 or m == 0:\n        return 0\n    return ways(n-m, m) + ways(n, m-1)\n",
            "def ways_to_buy(n, m, k):\n    if n == 0:\n        return 1\n    if n < 0 or m == 0:\n        return 0\n    return ways_to_buy(n - m, m, k) + ways_to_buy(n, m - k, k)\n"
        ],
        "results": 10
    },
    {
        "id": "1073",
        "source": "leetcodeTitles",
        "source_id": "1798",
        "url": "https://leetcode.com/problems/maximum-number-of-consecutive-values-you-can-make/",
        "language": "python",
        "query": "Maximum Number of Consecutive Values You Can Make",
        "snippets": [
            "def maxConsecutive(nums):\n    max_consecutive = 0\n    consecutive = 0\n    for i in range(len(nums)):\n        if i == 0:\n            consecutive = 1\n        elif nums[i] == nums[i-1]:\n            consecutive += 1\n        else:\n            consecutive = 1\n        max_consecutive = max(max_consecutive, consecutive)\n    return max_consecutive\n",
            "def maxConsecutive(nums):\n    max_consecutive = 0\n    consecutive = 0\n    for i in range(len(nums)):\n        if i == 0:\n            consecutive = 1\n        elif nums[i] == nums[i-1]:\n            consecutive += 1\n        else:\n            consecutive = 1\n        if consecutive > max_consecutive:\n            max_consecutive = consecutive\n    return max_consecutive\n",
            "def max_consecutive(nums):\n    max_count = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n",
            "def maxConsecutive(arr):\n    max_count = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_count = max(max_count, count)\n    return max_count\n",
            "def maxConsecutive(arr):\n    max_count = 0\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n",
            "def max_consecutive(nums):\n    max_consecutive = 0\n    consecutive = 0\n    for i in range(len(nums)):\n        if i == 0:\n            consecutive = 1\n        elif nums[i] == nums[i-1]:\n            consecutive += 1\n        else:\n            consecutive = 1\n        max_consecutive = max(max_consecutive, consecutive)\n    return max_consecutive\n",
            "def max_consec(nums):\n    max_consec = 0\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        max_consec = max(max_consec, count)\n    return max_consec\n",
            "def max_consec(arr):\n    max_consec = 0\n    for i in range(len(arr)):\n        if arr[i] == arr[i+1]:\n            max_consec += 1\n        else:\n            max_consec = 0\n    return max_consec\n",
            "def max_consecutive(nums):\n    \"\"\"\n    Given a sorted array of integers, return the number of\n    consecutive values.\n    \"\"\"\n    max_consecutive = 0\n    consecutive = 0\n    for i in range(len(nums)):\n        if i == 0:\n            consecutive += 1\n        elif nums[i] == nums[i-1]:\n            consecutive += 1\n        else:\n            consecutive = 1\n        if consecutive > max_consecutive:\n            max_consecutive = consecutive\n    return max_consecutive\n",
            "def max_consecutive(nums):\n    \"\"\"\n    Given a list of integers, find the maximal consecutive sum of elements.\n    :param nums: list of integers\n    :return: integer\n    \"\"\"\n    max_sum = 0\n    current_sum = 0\n    for num in nums:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        elif current_sum < 0:\n            current_sum = 0\n    return max_sum\n"
        ],
        "results": 10
    },
    {
        "id": "1074",
        "source": "leetcodeTitles",
        "source_id": "61",
        "url": "https://leetcode.com/problems/rotate-list/",
        "language": "python",
        "query": "Rotate List",
        "snippets": [
            "def rotate_right(head, k):\n    if head is None:\n        return None\n    if head.next is None:\n        return head\n    if k == 0:\n        return head\n    if k == 1:\n        return head.next\n    if k == 2:\n        return head.next.next\n    if k == 3:\n        return head.next.next.next\n    if k == 4:\n        return head.next.next.next.next\n    if k == 5:\n        return head.next.next.next.next.next\n    if k == 6:\n        return head.next.next.next.next.next.next\n    if k == 7:\n        return head.next.next.next.next.next.next.next\n    if k == 8:\n        return head.next.next.next.next.next.next.next.next\n    if k == 9:\n        return head.next.next.next.next.next.next.next.next.next\n    if k == 10:\n        return head.next.next.next.next.next.next.next.next.next.next\n    if k == 11:\n        return head.next.next.next.next.next.next.next.next.next.next.next\n    if k == 12:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 13:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 14:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 15:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 16:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 17:\n",
            "def rotate_right(head, k):\n    if head is None:\n        return None\n    if head.next is None:\n        return head\n    if k == 0:\n        return head\n    if k == 1:\n        return head.next\n    curr = head\n    prev = None\n    count = 0\n    while curr is not None:\n        count += 1\n        prev = curr\n        curr = curr.next\n    if count == k:\n        return head\n    if count < k:\n        k = k % count\n    if k == 0:\n        return head\n    prev.next = None\n    curr = head\n    while curr is not None:\n        if k == 1:\n            curr.next = head\n            return curr\n        k -= 1\n        curr = curr.next\n    return head\n",
            "def rotate_right(head, k):\n    if not head:\n        return None\n    if not head.next:\n        return head\n    if k == 0:\n        return head\n    if k == 1:\n        return head.next\n    if k == 2:\n        return head.next.next\n    if k == 3:\n        return head.next.next.next\n    if k == 4:\n        return head.next.next.next.next\n    if k == 5:\n        return head.next.next.next.next.next\n    if k == 6:\n        return head.next.next.next.next.next.next\n    if k == 7:\n        return head.next.next.next.next.next.next.next\n    if k == 8:\n        return head.next.next.next.next.next.next.next.next\n    if k == 9:\n        return head.next.next.next.next.next.next.next.next.next\n    if k == 10:\n        return head.next.next.next.next.next.next.next.next.next.next\n    if k == 11:\n        return head.next.next.next.next.next.next.next.next.next.next.next\n    if k == 12:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 13:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 14:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 15:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 16:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == 17:\n        return\n",
            "def rotate_right(head, k):\n    if not head:\n        return None\n    if not head.next:\n        return head\n    if not k:\n        return head\n    if k == 1:\n        return head\n    if k == len(head):\n        return head\n    if k > len(head):\n        k = k % len(head)\n    if k == len(head) - 1:\n        return head\n    if k == len(head) - 2:\n        return head.next\n    if k == len(head) - 3:\n        return head.next.next\n    if k == len(head) - 4:\n        return head.next.next.next\n    if k == len(head) - 5:\n        return head.next.next.next.next\n    if k == len(head) - 6:\n        return head.next.next.next.next.next\n    if k == len(head) - 7:\n        return head.next.next.next.next.next.next\n    if k == len(head) - 8:\n        return head.next.next.next.next.next.next.next\n    if k == len(head) - 9:\n        return head.next.next.next.next.next.next.next.next\n    if k == len(head) - 10:\n        return head.next.next.next.next.next.next.next.next.next\n    if k == len(head) - 11:\n        return head.next.next.next.next.next.next.next.next.next.next\n    if k == len(head) - 12:\n        return head.next.next.next.next.next.next.next.next.next.next.next\n    if k == len(head) - 13:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == len(head) - 14:\n        return head.next.next.next.next.next.next.next.next.next.next.next.next.next\n    if k == len(head) -\n"
        ],
        "results": 10
    },
    {
        "id": "1075",
        "source": "leetcodeTitles",
        "source_id": "2177",
        "url": "https://leetcode.com/problems/find-three-consecutive-integers-that-sum-to-a-given-number/",
        "language": "python",
        "query": "Find Three Consecutive Integers That Sum to a Given Number",
        "snippets": [
            "def find_three_consecutive_integers_that_sum_to_a_given_number(n):\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i + j + k == n:\n                    return i, j, k\n    return None\n",
            "def find_three_consecutive_integers(n):\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i + j + k == n:\n                    return [i, j, k]\n    return None\n",
            "def find_three_consecutive_integers_that_sum_to_a_given_number(n):\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i + j + k == n:\n                    return [i, j, k]\n    return None\n",
            "def find_three_consecutive_integers(n):\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if i+j+k == n:\n                    return [i, j, k]\n    return None\n",
            "def find_three_consecutive_integers(num):\n    for i in range(num - 2):\n        if num - i - 2 in nums:\n            return True\n    return False\n",
            "def find_three_consecutive_integers_that_sum_to_a_given_number(number):\n    \"\"\"\n    Find Three Consecutive Integers That Sum to a Given Number\n    \"\"\"\n    for i in range(number - 2):\n        for j in range(i + 1, number - 1):\n            for k in range(j + 1, number):\n                if i + j + k == number:\n                    return [i, j, k]\n    return None\n",
            "def find_three_consecutive_integers_that_sum_to_a_given_number(\n        number,\n        consecutive_integers):\n    \"\"\"\n    Find Three Consecutive Integers That Sum to a Given Number\n    Args:\n        number: integer\n        consecutive_integers: list of integers\n    Returns:\n        list of integers\n    \"\"\"\n    consecutive_integers.sort()\n    consecutive_integers_sum = 0\n    consecutive_integers_sum_list = []\n    for i in range(len(consecutive_integers)):\n        consecutive_integers_sum += consecutive_integers[i]\n        consecutive_integers_sum_list.append(consecutive_integers_sum)\n        if consecutive_integers_sum == number:\n            return consecutive_integers[i:i+3]\n    return []\n",
            "def find_three_consecutive_integers(num):\n    for i in range(num-2):\n        if i+3 < num:\n            if i+1 + 2 + 3 == num:\n                return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "1076",
        "source": "leetcodeTitles",
        "source_id": "1696",
        "url": "https://leetcode.com/problems/jump-game-vi/",
        "language": "python",
        "query": "Jump Game VI",
        "snippets": [
            "def jump(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if j + nums[j] >= i:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]\n",
            "def jump(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = 0\n    dp[1] = nums[0]\n    for i in range(2, len(nums)):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i-1])\n    return dp[-1]\n",
            "def jump(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[j] + j >= i:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]\n",
            "def jump(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = 0\n    dp[1] = nums[0]\n    for i in range(2, len(nums)):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i-1])\n    return dp[-1]\n",
            "def jump(nums):\n    if len(nums) == 1:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        dp[i] = float('inf')\n        for j in range(i):\n            if j + nums[j] >= i:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[-1]\n",
            "def jump(nums):\n    if len(nums) == 1:\n        return 0\n    dp = [0] * len(nums)\n    dp[0] = 0\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if j + nums[j] >= i:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[-1]\n"
        ],
        "results": 10
    },
    {
        "id": "1077",
        "source": "leetcodeTitles",
        "source_id": "1768",
        "url": "https://leetcode.com/problems/merge-strings-alternately/",
        "language": "python",
        "query": "Merge Strings Alternately",
        "snippets": [
            "def merge_strings(s1, s2):\n    \"\"\"\n    Merge two strings alternatingly.\n    \"\"\"\n    if len(s1) < len(s2):\n        s1, s2 = s2, s1\n    result = ''\n    for i in range(len(s1)):\n        result += s1[i]\n        if i < len(s2):\n            result += s2[i]\n    return result\n",
            "def merge_strings(s1, s2):\n    \"\"\"\n    Merge two strings alternatingly.\n    \"\"\"\n    if len(s1) < len(s2):\n        s1, s2 = s2, s1\n    result = \"\"\n    for i in range(len(s1)):\n        result += s1[i]\n        if i < len(s2):\n            result += s2[i]\n    return result\n",
            "def merge_strings(s1, s2):\n    \"\"\"\n    Merge two strings alternately.\n    \"\"\"\n    if len(s1) < len(s2):\n        s1, s2 = s2, s1\n    s1 = s1[::-1]\n    s2 = s2[::-1]\n    merged = \"\"\n    for i in range(len(s1)):\n        merged += s1[i]\n        if i < len(s2):\n            merged += s2[i]\n    return merged[::-1]\n",
            "def merge_strings(s1, s2):\n    \"\"\"\n    Merge two strings alternatingly.\n    \"\"\"\n    result = \"\"\n    for i in range(min(len(s1), len(s2))):\n        result += s1[i]\n        result += s2[i]\n    if len(s1) > len(s2):\n        result += s1[len(s2):]\n    else:\n        result += s2[len(s1):]\n    return result\n",
            "def merge_strings(s1, s2):\n    \"\"\"\n    Merge two strings alternatingly.\n    \"\"\"\n    if len(s1) == 0:\n        return s2\n    if len(s2) == 0:\n        return s1\n    return s1[0] + s2[0] + merge_strings(s1[1:], s2[1:])\n",
            "def merge_strings(s1, s2):\n    \"\"\"\n    Merge two strings alternately.\n    \"\"\"\n    if len(s1) != len(s2):\n        return None\n    else:\n        return ''.join([s1[i] + s2[i] for i in range(len(s1))])\n"
        ],
        "results": 10
    },
    {
        "id": "1078",
        "source": "leetcodeTitles",
        "source_id": "1413",
        "url": "https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum/",
        "language": "python",
        "query": "Minimum Value to Get Positive Step by Step Sum",
        "snippets": [
            "def min_value_get_positive_step_by_step_sum(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return min(arr[0], arr[1])\n    if len(arr) == 3:\n        return min(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return min(arr[0], arr[1], arr[2], arr[3])\n    if len(arr) == 5:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if len(arr) == 6:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if len(arr) == 7:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if len(arr) == 8:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if len(arr) == 9:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if len(arr) == 10:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if len(arr) == 11:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if len(arr) == 12:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr\n",
            "def min_value_to_get_positive_step_by_step_sum(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return min(arr[0], arr[1])\n    if len(arr) == 3:\n        return min(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return min(arr[0], arr[1], arr[2], arr[3])\n    if len(arr) == 5:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if len(arr) == 6:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if len(arr) == 7:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if len(arr) == 8:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if len(arr) == 9:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if len(arr) == 10:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if len(arr) == 11:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if len(arr) == 12:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5\n",
            "def min_value_to_get_positive_step_by_step_sum(arr):\n    if not arr:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    if len(arr) == 3:\n        return max(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return max(arr[0], arr[1], arr[2], arr[3])\n    if len(arr) == 5:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if len(arr) == 6:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if len(arr) == 7:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if len(arr) == 8:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if len(arr) == 9:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if len(arr) == 10:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if len(arr) == 11:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if len(arr) == 12:\n        return max(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6\n",
            "def min_value(arr):\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return min(arr[0], arr[1])\n    if len(arr) == 3:\n        return min(arr[0], arr[1], arr[2])\n    if len(arr) == 4:\n        return min(arr[0], arr[1], arr[2], arr[3])\n    if len(arr) == 5:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4])\n    if len(arr) == 6:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5])\n    if len(arr) == 7:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6])\n    if len(arr) == 8:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7])\n    if len(arr) == 9:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8])\n    if len(arr) == 10:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9])\n    if len(arr) == 11:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr[9], arr[10])\n    if len(arr) == 12:\n        return min(arr[0], arr[1], arr[2], arr[3], arr[4], arr[5], arr[6], arr[7], arr[8], arr\n",
            "def min_value(values):\n    min_value = 0\n    for i in range(len(values)):\n        min_value += values[i]\n        if min_value < 0:\n            min_value = 0\n    return min_value\n",
            "def min_value(arr):\n    min_value = 0\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            min_value += arr[i]\n        else:\n            break\n    return min_value\n",
            "def min_value(values):\n    if not values:\n        return 0\n    min_value = 0\n    for i in range(len(values)):\n        if values[i] < 0:\n            min_value += values[i]\n        else:\n            break\n    return min_value\n",
            "def min_value(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 7\n    if n == 5:\n        return 12\n    if n == 6:\n        return 19\n    if n == 7:\n        return 28\n    if n == 8:\n        return 39\n    if n == 9:\n        return 52\n    if n == 10:\n        return 67\n    if n == 11:\n        return 84\n    if n == 12:\n        return 103\n    if n == 13:\n        return 124\n    if n == 14:\n        return 147\n    if n == 15:\n        return 172\n    if n == 16:\n        return 199\n    if n == 17:\n        return 228\n    if n == 18:\n        return 259\n    if n == 19:\n        return 292\n    if n == 20:\n        return 327\n    if n == 21:\n        return 364\n    if n == 22:\n        return 403\n    if n == 23:\n        return 444\n    if n == 24:\n        return 487\n    if n == 25:\n        return 532\n    if n == 26:\n        return 579\n    if n == 27:\n        return 628\n    if n == 28:\n        return 679\n    if n == 29:\n        return 732\n    if n == 30:\n        return 787\n    if n == 31:\n        return 844\n    if n == 32:\n        return 903\n    if n == 33:\n        return 964\n    if n == 34:\n        return 1027\n    if n == 35:\n        return 1092\n    if n == 36:\n        return 1160\n    if n == 37:\n        return 1229\n    if n == 38:\n        return 1300\n    if n == 39:\n        return 1374\n    if n == 40:\n        return 1450\n    if n == 41:\n        return 1528\n    if n == 42:\n        return 1608\n"
        ],
        "results": 10
    },
    {
        "id": "1079",
        "source": "leetcodeTitles",
        "source_id": "2176",
        "url": "https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array/",
        "language": "python",
        "query": "Count Equal and Divisible Pairs in an Array",
        "snippets": [
            "def count_equal_divisible_pairs(k, arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == k or arr[i] * arr[j] == k:\n                count += 1\n    return count\n",
            "def count_equal_divisible_pairs(k, arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] % k == 0 and arr[j] % k == 0:\n                count += 1\n    return count\n",
            "def count_equal_and_divisible_pairs(n, m, a):\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                count += 1\n    return count\n",
            "def count_equal_divisible_pairs(n, m, a):\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                count += 1\n    return count\n",
            "def count_equal_and_divisible_pairs(a, div):\n    count = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % div == 0 and a[j] % div == 0:\n                count += 1\n    return count\n",
            "def count_equal_divisible_pairs(n, k):\n    \"\"\"\n    Count the number of pairs of integers in the array which sum to a multiple of k.\n    :param n: int\n    :param k: int\n    :return: int\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (i + j) % k == 0:\n                count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1080",
        "source": "leetcodeTitles",
        "source_id": "462",
        "url": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/",
        "language": "python",
        "query": "Minimum Moves to Equal Array Elements II",
        "snippets": [
            "def minMoves2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    return sum(nums) - min(nums) * len(nums)\n",
            "def minMoves2(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if not nums:\n        return 0\n    nums.sort()\n    mid = nums[len(nums)//2]\n    return sum(abs(num-mid) for num in nums)\n",
            "def minMoves2(nums):\n    return sum(nums) - min(nums) * len(nums)\n",
            "def minMoves2(nums):\n    return sum(abs(nums[i] - nums[j]) for i in range(len(nums)) for j in range(i + 1, len(nums)))\n",
            "def minMoves2(nums):\n    return sum(max(nums) - num for num in nums)\n"
        ],
        "results": 10
    },
    {
        "id": "1081",
        "source": "leetcodeTitles",
        "source_id": "2309",
        "url": "https://leetcode.com/problems/greatest-english-letter-in-upper-and-lower-case/",
        "language": "python",
        "query": "Greatest English Letter in Upper and Lower Case",
        "snippets": [
            "def main():\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    letters_upper = letters.upper()\n    letters_list = list(letters)\n    letters_upper_list = list(letters_upper)\n    letters_list.sort()\n    letters_upper_list.sort()\n    print(letters_list[-1])\n    print(letters_upper_list[-1])\n",
            "def main():\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    letters_upper = letters.upper()\n    letters_list = list(letters)\n    letters_list_upper = list(letters_upper)\n    letters_list.sort()\n    letters_list_upper.sort()\n    print(\"The greatest letter in lower case is:\", letters_list[-1])\n    print(\"The greatest letter in upper case is:\", letters_list_upper[-1])\n",
            "def main():\n    print(\"The greatest English letter in upper case is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The greatest English letter in lower case is:\", max(\"zyxwvutsrqponmlkjihgfedcba\"))\n",
            "def main():\n    print(\"The greatest English letter in upper case is: {}\".format(max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\")))\n    print(\"The greatest English letter in lower case is: {}\".format(max(\"zyxwvutsrqponmlkjihgfedcba\")))\n",
            "def main():\n    print(\"The greatest letter in English is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The smallest letter in English is:\", min(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n",
            "def main():\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n    letters_upper = letters.upper()\n    letters_lower = letters.lower()\n    letters_list = [letters, letters_upper, letters_lower]\n    letters_list_sorted = sorted(letters_list)\n    print(letters_list_sorted[-1])\n",
            "def main():\n    print(\"The greatest letter in English is:\")\n    print(\"The greatest letter in English is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The greatest letter in English is:\", max(\"zyxwvutsrqponmlkjihgfedcba\"))\n    print(\"The greatest letter in English is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The greatest letter in English is:\", max(\"zyxwvutsrqponmlkjihgfedcba\"))\n    print(\"The greatest letter in English is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The greatest letter in English is:\", max(\"zyxwvutsrqponmlkjihgfedcba\"))\n    print(\"The greatest letter in English is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The greatest letter in English is:\", max(\"zyxwvutsrqponmlkjihgfedcba\"))\n    print(\"The greatest letter in English is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The greatest letter in English is:\", max(\"zyxwvutsrqponmlkjihgfedcba\"))\n    print(\"The greatest letter in English is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The greatest letter in English is:\", max(\"zyxwvutsrqponmlkjihgfedcba\"))\n    print(\"The greatest letter in English is:\", max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\"))\n    print(\"The greatest letter in English is:\", max(\"zyxwvutsrqponmlkjihgfedcba\"))\n    print(\"The greatest letter in English is:\", max(\"Z\n",
            "def main():\n    print(\"The greatest letter in English is: {}\".format(\n        max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\")))\n    print(\"The smallest letter in English is: {}\".format(\n        min(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\")))\n    print(\"The greatest letter in English is: {}\".format(\n        max(\"zyxwvutsrqponmlkjihgfedcba\")))\n    print(\"The smallest letter in English is: {}\".format(\n        min(\"zyxwvutsrqponmlkjihgfedcba\")))\n    print(\"The greatest letter in English is: {}\".format(\n        max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\")))\n    print(\"The smallest letter in English is: {}\".format(\n        min(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\")))\n    print(\"The greatest letter in English is: {}\".format(\n        max(\"zyxwvutsrqponmlkjihgfedcba\")))\n    print(\"The smallest letter in English is: {}\".format(\n        min(\"zyxwvutsrqponmlkjihgfedcba\")))\n    print(\"The greatest letter in English is: {}\".format(\n        max(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\")))\n    print(\"The smallest letter in English is: {}\".format(\n        min(\"ZYXWVUTSRQPONMLKJIHGFEDCBA\")))\n    print(\"The greatest letter in English is: {}\".format(\n        max(\"zyxwvutsrqponmlkjihgfedcba\")))\n    print(\"The smallest letter in English is: {}\".format(\n        min(\"zyxwvutsrqponmlkjihgfedcba\")))\n    print(\"The greatest letter in English is: {}\".format(\n        max(\"ZYXWVUTSRQPONMLKJI\n"
        ],
        "results": 9
    },
    {
        "id": "1082",
        "source": "leetcodeTitles",
        "source_id": "503",
        "url": "https://leetcode.com/problems/next-greater-element-ii/",
        "language": "python",
        "query": "Next Greater Element II",
        "snippets": [
            "def next_greater_element(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for i in nums1:\n        result.append(next_greater_element_helper(i, nums2))\n    return result\n",
            "def next_greater_element(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    result = []\n    for num in nums1:\n        index = nums2.index(num)\n        for i in range(index + 1, len(nums2)):\n            if nums2[i] > num:\n                result.append(nums2[i])\n                break\n        else:\n            result.append(-1)\n    return result\n",
            "def nextGreaterElements(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    stack = []\n    res = [-1] * len(nums)\n    for i in range(len(nums)):\n        while stack and stack[-1] < nums[i]:\n            res[stack.pop()] = nums[i]\n        stack.append(i)\n    while stack:\n        res[stack.pop()] = -1\n    return res\n",
            "def nextGreaterElements(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    n = len(nums)\n    res = [0] * n\n    stack = []\n    for i in range(n):\n        while stack and nums[stack[-1]] < nums[i]:\n            res[stack.pop()] = nums[i]\n        stack.append(i)\n    while stack:\n        res[stack.pop()] = -1\n    return res\n",
            "def nextGreaterElements(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    stack = []\n    res = [-1] * len(nums)\n    for i in range(len(nums)):\n        while stack and stack[-1] < nums[i]:\n            res[stack.pop()] = nums[i]\n        stack.append(i)\n    while stack:\n        res[stack.pop()] = -1\n    return res\n",
            "def nextGreaterElements(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    res = [0] * len(nums)\n    stack = []\n    for i in range(len(nums)):\n        while stack and nums[i] > nums[stack[-1]]:\n            res[stack.pop()] = nums[i]\n        stack.append(i)\n    for i in range(len(nums)):\n        while stack and nums[i] > nums[stack[-1]]:\n            res[stack.pop()] = nums[i]\n        stack.append(i)\n        stack.pop()\n    return res\n",
            "def nextGreaterElements(nums):\n    stack = []\n    res = [-1] * len(nums)\n    for i in range(len(nums)):\n        while stack and stack[-1] < nums[i]:\n            res[stack.pop()] = nums[i]\n        stack.append(i)\n    while stack:\n        res[stack.pop()] = -1\n    return res\n",
            "def next_greater_element(nums):\n    stack = []\n    result = []\n    for i in range(len(nums)):\n        while stack and stack[-1] < nums[i]:\n            result.append(stack.pop())\n        stack.append(nums[i])\n    while stack:\n        result.append(stack.pop())\n    return result\n",
            "def nextGreaterElements(nums):\n    stack = []\n    res = [-1] * len(nums)\n    for i in range(len(nums)):\n        while stack and nums[stack[-1]] < nums[i]:\n            res[stack.pop()] = nums[i]\n        stack.append(i)\n    while stack:\n        res[stack.pop()] = -1\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "1083",
        "source": "leetcodeTitles",
        "source_id": "229",
        "url": "https://leetcode.com/problems/majority-element-ii/",
        "language": "python",
        "query": "Majority Element II",
        "snippets": [
            "def majorityElement(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    if len(nums) == 2:\n        return [nums[0], nums[1]]\n    nums.sort()\n    if nums[0] == nums[1]:\n        return [nums[0]]\n    if nums[0] == nums[2]:\n        return [nums[0]]\n    if nums[1] == nums[2]:\n        return [nums[1]]\n    if nums[0] != nums[1] and nums[0] != nums[2] and nums[1] != nums[2]:\n        return [nums[0], nums[2]]\n    if nums[0] != nums[1] and nums[0] != nums[2] and nums[1] == nums[2]:\n        return [nums[0], nums[1]]\n    if nums[0] != nums[1] and nums[0] == nums[2] and nums[1] != nums[2]:\n        return [nums[0], nums[1]]\n    if nums[0] == nums[1] and nums[0] != nums[2] and nums[1] != nums[2]:\n        return [nums[0], nums[2]]\n    if nums[0] == nums[1] and nums[0] == nums[2] and nums[1] == nums[2]:\n        return [nums[0], nums[1], nums[2]]\n    if nums[0] == nums[1] and nums[0] != nums[2] and nums[1] == nums[2]:\n        return [nums[0], nums[1]]\n    if nums[0] == nums[1] and nums\n",
            "def majorityElement(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        return [nums[0] if nums[0] == nums[1] else None]\n    nums.sort()\n    if nums[0] == nums[1]:\n        return [nums[0]]\n    if nums[0] == nums[2]:\n        return [nums[0]]\n    if nums[1] == nums[2]:\n        return [nums[1]]\n    return [nums[0], nums[2]]\n",
            "def majorityElement(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    if len(nums) == 2:\n        return [nums[0], nums[1]]\n    if len(nums) == 3:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]]\n    if len(nums) == 4:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]]\n    if len(nums) == 5:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]] if nums[0] == nums[3] else [nums[0], nums[4]]\n    if len(nums) == 6:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]] if nums[0] == nums[3] else [nums[0], nums[4]] if nums[0] == nums[4] else [nums[0], nums[5]]\n    if len(nums) == 7:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums\n",
            "def majorityElement(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        return [nums[0]] if nums[0] == nums[1] else []\n    nums.sort()\n    res = []\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            count += 1\n        else:\n            count = 1\n        if count > len(nums)//3:\n            res.append(nums[i])\n    return res\n",
            "def majority_element(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return nums\n    if len(nums) == 2:\n        return [nums[0] if nums[0] == nums[1] else None]\n    if len(nums) == 3:\n        return [nums[0] if nums[0] == nums[1] else nums[1] if nums[1] == nums[2] else None]\n    if len(nums) == 4:\n        return [nums[0] if nums[0] == nums[1] else nums[1] if nums[1] == nums[2] else nums[2] if nums[2] == nums[3] else None]\n    if len(nums) == 5:\n        return [nums[0] if nums[0] == nums[1] else nums[1] if nums[1] == nums[2] else nums[2] if nums[2] == nums[3] else nums[3] if nums[3] == nums[4] else None]\n    if len(nums) == 6:\n        return [nums[0] if nums[0] == nums[1] else nums[1] if nums[1] == nums[2] else nums[2] if nums[2] == nums[3] else nums[3] if nums[3] == nums[4] else nums[4] if nums[4] == nums[5] else None]\n    if len(nums) == 7:\n        return [nums[0] if nums[0] == nums[1] else nums[1] if nums[1] == nums[2] else nums[2] if nums[2] == nums[3] else nums[3] if nums[3] == nums\n",
            "def majority_element(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    if len(nums) == 2:\n        return [nums[0], nums[1]]\n    if len(nums) == 3:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]]\n    if len(nums) == 4:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]]\n    if len(nums) == 5:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]] if nums[0] == nums[3] else [nums[0], nums[4]]\n    if len(nums) == 6:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]] if nums[0] == nums[3] else [nums[0], nums[4]] if nums[0] == nums[4] else [nums[0], nums[5]]\n    if len(nums) == 7:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], num\n",
            "def majorityElement(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\"\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    if len(nums) == 2:\n        return [nums[0], nums[1]]\n    if len(nums) == 3:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[1], nums[2]]\n    if len(nums) == 4:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[2], nums[3]]\n    if len(nums) == 5:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[2], nums[3]] if nums[2] == nums[3] else [nums[4]]\n    if len(nums) == 6:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[2], nums[3]] if nums[2] == nums[3] else [nums[4], nums[5]]\n    if len(nums) == 7:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[2], nums[3]] if nums[2] == nums[3] else [nums[4], nums[5]] if nums[4] == nums[5] else [nums[6]]\n    if len(nums) == 8:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[2], nums[3]] if nums[2] == nums[3] else [nums[4], nums[5]] if num\n",
            "def majority_element(nums):\n    if not nums:\n        return []\n    if len(nums) == 1:\n        return [nums[0]]\n    if len(nums) == 2:\n        return [nums[0], nums[1]]\n    if len(nums) == 3:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]]\n    if len(nums) == 4:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]]\n    if len(nums) == 5:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]] if nums[0] == nums[3] else [nums[0], nums[4]]\n    if len(nums) == 6:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]] if nums[0] == nums[3] else [nums[0], nums[4]] if nums[0] == nums[4] else [nums[0], nums[5]]\n    if len(nums) == 7:\n        return [nums[0], nums[1]] if nums[0] == nums[1] else [nums[0], nums[2]] if nums[0] == nums[2] else [nums[0], nums[3]] if nums[0] == nums[3] else [nums[0], nums[4\n"
        ],
        "results": 10
    },
    {
        "id": "1084",
        "source": "leetcodeTitles",
        "source_id": "2085",
        "url": "https://leetcode.com/problems/count-common-words-with-one-occurrence/",
        "language": "python",
        "query": "Count Common Words With One Occurence",
        "snippets": [
            "def common_words(filename1, filename2):\n    \"\"\"\n    Counts the number of common words in two files.\n    \"\"\"\n    with open(filename1, 'r') as f1:\n        with open(filename2, 'r') as f2:\n            words1 = f1.read().split()\n            words2 = f2.read().split()\n            common = [word for word in words1 if word in words2]\n            return len(common)\n",
            "def common_words(filename):\n    \"\"\"\n    Counts the number of words that occur only once in a file.\n    \"\"\"\n    with open(filename, 'r') as f:\n        words = f.read().split()\n    return len([word for word in set(words) if words.count(word) == 1])\n",
            "def count_common_words(filename1, filename2):\n    \"\"\"\n    Counts the number of common words in two files.\n    \"\"\"\n    with open(filename1) as f1:\n        words1 = f1.read().split()\n    with open(filename2) as f2:\n        words2 = f2.read().split()\n    common_words = [word for word in words1 if word in words2]\n    return len(common_words)\n",
            "def common_words(filename):\n    \"\"\"\n    Counts the number of common words in a text file.\n    \"\"\"\n    with open(filename, 'r') as f:\n        text = f.read()\n    text = text.lower()\n    text = text.replace(',', ' ')\n    text = text.replace('.', ' ')\n    text = text.replace(';', ' ')\n    text = text.replace(':', ' ')\n    text = text.replace('\"', ' ')\n    text = text.replace('!', ' ')\n    text = text.replace('?', ' ')\n    text = text.replace('-', ' ')\n    text = text.replace('_', ' ')\n    text = text.replace('/', ' ')\n    text = text.replace('\\\\', ' ')\n    text = text.replace('(', ' ')\n    text = text.replace(')', ' ')\n    text = text.replace('[', ' ')\n    text = text.replace(']', ' ')\n    text = text.replace('{', ' ')\n    text = text.replace('}', ' ')\n    text = text.replace('<', ' ')\n    text = text.replace('>', ' ')\n    text = text.replace('*', ' ')\n    text = text.replace('+', ' ')\n    text = text.replace('=', ' ')\n    text = text.replace('%', ' ')\n    text = text.replace('$', ' ')\n    text = text.replace('#', ' ')\n    text = text.replace('@', ' ')\n    text = text.replace('&', ' ')\n    text = text.replace('^', ' ')\n    text = text.replace('~', ' ')\n    text = text.replace('`', ' ')\n    text = text.replace('|', ' ')\n    text = text.replace('<', ' ')\n    text = text.replace('>', ' ')\n    text = text.replace('<', ' ')\n",
            "def common_words(filename):\n    \"\"\"\n    Counts the number of words in a file that are common to both\n    the file and a list of words.\n    \"\"\"\n    with open(filename, 'r') as f:\n        words = f.read().split()\n    common_words = {'the', 'and', 'of', 'to', 'a', 'in', 'is', 'it', 'you', 'that'}\n    return len(set(words) & common_words)\n",
            "def common_words(filename):\n    \"\"\"\n    Counts the number of words in a file that are common to both\n    the file and a list of words.\n    \"\"\"\n    with open(filename) as f:\n        words = f.read().split()\n    common = {'the', 'be', 'to', 'of', 'and', 'in', 'that', 'have', 'it', 'for', 'not', 'on', 'with', 'he', 'as', 'you', 'do', 'at', 'this', 'but', 'his', 'by', 'from', 'they', 'we', 'say', 'her', 'she', 'or', 'an', 'will', 'my', 'one', 'all', 'would', 'there', 'their', 'what', 'so', 'up', 'out', 'if', 'about', 'who', 'get', 'which', 'go', 'me', 'when', 'make', 'can', 'like', 'time', 'no', 'just', 'him', 'know', 'take', 'people', 'into', 'year', 'your', 'good', 'some', 'could', 'them', 'see', 'other', 'than', 'then', 'now', 'look', 'only', 'come', 'its', 'over', 'think', 'also', 'am', 'must', 'itself', 'back', 'after', 'use', 'two', 'how', 'our', 'work', 'first', 'well', 'way', 'even', 'new', 'want', 'because', 'any', 'these', 'give', 'day', 'most', 'us'}\n    return len([word for word in words if word in common])\n",
            "def common_words(filename):\n    \"\"\"\n    Counts the number of words in a file that are common to both\n    the file and a word list.\n    \"\"\"\n    with open(filename, 'r') as f:\n        words = f.read().split()\n    with open('words.txt', 'r') as f:\n        common = f.read().split()\n    return len([word for word in words if word in common])\n"
        ],
        "results": 10
    },
    {
        "id": "1085",
        "source": "leetcodeTitles",
        "source_id": "1078",
        "url": "https://leetcode.com/problems/occurrences-after-bigram/",
        "language": "python",
        "query": "Occurences After Bigram",
        "snippets": [
            "def count_after(text, word):\n    \"\"\"\n    Counts the number of times a word appears after another word in a text.\n    \"\"\"\n    count = 0\n    for i in range(len(text)):\n        if text[i:i+len(word)] == word:\n            count += 1\n            i += len(word) - 1\n    return count\n",
            "def count_after(text, word):\n    \"\"\"\n    Counts the number of times a word appears after another word in a text.\n    \"\"\"\n    count = 0\n    for i in range(len(text)):\n        if text[i:i+len(word)] == word:\n            count += 1\n            i += len(word)\n    return count\n",
            "def count_after(text, word):\n    \"\"\"\n    Counts the number of times a word appears after another word in a text.\n    \"\"\"\n    count = 0\n    for i in range(len(text)):\n        if text[i] == word:\n            count += 1\n            i += 1\n            while i < len(text) and text[i] != ' ':\n                i += 1\n    return count\n",
            "def count_after(text, word):\n    \"\"\"\n    Counts the number of times a word appears after another word in a text.\n    \"\"\"\n    text = text.split()\n    count = 0\n    for i in range(len(text)):\n        if text[i] == word:\n            count += 1\n            for j in range(i + 1, len(text)):\n                if text[j] == word:\n                    count += 1\n    return count\n",
            "def count_after(sentence, n):\n    \"\"\"\n    Counts the number of times a word appears after a bigram\n    \"\"\"\n    words = sentence.split()\n    count = 0\n    for i in range(len(words) - n):\n        if words[i] == words[i + n]:\n            count += 1\n    return count\n",
            "def bigram_count(text, word):\n    \"\"\"\n    Counts the number of times a word appears after another word in a text.\n    \"\"\"\n    count = 0\n    for i in range(len(text)):\n        if text[i:i+len(word)] == word:\n            count += 1\n    return count\n",
            "def bigram_count(text):\n    \"\"\"\n    Counts the number of times a bigram occurs in a text.\n    \"\"\"\n    text = text.split()\n    bigrams = []\n    for i in range(len(text) - 1):\n        bigrams.append(text[i] + ' ' + text[i + 1])\n    return bigrams\n",
            "def count_after(sentence, n):\n    \"\"\"\n    Counts the number of times a bigram occurs after a given bigram.\n    \"\"\"\n    words = sentence.split()\n    count = 0\n    for i in range(len(words) - 1):\n        if words[i] == n[0] and words[i + 1] == n[1]:\n            count += 1\n    return count\n",
            "def count_after(sentence, n):\n    \"\"\"\n    Counts the number of times a bigram occurs after a given bigram.\n    \"\"\"\n    if len(sentence) < 2:\n        return 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return len(sentence) - 1\n    if n > len(sentence):\n        return 0\n    if n == len(sentence):\n        return 1\n    if n == len(sentence) - 1:\n        return 1\n    if n == len(sentence) - 2:\n        return 1\n    if n == len(sentence) - 3:\n        return 1\n    if n == len(sentence) - 4:\n        return 1\n    if n == len(sentence) - 5:\n        return 1\n    if n == len(sentence) - 6:\n        return 1\n    if n == len(sentence) - 7:\n        return 1\n    if n == len(sentence) - 8:\n        return 1\n    if n == len(sentence) - 9:\n        return 1\n    if n == len(sentence) - 10:\n        return 1\n    if n == len(sentence) - 11:\n        return 1\n    if n == len(sentence) - 12:\n        return 1\n    if n == len(sentence) - 13:\n        return 1\n    if n == len(sentence) - 14:\n        return 1\n    if n == len(sentence) - 15:\n        return 1\n    if n == len(sentence) - 16:\n        return 1\n    if n == len(sentence) - 17:\n        return 1\n    if n == len(sentence) - 18:\n        return 1\n    if n == len(sentence) - 19:\n        return 1\n    if n == len(sentence) - 20:\n        return 1\n    if n == len(sentence) - 21:\n        return 1\n    if n == len(sentence) - 22:\n        return 1\n    if n == len(sentence)\n"
        ],
        "results": 10
    },
    {
        "id": "1086",
        "source": "leetcodeTitles",
        "source_id": "954",
        "url": "https://leetcode.com/problems/array-of-doubled-pairs/",
        "language": "python",
        "query": "Array of Doubled Pairs",
        "snippets": [
            "def array_of_doubled_pairs(list_of_numbers):\n    if len(list_of_numbers) % 2 != 0:\n        return False\n    else:\n        for i in range(0, len(list_of_numbers), 2):\n            if list_of_numbers[i] != list_of_numbers[i + 1] * 2:\n                return False\n        return True\n",
            "def array_of_doubled_pairs(list1, list2):\n    if len(list1) != len(list2):\n        return None\n    else:\n        return [x * 2 for x in list1] + [y * 2 for y in list2]\n",
            "def array_of_doubled_pairs(list_of_numbers):\n    if len(list_of_numbers) % 2 != 0:\n        return False\n    for i in range(0, len(list_of_numbers), 2):\n        if list_of_numbers[i] != list_of_numbers[i + 1] * 2:\n            return False\n    return True\n",
            "def array_of_doubled_pairs(list_of_numbers):\n    if len(list_of_numbers) % 2 != 0:\n        return None\n    else:\n        new_list = []\n        for i in range(0, len(list_of_numbers), 2):\n            new_list.append(list_of_numbers[i] * 2)\n            new_list.append(list_of_numbers[i + 1] * 2)\n        return new_list\n",
            "def array_of_doubled_pairs(list_of_numbers):\n    if len(list_of_numbers) % 2 != 0:\n        return False\n    for i in range(0, len(list_of_numbers), 2):\n        if list_of_numbers[i] != list_of_numbers[i+1]:\n            return False\n    return True\n",
            "def array_of_doubled_pairs(list1, list2):\n    if len(list1) != len(list2):\n        return None\n    else:\n        return [2 * x for x in list1] + [2 * y for y in list2]\n",
            "def array_of_doubled_pairs(numbers):\n    if len(numbers) % 2 != 0:\n        return False\n    else:\n        for i in range(0, len(numbers), 2):\n            if numbers[i] != numbers[i + 1] * 2:\n                return False\n        return True\n",
            "def array_of_doubled_pairs(arr1, arr2):\n    if len(arr1) != len(arr2):\n        return None\n    else:\n        return [2 * x for x in arr1] + [2 * y for y in arr2]\n"
        ],
        "results": 10
    },
    {
        "id": "1087",
        "source": "leetcodeTitles",
        "source_id": "557",
        "url": "https://leetcode.com/problems/reverse-words-in-a-string-iii/",
        "language": "python",
        "query": "Reverse Words in a String III",
        "snippets": [
            "def reverseWords(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ' '.join(s.split()[::-1])\n",
            "def reverseWords(s):\n    \"\"\"\n    :type s: str\n    :rtype: str\n    \"\"\"\n    return ' '.join(reversed(s.split()))\n",
            "def reverseWords(s):\n    return ' '.join(s.split()[::-1])\n",
            "def reverseWords(s):\n    return ' '.join(reversed(s.split()))\n",
            "def reverseWords(s):\n    return \" \".join(s.split()[::-1])\n"
        ],
        "results": 10
    },
    {
        "id": "1088",
        "source": "leetcodeTitles",
        "source_id": "762",
        "url": "https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/",
        "language": "python",
        "query": "Prime Number of Set Bits in Binary Representation",
        "snippets": [
            "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
            "def count_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n",
            "def count_bits(n):\n    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n",
            "def countPrimeSetBits(n):\n    count = 0\n    for i in range(n+1):\n        if bin(i).count('1') == 1:\n            count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1089",
        "source": "leetcodeTitles",
        "source_id": "905",
        "url": "https://leetcode.com/problems/sort-array-by-parity/",
        "language": "python",
        "query": "Sort Array By Parity",
        "snippets": [
            "def sortArrayByParity(A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: List[int]\n    \"\"\"\n    even = []\n    odd = []\n    for i in A:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even + odd\n"
        ],
        "results": 10
    },
    {
        "id": "1090",
        "source": "leetcodeTitles",
        "source_id": "1574",
        "url": "https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/",
        "language": "python",
        "query": "Shortest Subarray to be Removed to Make Array Sorted",
        "snippets": [
            "def findLengthOfShortestSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return 0\n    nums.sort()\n    i = 0\n    for j in range(len(nums)):\n        if nums[j] != nums[i]:\n            i = j\n            break\n    return len(nums) - i - 1\n",
            "def findLengthOfShortestSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 1:\n        return 0\n    nums.sort()\n    for i in range(len(nums)):\n        if nums[i] != nums[i-1]:\n            return i\n    return len(nums)\n",
            "def findLengthOfShortestSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 0\n    if len(nums) == 2:\n        if nums[0] > nums[1]:\n            return 1\n        else:\n            return 0\n    if len(nums) == 3:\n        if nums[0] > nums[1] and nums[1] > nums[2]:\n            return 0\n        elif nums[0] > nums[1] and nums[2] > nums[1]:\n            return 1\n        elif nums[1] > nums[0] and nums[1] > nums[2]:\n            return 2\n        else:\n            return 0\n    if len(nums) == 4:\n        if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3]:\n            return 0\n        elif nums[0] > nums[1] and nums[2] > nums[1] and nums[1] > nums[3]:\n            return 1\n        elif nums[1] > nums[0] and nums[1] > nums[2] and nums[2] > nums[3]:\n            return 2\n        elif nums[2] > nums[0] and nums[2] > nums[1] and nums[1] > nums[3]:\n            return 3\n        elif nums[3] > nums[0] and nums[3] > nums[1] and nums[1] > nums[2]:\n            return 4\n        else:\n            return 0\n    if len(nums) == 5:\n        if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3] and nums[\n",
            "def shortestSubarray(A, K):\n    \"\"\"\n    :type A: List[int]\n    :type K: int\n    :rtype: int\n    \"\"\"\n    if len(A) == 0:\n        return 0\n    if len(A) == 1:\n        if A[0] >= K:\n            return 1\n        else:\n            return 0\n    if A[0] >= K:\n        return 1\n    left = 0\n    right = 0\n    min_len = len(A)\n    while right < len(A):\n        if A[right] >= K:\n            while A[left] < K:\n                left += 1\n            if right - left + 1 < min_len:\n                min_len = right - left + 1\n            left += 1\n        right += 1\n    return min_len if min_len != len(A) else 0\n",
            "def findLengthOfShortestSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return 0\n    if len(nums) == 2:\n        if nums[0] > nums[1]:\n            return 1\n        else:\n            return 0\n    if len(nums) == 3:\n        if nums[0] > nums[1] and nums[1] > nums[2]:\n            return 1\n        elif nums[0] > nums[1] and nums[1] < nums[2]:\n            return 2\n        elif nums[0] < nums[1] and nums[1] > nums[2]:\n            return 0\n        else:\n            return 1\n    if len(nums) == 4:\n        if nums[0] > nums[1] and nums[1] > nums[2] and nums[2] > nums[3]:\n            return 1\n        elif nums[0] > nums[1] and nums[1] > nums[2] and nums[2] < nums[3]:\n            return 2\n        elif nums[0] > nums[1] and nums[1] < nums[2] and nums[2] > nums[3]:\n            return 3\n        elif nums[0] > nums[1] and nums[1] < nums[2] and nums[2] < nums[3]:\n            return 0\n        elif nums[0] < nums[1] and nums[1] > nums[2] and nums[2] > nums[3]:\n            return 1\n        elif nums[0] < nums[1] and nums[1] > nums[2] and nums[2] < nums[3]:\n            return 2\n        elif nums[0] < nums[1] and nums\n",
            "def shortestSubarray(A, K):\n    \"\"\"\n    :type A: List[int]\n    :type K: int\n    :rtype: int\n    \"\"\"\n    if len(A) == 0:\n        return 0\n    if len(A) == 1:\n        if A[0] >= K:\n            return 0\n        else:\n            return 1\n    if A[0] >= K:\n        return 0\n    if A[-1] >= K:\n        return 1\n    left = 0\n    right = len(A) - 1\n    while left < right:\n        if A[left] + A[right] >= K:\n            break\n        left += 1\n        right -= 1\n    if left == right:\n        return 1\n    if A[left] + A[right] >= K:\n        return right - left + 1\n    return len(A)\n",
            "def remove(arr):\n    n = len(arr)\n    i = 0\n    j = n-1\n    while i < j:\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n        else:\n            i += 1\n    return arr\n",
            "def find_subarray(arr):\n    n = len(arr)\n    start = 0\n    end = n - 1\n    while start < end:\n        if arr[start] <= arr[end]:\n            start += 1\n        else:\n            end -= 1\n    return start\n",
            "def remove_subarray(arr):\n    if len(arr) <= 1:\n        return 0\n    left, right = 0, len(arr) - 1\n    while left < right:\n        if arr[left] <= arr[right]:\n            left += 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            right -= 1\n    return left\n",
            "def find_short(s):\n    return min(len(x) for x in s.split())\n"
        ],
        "results": 10
    },
    {
        "id": "1091",
        "source": "leetcodeTitles",
        "source_id": "1752",
        "url": "https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/",
        "language": "python",
        "query": "Check if Array Is Sorted and Rotated",
        "snippets": [
            "def is_sorted_and_rotated(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] < arr[1]:\n        return True\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n",
            "def is_sorted_and_rotated(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] < arr[1]:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return False\n    return True\n",
            "def is_sorted_and_rotated(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] < arr[1]:\n        return True\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n            return False\n    return True\n",
            "def is_sorted_and_rotated(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] < arr[1]:\n        return True\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return True\n    return False\n",
            "def check_if_sorted_and_rotated(arr):\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    if arr[0] < arr[1]:\n        return True\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            return True\n    return False\n",
            "def check_if_sorted_rotated(arr):\n    if len(arr) < 2:\n        return True\n    if arr[0] < arr[1]:\n        return True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True\n",
            "def check_sorted(arr):\n    if len(arr) <= 1:\n        return True\n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            return False\n    return True\n",
            "def check_if_sorted_rotated(arr):\n    if len(arr) < 2:\n        return True\n    if len(arr) == 2:\n        return arr[0] <= arr[1]\n    if arr[0] <= arr[1]:\n        return True\n    if arr[0] > arr[1]:\n        return False\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True\n",
            "def check_if_sorted_and_rotated(arr):\n    if len(arr) < 2:\n        return True\n    else:\n        if arr[0] < arr[1]:\n            return True\n        else:\n            for i in range(1, len(arr)):\n                if arr[i] < arr[i - 1]:\n                    return False\n            return True\n"
        ],
        "results": 10
    },
    {
        "id": "1092",
        "source": "leetcodeTitles",
        "source_id": "1784",
        "url": "https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones/",
        "language": "python",
        "query": "Check if Binary String Has at Most One Segment of Ones",
        "snippets": [
            "def has_at_most_one_segment_of_ones(binary_string):\n    if binary_string.count('1') > 1:\n        return False\n    return True\n",
            "def has_at_most_one_segment(binary_string):\n    if binary_string.count('1') > 1:\n        return False\n    else:\n        return True\n",
            "def has_at_most_one_segment(binary_string):\n    if binary_string.count('1') > 1:\n        return False\n    return True\n",
            "def has_at_most_one_segment(binary):\n    if binary.count('1') > 1:\n        return False\n    return True\n",
            "def has_at_most_one_segment(binary_string):\n    \"\"\"\n    Check if Binary String Has at Most One Segment of Ones\n    \"\"\"\n    if binary_string == \"\":\n        return True\n    if binary_string[0] == \"0\":\n        return has_at_most_one_segment(binary_string[1:])\n    else:\n        return False\n"
        ],
        "results": 10
    },
    {
        "id": "1093",
        "source": "leetcodeTitles",
        "source_id": "1925",
        "url": "https://leetcode.com/problems/count-square-sum-triples/",
        "language": "python",
        "query": "Count Sample Sum Triples",
        "snippets": [
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if a[i] + b[j] + c[k] == 0:\n                    ans += 1\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    c.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + b[j] + c[k] == 0:\n                    ans += 1\n    print(ans)\n",
            "def main():\n    # Get input\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    # Count sum triples\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + b[j] + c[k] == 0:\n                    count += 1\n    # Print result\n    print(count)\n",
            "def main():\n    # Get the number of sample sum triples\n    n = int(input())\n    # Get the sample sum triples\n    triples = [list(map(int, input().split())) for _ in range(n)]\n    # Count the number of sample sum triples\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if triples[i][0] + triples[j][0] + triples[k][0] == 0:\n                    count += 1\n    # Print the number of sample sum triples\n    print(count)\n",
            "def main():\n    # Get the number of sample sum triples\n    n = int(input())\n    # Get the sample sum triples\n    triples = []\n    for i in range(n):\n        triples.append(input().split())\n    # Count the number of sample sum triples\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if int(triples[i][0]) + int(triples[j][0]) + int(triples[k][0]) == int(triples[i][1]) + int(triples[j][1]) + int(triples[k][1]):\n                    count += 1\n    # Print the number of sample sum triples\n    print(count)\n",
            "def main():\n    \"\"\"\n    Main function for the program.\n    \"\"\"\n    # Get the input from the user\n    num_samples = int(input(\"Enter the number of samples: \"))\n    sample_size = int(input(\"Enter the size of each sample: \"))\n    # Initialize the variables\n    total = 0\n    count = 0\n    # Loop through the samples\n    for i in range(num_samples):\n        # Get the sample\n        sample = int(input(\"Enter a sample: \"))\n        # Add the sample to the total\n        total += sample\n        # Increment the count\n        count += 1\n        # Calculate the average\n        average = total / count\n        # Calculate the standard deviation\n        standard_deviation = (total - average) / count\n        # Calculate the variance\n        variance = standard_deviation ** 2\n        # Calculate the sample standard deviation\n        sample_standard_deviation = sample_size ** 0.5\n        # Calculate the sample variance\n        sample_variance = sample_standard_deviation ** 2\n        # Calculate the sample mean\n        sample_mean = sample / sample_size\n        # Calculate the sample standard error\n        sample_standard_error = sample_standard_deviation / sample_size ** 0.5\n        # Calculate the sample standard deviation\n        sample_standard_deviation = sample_standard_deviation ** 2\n        # Calculate the sample variance\n        sample_variance = sample_standard_deviation ** 2\n        # Calculate the sample mean\n        sample_mean = sample / sample_size\n        # Calculate the sample standard error\n        sample_standard_error = sample_standard_deviation / sample_size ** 0.5\n        # Calculate the sample standard deviation\n        sample_standard_deviation = sample_standard_deviation ** 2\n        # Calculate the sample variance\n        sample_variance = sample_standard_deviation ** 2\n        # Calculate the sample mean\n        sample_mean = sample / sample_size\n        # Calculate the sample standard error\n        sample_standard_error = sample_standard_deviation / sample_size ** 0.5\n        # Calculate\n",
            "def main():\n    \"\"\"\n    Main function for the program.\n    \"\"\"\n    # Get the input file name.\n    infile = input(\"Enter the input file name: \")\n    # Open the input file.\n    infile_obj = open(infile, \"r\")\n    # Read the input file.\n    infile_data = infile_obj.read()\n    # Close the input file.\n    infile_obj.close()\n    # Get the output file name.\n    outfile = input(\"Enter the output file name: \")\n    # Open the output file.\n    outfile_obj = open(outfile, \"w\")\n    # Split the input file data into a list of lines.\n    infile_data_list = infile_data.splitlines()\n    # Initialize the count.\n    count = 0\n    # Loop through the list of lines.\n    for line in infile_data_list:\n        # Split the line into a list of words.\n        line_list = line.split()\n        # Loop through the list of words.\n        for word in line_list:\n            # Check if the word is a sum triple.\n            if is_sum_triple(word):\n                # Increment the count.\n                count += 1\n    # Write the count to the output file.\n    outfile_obj.write(str(count))\n    # Close the output file.\n    outfile_obj.close()\n    # Print the count.\n    print(\"The number of sum triples is\", count)\n",
            "def main():\n    \"\"\"\n    Count the number of triples in a sample of integers.\n    \"\"\"\n    # Get the sample size.\n    n = int(input('Enter the sample size: '))\n    # Get the sample.\n    sample = [int(input('Enter a number: ')) for i in range(n)]\n    # Count the number of triples.\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if sample[i] + sample[j] + sample[k] == 0:\n                    count += 1\n    # Display the result.\n    print('The number of triples is', count)\n",
            "def main():\n    \"\"\"\n    Count the number of times a sum of three numbers is equal to a target number.\n    \"\"\"\n    target = int(input(\"Enter a target number: \"))\n    count = 0\n    for i in range(1, target):\n        for j in range(i, target):\n            for k in range(j, target):\n                if i + j + k == target:\n                    count += 1\n    print(\"There are\", count, \"triples that sum to\", target)\n"
        ],
        "results": 10
    },
    {
        "id": "1094",
        "source": "leetcodeTitles",
        "source_id": "9",
        "url": "https://leetcode.com/problems/palindrome-number/",
        "language": "python",
        "query": "Palindrome Number",
        "snippets": [
            "def isPalindrome(x):\n    if x < 0:\n        return False\n    else:\n        x = str(x)\n        if x == x[::-1]:\n            return True\n        else:\n            return False\n",
            "def isPalindrome(x):\n    if x < 0:\n        return False\n    if x < 10:\n        return True\n    if x % 10 == 0:\n        return False\n    if x % 10 == 1:\n        return True\n    if x % 10 == 2:\n        return True\n    if x % 10 == 3:\n        return True\n    if x % 10 == 4:\n        return True\n    if x % 10 == 5:\n        return True\n    if x % 10 == 6:\n        return True\n    if x % 10 == 7:\n        return True\n    if x % 10 == 8:\n        return True\n    if x % 10 == 9:\n        return True\n    if x % 10 == 0:\n        return False\n    if x % 10 == 1:\n        return True\n    if x % 10 == 2:\n        return True\n    if x % 10 == 3:\n        return True\n    if x % 10 == 4:\n        return True\n    if x % 10 == 5:\n        return True\n    if x % 10 == 6:\n        return True\n    if x % 10 == 7:\n        return True\n    if x % 10 == 8:\n        return True\n    if x % 10 == 9:\n        return True\n    if x % 10 == 0:\n        return False\n    if x % 10 == 1:\n        return True\n    if x % 10 == 2:\n        return True\n    if x % 10 == 3:\n        return True\n    if x % 10 == 4:\n        return True\n    if x % 10 == 5:\n        return True\n    if x % 10 == 6:\n        return True\n    if x % 10 == 7:\n        return True\n    if x % 10 == 8:\n        return True\n    if x % 10 == 9:\n        return True\n    if x % 10 == 0:\n        return False\n    if x % 10 == 1:\n        return True\n    if x % 10 == 2:\n        return True\n    if x % 10 == 3:\n        return True\n    if x % 10 == 4:\n        return True\n    if x % 10 == 5:\n        return True\n",
            "def isPalindrome(x):\n    if x < 0:\n        return False\n    if x < 10:\n        return True\n    if x % 10 == 0:\n        return False\n    if x % 10 == 1:\n        return True\n    if x % 10 == 2:\n        return True\n    if x % 10 == 3:\n        return True\n    if x % 10 == 4:\n        return True\n    if x % 10 == 5:\n        return True\n    if x % 10 == 6:\n        return True\n    if x % 10 == 7:\n        return True\n    if x % 10 == 8:\n        return True\n    if x % 10 == 9:\n        return True\n    if x % 10 == 0:\n        return False\n    if x % 10 == 1:\n        return True\n    if x % 10 == 2:\n        return True\n    if x % 10 == 3:\n        return True\n    if x % 10 == 4:\n        return True\n    if x % 10 == 5:\n        return True\n    if x % 10 == 6:\n        return True\n    if x % 10 == 7:\n        return True\n    if x % 10 == 8:\n        return True\n    if x % 10 == 9:\n        return True\n    return False\n",
            "def is_palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    else:\n        return False\n",
            "def is_palindrome(num):\n    num = str(num)\n    for i in range(len(num)//2):\n        if num[i] != num[-i-1]:\n            return False\n    return True\n",
            "def is_palindrome(num):\n    num = str(num)\n    for i in range(len(num)):\n        if num[i] != num[len(num)-i-1]:\n            return False\n    return True\n",
            "def is_palindrome(num):\n    num = str(num)\n    for i in range(len(num)//2):\n        if num[i] != num[len(num)-i-1]:\n            return False\n    return True\n",
            "def is_palindrome(num):\n    num = str(num)\n    if num == num[::-1]:\n        return True\n    return False\n"
        ],
        "results": 10
    },
    {
        "id": "1095",
        "source": "leetcodeTitles",
        "source_id": "242",
        "url": "https://leetcode.com/problems/valid-anagram/",
        "language": "python",
        "query": "Valid Anagram",
        "snippets": [
            "def is_anagram(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            return False\n    return True\n",
            "def is_anagram(s1, s2):\n    s1 = s1.replace(' ', '').lower()\n    s2 = s2.replace(' ', '').lower()\n    if len(s1) != len(s2):\n        return False\n    for char in s1:\n        if char not in s2:\n            return False\n    return True\n",
            "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    str1 = str1.lower()\n    str2 = str2.lower()\n    str1_dict = {}\n    str2_dict = {}\n    for char in str1:\n        if char in str1_dict:\n            str1_dict[char] += 1\n        else:\n            str1_dict[char] = 1\n    for char in str2:\n        if char in str2_dict:\n            str2_dict[char] += 1\n        else:\n            str2_dict[char] = 1\n    for key in str1_dict:\n        if key not in str2_dict:\n            return False\n        if str1_dict[key] != str2_dict[key]:\n            return False\n    return True\n",
            "def is_anagram(s1, s2):\n    s1 = s1.replace(' ', '').lower()\n    s2 = s2.replace(' ', '').lower()\n    if len(s1) != len(s2):\n        return False\n    for char in s1:\n        if char in s2:\n            s2 = s2.replace(char, '', 1)\n        else:\n            return False\n    return True\n",
            "def is_anagram(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    str1 = str1.replace(' ', '').lower()\n    str2 = str2.replace(' ', '').lower()\n    str1_dict = {}\n    for char in str1:\n        if char in str1_dict:\n            str1_dict[char] += 1\n        else:\n            str1_dict[char] = 1\n    for char in str2:\n        if char in str1_dict:\n            str1_dict[char] -= 1\n        else:\n            str1_dict[char] = 1\n    for key in str1_dict:\n        if str1_dict[key] != 0:\n            return False\n    return True\n",
            "def is_anagram(s1, s2):\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    return s1 == s2\n"
        ],
        "results": 10
    },
    {
        "id": "1096",
        "source": "leetcodeTitles",
        "source_id": "970",
        "url": "https://leetcode.com/problems/powerful-integers/",
        "language": "python",
        "query": "Powerful Integers",
        "snippets": [
            "def powerfulIntegers(x, y, bound):\n    res = set()\n    for i in range(x, bound):\n        for j in range(y, bound):\n            res.add(i ** j)\n    return list(res)\n",
            "def powerfulIntegers(x, y, bound):\n    res = set()\n    for i in range(x, bound):\n        for j in range(y, bound):\n            res.add(i ** j)\n    return sorted(list(res))\n",
            "def powerfulIntegers(x, y, bound):\n    # Write your code here\n    res = set()\n    for i in range(x, bound):\n        for j in range(y, bound):\n            res.add(i ** j)\n    return list(res)\n",
            "def powerfulIntegers(x, y, bound):\n    ans = set()\n    for i in range(1, bound):\n        for j in range(1, bound):\n            if i ** j > bound:\n                break\n            if i ** j >= x and i ** j <= bound:\n                ans.add(i ** j)\n    for i in range(1, bound):\n        for j in range(1, bound):\n            if j ** i > bound:\n                break\n            if j ** i >= y and j ** i <= bound:\n                ans.add(j ** i)\n    return sorted(list(ans))\n",
            "def powerfulIntegers(x, y, bound):\n    return [i for i in range(1, bound) if i == x or i == y or i == x * y or i == x + y]\n",
            "def is_powerful(n):\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i**2 == n:\n                return True\n            if i**2 > n:\n                return False\n    return False\n",
            "def powerfulIntegers(x, y, bound):\n    # Complete this function\n    res = set()\n    for i in range(x, bound):\n        for j in range(y, bound):\n            res.add(i ** j)\n    return sorted(list(res))\n",
            "def powerfulIntegers(x, y, bound):\n    # x, y are positive integers\n    # bound is an integer\n    # return a list of integers\n    res = []\n    for i in range(bound):\n        if i**x + (bound-i)**y <= bound:\n            res.append(i**x + (bound-i)**y)\n    return res\n"
        ],
        "results": 8
    },
    {
        "id": "1097",
        "source": "leetcodeTitles",
        "source_id": "1509",
        "url": "https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/",
        "language": "python",
        "query": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "snippets": [
            "def min_diff(a, b, c):\n    return min(abs(a - b), abs(a - c), abs(b - c))\n",
            "def min_diff(a, b, c):\n    return min(a, b, c) - max(a, b, c)\n",
            "def minimumDifference(a):\n    a.sort()\n    return a[-1] - a[0]\n",
            "def minimumDifference(a, n):\n    a.sort()\n    return a[n - 1] - a[n - 2]\n"
        ],
        "results": 10
    },
    {
        "id": "1098",
        "source": "leetcodeTitles",
        "source_id": "795",
        "url": "https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/",
        "language": "python",
        "query": "Number of Subarrays with Bounded Maximum",
        "snippets": [
            "def numSubarrayBoundedMax(A, L, R):\n    \"\"\"\n    :type A: List[int]\n    :type L: int\n    :type R: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    left = 0\n    for right in range(len(A)):\n        if A[right] <= R:\n            count += right - left + 1\n        else:\n            left = right + 1\n    return count\n",
            "def numSubarrayBoundedMax(A, L, R):\n    \"\"\"\n    :type A: List[int]\n    :type L: int\n    :type R: int\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    count = 0\n    left = 0\n    for right in range(len(A)):\n        if A[right] <= R:\n            count += right - left + 1\n        while left < right and A[left] <= L:\n            left += 1\n        count += right - left + 1\n    return count\n",
            "def numSubarrayBoundedMax(A, L, R):\n    \"\"\"\n    :type A: List[int]\n    :type L: int\n    :type R: int\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    count = 0\n    left = 0\n    right = 0\n    while right < len(A):\n        if A[right] > R:\n            right += 1\n        elif A[right] < L:\n            right += 1\n        else:\n            count += (right - left + 1)\n            right += 1\n            left = right\n    return count\n",
            "def numSubarrayBoundedMax(A, L, R):\n    \"\"\"\n    :type A: List[int]\n    :type L: int\n    :type R: int\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    count = 0\n    left = 0\n    for i in range(len(A)):\n        if A[i] >= L:\n            left = i\n            break\n    for i in range(len(A)):\n        if A[i] <= R:\n            count += i - left + 1\n        else:\n            break\n    return count\n",
            "def numSubarrayBoundedMax(A, L, R):\n    \"\"\"\n    :type A: List[int]\n    :type L: int\n    :type R: int\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    count = 0\n    left = 0\n    for right in range(len(A)):\n        if A[right] > R:\n            count += right - left\n            left = right + 1\n        elif A[right] < L:\n            left = right + 1\n    count += right - left + 1\n    return count\n",
            "def numSubarrayBoundedMax(self, A, L, R):\n    \"\"\"\n    :type A: List[int]\n    :type L: int\n    :type R: int\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    n = len(A)\n    left, right = 0, 0\n    ans = 0\n    while right < n:\n        while right < n and A[right] <= R:\n            right += 1\n        ans += (right - left) * (right - left + 1) // 2\n        while left < right and A[left] < L:\n            left += 1\n        ans += (right - left) * (right - left + 1) // 2\n    return ans\n",
            "def num_subarray_bounded_max(A, L, R):\n    \"\"\"\n    :type A: List[int]\n    :type L: int\n    :type R: int\n    :rtype: int\n    \"\"\"\n    count = 0\n    left = 0\n    for right in range(len(A)):\n        if A[right] > R:\n            count += right - left\n            left = right + 1\n        elif A[right] < L:\n            left = right + 1\n    count += len(A) - left\n    return count\n",
            "def numOfSubarrays(arr, k, x):\n    \"\"\"\n    :param arr: list of integers\n    :param k: int\n    :param x: int\n    :return: int\n    \"\"\"\n    # Write your code here.\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == x:\n            count += 1\n        if arr[i] == x and i >= k - 1:\n            return count\n    return count\n",
            "def numOfSubarrays(arr, k, bound):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] > bound:\n            count += 1\n        if arr[i] > bound:\n            count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1099",
        "source": "leetcodeTitles",
        "source_id": "516",
        "url": "https://leetcode.com/problems/longest-palindromic-subsequence/",
        "language": "python",
        "query": "Longest Palindromic Subsequence",
        "snippets": [
            "def lps(s):\n    n = len(s)\n    L = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for c in range(2, n+1):\n        for i in range(n-c+1):\n            j = i + c - 1\n            if s[i] == s[j] and c == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i+1][j], L[i][j-1])\n    return L[0][n-1]\n",
            "def lps(s):\n    n = len(s)\n    L = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for c in range(2, n+1):\n        for i in range(n-c+1):\n            j = i+c-1\n            if s[i] == s[j] and c == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]\n"
        ],
        "results": 10
    },
    {
        "id": "1100",
        "source": "leetcodeTitles",
        "source_id": "1313",
        "url": "https://leetcode.com/problems/decompress-run-length-encoded-list/",
        "language": "python",
        "query": "Decompress Run-Length Encoded List",
        "snippets": [
            "def decompress(lst):\n    result = []\n    for i in range(0, len(lst), 2):\n        result.extend([lst[i+1]] * lst[i])\n    return result\n",
            "def decompress(lst):\n    decompressed = []\n    for i in range(len(lst)):\n        if type(lst[i]) == int:\n            decompressed.extend([lst[i]] * lst[i+1])\n        else:\n            decompressed.append(lst[i])\n    return decompressed\n",
            "def decompress(lst):\n    decompressed = []\n    for i in range(0, len(lst), 2):\n        decompressed.extend([lst[i+1]] * lst[i])\n    return decompressed\n",
            "def decompress(lst):\n    out = []\n    for i in range(len(lst)):\n        if type(lst[i]) == int:\n            out.extend([lst[i]] * lst[i+1])\n        else:\n            out.append(lst[i])\n    return out\n",
            "def decompress_rle(lst):\n    \"\"\"\n    Decompress a list of run-length encoded elements.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), 2):\n        result.extend([lst[i+1]] * lst[i])\n    return result\n",
            "def decompress_rle(lst):\n    \"\"\"\n    Decompress a list of run-length encoded elements.\n    \"\"\"\n    decompressed_lst = []\n    for i in range(0, len(lst), 2):\n        decompressed_lst.extend([lst[i+1]] * lst[i])\n    return decompressed_lst\n",
            "def decompress_rle(lst):\n    \"\"\"\n    Decompress a list of run-length encoded elements.\n    \"\"\"\n    out = []\n    for i in range(0, len(lst), 2):\n        out.extend([lst[i + 1]] * lst[i])\n    return out\n",
            "def decompress(lst):\n    new_lst = []\n    for i in range(0, len(lst), 2):\n        if lst[i] == 1:\n            new_lst.append(lst[i+1])\n        else:\n            for j in range(lst[i+1]):\n                new_lst.append(lst[i+2])\n    return new_lst\n",
            "def decompress(lst):\n    \"\"\"\n    Decompress a list of RLEs\n    \"\"\"\n    new_lst = []\n    for i in range(0, len(lst), 2):\n        new_lst.extend([lst[i+1]] * lst[i])\n    return new_lst\n"
        ],
        "results": 10
    },
    {
        "id": "1101",
        "source": "leetcodeTitles",
        "source_id": "237",
        "url": "https://leetcode.com/problems/delete-node-in-a-linked-list/",
        "language": "python",
        "query": "Delete Node in a Linked List",
        "snippets": [
            "def delete_node(node_to_delete):\n    if node_to_delete is None:\n        return\n    node_to_delete.value = node_to_delete.next.value\n    node_to_delete.next = node_to_delete.next.next\n    return node_to_delete\n",
            "def delete_node(node_to_delete):\n    if node_to_delete is None:\n        return\n    node_to_delete.value = node_to_delete.next.value\n    node_to_delete.next = node_to_delete.next.next\n    return\n",
            "def delete_node(node_to_delete):\n    if node_to_delete is None:\n        return\n    if node_to_delete.next is None:\n        node_to_delete = None\n        return\n    node_to_delete.value = node_to_delete.next.value\n    node_to_delete.next = node_to_delete.next.next\n    return\n",
            "def delete_node(node):\n    if node is None:\n        return\n    node.value = node.next.value\n    node.next = node.next.next\n    return node\n",
            "def delete_node(node):\n    if node is None:\n        return\n    node.next = node.next.next\n    node.data = node.next.data\n    node.next = node.next.next\n    return node\n"
        ],
        "results": 10
    },
    {
        "id": "1102",
        "source": "leetcodeTitles",
        "source_id": "2208",
        "url": "https://leetcode.com/problems/minimum-operations-to-halve-array-sum/",
        "language": "python",
        "query": "Minimum Operations to Halve Array Sum",
        "snippets": [
            "def minOperations(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 3\n    if n == 5:\n        return 4\n    if n == 6:\n        return 5\n    if n == 7:\n        return 6\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 9\n    if n == 11:\n        return 10\n    if n == 12:\n        return 11\n    if n == 13:\n        return 12\n    if n == 14:\n        return 13\n    if n == 15:\n        return 14\n    if n == 16:\n        return 15\n    if n == 17:\n        return 16\n    if n == 18:\n        return 17\n    if n == 19:\n        return 18\n    if n == 20:\n        return 19\n    if n == 21:\n        return 20\n    if n == 22:\n        return 21\n    if n == 23:\n        return 22\n    if n == 24:\n        return 23\n    if n == 25:\n        return 24\n    if n == 26:\n        return 25\n    if n == 27:\n        return 26\n    if n == 28:\n        return 27\n    if n == 29:\n        return 28\n    if n == 30:\n        return 29\n    if n == 31:\n        return 30\n    if n == 32:\n        return 31\n    if n == 33:\n        return 32\n    if n == 34:\n        return 33\n    if n == 35:\n        return 34\n    if n == 36:\n        return 35\n    if n == 37:\n        return 36\n    if n == 38:\n        return 37\n    if n == 39:\n        return 38\n    if n == 40:\n        return 39\n    if n == 41:\n        return 40\n    if n == 42:\n        return 41\n    if n == 43:\n        return 42\n",
            "def minOperations(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 4\n    if n == 9:\n        return 5\n    if n == 10:\n        return 5\n    if n == 11:\n        return 6\n    if n == 12:\n        return 6\n    if n == 13:\n        return 7\n    if n == 14:\n        return 7\n    if n == 15:\n        return 8\n    if n == 16:\n        return 8\n    if n == 17:\n        return 9\n    if n == 18:\n        return 9\n    if n == 19:\n        return 10\n    if n == 20:\n        return 10\n    if n == 21:\n        return 11\n    if n == 22:\n        return 11\n    if n == 23:\n        return 12\n    if n == 24:\n        return 12\n    if n == 25:\n        return 13\n    if n == 26:\n        return 13\n    if n == 27:\n        return 14\n    if n == 28:\n        return 14\n    if n == 29:\n        return 15\n    if n == 30:\n        return 15\n    if n == 31:\n        return 16\n    if n == 32:\n        return 16\n    if n == 33:\n        return 17\n    if n == 34:\n        return 17\n    if n == 35:\n        return 18\n    if n == 36:\n        return 18\n    if n == 37:\n        return 19\n    if n == 38:\n        return 19\n    if n == 39:\n        return 20\n    if n == 40:\n        return 20\n    if n == 41:\n        return 21\n    if n == 42:\n        return 21\n    if n == 43:\n        return 22\n",
            "def minOperations(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 4\n    if n == 5:\n        return 7\n    if n == 6:\n        return 9\n    if n == 7:\n        return 12\n    if n == 8:\n        return 16\n    if n == 9:\n        return 20\n    if n == 10:\n        return 25\n    if n == 11:\n        return 30\n    if n == 12:\n        return 35\n    if n == 13:\n        return 40\n    if n == 14:\n        return 45\n    if n == 15:\n        return 50\n    if n == 16:\n        return 55\n    if n == 17:\n        return 60\n    if n == 18:\n        return 65\n    if n == 19:\n        return 70\n    if n == 20:\n        return 75\n    if n == 21:\n        return 80\n    if n == 22:\n        return 85\n    if n == 23:\n        return 90\n    if n == 24:\n        return 95\n    if n == 25:\n        return 100\n    if n == 26:\n        return 105\n    if n == 27:\n        return 110\n    if n == 28:\n        return 115\n    if n == 29:\n        return 120\n    if n == 30:\n        return 125\n    if n == 31:\n        return 130\n    if n == 32:\n        return 135\n    if n == 33:\n        return 140\n    if n == 34:\n        return 145\n    if n == 35:\n        return 150\n    if n == 36:\n        return 155\n    if n == 37:\n        return 160\n    if n == 38:\n        return 165\n    if n == 39:\n        return 170\n    if n == 40:\n        return 175\n    if n == 41:\n        return 180\n    if n == 42:\n        return 185\n    if n == 43:\n        return 190\n",
            "def minOperations(n):\n    \"\"\"\n    :type n: int\n    :rtype: int\n    \"\"\"\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return minOperations(n // 2)\n    else:\n        return minOperations(n // 2) + 1\n",
            "def minOperations(n):\n    # Write your code here\n    if n == 1:\n        return 0\n    if n % 2 == 0:\n        return minOperations(n // 2)\n    else:\n        return minOperations(n // 2) + 1\n",
            "def minOperations(n):\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return minOperations(n-1) + minOperations(n-2)\n"
        ],
        "results": 10
    },
    {
        "id": "1103",
        "source": "leetcodeTitles",
        "source_id": "166",
        "url": "https://leetcode.com/problems/fraction-to-recurring-decimal/",
        "language": "python",
        "query": "Fraction to Recurring Decimal",
        "snippets": [
            "def fractionToDecimal(n, d):\n    if n == 0:\n        return '0'\n    if n < 0:\n        n = -n\n    if d < 0:\n        d = -d\n    if n % d == 0:\n        return str(n // d)\n    else:\n        return str(n // d) + '.' + str(n % d) + '(' + str(d) + ')'\n",
            "def fractionToDecimal(n, d):\n    if n == 0:\n        return '0'\n    if n < 0:\n        n = -n\n    if d < 0:\n        d = -d\n    if n % d == 0:\n        return str(n // d)\n    else:\n        res = str(n // d) + '.'\n        n = n % d\n        seen = {}\n        while n != 0:\n            if n in seen:\n                res += '(' + seen[n] + ')'\n                break\n            seen[n] = res\n            n *= 10\n            res += str(n // d)\n            n = n % d\n        return res\n",
            "def fractionToDecimal(n, d):\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        n = -n\n    if d < 0:\n        d = -d\n    if n % d == 0:\n        return str(n // d)\n    else:\n        return str(n // d) + \".\" + str(n % d) + \"(\" + str(d) + \")\"\n",
            "def fractionToDecimal(n, d):\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        n = -n\n    if d < 0:\n        d = -d\n    if n % d == 0:\n        return str(n // d)\n    else:\n        n = n % d\n        if n == 0:\n            return \"0\"\n        else:\n            n = n * 10\n            d = d * 10\n            n = n // d\n            return str(n)\n",
            "def fractionToDecimal(n, d):\n    if n == 0:\n        return \"0\"\n    if n < 0:\n        n = -n\n    if d < 0:\n        d = -d\n    if n % d == 0:\n        return str(n // d)\n    else:\n        ans = str(n // d) + \".\"\n        n = n % d\n        d = d * 10\n        while n != 0:\n            if n in seen:\n                ans += \"(\" + seen[n] + \")\"\n                break\n            seen[n] = ans\n            n = n * 10\n            ans += str(n // d)\n            n = n % d\n            d = d * 10\n        return ans\n"
        ],
        "results": 5
    },
    {
        "id": "1104",
        "source": "leetcodeTitles",
        "source_id": "989",
        "url": "https://leetcode.com/problems/add-to-array-form-of-integer/",
        "language": "python",
        "query": "Add to Array-Form of Integer",
        "snippets": [
            "def addToArrayForm(A, K):\n    A = [int(x) for x in A]\n    K = [int(x) for x in str(K)]\n    while len(K) < len(A):\n        K.insert(0, 0)\n    for i in range(len(A)):\n        A[i] += K[i]\n        if A[i] > 9:\n            A[i] -= 10\n            A.insert(i + 1, 1)\n    return A\n",
            "def addToArrayForm(A, K):\n    A = [int(x) for x in A]\n    K = [int(x) for x in str(K)]\n    while len(K) < len(A):\n        K.insert(0, 0)\n    for i in range(len(A)):\n        A[i] += K[i]\n        if A[i] >= 10:\n            A[i] -= 10\n            A[i+1] += 1\n    if A[-1] == 0:\n        A.pop()\n    return A\n",
            "def addToArrayForm(A, K):\n    A = [int(i) for i in A]\n    K = [int(i) for i in str(K)]\n    while len(K) < len(A):\n        K.insert(0, 0)\n    for i in range(len(A)):\n        A[i] += K[i]\n        if A[i] >= 10:\n            A[i] -= 10\n            A[i+1] += 1\n    if A[-1] == 0:\n        A.pop()\n    return A\n",
            "def addToArrayForm(A, K):\n    A = [int(i) for i in A]\n    K = [int(i) for i in str(K)]\n    A = A + K\n    A = [str(i) for i in A]\n    A = ''.join(A)\n    A = [int(i) for i in A]\n    return A\n",
            "def addToArrayForm(A, K):\n    A = [int(x) for x in A]\n    K = [int(x) for x in str(K)]\n    A = A + K\n    A = [str(x) for x in A]\n    A = ''.join(A)\n    A = [int(x) for x in A]\n    return A\n",
            "def addToArrayForm(A, K):\n    A = [int(i) for i in A]\n    K = [int(i) for i in str(K)]\n    if len(K) > len(A):\n        K = K[len(K)-len(A):]\n    for i in range(len(K)):\n        A[i] += K[i]\n        if A[i] > 9:\n            A[i] -= 10\n            A[i+1] += 1\n    if A[-1] == 0:\n        A = A[:-1]\n    return A\n",
            "def addToArrayForm(A, K):\n    A = [int(i) for i in A]\n    K = [int(i) for i in str(K)]\n    if len(A) > len(K):\n        K = [0] * (len(A) - len(K)) + K\n    else:\n        A = [0] * (len(K) - len(A)) + A\n    for i in range(len(A)):\n        A[i] += K[i]\n        if A[i] > 9:\n            A[i] -= 10\n            A[i+1] += 1\n    if A[-1] == 0:\n        A = A[:-1]\n    return A\n",
            "def addToArrayForm(A, K):\n    A = [int(x) for x in A]\n    K = [int(x) for x in str(K)]\n    if len(A) > len(K):\n        K = K + [0] * (len(A) - len(K))\n    else:\n        A = A + [0] * (len(K) - len(A))\n    for i in range(len(A)):\n        A[i] += K[i]\n        A[i], K[i] = divmod(A[i], 10)\n    return A\n"
        ],
        "results": 10
    },
    {
        "id": "1105",
        "source": "leetcodeTitles",
        "source_id": "69",
        "url": "https://leetcode.com/problems/sqrtx/",
        "language": "python",
        "query": "Sqrt(x)",
        "snippets": [
            "def mySqrt(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 1\n    if x == 3:\n        return 1\n    if x == 4:\n        return 2\n    if x == 5:\n        return 2\n    if x == 6:\n        return 2\n    if x == 7:\n        return 2\n    if x == 8:\n        return 2\n    if x == 9:\n        return 3\n    if x == 10:\n        return 3\n    if x == 11:\n        return 3\n    if x == 12:\n        return 3\n    if x == 13:\n        return 3\n    if x == 14:\n        return 3\n    if x == 15:\n        return 3\n    if x == 16:\n        return 4\n    if x == 17:\n        return 4\n    if x == 18:\n        return 4\n    if x == 19:\n        return 4\n    if x == 20:\n        return 4\n    if x == 21:\n        return 4\n    if x == 22:\n        return 4\n    if x == 23:\n        return 4\n    if x == 24:\n        return 4\n    if x == 25:\n        return 5\n    if x == 26:\n        return 5\n    if x == 27:\n        return 5\n    if x == 28:\n        return 5\n    if x == 29:\n        return 5\n    if x == 30:\n        return 5\n    if x == 31:\n        return 5\n    if x == 32:\n        return 5\n    if x == 33:\n        return 5\n    if x == 34:\n        return 5\n    if x == 35:\n        return 5\n    if x == 36:\n        return 5\n    if x == 37:\n        return 5\n    if x == 38:\n        return 5\n    if x == 39:\n        return 5\n    if x == 40:\n        return 6\n    if x == 41:\n        return 6\n    if x == 42:\n        return 6\n    if x == 43:\n        return 6\n    if x == 44:\n",
            "def mySqrt(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 1\n    if x == 3:\n        return 1\n    if x == 4:\n        return 2\n    if x == 5:\n        return 2\n    if x == 6:\n        return 2\n    if x == 7:\n        return 2\n    if x == 8:\n        return 2\n    if x == 9:\n        return 3\n    if x == 10:\n        return 3\n    if x == 11:\n        return 3\n    if x == 12:\n        return 3\n    if x == 13:\n        return 3\n    if x == 14:\n        return 3\n    if x == 15:\n        return 3\n    if x == 16:\n        return 4\n    if x == 17:\n        return 4\n    if x == 18:\n        return 4\n    if x == 19:\n        return 4\n    if x == 20:\n        return 4\n    if x == 21:\n        return 4\n    if x == 22:\n        return 4\n    if x == 23:\n        return 4\n    if x == 24:\n        return 4\n    if x == 25:\n        return 5\n    if x == 26:\n        return 5\n    if x == 27:\n        return 5\n    if x == 28:\n        return 5\n    if x == 29:\n        return 5\n    if x == 30:\n        return 5\n    if x == 31:\n        return 5\n    if x == 32:\n        return 5\n    if x == 33:\n        return 5\n    if x == 34:\n        return 5\n    if x == 35:\n        return 5\n    if x == 36:\n        return 5\n    if x == 37:\n        return 5\n    if x == 38:\n        return 5\n    if x == 39:\n        return 5\n    if x == 40:\n        return 5\n    if x == 41:\n        return 5\n    if x == 42:\n        return 5\n    if x == 43:\n        return 5\n    if x == 44:\n",
            "def mySqrt(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 1\n    if x == 3:\n        return 1\n    if x == 4:\n        return 2\n    if x == 5:\n        return 2\n    if x == 6:\n        return 2\n    if x == 7:\n        return 2\n    if x == 8:\n        return 2\n    if x == 9:\n        return 3\n    if x == 10:\n        return 3\n    if x == 11:\n        return 3\n    if x == 12:\n        return 3\n    if x == 13:\n        return 3\n    if x == 14:\n        return 3\n    if x == 15:\n        return 3\n    if x == 16:\n        return 4\n    if x == 17:\n        return 4\n    if x == 18:\n        return 4\n    if x == 19:\n        return 4\n    if x == 20:\n        return 4\n    if x == 21:\n        return 4\n    if x == 22:\n        return 4\n    if x == 23:\n        return 4\n    if x == 24:\n        return 4\n    if x == 25:\n        return 4\n    if x == 26:\n        return 4\n    if x == 27:\n        return 4\n    if x == 28:\n        return 4\n    if x == 29:\n        return 4\n    if x == 30:\n        return 4\n    if x == 31:\n        return 4\n    if x == 32:\n        return 4\n    if x == 33:\n        return 4\n    if x == 34:\n        return 4\n    if x == 35:\n        return 4\n    if x == 36:\n        return 4\n    if x == 37:\n        return 4\n    if x == 38:\n        return 4\n    if x == 39:\n        return 4\n    if x == 40:\n        return 4\n    if x == 41:\n        return 4\n    if x == 42:\n        return 4\n    if x == 43:\n        return 4\n    if x == 44:\n",
            "def mySqrt(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 1\n    if x == 3:\n        return 1\n    if x == 4:\n        return 2\n    if x == 5:\n        return 2\n    if x == 6:\n        return 2\n    if x == 7:\n        return 2\n    if x == 8:\n        return 2\n    if x == 9:\n        return 3\n    if x == 10:\n        return 3\n    if x == 11:\n        return 3\n    if x == 12:\n        return 3\n    if x == 13:\n        return 3\n    if x == 14:\n        return 3\n    if x == 15:\n        return 3\n    if x == 16:\n        return 4\n    if x == 17:\n        return 4\n    if x == 18:\n        return 4\n    if x == 19:\n        return 4\n    if x == 20:\n        return 4\n    if x == 21:\n        return 4\n    if x == 22:\n        return 4\n    if x == 23:\n        return 4\n    if x == 24:\n        return 4\n    if x == 25:\n        return 5\n    if x == 26:\n        return 5\n    if x == 27:\n        return 5\n    if x == 28:\n        return 5\n    if x == 29:\n        return 5\n    if x == 30:\n        return 5\n    if x == 31:\n        return 5\n    if x == 32:\n        return 5\n    if x == 33:\n        return 5\n    if x == 34:\n        return 5\n    if x == 35:\n        return 5\n    if x == 36:\n        return 5\n    if x == 37:\n        return 5\n    if x == 38:\n        return 5\n    if x == 39:\n        return 5\n    if x == 40:\n        return 6\n    if x == 41:\n        return 6\n    if x == 42:\n        return\n",
            "def mySqrt(x):\n    \"\"\"\n    :type x: int\n    :rtype: int\n    \"\"\"\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 1\n    if x == 3:\n        return 1\n    if x == 4:\n        return 2\n    if x == 5:\n        return 2\n    if x == 6:\n        return 2\n    if x == 7:\n        return 2\n    if x == 8:\n        return 2\n    if x == 9:\n        return 3\n    if x == 10:\n        return 3\n    if x == 11:\n        return 3\n    if x == 12:\n        return 3\n    if x == 13:\n        return 3\n    if x == 14:\n        return 3\n    if x == 15:\n        return 3\n    if x == 16:\n        return 4\n    if x == 17:\n        return 4\n    if x == 18:\n        return 4\n    if x == 19:\n        return 4\n    if x == 20:\n        return 4\n    if x == 21:\n        return 4\n    if x == 22:\n        return 4\n    if x == 23:\n        return 4\n    if x == 24:\n        return 4\n    if x == 25:\n        return 4\n    if x == 26:\n        return 4\n    if x == 27:\n        return 4\n    if x == 28:\n        return 4\n    if x == 29:\n        return 4\n    if x == 30:\n        return 4\n    if x == 31:\n        return 4\n    if x == 32:\n        return 4\n    if x == 33:\n        return 4\n    if x == 34:\n        return 4\n    if x == 35:\n        return 4\n    if x == 36:\n        return 4\n    if x == 37:\n        return 4\n    if x == 38:\n        return 4\n    if x == 39:\n        return 4\n    if x == 40:\n        return 4\n    if x == 41:\n        return 4\n    if x == 42:\n        return\n"
        ],
        "results": 10
    },
    {
        "id": "1106",
        "source": "leetcodeTitles",
        "source_id": "637",
        "url": "https://leetcode.com/problems/average-of-levels-in-binary-tree/",
        "language": "python",
        "query": "Average of Levels in Binary Tree",
        "snippets": [
            "def average(root):\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return root.val\n    if root.left is None:\n        return (root.val + average(root.right)) / 2\n    if root.right is None:\n        return (root.val + average(root.left)) / 2\n    return (root.val + average(root.left) + average(root.right)) / 3\n",
            "def average(root):\n    if root is None:\n        return 0\n    return (average(root.left) + average(root.right) + root.data) / 2\n",
            "def average_of_levels(root):\n    if not root:\n        return []\n    queue = [root]\n    result = []\n    while queue:\n        size = len(queue)\n        sum = 0\n        for _ in range(size):\n            node = queue.pop(0)\n            sum += node.data\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n        result.append(sum / size)\n    return result\n"
        ],
        "results": 10
    },
    {
        "id": "1107",
        "source": "leetcodeTitles",
        "source_id": "767",
        "url": "https://leetcode.com/problems/reorganize-string/",
        "language": "python",
        "query": "Reorganize String",
        "snippets": [
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 0:\n        return \"\"\n    if len(S) == 1:\n        return S\n    d = {}\n    for c in S:\n        if c not in d:\n            d[c] = 1\n        else:\n            d[c] += 1\n    l = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    if l[0][1] > (len(S) + 1) / 2:\n        return \"\"\n    res = \"\"\n    while len(l) > 0:\n        for i in range(len(l)):\n            res += l[i][0]\n            l[i][1] -= 1\n            if l[i][1] == 0:\n                l.pop(i)\n                break\n    return res\n",
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 0:\n        return S\n    if len(S) == 1:\n        return S\n    if len(S) == 2:\n        return S[1] + S[0] if S[0] == S[1] else S\n    # count the frequency of each character\n    freq = {}\n    for c in S:\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    # sort the characters by frequency\n    sorted_freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    # if the frequency of the first character is greater than the length of S / 2, return \"\"\n    if sorted_freq[0][1] > (len(S) + 1) / 2:\n        return \"\"\n    # initialize the result string\n    res = \"\"\n    # initialize the index of the first character\n    i = 0\n    # initialize the index of the second character\n    j = 1\n    # while the index of the first character is less than the length of S\n    while i < len(S):\n        # if the index of the second character is less than the length of S\n        if j < len(S):\n            # if the frequency of the first character is greater than the frequency of the second character\n            if sorted_freq[i][1] > sorted_freq[j][1]:\n                # add the second character to the result string\n                res += sorted_freq[j][0]\n                # increase the index of the second character by 1\n                j += 1\n            # otherwise\n            else:\n                # add the first character to the result string\n                res += sorted_freq[i][0]\n                # increase the index of the first character by 1\n                i += 1\n        # otherwise\n        else:\n            # add the first character to the result string\n            res += sorted_freq[i][0]\n            # increase the index of the first character by 1\n            i += 1\n",
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 0:\n        return S\n    if len(S) == 1:\n        return S\n    if len(S) == 2:\n        return S[1] + S[0]\n    if len(S) == 3:\n        return S[2] + S[0] + S[1]\n    if len(S) == 4:\n        return S[3] + S[0] + S[1] + S[2]\n    if len(S) == 5:\n        return S[4] + S[0] + S[1] + S[2] + S[3]\n    if len(S) == 6:\n        return S[5] + S[0] + S[1] + S[2] + S[3] + S[4]\n    if len(S) == 7:\n        return S[6] + S[0] + S[1] + S[2] + S[3] + S[4] + S[5]\n    if len(S) == 8:\n        return S[7] + S[0] + S[1] + S[2] + S[3] + S[4] + S[5] + S[6]\n    if len(S) == 9:\n        return S[8] + S[0] + S[1] + S[2] + S[3] + S[4] + S[5] + S[6] + S[7]\n    if len(S) == 10:\n        return S[9] + S[0] + S[1] + S[2] + S[3] + S[4] + S[5] + S[6] + S[7] + S[8]\n    if len(S) == 11:\n        return S[10] + S[0] + S[1] + S[2] + S[3] + S[4] + S[5] + S[6] + S[7] + S[8] + S[9]\n",
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 0:\n        return S\n    if len(S) == 1:\n        return S\n    if len(S) == 2:\n        return S[0] + S[1]\n    if len(S) == 3:\n        return S[0] + S[2] + S[1]\n    if len(S) == 4:\n        return S[0] + S[3] + S[1] + S[2]\n    if len(S) == 5:\n        return S[0] + S[4] + S[1] + S[3] + S[2]\n    if len(S) == 6:\n        return S[0] + S[5] + S[1] + S[4] + S[2] + S[3]\n    if len(S) == 7:\n        return S[0] + S[6] + S[1] + S[5] + S[2] + S[4] + S[3]\n    if len(S) == 8:\n        return S[0] + S[7] + S[1] + S[6] + S[2] + S[5] + S[3] + S[4]\n    if len(S) == 9:\n        return S[0] + S[8] + S[1] + S[7] + S[2] + S[6] + S[3] + S[5] + S[4]\n    if len(S) == 10:\n        return S[0] + S[9] + S[1] + S[8] + S[2] + S[7] + S[3] + S[6] + S[4] + S[5]\n    if len(S) == 11:\n        return S[0] + S[10] + S[1] + S[9] + S[2] + S[8] + S[3] + S[7] + S[4] + S[6] + S[5]\n",
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 0:\n        return S\n    if len(S) == 1:\n        return S\n    if len(S) == 2:\n        return S[0] + S[1]\n    if len(S) == 3:\n        return S[0] + S[2] + S[1]\n    if len(S) == 4:\n        return S[0] + S[3] + S[1] + S[2]\n    if len(S) == 5:\n        return S[0] + S[4] + S[1] + S[2] + S[3]\n    if len(S) == 6:\n        return S[0] + S[5] + S[1] + S[2] + S[3] + S[4]\n    if len(S) == 7:\n        return S[0] + S[6] + S[1] + S[2] + S[3] + S[4] + S[5]\n    if len(S) == 8:\n        return S[0] + S[7] + S[1] + S[2] + S[3] + S[4] + S[5] + S[6]\n    if len(S) == 9:\n        return S[0] + S[8] + S[1] + S[2] + S[3] + S[4] + S[5] + S[6] + S[7]\n    if len(S) == 10:\n        return S[0] + S[9] + S[1] + S[2] + S[3] + S[4] + S[5] + S[6] + S[7] + S[8]\n    if len(S) == 11:\n        return S[0] + S[10] + S[1] + S[2] + S[3] + S[4] + S[5] + S[6] + S[7] + S[8] + S[9]\n",
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if not S:\n        return S\n    from collections import Counter\n    c = Counter(S)\n    c = sorted(c.items(), key=lambda x: x[1], reverse=True)\n    if c[0][1] > (len(S) + 1) / 2:\n        return \"\"\n    res = []\n    for i in range(len(S)):\n        res.append(c[0][0])\n        c[0] = (c[0][0], c[0][1] - 1)\n        c = sorted(c, key=lambda x: x[1], reverse=True)\n    return \"\".join(res)\n",
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 1:\n        return S\n    if len(S) == 2:\n        return S[1] + S[0]\n    count = {}\n    for c in S:\n        if c in count:\n            count[c] += 1\n        else:\n            count[c] = 1\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    if sorted_count[0][1] > (len(S) + 1) / 2:\n        return \"\"\n    result = \"\"\n    for c, n in sorted_count:\n        result += c * n\n    return result\n",
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if not S:\n        return S\n    count = {}\n    for c in S:\n        count[c] = count.get(c, 0) + 1\n    count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    if count[0][1] > (len(S) + 1) // 2:\n        return \"\"\n    res = []\n    while count:\n        c, n = count.pop()\n        res.append(c * n)\n        if count:\n            c, n = count.pop()\n            res.append(c * n)\n            count[c] = n - 1\n            if count[c]:\n                count.append((c, count[c]))\n    return \"\".join(res)\n",
            "def reorganizeString(S):\n    \"\"\"\n    :type S: str\n    :rtype: str\n    \"\"\"\n    if len(S) == 0:\n        return S\n    dic = {}\n    for i in S:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    dic = sorted(dic.items(), key=lambda x: x[1], reverse=True)\n    if dic[0][1] > (len(S) + 1) / 2:\n        return \"\"\n    res = \"\"\n    while len(dic) > 0:\n        for i in range(len(dic)):\n            if dic[i][1] > 0:\n                res += dic[i][0]\n                dic[i][1] -= 1\n                if dic[i][1] == 0:\n                    dic.pop(i)\n                    break\n    return res\n",
            "def reorganizeString(S):\n    from collections import Counter\n    from heapq import nlargest\n    from itertools import permutations\n    c = Counter(S)\n    heap = [(-freq, char) for char, freq in c.items()]\n    heapq.heapify(heap)\n    ans = []\n    while heap:\n        freq, char = heapq.heappop(heap)\n        ans.append(char)\n        if len(ans) > (len(S) + 1) // 2:\n            return \"\"\n        if heap:\n            freq, char = heapq.heappop(heap)\n            ans.append(char)\n            heapq.heappush(heap, (freq, char))\n    return \"\".join(ans)\n"
        ],
        "results": 10
    },
    {
        "id": "1108",
        "source": "leetcodeTitles",
        "source_id": "231",
        "url": "https://leetcode.com/problems/power-of-two/",
        "language": "python",
        "query": "Power of Two",
        "snippets": [
            "def power_of_two(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n",
            "def power_of_two(n):\n    if n == 0:\n        return False\n    while n > 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\n",
            "def power_of_two(n):\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        return power_of_two(n/2)\n",
            "def is_power_of_two(n):\n    if n == 1:\n        return True\n    elif n == 0:\n        return False\n    else:\n        return is_power_of_two(n/2)\n",
            "def power_of_two(n):\n    return n & (n - 1) == 0\n"
        ],
        "results": 10
    },
    {
        "id": "1109",
        "source": "leetcodeTitles",
        "source_id": "1832",
        "url": "https://leetcode.com/problems/check-if-the-sentence-is-pangram/",
        "language": "python",
        "query": "Check if the Sentence is Pangram",
        "snippets": [
            "def is_pangram(sentence):\n    sentence = sentence.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for letter in alphabet:\n        if letter not in sentence:\n            return False\n    return True\n",
            "def check_pangram(sentence):\n    sentence = sentence.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for letter in alphabet:\n        if letter not in sentence:\n            return False\n    return True\n",
            "def check_pangram(sentence):\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for letter in alphabet:\n        if letter not in sentence.lower():\n            return False\n    return True\n",
            "def is_pangram(sentence):\n    sentence = sentence.lower()\n    return all(char in sentence for char in 'abcdefghijklmnopqrstuvwxyz')\n"
        ],
        "results": 10
    },
    {
        "id": "1110",
        "source": "leetcodeTitles",
        "source_id": "350",
        "url": "https://leetcode.com/problems/intersection-of-two-arrays-ii/",
        "language": "python",
        "query": "Intersection of Two Arrays II",
        "snippets": [
            "def intersect(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    nums1.sort()\n    nums2.sort()\n    i, j = 0, 0\n    res = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            res.append(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n",
            "def intersect(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    nums1.sort()\n    nums2.sort()\n    i, j, res = 0, 0, []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            res.append(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n    return res\n",
            "def intersect(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    nums1.sort()\n    nums2.sort()\n    i, j = 0, 0\n    res = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            res.append(nums1[i])\n            i += 1\n            j += 1\n    return res\n",
            "def intersect(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    nums1.sort()\n    nums2.sort()\n    i, j = 0, 0\n    result = []\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] < nums2[j]:\n            i += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            result.append(nums1[i])\n            i += 1\n            j += 1\n    return result\n",
            "def intersection(nums1, nums2):\n    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: List[int]\n    \"\"\"\n    return list(set(nums1) & set(nums2))\n"
        ],
        "results": 10
    },
    {
        "id": "1111",
        "source": "leetcodeTitles",
        "source_id": "2300",
        "url": "https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",
        "language": "python",
        "query": "Successful Pairs of Spells and Potions",
        "snippets": [
            "def main():\n    n = int(input())\n    spells = list(map(int, input().split()))\n    potions = list(map(int, input().split()))\n    spells.sort()\n    potions.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < n and j < n:\n        if spells[i] < potions[j]:\n            i += 1\n        else:\n            j += 1\n            count += 1\n    print(count)\n",
            "def main():\n    n = int(input())\n    spells = list(map(int, input().split()))\n    potions = list(map(int, input().split()))\n    spells.sort()\n    potions.sort()\n    i = 0\n    j = 0\n    count = 0\n    while i < len(spells) and j < len(potions):\n        if spells[i] < potions[j]:\n            i += 1\n        elif spells[i] > potions[j]:\n            j += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n    print(count)\n",
            "def main():\n    n = int(input())\n    spells = list(map(int, input().split()))\n    potions = list(map(int, input().split()))\n    spells.sort()\n    potions.sort()\n    i = 0\n    j = 0\n    ans = 0\n    while i < n and j < n:\n        if spells[i] < potions[j]:\n            i += 1\n        else:\n            j += 1\n            ans += 1\n    print(ans)\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    i = list(map(int, input().split()))\n    j = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    o = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    u = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int\n",
            "def main():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] < b[i]:\n            ans += 1\n    print(ans)\n",
            "def main():\n    n = int(input())\n    spells = [input() for _ in range(n)]\n    potions = [input() for _ in range(n)]\n    print(len(set(spells) & set(potions)))\n",
            "def main():\n    n = int(input())\n    for i in range(n):\n        s = input()\n        if s == 'P':\n            print('O')\n        else:\n            print('E')\n"
        ],
        "results": 10
    },
    {
        "id": "1112",
        "source": "leetcodeTitles",
        "source_id": "405",
        "url": "https://leetcode.com/problems/convert-a-number-to-hexadecimal/",
        "language": "python",
        "query": "Convert Number to Hexadecimal",
        "snippets": [
            "def toHex(num):\n    if num == 0:\n        return '0'\n    hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n    hex_list = []\n    while num > 0:\n        remainder = num % 16\n        if remainder > 9:\n            hex_list.append(hex_dict[remainder])\n        else:\n            hex_list.append(str(remainder))\n        num = num // 16\n    hex_list.reverse()\n    return ''.join(hex_list)\n",
            "def toHex(num):\n    if num == 0:\n        return '0'\n    hex_dict = {0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n    hex_list = []\n    while num > 0:\n        hex_list.append(hex_dict[num % 16])\n        num = num // 16\n    hex_list.reverse()\n    return ''.join(hex_list)\n",
            "def toHex(num):\n    \"\"\"\n    :type num: int\n    :rtype: str\n    \"\"\"\n    if num == 0:\n        return '0'\n    hex_dict = {\n        0: '0',\n        1: '1',\n        2: '2',\n        3: '3',\n        4: '4',\n        5: '5',\n        6: '6',\n        7: '7',\n        8: '8',\n        9: '9',\n        10: 'a',\n        11: 'b',\n        12: 'c',\n        13: 'd',\n        14: 'e',\n        15: 'f'\n    }\n    hex_str = ''\n    while num > 0:\n        hex_str = hex_dict[num % 16] + hex_str\n        num = num // 16\n    return hex_str\n",
            "def toHex(num):\n    if num == 0:\n        return '0'\n    hex = ''\n    while num > 0:\n        hex = hex_digits[num % 16] + hex\n        num //= 16\n    return hex\n"
        ],
        "results": 10
    },
    {
        "id": "1113",
        "source": "leetcodeTitles",
        "source_id": "771",
        "url": "https://leetcode.com/problems/jewels-and-stones/",
        "language": "python",
        "query": "Jewels and Stones",
        "snippets": [
            "def numJewelsInStones(J, S):\n    \"\"\"\n    :type J: str\n    :type S: str\n    :rtype: int\n    \"\"\"\n    count = 0\n    for i in S:\n        if i in J:\n            count += 1\n    return count\n",
            "def numJewelsInStones(J, S):\n    \"\"\"\n    :type J: str\n    :type S: str\n    :rtype: int\n    \"\"\"\n    return sum(S.count(c) for c in J)\n",
            "def numJewelsInStones(J, S):\n    \"\"\"\n    :type J: str\n    :type S: str\n    :rtype: int\n    \"\"\"\n    return sum(s in J for s in S)\n",
            "def numJewelsInStones(J, S):\n    \"\"\"\n    :type J: str\n    :type S: str\n    :rtype: int\n    \"\"\"\n    return sum([S.count(j) for j in J])\n",
            "def numJewelsInStones(J, S):\n    \"\"\"\n    :type J: str\n    :type S: str\n    :rtype: int\n    \"\"\"\n    return sum(S.count(i) for i in J)\n"
        ],
        "results": 10
    },
    {
        "id": "1114",
        "source": "leetcodeTitles",
        "source_id": "572",
        "url": "https://leetcode.com/problems/subtree-of-another-tree//",
        "language": "python",
        "query": "Subtree of Another Tree",
        "snippets": [
            "def isSubtree(s, t):\n    if not s:\n        return False\n    if isSame(s, t):\n        return True\n    return isSubtree(s.left, t) or isSubtree(s.right, t)\n",
            "def isSubtree(s, t):\n    if not s:\n        return False\n    if isSameTree(s, t):\n        return True\n    return isSubtree(s.left, t) or isSubtree(s.right, t)\n",
            "def isSubtree(s, t):\n    if s is None:\n        return False\n    if isSameTree(s, t):\n        return True\n    return isSubtree(s.left, t) or isSubtree(s.right, t)\n",
            "def isSubtree(s, t):\n    if s is None:\n        return False\n    if s.val == t.val and isSame(s, t):\n        return True\n    return isSubtree(s.left, t) or isSubtree(s.right, t)\n",
            "def isSubtree(s, t):\n    if not s:\n        return False\n    if s.val == t.val and isSame(s, t):\n        return True\n    return isSubtree(s.left, t) or isSubtree(s.right, t)\n",
            "def isSubtree(t1, t2):\n    if t1 is None:\n        return False\n    if t1.val == t2.val and isSame(t1, t2):\n        return True\n    return isSubtree(t1.left, t2) or isSubtree(t1.right, t2)\n",
            "def isSubtree(t1, t2):\n    if t1 is None:\n        return False\n    if isSame(t1, t2):\n        return True\n    return isSubtree(t1.left, t2) or isSubtree(t1.right, t2)\n"
        ],
        "results": 10
    },
    {
        "id": "1115",
        "source": "leetcodeTitles",
        "source_id": "1984",
        "url": "https://leetcode.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/",
        "language": "python",
        "query": "Minimum Difference Between Highest and Lowest of K Scores",
        "snippets": [
            "def min_diff(k, arr):\n    arr.sort()\n    return arr[k-1] - arr[0]\n",
            "def min_diff(k, arr):\n    arr.sort()\n    return min(arr[i+1] - arr[i] for i in range(k-1))\n",
            "def minimumDifference(k, arr):\n    arr.sort()\n    return min(arr[i+1] - arr[i] for i in range(len(arr) - 1))\n"
        ],
        "results": 10
    },
    {
        "id": "1116",
        "source": "leetcodeTitles",
        "source_id": "1360",
        "url": "https://leetcode.com/problems/number-of-days-between-two-dates/",
        "language": "python",
        "query": "Number of Days Between Two Dates",
        "snippets": [
            "def isLeapYear(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n",
            "def is_leap(year):\n    leap = False\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                leap = True\n        else:\n            leap = True\n    return leap\n",
            "def days_between(year1, month1, day1, year2, month2, day2):\n    \"\"\"\n    Calculates the number of days between two dates.\n    \"\"\"\n    date1 = datetime.date(year1, month1, day1)\n    date2 = datetime.date(year2, month2, day2)\n    return abs(date2 - date1).days\n",
            "def main():\n    # Get the start and end dates\n    start_date = input(\"Enter the start date (mm/dd/yyyy): \")\n    end_date = input(\"Enter the end date (mm/dd/yyyy): \")\n\n    # Convert the start and end dates to datetime objects\n    start_date = datetime.datetime.strptime(start_date, \"%m/%d/%Y\")\n    end_date = datetime.datetime.strptime(end_date, \"%m/%d/%Y\")\n\n    # Calculate the number of days between the two dates\n    num_days = (end_date - start_date).days\n\n    # Print the number of days\n    print(\"The number of days between the two dates is\", num_days)\n",
            "def days_between(year1, month1, day1, year2, month2, day2):\n    \"\"\"\n    Calculates the number of days between two dates.\n    \"\"\"\n    date1 = date(year1, month1, day1)\n    date2 = date(year2, month2, day2)\n    return abs(date2 - date1).days\n",
            "def main():\n    print(\"This program calculates the number of days between two dates.\")\n    print()\n\n    # Get the start and end dates from the user\n    start_date = get_date(\"Enter the starting date: \")\n    end_date = get_date(\"Enter the ending date: \")\n\n    # Calculate the number of days between the two dates\n    num_days = calc_days(start_date, end_date)\n\n    # Display the number of days\n    print(\"There are\", num_days, \"days between\", start_date, \"and\", end_date)\n",
            "def main():\n    print(\"This program calculates the number of days between two dates.\")\n    print()\n\n    # Get the starting date.\n    print(\"Enter the starting date in the form mm/dd/yyyy:\")\n    start_month, start_day, start_year = input(\" \").split(\"/\")\n    start_month = int(start_month)\n    start_day = int(start_day)\n    start_year = int(start_year)\n\n    # Get the ending date.\n    print(\"Enter the ending date in the form mm/dd/yyyy:\")\n    end_month, end_day, end_year = input(\" \").split(\"/\")\n    end_month = int(end_month)\n    end_day = int(end_day)\n    end_year = int(end_year)\n\n    # Calculate the number of days between the two dates.\n    days = calc_days(start_month, start_day, start_year, end_month, end_day, end_year)\n\n    # Display the number of days.\n    print(\"There are\", days, \"days between\", start_month, \"/\", start_day, \"/\", start_year, \"and\", end_month, \"/\", end_day, \"/\", end_year)\n",
            "def days_between(date1, date2):\n    \"\"\"\n    Calculates the number of days between two dates.\n    \"\"\"\n    # Convert to datetime.date objects\n    date1 = datetime.datetime.strptime(date1, \"%Y-%m-%d\")\n    date2 = datetime.datetime.strptime(date2, \"%Y-%m-%d\")\n    # Calculate the number of days between the two dates\n    return abs((date2 - date1).days)\n",
            "def days_between(date1, date2):\n    \"\"\"\n    Returns the number of days between two dates.\n    \"\"\"\n    # Convert to datetime.date objects\n    date1 = datetime.datetime.strptime(date1, \"%Y-%m-%d\")\n    date2 = datetime.datetime.strptime(date2, \"%Y-%m-%d\")\n    # Calculate the number of days between the two dates\n    return abs((date2 - date1).days)\n",
            "def main():\n    print(\"This program calculates the number of days between two dates.\")\n    print()\n\n    # Get the start date.\n    print(\"Enter the start date in the form mm/dd/yyyy:\")\n    start_month, start_day, start_year = input(\" \").split(\"/\")\n    start_month = int(start_month)\n    start_day = int(start_day)\n    start_year = int(start_year)\n\n    # Get the end date.\n    print(\"Enter the end date in the form mm/dd/yyyy:\")\n    end_month, end_day, end_year = input(\" \").split(\"/\")\n    end_month = int(end_month)\n    end_day = int(end_day)\n    end_year = int(end_year)\n\n    # Calculate the number of days between the two dates.\n    days = date_to_days(end_year, end_month, end_day) - \\\n           date_to_days(start_year, start_month, start_day)\n\n    # Display the number of days.\n    print(\"There are\", days, \"days between\", start_month, \"/\", start_day, \"/\", start_year, \"and\", end_month, \"/\", end_day, \"/\", end_year)\n"
        ],
        "results": 10
    },
    {
        "id": "1117",
        "source": "leetcodeTitles",
        "source_id": "198",
        "url": "https://leetcode.com/problems/house-robber/",
        "language": "python",
        "query": "House Robber",
        "snippets": [
            "def rob(nums):\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums)\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n    for i in range(2, len(nums)):\n        dp[i] = max(dp[i-1], dp[i-2] + nums[i])\n    return dp[-1]\n",
            "def rob(nums):\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums[0], nums[1])\n    dp = [0] * len(nums)\n    dp[0] = nums[0]\n    dp[1] = max(nums[0], nums[1])\n    for i in range(2, len(nums)):\n        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])\n    return dp[-1]\n"
        ],
        "results": 10
    },
    {
        "id": "1118",
        "source": "leetcodeTitles",
        "source_id": "313",
        "url": "https://leetcode.com/problems/super-ugly-number/",
        "language": "python",
        "query": "Super Ugly Number",
        "snippets": [
            "def main():\n    n = int(input())\n    a = [int(input()) for _ in range(n)]\n    b = [int(input()) for _ in range(n)]\n    c = [int(input()) for _ in range(n)]\n    d = [int(input()) for _ in range(n)]\n    e = [int(input()) for _ in range(n)]\n    f = [int(input()) for _ in range(n)]\n    g = [int(input()) for _ in range(n)]\n    h = [int(input()) for _ in range(n)]\n    i = [int(input()) for _ in range(n)]\n    j = [int(input()) for _ in range(n)]\n    k = [int(input()) for _ in range(n)]\n    l = [int(input()) for _ in range(n)]\n    m = [int(input()) for _ in range(n)]\n    n = [int(input()) for _ in range(n)]\n    o = [int(input()) for _ in range(n)]\n    p = [int(input()) for _ in range(n)]\n    q = [int(input()) for _ in range(n)]\n    r = [int(input()) for _ in range(n)]\n    s = [int(input()) for _ in range(n)]\n    t = [int(input()) for _ in range(n)]\n    u = [int(input()) for _ in range(n)]\n    v = [int(input()) for _ in range(n)]\n    w = [int(input()) for _ in range(n)]\n    x = [int(input()) for _ in range(n)]\n    y = [int(input()) for _ in range(n)]\n    z = [int(input()) for _ in range(n)]\n    print(min(a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q + r + s + t + u + v + w + x + y + z))\n",
            "def super_ugly(n, primes):\n    ugly = [None] * n\n    ugly[0] = 1\n    i2, i3, i5 = 0, 0, 0\n    for i in range(1, n):\n        ugly[i] = min(primes[i2] * ugly[i2], primes[i3] * ugly[i3], primes[i5] * ugly[i5])\n        if ugly[i] == primes[i2] * ugly[i2]:\n            i2 += 1\n        if ugly[i] == primes[i3] * ugly[i3]:\n            i3 += 1\n        if ugly[i] == primes[i5] * ugly[i5]:\n            i5 += 1\n    return ugly[-1]\n",
            "def super_ugly_number(n, primes):\n    ugly = [0] * n\n    ugly[0] = 1\n    i2, i3, i5 = 0, 0, 0\n    for i in range(1, n):\n        ugly[i] = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n        if ugly[i] == ugly[i2] * 2:\n            i2 += 1\n        if ugly[i] == ugly[i3] * 3:\n            i3 += 1\n        if ugly[i] == ugly[i5] * 5:\n            i5 += 1\n    return ugly[-1]\n",
            "def super_ugly(n, primes):\n    ugly = [0] * n\n    ugly[0] = 1\n    i2, i3, i5 = 0, 0, 0\n    for i in range(1, n):\n        ugly[i] = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n        if ugly[i] == ugly[i2] * 2:\n            i2 += 1\n        if ugly[i] == ugly[i3] * 3:\n            i3 += 1\n        if ugly[i] == ugly[i5] * 5:\n            i5 += 1\n    return ugly[-1]\n",
            "def super_ugly_number(n, primes):\n    ugly = [None] * n\n    ugly[0] = 1\n    i2, i3, i5 = 0, 0, 0\n    for i in range(1, n):\n        u = min(ugly[i2] * 2, ugly[i3] * 3, ugly[i5] * 5)\n        ugly[i] = u\n        if ugly[i2] * 2 == u:\n            i2 += 1\n        if ugly[i3] * 3 == u:\n            i3 += 1\n        if ugly[i5] * 5 == u:\n            i5 += 1\n    return ugly[-1]\n",
            "def get_ugly_number(n):\n    if n <= 0:\n        return 0\n    ugly_numbers = [1]\n    i2, i3, i5 = 0, 0, 0\n    while len(ugly_numbers) < n:\n        u2, u3, u5 = ugly_numbers[i2] * 2, ugly_numbers[i3] * 3, ugly_numbers[i5] * 5\n        umin = min(u2, u3, u5)\n        if umin == u2:\n            i2 += 1\n        if umin == u3:\n            i3 += 1\n        if umin == u5:\n            i5 += 1\n        ugly_numbers.append(umin)\n    return ugly_numbers[-1]\n",
            "def super_ugly_number(n, primes):\n    uglys = [1]\n    for i in range(n):\n        next_ugly = min(primes[j] * uglys[j] for j in range(len(primes)))\n        uglys.append(next_ugly)\n        for j in range(len(primes)):\n            if uglys[j] * primes[j] == next_ugly:\n                primes[j] = next_ugly\n    return uglys[-1]\n",
            "def super_ugly(n, primes):\n    ugly = [1]\n    for i in range(n):\n        ugly.append(min(ugly[j] * primes[j] for j in range(len(primes))))\n    return ugly[-1]\n",
            "def super_ugly(n, primes):\n    uglys = [1]\n    for i in range(n):\n        uglys.append(min(primes[j] * uglys[j] for j in range(len(primes))))\n    return uglys[-1]\n",
            "def super_ugly_number(n, primes):\n    ugly = [1] * n\n    p = [0] * len(primes)\n    for i in range(1, n):\n        ugly[i] = min(primes[j] * ugly[p[j]] for j in range(len(primes)))\n        for j in range(len(primes)):\n            if ugly[i] == primes[j] * ugly[p[j]]:\n                p[j] += 1\n    return ugly[-1]\n"
        ],
        "results": 10
    },
    {
        "id": "1119",
        "source": "leetcodeTitles",
        "source_id": "221",
        "url": "https://leetcode.com/problems/maximal-square/",
        "language": "python",
        "query": "Maximum Square",
        "snippets": [
            "def max_square(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == '1':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n            else:\n                dp[i][j] = 0\n    return max(max(row) for row in dp) ** 2\n",
            "def max_square(matrix):\n    if not matrix:\n        return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == '1':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n            else:\n                dp[i][j] = 0\n    return max(max(row) for row in dp) ** 2\n",
            "def max_square(matrix):\n    if not matrix:\n        return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + matrix[i][j]\n    return dp[m-1][n-1]\n",
            "def max_square(matrix):\n    if not matrix:\n        return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_area = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == '1':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                max_area = max(max_area, dp[i][j])\n    return max_area ** 2\n",
            "def max_square(matrix):\n    if not matrix:\n        return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == '1':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n            else:\n                dp[i][j] = 0\n    return max(max(row) for row in dp) ** 2\n",
            "def max_square(matrix):\n    if not matrix:\n        return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    max_area = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == '1':\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n                max_area = max(max_area, dp[i][j])\n    return max_area ** 2\n",
            "def max_square(matrix):\n    if not matrix:\n        return 0\n    m = len(matrix)\n    n = len(matrix[0])\n    dp = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n    max_area = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[i - 1][j - 1] == '1':\n                dp[i][j] = min(dp[i][j - 1], dp[i - 1][j], dp[i - 1][j - 1]) + 1\n                max_area = max(max_area, dp[i][j])\n    return max_area ** 2\n"
        ],
        "results": 10
    },
    {
        "id": "1120",
        "source": "leetcodeTitles",
        "source_id": "421",
        "url": "https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/",
        "language": "python",
        "query": "Maximum XOR of Two Numbers in an Array",
        "snippets": [
            "def max_xor(nums):\n    max_xor = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            max_xor = max(max_xor, nums[i] ^ nums[j])\n    return max_xor\n",
            "def max_xor(arr, n):\n    max_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            max_xor = max(max_xor, arr[i] ^ arr[j])\n    return max_xor\n",
            "def max_xor(arr, n):\n    max_xor = 0\n    for i in range(32):\n        max_xor = max_xor | (1 << i)\n    ans = 0\n    for i in range(32):\n        temp = 0\n        for j in range(n):\n            temp = temp | (arr[j] & (1 << i))\n        if (temp > ans):\n            ans = temp\n    return ans\n",
            "def max_xor(nums):\n    max_xor = 0\n    for i in range(32):\n        max_xor |= 1 << i\n    mask = max_xor\n    while mask > 0:\n        for num in nums:\n            if (num & mask) == mask:\n                return max_xor\n        mask >>= 1\n    return max_xor\n",
            "def max_xor(nums):\n    max_xor = 0\n    for i in range(32):\n        max_xor |= 1 << i\n    max_xor = max_xor << 1\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            max_xor = max(max_xor, nums[i] ^ nums[j])\n    return max_xor\n",
            "def max_xor(nums):\n    max_xor = 0\n    for i in range(32):\n        max_xor |= 1 << i\n    max_xor = max_xor << 1\n    for num in nums:\n        max_xor = max(max_xor, num ^ max_xor)\n    return max_xor\n"
        ],
        "results": 10
    },
    {
        "id": "1121",
        "source": "leetcodeTitles",
        "source_id": "53",
        "url": "https://leetcode.com/problems/maximum-subarray/",
        "language": "python",
        "query": "Maximum Subarray",
        "snippets": [
            "def maxSubArray(nums):\n    max_sum = nums[0]\n    current_sum = 0\n    for i in range(len(nums)):\n        current_sum += nums[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
            "def maxSubArray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    max_sum = nums[0]\n    cur_sum = nums[0]\n    for i in range(1, len(nums)):\n        cur_sum = max(nums[i], cur_sum + nums[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n",
            "def maxSubArray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    max_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n",
            "def maxSubArray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    max_sum = nums[0]\n    cur_sum = nums[0]\n    for i in range(1, len(nums)):\n        cur_sum = max(nums[i], cur_sum + nums[i])\n        max_sum = max(max_sum, cur_sum)\n    return max_sum\n",
            "def max_subarray(arr):\n    max_sum = 0\n    current_sum = 0\n    for i in range(len(arr)):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum\n",
            "def maxSubArray(nums):\n    if len(nums) == 0:\n        return 0\n    max_sum = nums[0]\n    current_sum = nums[0]\n    for i in range(1, len(nums)):\n        current_sum = max(nums[i], current_sum + nums[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
            "def max_subarray(arr):\n    max_sum = arr[0]\n    current_sum = arr[0]\n    for i in range(1, len(arr)):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n",
            "def max_subarray(nums):\n    max_sum = nums[0]\n    curr_sum = nums[0]\n    for i in range(1, len(nums)):\n        curr_sum = max(nums[i], curr_sum + nums[i])\n        max_sum = max(max_sum, curr_sum)\n    return max_sum\n"
        ],
        "results": 10
    },
    {
        "id": "1122",
        "source": "leetcodeTitles",
        "source_id": "1528",
        "url": "https://leetcode.com/problems/shuffle-string/",
        "language": "python",
        "query": "Shuffle String",
        "snippets": [
            "def shuffle(s):\n    if len(s) <= 1:\n        return s\n    else:\n        return s[0] + shuffle(s[1:])\n",
            "def shuffle(s):\n    s = list(s)\n    for i in range(len(s)):\n        j = random.randint(0, len(s) - 1)\n        s[i], s[j] = s[j], s[i]\n    return ''.join(s)\n",
            "def shuffle(s):\n    if len(s) == 1:\n        return s\n    else:\n        return s[0] + shuffle(s[1:])\n",
            "def shuffle(s):\n    if len(s) <= 1:\n        return s\n    else:\n        return s[-1] + shuffle(s[:-1])\n",
            "def shuffle(s):\n    return ''.join(sorted(s))\n"
        ],
        "results": 10
    },
    {
        "id": "1123",
        "source": "leetcodeTitles",
        "source_id": "1190",
        "url": "https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/",
        "language": "python",
        "query": "Reverse Substrings Between Each Pair of Parentheses",
        "snippets": [
            "def reverse_substring(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            start = stack.pop()\n            s = s[:start] + s[start:i][::-1] + s[i + 1:]\n    return s\n",
            "def reverse_substring(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            start = stack.pop()\n            s = s[:start] + s[start:i][::-1] + s[i:]\n    return s\n",
            "def reverse_substring(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            left = stack.pop()\n            s = s[:left] + s[left:i][::-1] + s[i:]\n    return s\n",
            "def reverse_substring(s):\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            left = stack.pop()\n            s = s[:left] + s[left:i][::-1] + s[i + 1:]\n    return s\n",
            "def reverse_substrings(string):\n    \"\"\"\n    Given a string of parentheses, reverse the order of the characters within each pair of parentheses.\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            stack.append(char)\n            stack.pop()\n            stack.pop()\n            stack.append(''.join(reversed(stack)))\n            stack.pop()\n            stack.append(char)\n        else:\n            stack.append(char)\n    return ''.join(stack)\n"
        ],
        "results": 10
    },
    {
        "id": "1124",
        "source": "leetcodeTitles",
        "source_id": "931",
        "url": "https://leetcode.com/problems/minimum-falling-path-sum/",
        "language": "python",
        "query": "Minimum Falling Path Sum",
        "snippets": [
            "def minFallingPathSum(A):\n    for i in range(1, len(A)):\n        for j in range(len(A[0])):\n            if j == 0:\n                A[i][j] += min(A[i - 1][j], A[i - 1][j + 1])\n            elif j == len(A[0]) - 1:\n                A[i][j] += min(A[i - 1][j - 1], A[i - 1][j])\n            else:\n                A[i][j] += min(A[i - 1][j - 1], A[i - 1][j], A[i - 1][j + 1])\n    return min(A[-1])\n",
            "def minFallingPathSum(A):\n    if not A:\n        return 0\n    m = len(A)\n    n = len(A[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0] = A[0]\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = A[i][j] + min(dp[i - 1][:j] + dp[i - 1][j + 1:])\n    return min(dp[-1])\n",
            "def minFallingPathSum(A):\n    if not A:\n        return 0\n    m = len(A)\n    n = len(A[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        dp[i][0] = A[i][0]\n    for j in range(1, n):\n        for i in range(m):\n            dp[i][j] = A[i][j] + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n    return min(dp[m-1])\n",
            "def minFallingPathSum(A):\n    \"\"\"\n    :type A: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    m = len(A)\n    n = len(A[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0] = A[0]\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = A[i][j] + min(dp[i - 1][:j] + dp[i - 1][j + 1:])\n    return min(dp[-1])\n",
            "def minFallingPathSum(A):\n    \"\"\"\n    :type A: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    m = len(A)\n    n = len(A[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        dp[i][0] = A[i][0]\n    for j in range(1, n):\n        for i in range(m):\n            dp[i][j] = A[i][j] + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n    return min(dp[-1])\n",
            "def minFallingPathSum(A):\n    \"\"\"\n    :type A: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    n = len(A)\n    for i in range(1, n):\n        for j in range(n):\n            if j == 0:\n                A[i][j] += min(A[i - 1][j], A[i - 1][j + 1])\n            elif j == n - 1:\n                A[i][j] += min(A[i - 1][j - 1], A[i - 1][j])\n            else:\n                A[i][j] += min(A[i - 1][j - 1], A[i - 1][j], A[i - 1][j + 1])\n    return min(A[n - 1])\n",
            "def minFallingPathSum(A):\n    if not A or not A[0]:\n        return 0\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = A[i][0]\n    for i in range(1, n):\n        for j in range(n):\n            dp[i][j] = A[i][j] + min(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])\n    return min(dp[n - 1])\n",
            "def minFallingPathSum(A):\n    if not A:\n        return 0\n    m = len(A)\n    n = len(A[0])\n    dp = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        dp[i][0] = A[i][0]\n    for j in range(1, n):\n        for i in range(m):\n            dp[i][j] = A[i][j] + min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n    return min(dp[-1])\n",
            "def minFallingPathSum(A):\n    if not A:\n        return 0\n    m, n = len(A), len(A[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0] = A[0]\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = A[i][j] + min(dp[i - 1][:j] + dp[i - 1][j + 1:])\n    return min(dp[-1])\n"
        ],
        "results": 10
    },
    {
        "id": "1125",
        "source": "leetcodeTitles",
        "source_id": "1437",
        "url": "https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away/",
        "language": "python",
        "query": "Check If All 1's Are at Least Length K Places Away",
        "snippets": [
            "def check(A, K):\n    for i in range(len(A)):\n        if A[i] == 1:\n            if i < K:\n                return False\n            else:\n                return True\n    return True\n",
            "def check(A, K):\n    if len(A) < K:\n        return False\n    for i in range(len(A)):\n        if A[i] == 1:\n            if i < K:\n                return False\n            else:\n                return True\n    return True\n",
            "def check(A, K):\n    for i in range(len(A)):\n        if A[i] == 1:\n            if i >= K:\n                if A[i - K] == 1:\n                    return False\n            if i + K < len(A):\n                if A[i + K] == 1:\n                    return False\n    return True\n"
        ],
        "results": 10
    },
    {
        "id": "1126",
        "source": "leetcodeTitles",
        "source_id": "646",
        "url": "https://leetcode.com/problems/maximum-length-of-pair-chain/",
        "language": "python",
        "query": "Maximum Length of Pair Chain",
        "snippets": [
            "def maxLength(self, A):\n    \"\"\"\n    :type A: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if A[i][j] == 1:\n                dp[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            for k in range(n):\n                if i == k or j == k:\n                    continue\n                if A[i][k] == 1 and A[k][j] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + 1)\n    return max(max(row) for row in dp)\n",
            "def maxLength(arr):\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n",
            "def max_chain(pairs):\n    \"\"\"\n    :param pairs: list of pairs\n    :return: maximum length of pair chain\n    \"\"\"\n    if not pairs:\n        return 0\n    pairs.sort()\n    max_chain = 0\n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i][1]:\n            max_chain += 1\n        else:\n            break\n    return max_chain\n",
            "def maxLength(self, A):\n    \"\"\"\n    :type A: List[int]\n    :rtype: int\n    \"\"\"\n    if not A:\n        return 0\n    A = [1 if x == 1 else -1 for x in A]\n    A.append(0)\n    A.insert(0, 0)\n    n = len(A)\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        for j in range(i):\n            if A[i] * A[j] > 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n    # return max(dp) if max(dp) > 0 else 0\n",
            "def max_chain(pairs):\n    \"\"\"\n    :param pairs: list of pairs\n    :return: maximum length of chain\n    \"\"\"\n    if not pairs:\n        return 0\n    pairs.sort()\n    max_chain = 0\n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i][1]:\n            max_chain += 1\n        else:\n            break\n    return max_chain\n",
            "def max_chain(pairs):\n    \"\"\"\n    :param pairs: list of pairs\n    :return: maximum length of chain\n    \"\"\"\n    if not pairs:\n        return 0\n    pairs.sort(key=lambda x: x[0])\n    max_len = 0\n    curr_len = 0\n    for i in range(len(pairs)):\n        if pairs[i][0] > pairs[i][1]:\n            curr_len += 1\n        else:\n            curr_len = 0\n        max_len = max(max_len, curr_len)\n    return max_len\n",
            "def max_chain(pairs):\n    \"\"\"\n    :param pairs: list of pairs\n    :return: maximum length of pair chain\n    \"\"\"\n    pairs.sort(key=lambda x: x[0])\n    max_len = 0\n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i][1]:\n            continue\n        for j in range(i+1, len(pairs)):\n            if pairs[j][0] == pairs[j][1]:\n                continue\n            if pairs[i][1] < pairs[j][0] and pairs[i][1] < pairs[j][1]:\n                max_len = max(max_len, j-i+1)\n    return max_len\n",
            "def max_chain(pairs):\n    \"\"\"\n    :param pairs: list of pairs\n    :return: maximum length of chain\n    \"\"\"\n    if not pairs:\n        return 0\n    pairs.sort()\n    max_len = 0\n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i][1]:\n            max_len += 1\n        else:\n            break\n    if max_len == len(pairs):\n        return max_len\n    else:\n        return max_len + max_chain(pairs[max_len:])\n",
            "def max_chain(pairs):\n    pairs.sort()\n    max_chain = 0\n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i][1]:\n            max_chain += 1\n        else:\n            max_chain += 2\n    return max_chain\n",
            "def max_chain(pairs):\n    if not pairs:\n        return 0\n    pairs.sort(key=lambda x: x[1])\n    max_len = 0\n    curr_len = 0\n    for i in range(len(pairs)):\n        if pairs[i][0] == pairs[i][1]:\n            curr_len += 1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = 0\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len\n"
        ],
        "results": 10
    },
    {
        "id": "1127",
        "source": "leetcodeTitles",
        "source_id": "561",
        "url": "https://leetcode.com/problems/array-partition/",
        "language": "python",
        "query": "Array Partition",
        "snippets": [
            "def array_partition(arr, start, end):\n    pivot = arr[end]\n    i = start - 1\n    for j in range(start, end):\n        if arr[j] <= pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i + 1], arr[end] = arr[end], arr[i + 1]\n    return i + 1\n",
            "def array_partition(nums):\n    \"\"\"\n    Given an array of 2n integers, your task is to group these integers\n    into n pairs of integer, say (a1, b1), (a2, b2), ..., (an, bn)\n    which makes sum of min(ai, bi) for all i from 1 to n as large as possible.\n    :param nums:\n    :return:\n    \"\"\"\n    if not nums:\n        return 0\n    n = len(nums)\n    if n % 2 != 0:\n        return 0\n    nums.sort()\n    return sum(min(nums[i], nums[i+1]) for i in range(0, n, 2))\n",
            "def array_partition(nums):\n    if len(nums) < 2:\n        return nums\n    pivot = nums[0]\n    left = [x for x in nums[1:] if x < pivot]\n    right = [x for x in nums[1:] if x >= pivot]\n    return array_partition(left) + [pivot] + array_partition(right)\n",
            "def array_partition(nums):\n    if len(nums) < 2:\n        return nums\n    pivot = nums[0]\n    left = [num for num in nums[1:] if num < pivot]\n    right = [num for num in nums[1:] if num >= pivot]\n    return array_partition(left) + [pivot] + array_partition(right)\n",
            "def array_partition(nums):\n    if len(nums) < 2:\n        return nums\n    pivot = nums[0]\n    left = [num for num in nums[1:] if num < pivot]\n    right = [num for num in nums[1:] if num >= pivot]\n    return [pivot] + array_partition(left) + array_partition(right)\n",
            "def array_partition(nums):\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[0]\n    left = [x for x in nums[1:] if x < pivot]\n    right = [x for x in nums[1:] if x >= pivot]\n    return array_partition(left) + [pivot] + array_partition(right)\n",
            "def array_partition(nums):\n    if not nums:\n        return 0\n    nums.sort()\n    return nums[len(nums)//2]\n",
            "def array_partition(nums):\n    if len(nums) == 1:\n        return nums\n    nums.sort()\n    return [nums[0], nums[-1]]\n"
        ],
        "results": 10
    },
    {
        "id": "1128",
        "source": "leetcodeTitles",
        "source_id": "219",
        "url": "https://leetcode.com/problems/contains-duplicate-ii/",
        "language": "python",
        "query": "Contains Duplicate II",
        "snippets": [
            "def contains_duplicate(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return False\n    if len(nums) == 2:\n        return False\n    if len(nums) == 3:\n        return False\n    if len(nums) == 4:\n        return False\n    if len(nums) == 5:\n        return False\n    if len(nums) == 6:\n        return False\n    if len(nums) == 7:\n        return False\n    if len(nums) == 8:\n        return False\n    if len(nums) == 9:\n        return False\n    if len(nums) == 10:\n        return False\n    if len(nums) == 11:\n        return False\n    if len(nums) == 12:\n        return False\n    if len(nums) == 13:\n        return False\n    if len(nums) == 14:\n        return False\n    if len(nums) == 15:\n        return False\n    if len(nums) == 16:\n        return False\n    if len(nums) == 17:\n        return False\n    if len(nums) == 18:\n        return False\n    if len(nums) == 19:\n        return False\n    if len(nums) == 20:\n        return False\n    if len(nums) == 21:\n        return False\n    if len(nums) == 22:\n        return False\n    if len(nums) == 23:\n        return False\n    if len(nums) == 24:\n        return False\n    if len(nums) == 25:\n        return False\n    if len(nums) == 26:\n        return False\n    if len(nums) == 27:\n        return False\n    if len(nums) == 28:\n        return False\n    if len(nums) == 29:\n        return False\n    if len(nums\n",
            "def contains_duplicate(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if len(nums) < 2:\n        return False\n    d = {}\n    for num in nums:\n        if num in d:\n            d[num] += 1\n        else:\n            d[num] = 1\n    for key in d:\n        if d[key] > 1 and k >= abs(key - nums[0]):\n            return True\n    return False\n",
            "def contains_duplicate(nums, k):\n    \"\"\"\n    :type nums: List[int]\n    :type k: int\n    :rtype: bool\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return False\n    if len(nums) == 2:\n        if abs(nums[0] - nums[1]) <= k:\n            return True\n        else:\n            return False\n    nums.sort()\n    for i in range(len(nums) - 1):\n        if abs(nums[i] - nums[i + 1]) <= k:\n            return True\n    return False\n",
            "def contains_duplicate(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: boolean\n    \"\"\"\n    if len(arr) < 2:\n        return False\n    if k < 0:\n        return False\n    if k == 0:\n        return False\n    if k > len(arr):\n        return False\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) <= k:\n                return True\n    return False\n",
            "def contains_duplicate(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: integer\n    :return: boolean\n    \"\"\"\n    if len(arr) < 2:\n        return False\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] in d:\n            if i - d[arr[i]] <= k:\n                return True\n        d[arr[i]] = i\n    return False\n",
            "def contains_duplicate(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: int\n    :return: boolean\n    \"\"\"\n    if len(arr) < 2:\n        return False\n    if k < 0:\n        return False\n    if k == 0:\n        return False\n    if k == 1:\n        return False\n    if k == len(arr):\n        return False\n    if k == len(arr) - 1:\n        return False\n    if k == len(arr) - 2:\n        return False\n    if k == len(arr) - 3:\n        return False\n    if k == len(arr) - 4:\n        return False\n    if k == len(arr) - 5:\n        return False\n    if k == len(arr) - 6:\n        return False\n    if k == len(arr) - 7:\n        return False\n    if k == len(arr) - 8:\n        return False\n    if k == len(arr) - 9:\n        return False\n    if k == len(arr) - 10:\n        return False\n    if k == len(arr) - 11:\n        return False\n    if k == len(arr) - 12:\n        return False\n    if k == len(arr) - 13:\n        return False\n    if k == len(arr) - 14:\n        return False\n    if k == len(arr) - 15:\n        return False\n    if k == len(arr) - 16:\n        return False\n    if k == len(arr) - 17:\n        return False\n    if k == len(arr) - 18:\n        return False\n    if k == len(arr) - 19:\n        return False\n    if k == len(arr) - 20:\n        return False\n    if k == len(arr) - 21:\n        return False\n    if k == len(arr) - 22:\n        return False\n    if k == len(arr) - 23:\n        return False\n    if k == len(arr) - 24:\n        return False\n    if k == len(arr) - 25:\n        return False\n",
            "def contains_duplicate(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: int\n    :return: bool\n    \"\"\"\n    if len(arr) < 2:\n        return False\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > 1 and k >= abs(i - arr[0]):\n            return True\n    return False\n",
            "def contains_duplicate(arr, k):\n    \"\"\"\n    :param arr: list of integers\n    :param k: int\n    :return: boolean\n    \"\"\"\n    if not arr:\n        return False\n    if len(arr) < k:\n        return False\n    for i in range(len(arr) - k + 1):\n        if arr[i:i+k] in arr[i+k:]:\n            return True\n    return False\n",
            "def contains_duplicate(nums, k):\n    \"\"\"\n    :param nums: list of integers\n    :param k: int\n    :return: boolean\n    \"\"\"\n    if len(nums) == 0:\n        return False\n    if len(nums) == 1:\n        return False\n    if len(nums) == 2:\n        return False\n    if len(nums) == 3:\n        return False\n    if len(nums) == 4:\n        return False\n    if len(nums) == 5:\n        return False\n    if len(nums) == 6:\n        return False\n    if len(nums) == 7:\n        return False\n    if len(nums) == 8:\n        return False\n    if len(nums) == 9:\n        return False\n    if len(nums) == 10:\n        return False\n    if len(nums) == 11:\n        return False\n    if len(nums) == 12:\n        return False\n    if len(nums) == 13:\n        return False\n    if len(nums) == 14:\n        return False\n    if len(nums) == 15:\n        return False\n    if len(nums) == 16:\n        return False\n    if len(nums) == 17:\n        return False\n    if len(nums) == 18:\n        return False\n    if len(nums) == 19:\n        return False\n    if len(nums) == 20:\n        return False\n    if len(nums) == 21:\n        return False\n    if len(nums) == 22:\n        return False\n    if len(nums) == 23:\n        return False\n    if len(nums) == 24:\n        return False\n    if len(nums) == 25:\n        return False\n    if len(nums) == 26:\n        return False\n    if len(nums) == 27:\n        return False\n    if len(nums) == 28:\n        return False\n    if len(nums) == 29:\n        return False\n    if len(nums) ==\n"
        ],
        "results": 10
    },
    {
        "id": "1129",
        "source": "leetcodeTitles",
        "source_id": "1886",
        "url": "https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/",
        "language": "python",
        "query": "Determine Whether Matrix Can Be Obtained By Rotation",
        "snippets": [
            "def rotate(matrix):\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            matrix[i][j], matrix[j][n - i - 1], matrix[n - i - 1][n - j - 1], matrix[n - j - 1][i] = matrix[n - j - 1][i], matrix[i][j], matrix[j][n - i - 1], matrix[n - i - 1][n - j - 1]\n    return matrix\n",
            "def rotate(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i, n):\n            matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n    for i in range(n):\n        for j in range(n // 2):\n            matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]\n    return matrix\n",
            "def rotate(matrix):\n    if len(matrix) != len(matrix[0]):\n        return False\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n",
            "def rotate(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True\n",
            "def rotate(matrix):\n    return [list(i) for i in zip(*matrix[::-1])]\n",
            "def rotate(matrix):\n    return [list(reversed(row)) for row in zip(*matrix)]\n"
        ],
        "results": 10
    },
    {
        "id": "1130",
        "source": "leetcodeTitles",
        "source_id": "1504",
        "url": "https://leetcode.com/problems/count-submatrices-with-all-ones/",
        "language": "python",
        "query": "Count Submatrices With All Ones",
        "snippets": [
            "def count_submatrices(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + matrix[i][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i][j]\n    return dp[-1][-1]\n",
            "def count_submatrices(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = 1 if matrix[i][j] == 1 else 0\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + 1 if matrix[i][j] == 1 else 0\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + 1 if matrix[i][j] == 1 else 0\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + 1 if matrix[i][j] == 1 else 0\n    return sum(dp[-1])\n",
            "def count_submatrix(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = matrix[i][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i][j]\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            for k in range(i + 1):\n                for l in range(j + 1):\n                    if dp[i][j] - dp[k - 1][l - 1] - dp[i - k][j - l] + dp[k - 1][l] + dp[i][l - 1] == m * n:\n                        res += 1\n    return res\n",
            "def countSubmatrices(matrix, target):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + matrix[i][j]\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    if dp[k][l] - (k > i and l > j and dp[k-1][l-1]) == target:\n                        res += 1\n    return res\n",
            "def count_submatrices(matrix):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + matrix[i][j]\n    return sum(dp[-1])\n",
            "def countSubmatrices(matrix, target):\n    \"\"\"\n    :type matrix: List[List[int]]\n    :type target: int\n    :rtype: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + matrix[i][j]\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            for k in range(i, m):\n                for l in range(j, n):\n                    if dp[k][l] - (i > 0 and j > 0 and dp[i-1][j-1] or 0) == target:\n                        res += 1\n    return res\n",
            "def count_submatrices(matrix):\n    \"\"\"\n    Count submatrices with all ones\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + matrix[i][j]\n    return sum(dp[-1])\n",
            "def count_submatrices(matrix):\n    \"\"\"\n    Count Submatrices With All Ones\n    :param matrix:\n    :return:\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + matrix[i][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + matrix[i][j]\n    return sum(dp[-1])\n",
            "def count_submatrices(matrix):\n    \"\"\"\n    Counts the number of submatrices with all ones.\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = 1 if matrix[i][j] == 1 else 0\n            elif i == 0:\n                dp[i][j] = dp[i][j-1] + 1 if matrix[i][j] == 1 else 0\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + 1 if matrix[i][j] == 1 else 0\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + 1 if matrix[i][j] == 1 else 0\n    return sum(sum(dp[i]) for i in range(m))\n",
            "def count_submatrices(matrix):\n    \"\"\"\n    Count Submatrices With All Ones\n    :param matrix: list of lists\n    :return: int\n    \"\"\"\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + matrix[i][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1] - dp[i - 1][j - 1] + matrix[i][j]\n    return sum(dp[-1])\n"
        ],
        "results": 10
    },
    {
        "id": "1131",
        "source": "leetcodeTitles",
        "source_id": "1457",
        "url": "https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/",
        "language": "python",
        "query": "Pseudo-Palindromic Paths in a Binary Tree",
        "snippets": [
            "def pseudoPalindromicPaths (root):\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node.val)\n        if not node.left and not node.right:\n            if path[::-1] == path:\n                count += 1\n        dfs(node.left, path)\n        dfs(node.right, path)\n        path.pop()\n    count = 0\n    dfs(root, [])\n    return count\n",
            "def pseudoPalindromicPaths (root):\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node.val)\n        if not node.left and not node.right:\n            if path[::-1] == path:\n                res.append(path)\n        dfs(node.left, path[:])\n        dfs(node.right, path[:])\n        path.pop()\n    res = []\n    dfs(root, [])\n    return len(res)\n",
            "def pseudoPalindromicPaths (root):\n    def dfs(node, path):\n        if not node:\n            return\n        path.append(node.val)\n        if not node.left and not node.right:\n            if path == path[::-1]:\n                res.append(path)\n            return\n        dfs(node.left, path)\n        dfs(node.right, path)\n        path.pop()\n    res = []\n    dfs(root, [])\n    return len(res)\n",
            "def pseudoPalindromicPaths (root):\n    def dfs(root, path):\n        if not root:\n            return 0\n        path.append(root.val)\n        if not root.left and not root.right:\n            if path[::-1] == path:\n                return 1\n            else:\n                return 0\n        return dfs(root.left, path) + dfs(root.right, path)\n    return dfs(root, [])\n",
            "def pseudoPalindromicPaths(root):\n    def dfs(node, path):\n        if not node.left and not node.right:\n            if path[::-1] == path:\n                self.count += 1\n            return\n        if node.left:\n            dfs(node.left, path + '0')\n        if node.right:\n            dfs(node.right, path + '1')\n    self.count = 0\n    dfs(root, '')\n    return self.count\n"
        ],
        "results": 10
    },
    {
        "id": "1132",
        "source": "leetcodeTitles",
        "source_id": "965",
        "url": "https://leetcode.com/problems/univalued-binary-tree/",
        "language": "python",
        "query": "Univalued Binary Tree",
        "snippets": [
            "def univalued(root):\n    if root is None:\n        return True\n    if root.left is not None and root.val != root.left.val:\n        return False\n    if root.right is not None and root.val != root.right.val:\n        return False\n    return univalued(root.left) and univalued(root.right)\n",
            "def univalue(root):\n    if root is None:\n        return True\n    if root.left is not None and root.val != root.left.val:\n        return False\n    if root.right is not None and root.val != root.right.val:\n        return False\n    return univalue(root.left) and univalue(root.right)\n",
            "def univalued(tree):\n    if tree is None:\n        return True\n    if tree.left is not None and tree.val != tree.left.val:\n        return False\n    if tree.right is not None and tree.val != tree.right.val:\n        return False\n    return univalued(tree.left) and univalued(tree.right)\n",
            "def univalued_binary_tree(tree):\n    if tree is None:\n        return True\n    if tree.left is not None and tree.left.value != tree.value:\n        return False\n    if tree.right is not None and tree.right.value != tree.value:\n        return False\n    return univalued_binary_tree(tree.left) and univalued_binary_tree(tree.right)\n",
            "def univalued(tree):\n    if tree is None:\n        return True\n    if tree.left is not None and tree.left.value != tree.value:\n        return False\n    if tree.right is not None and tree.right.value != tree.value:\n        return False\n    return univalued(tree.left) and univalued(tree.right)\n",
            "def univalued(root):\n    if root is None:\n        return True\n    if root.left is not None and root.left.val != root.val:\n        return False\n    if root.right is not None and root.right.val != root.val:\n        return False\n    return univalued(root.left) and univalued(root.right)\n",
            "def univalued_binary_tree(root):\n    if root is None:\n        return True\n    if root.left is not None and root.left.val != root.val:\n        return False\n    if root.right is not None and root.right.val != root.val:\n        return False\n    return univalued_binary_tree(root.left) and univalued_binary_tree(root.right)\n"
        ],
        "results": 10
    },
    {
        "id": "1133",
        "source": "leetcodeTitles",
        "source_id": "2126",
        "url": "https://leetcode.com/problems/destroying-asteroids/",
        "language": "python",
        "query": "Destroying Asteroids",
        "snippets": [
            "def main():\n    print(\"This program illustrates a chaotic function\")\n    x = eval(input(\"Enter a number between 0 and 1: \"))\n    for i in range(10):\n        x = 3.9 * x * (1 - x)\n        print(x)\n",
            "def main():\n    # Get the number of asteroids\n    num_asteroids = int(input())\n    # Get the asteroids\n    asteroids = [int(x) for x in input().split()]\n    # Get the number of shots\n    num_shots = int(input())\n    # Get the shots\n    shots = [int(x) for x in input().split()]\n    # Get the number of asteroids destroyed\n    num_destroyed = 0\n    # Loop through the asteroids\n    for asteroid in asteroids:\n        # Loop through the shots\n        for shot in shots:\n            # If the asteroid is destroyed\n            if asteroid == shot:\n                # Increment the number of asteroids destroyed\n                num_destroyed += 1\n    # Print the number of asteroids destroyed\n    print(num_destroyed)\n",
            "def main():\n    import pygame\n    import random\n    import time\n    import sys\n    from pygame.locals import *\n    pygame.init()\n    screen = pygame.display.set_mode((800, 600))\n    pygame.display.set_caption('Asteroids')\n    clock = pygame.time.Clock()\n    ship = pygame.image.load('ship.png')\n    ship = ship.convert()\n    ship.set_colorkey((255, 255, 255), RLEACCEL)\n    ship_rect = ship.get_rect()\n    ship_rect.center = (400, 300)\n    ship_speed = 0\n    ship_rotation = 0\n    ship_rotation_speed = 0\n    ship_rotation_direction = 'right'\n    ship_rotation_speed_direction = 'right'\n    ship_rotation_speed_max = 10\n    ship_rotation_speed_min = -10\n    ship_rotation_speed_increment = 1\n    ship_rotation_speed_decrement = -1\n    ship_rotation_speed_direction_max = 10\n    ship_rotation_speed_direction_min = -10\n    ship_rotation_speed_direction_increment = 1\n    ship_rotation_speed_direction_decrement = -1\n    ship_rotation_speed_direction_current = 0\n    ship_rotation_speed_direction_current_max = 10\n    ship_rotation_speed_direction_current_min = -10\n    ship_rotation_speed_direction_current_increment = 1\n    ship_rotation_speed_direction_current_decrement = -1\n    ship_rotation_speed_direction_current_current = 0\n    ship_rotation_speed_direction_current_current_max = 10\n    ship_rotation_speed_direction_current_current_min = -10\n    ship_rotation_speed_direction_current_current_increment = 1\n    ship_rotation_speed_direction_current_current_decrement = -1\n    ship_rotation_speed_\n",
            "def main():\n    # Get the number of asteroids\n    num_asteroids = int(input())\n    # Get the asteroids\n    asteroids = list(map(int, input().split()))\n    # Get the number of shots\n    num_shots = int(input())\n    # Get the shots\n    shots = list(map(int, input().split()))\n    # Get the number of asteroids destroyed\n    num_destroyed = 0\n    # Get the number of shots destroyed\n    num_shots_destroyed = 0\n    # Loop through the asteroids\n    for asteroid in asteroids:\n        # Loop through the shots\n        for shot in shots:\n            # If the asteroid is destroyed\n            if asteroid == shot:\n                # Increment the number of asteroids destroyed\n                num_destroyed += 1\n                # Increment the number of shots destroyed\n                num_shots_destroyed += 1\n                # Break out of the loop\n                break\n        # If the asteroid is not destroyed\n        if asteroid not in shots:\n            # Increment the number of asteroids destroyed\n            num_destroyed += 1\n    # Print the number of asteroids destroyed\n    print(num_destroyed)\n    # Print the number of shots destroyed\n    print(num_shots_destroyed)\n",
            "def main():\n    # Get the number of asteroids\n    num_asteroids = int(input(\"How many asteroids are there? \"))\n    # Get the number of steps\n    num_steps = int(input(\"How many steps to take? \"))\n    # Get the asteroids\n    asteroids = get_asteroids(num_asteroids)\n    # Get the destroyed asteroids\n    destroyed_asteroids = get_destroyed_asteroids(asteroids, num_steps)\n    # Print the destroyed asteroids\n    print(\"The destroyed asteroids are:\")\n    for asteroid in destroyed_asteroids:\n        print(asteroid)\n",
            "def main():\n    print(\"This program calculates the distance between two points in the plane.\")\n    print()\n\n    x1 = int(input(\"Enter the x coordinate of the first point: \"))\n    y1 = int(input(\"Enter the y coordinate of the first point: \"))\n    x2 = int(input(\"Enter the x coordinate of the second point: \"))\n    y2 = int(input(\"Enter the y coordinate of the second point: \"))\n\n    distance = calc_distance(x1, y1, x2, y2)\n\n    print(\"The distance between the two points is: {:.2f}\".format(distance))\n",
            "def main():\n    import pygame\n    import random\n    import time\n    import sys\n    from pygame.locals import *\n    pygame.init()\n    pygame.font.init()\n    screen = pygame.display.set_mode((800, 600))\n    pygame.display.set_caption('Asteroids')\n    clock = pygame.time.Clock()\n    ship = pygame.image.load('ship.png')\n    ship = pygame.transform.scale(ship, (50, 50))\n    ship_rect = ship.get_rect()\n    ship_rect.center = (400, 300)\n    ship_speed = 0\n    ship_angle = 0\n    ship_rot_speed = 0\n    ship_pos = [400, 300]\n    ship_vel = [0, 0]\n    ship_acc = [0, 0]\n    ship_angle_vel = 0\n    ship_rot_acc = 0\n    ship_rot_speed = 0\n    ship_rot_angle = 0\n    ship_rot_angle_vel = 0\n    ship_rot_pos = [400, 300]\n    ship_rot_vel = [0, 0]\n    ship_rot_acc = [0, 0]\n    ship_rot_angle_vel = 0\n    ship_rot_rot_speed = 0\n    ship_rot_rot_angle = 0\n    ship_rot_rot_angle_vel = 0\n    ship_rot_rot_pos = [400, 300]\n    ship_rot_rot_vel = [0, 0]\n    ship_rot_rot_acc = [0, 0]\n    ship_rot_rot_angle_vel = 0\n    ship_rot_rot_rot_speed = 0\n    ship_rot_rot_rot_angle = 0\n    ship_rot_rot_rot_angle_vel = 0\n    ship_rot_rot_rot_pos = [400, 300]\n    ship_rot_rot_rot_vel = [0, 0]\n    ship_rot_rot_rot_acc = [0, 0]\n    ship_rot_rot_rot_angle_vel =\n",
            "def main():\n    print(\"This program illustrates the use of a while loop\")\n    print()\n    print(\"The while loop will continue to loop until the user\")\n    print(\"enters a negative number\")\n    print()\n\n    # Initialize the accumulator\n    total = 0\n\n    # Get the first number from the user\n    number = int(input(\"Enter a number: \"))\n\n    # Continue looping until the user enters a negative number\n    while number >= 0:\n        total = total + number\n        number = int(input(\"Enter a number: \"))\n\n    # Display the total\n    print(\"The total is\", total)\n"
        ],
        "results": 8
    },
    {
        "id": "1134",
        "source": "leetcodeTitles",
        "source_id": "90",
        "url": "https://leetcode.com/problems/subsets-ii/",
        "language": "python",
        "query": "Subsets II",
        "snippets": [
            "def subsetsWithDup(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    nums.sort()\n    res = []\n    def dfs(nums, path, res):\n        res.append(path)\n        for i in range(len(nums)):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            dfs(nums[i+1:], path+[nums[i]], res)\n    dfs(nums, [], res)\n    return res\n",
            "def subsetsWithDup(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    nums.sort()\n    res = [[]]\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            l = len(res)\n        for j in range(len(res) - l, len(res)):\n            res.append(res[j] + [nums[i]])\n    return res\n",
            "def subsetsWithDup(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    nums.sort()\n    res = [[]]\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            l = len(res)\n            for j in range(l):\n                res.append(res[j] + [nums[i]])\n        else:\n            l = len(res)\n            for j in range(l):\n                res.append(res[j] + [nums[i]])\n                res.append(res[j])\n    return res\n",
            "def subsetsWithDup(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    nums.sort()\n    res = []\n    dfs(nums, 0, [], res)\n    return res\n",
            "def subsetsWithDup(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    nums.sort()\n    res = [[]]\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i-1]:\n            l = len(res)\n            for j in range(l):\n                res.append(res[j] + [nums[i]])\n        else:\n            for j in range(len(res)):\n                res[j].append(nums[i])\n    return res\n",
            "def subsetsWithDup(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: List[List[int]]\n    \"\"\"\n    nums.sort()\n    res = []\n    backtrack(nums, 0, [], res)\n    return res\n"
        ],
        "results": 10
    },
    {
        "id": "1135",
        "source": "leetcodeTitles",
        "source_id": "1160",
        "url": "https://leetcode.com/problems/find-words-that-can-be-formed-by-characters/",
        "language": "python",
        "query": "Find Words That Can Be Formed by Characters",
        "snippets": [
            "def findWords(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [word for word in words if all(word.count(c) == 1 for c in word)]\n",
            "def findWords(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: List[str]\n    \"\"\"\n    row1 = set('qwertyuiop')\n    row2 = set('asdfghjkl')\n    row3 = set('zxcvbnm')\n    res = []\n    for word in words:\n        word = word.lower()\n        if set(word) <= row1 or set(word) <= row2 or set(word) <= row3:\n            res.append(word)\n    return res\n",
            "def findWords(words):\n    \"\"\"\n    :type words: List[str]\n    :rtype: List[str]\n    \"\"\"\n    return [word for word in words if all(word.count(c) == word.upper().count(c) for c in set(word))]\n",
            "def find_words(words, chars):\n    return [word for word in words if all(char in word for char in chars)]\n",
            "def can_form_word(word, letters):\n    for letter in word:\n        if letter not in letters:\n            return False\n        letters = letters.replace(letter, '', 1)\n    return True\n",
            "def find_words(words):\n    \"\"\"\n    :param words: list of words\n    :return: list of words that can be formed by characters\n    \"\"\"\n    words_dict = {}\n    for word in words:\n        word_dict = {}\n        for char in word:\n            if char in word_dict:\n                word_dict[char] += 1\n            else:\n                word_dict[char] = 1\n        words_dict[word] = word_dict\n    return words_dict\n",
            "def can_form_word(word, char_list):\n    \"\"\"\n    :param word: str\n    :param char_list: list\n    :return: bool\n    \"\"\"\n    for char in word:\n        if char not in char_list:\n            return False\n        else:\n            char_list.remove(char)\n    return True\n",
            "def canFormWord(letters, word):\n    letters = set(letters)\n    for i in word:\n        if i not in letters:\n            return False\n    return True\n"
        ],
        "results": 9
    },
    {
        "id": "1136",
        "source": "leetcodeTitles",
        "source_id": "300",
        "url": "https://leetcode.com/problems/longest-increasing-subsequence/",
        "language": "python",
        "query": "Longest Increasing Subsequence",
        "snippets": [
            "def lis(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and dp[i] < dp[j] + 1:\n                dp[i] = dp[j] + 1\n    return max(dp)\n",
            "def lis(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)\n",
            "def lis(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    max_lis = 0\n    for i in range(n):\n        max_lis = max(max_lis, lis[i])\n    return max_lis\n",
            "def lis(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, lis[i])\n    return maximum\n",
            "def lis(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    max_lis = max(lis)\n    return max_lis\n"
        ],
        "results": 10
    },
    {
        "id": "1137",
        "source": "leetcodeTitles",
        "source_id": "974",
        "url": "https://leetcode.com/problems/subarray-sums-divisible-by-k/",
        "language": "python",
        "query": "Subarray Sums Divisible by K",
        "snippets": [
            "def subarray_sums_divisible_by_k(nums, k):\n    \"\"\"\n    :param nums: list of integers\n    :param k: integer\n    :return: integer\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i, len(nums)):\n            if sum(nums[i:j+1]) % k == 0:\n                count += 1\n    return count\n",
            "def subarraySumsDivisibleByK(A, K):\n    # Write your code here\n    count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if sum(A[i:j+1]) % K == 0:\n                count += 1\n    return count\n",
            "def subarraySumsDivisibleByK(A, K):\n    # Write your code here.\n    count = 0\n    for i in range(len(A)):\n        sum = 0\n        for j in range(i, len(A)):\n            sum += A[j]\n            if sum % K == 0:\n                count += 1\n    return count\n",
            "def subarraySumsDivisibleByK(A, K):\n    # Write your code here.\n    count = 0\n    for i in range(len(A)):\n        for j in range(i, len(A)):\n            if sum(A[i:j+1]) % K == 0:\n                count += 1\n    return count\n",
            "def subarraySumsDivisibleByK(A, K):\n    \"\"\"\n    :type A: List[int]\n    :type K: int\n    :rtype: int\n    \"\"\"\n    # prefix sum\n    prefix_sum = [0]\n    for i in range(len(A)):\n        prefix_sum.append(prefix_sum[-1] + A[i])\n    # count\n    count = 0\n    for i in range(len(prefix_sum)):\n        for j in range(i + 1, len(prefix_sum)):\n            if (prefix_sum[j] - prefix_sum[i]) % K == 0:\n                count += 1\n    return count\n",
            "def subarraySumsDivisibleByK(A, K):\n    # Write your code here\n    if len(A) == 0:\n        return 0\n    if len(A) == 1:\n        if A[0] % K == 0:\n            return 1\n        else:\n            return 0\n    if len(A) == 2:\n        if A[0] % K == 0 and A[1] % K == 0:\n            return 2\n        else:\n            return 0\n    if len(A) == 3:\n        if A[0] % K == 0 and A[1] % K == 0 and A[2] % K == 0:\n            return 3\n        else:\n            return 0\n    if len(A) == 4:\n        if A[0] % K == 0 and A[1] % K == 0 and A[2] % K == 0 and A[3] % K == 0:\n            return 4\n        else:\n            return 0\n    if len(A) == 5:\n        if A[0] % K == 0 and A[1] % K == 0 and A[2] % K == 0 and A[3] % K == 0 and A[4] % K == 0:\n            return 5\n        else:\n            return 0\n    if len(A) == 6:\n        if A[0] % K == 0 and A[1] % K == 0 and A[2] % K == 0 and A[3] % K == 0 and A[4] % K == 0 and A[5] % K == 0:\n            return 6\n        else:\n            return 0\n    if len(A) == 7:\n        if A[0] % K == 0 and A[1] % K == 0 and A[2] % K == 0 and A[3] % K == 0 and A[4] % K == 0 and A[5] % K == 0 and A[6] % K == 0:\n            return 7\n        else:\n            return 0\n    if len(A) == 8:\n        if A[0] % K == 0 and A[1] % K == 0 and A[2] % K ==\n",
            "def subarray_sums_divisible_by_k(nums, k):\n    \"\"\"\n    Given an array of positive integers and a positive integer k,\n    find the number of subarrays whose sum is a multiple of k.\n    \"\"\"\n    # Initialize the count to 0\n    count = 0\n    # Initialize the sum to 0\n    sum = 0\n    # Iterate through the array\n    for i in range(len(nums)):\n        # Add the current number to the sum\n        sum += nums[i]\n        # If the sum is divisible by k, increment the count\n        if sum % k == 0:\n            count += 1\n        # If the sum is not divisible by k, reset the sum to 0\n        else:\n            sum = 0\n    # Return the count\n    return count\n",
            "def subarray_sums_divisible_by_k(nums, k):\n    \"\"\"\n    Given an array of positive integers and a positive integer k,\n    find the number of subarrays whose sum is a multiple of k.\n    \"\"\"\n    # Initialize the count to 0\n    count = 0\n    # Initialize the sum to 0\n    sum = 0\n    # Loop through the array\n    for i in range(len(nums)):\n        # Add the current element to the sum\n        sum += nums[i]\n        # If the sum is divisible by k, increment the count\n        if sum % k == 0:\n            count += 1\n        # If the sum is not divisible by k, reset the sum to 0\n        else:\n            sum = 0\n    # Return the count\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1138",
        "source": "leetcodeTitles",
        "source_id": "530",
        "url": "https://leetcode.com/problems/minimum-absolute-difference-in-bst/",
        "language": "python",
        "query": "Minimum Absolute Difference in BST",
        "snippets": [
            "def minDiffInBST(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if not root:\n        return 0\n    if not root.left and not root.right:\n        return 0\n    if root.left:\n        left = minDiffInBST(root.left)\n    else:\n        left = 0\n    if root.right:\n        right = minDiffInBST(root.right)\n    else:\n        right = 0\n    return min(abs(root.val - left), abs(root.val - right))\n",
            "def minDiffInBST(root):\n    \"\"\"\n    :type root: TreeNode\n    :rtype: int\n    \"\"\"\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 0\n    if root.left is None:\n        return minDiffInBST(root.right) + root.val\n    if root.right is None:\n        return minDiffInBST(root.left) + root.val\n    return min(minDiffInBST(root.left) + root.val, minDiffInBST(root.right) + root.val)\n",
            "def minDiffInBST(root):\n    # Write your code here.\n    if root is None:\n        return 0\n    if root.left is None and root.right is None:\n        return 0\n    if root.left is None:\n        return minDiffInBST(root.right)\n    if root.right is None:\n        return minDiffInBST(root.left)\n    return min(minDiffInBST(root.left), minDiffInBST(root.right))\n    # return min(minDiffInBST(root.left), minDiffInBST(root.right), abs(root.val - root.left.val), abs(root.val - root.right.val))\n    # return min(minDiffInBST(root.left), minDiffInBST(root.right), abs(root.val - root.left.val), abs(root.val - root.right.val))\n    # return min(minDiffInBST(root.left), minDiffInBST(root.right), abs(root.val - root.left.val), abs(root.val - root.right.val))\n    # return min(minDiffInBST(root.left), minDiffInBST(root.right), abs(root.val - root.left.val), abs(root.val - root.right.val))\n    # return min(minDiffInBST(root.left), minDiffInBST(root.right), abs(root.val - root.left.val), abs(root.val - root.right.val))\n    # return min(minDiffInBST(root.left), minDiffInBST(root.right), abs(root.val - root.left.val), abs(root.val - root.right.val))\n    # return min(minDiffInBST(root.left), minDiffInBST(root.right), abs(root.val - root.left.val), abs(root.val - root.right.val))\n    # return min(minDiffInBST(root.left), minDiffInBST(root.right), abs(root.val - root.\n",
            "def minDiffInBST(root):\n    if not root:\n        return None\n    if not root.left and not root.right:\n        return None\n    if root.left and root.right:\n        return min(minDiffInBST(root.left), minDiffInBST(root.right))\n    if root.left:\n        return min(minDiffInBST(root.left), root.val - root.right.val)\n    if root.right:\n        return min(minDiffInBST(root.right), root.val - root.left.val)\n    return None\n",
            "def minDiffInBST(root):\n    def inorder(root, arr):\n        if root is None:\n            return\n        inorder(root.left, arr)\n        arr.append(root.val)\n        inorder(root.right, arr)\n    arr = []\n    inorder(root, arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, abs(arr[i] - arr[i-1]))\n    return min_diff\n",
            "def minDiffInBST(root):\n    def inOrder(root):\n        if root is None:\n            return []\n        return inOrder(root.left) + [root.val] + inOrder(root.right)\n    inOrder = inOrder(root)\n    minDiff = float('inf')\n    for i in range(len(inOrder) - 1):\n        minDiff = min(minDiff, abs(inOrder[i] - inOrder[i + 1]))\n    return minDiff\n",
            "def minDiffInBST(root):\n    def inOrder(root, arr):\n        if root.left:\n            inOrder(root.left, arr)\n        arr.append(root.val)\n        if root.right:\n            inOrder(root.right, arr)\n        return arr\n    arr = inOrder(root, [])\n    arr.sort()\n    return min(abs(arr[i] - arr[i + 1]) for i in range(len(arr) - 1))\n",
            "def minDiffInBST(root):\n    # Write your code here.\n    def inorder(root, arr):\n        if root is None:\n            return\n        inorder(root.left, arr)\n        arr.append(root.val)\n        inorder(root.right, arr)\n    arr = []\n    inorder(root, arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        min_diff = min(min_diff, abs(arr[i] - arr[i + 1]))\n    return min_diff\n",
            "def minDiffInBST(root):\n    # Write your code here.\n    def inorder(root):\n        if root is None:\n            return []\n        return inorder(root.left) + [root.val] + inorder(root.right)\n    vals = inorder(root)\n    diff = float('inf')\n    for i in range(len(vals) - 1):\n        diff = min(diff, abs(vals[i] - vals[i + 1]))\n    return diff\n"
        ],
        "results": 10
    },
    {
        "id": "1139",
        "source": "leetcodeTitles",
        "source_id": "747",
        "url": "https://leetcode.com/problems/largest-number-at-least-twice-of-others/",
        "language": "python",
        "query": "Largest Number At Least Twice of Others",
        "snippets": [
            "def largest(numbers):\n    largest = numbers[0]\n    for i in range(1, len(numbers)):\n        if numbers[i] > largest:\n            largest = numbers[i]\n    return largest\n",
            "def dominant(nums):\n    if len(nums) == 1:\n        return True\n    if len(nums) == 2:\n        return nums[0] >= 2 * nums[1]\n    if nums[0] >= 2 * nums[1]:\n        return True\n    if nums[1] >= 2 * nums[0]:\n        return False\n    for i in range(2, len(nums)):\n        if nums[i] >= 2 * nums[0]:\n            return False\n    return True\n",
            "def largest(numbers):\n    largest = 0\n    for i in range(len(numbers)):\n        if numbers[i] > largest:\n            largest = numbers[i]\n    return largest\n",
            "def largest(nums):\n    largest = 0\n    for i in range(len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n    for i in range(len(nums)):\n        if nums[i] * 2 > largest:\n            return nums[i]\n    return -1\n",
            "def largest(numbers):\n    largest = numbers[0]\n    for i in range(1, len(numbers)):\n        if largest < numbers[i]:\n            largest = numbers[i]\n    return largest\n",
            "def largest(numbers):\n    largest = numbers[0]\n    for i in numbers:\n        if i > largest:\n            largest = i\n    return largest\n",
            "def largest(numbers):\n    largest = 0\n    for i in numbers:\n        if i > largest:\n            largest = i\n    return largest\n"
        ],
        "results": 10
    },
    {
        "id": "1140",
        "source": "leetcodeTitles",
        "source_id": "709",
        "url": "https://leetcode.com/problems/to-lower-case/",
        "language": "python",
        "query": "To Lower Case",
        "snippets": [
            "def to_lower_case(str):\n    return str.lower()\n"
        ],
        "results": 10
    },
    {
        "id": "1141",
        "source": "leetcodeTitles",
        "source_id": "1480",
        "url": "https://leetcode.com/problems/running-sum-of-1d-array/",
        "language": "python",
        "query": "Running Sum of 1d Array",
        "snippets": [
            "def running_sum(numbers):\n    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i]\n        numbers[i] = sum\n    return numbers\n",
            "def running_sum(numbers):\n    return [sum(numbers[:i+1]) for i in range(len(numbers))]\n"
        ],
        "results": 10
    },
    {
        "id": "1142",
        "source": "leetcodeTitles",
        "source_id": "1556",
        "url": "https://leetcode.com/problems/thousand-separator/",
        "language": "python",
        "query": "Thousand Separator",
        "snippets": [
            "def thousand_separator(n):\n    return '{:,}'.format(n)\n",
            "def thousand_separator(num):\n    num = str(num)\n    if len(num) <= 3:\n        return num\n    else:\n        return thousand_separator(num[:-3]) + ',' + num[-3:]\n",
            "def thousand_separator(num):\n    num = str(num)\n    num = num.split('.')\n    num[0] = num[0][::-1]\n    num[0] = num[0].replace(',', '')\n    num[0] = num[0].replace(' ', '')\n    num[0] = num[0][::-1]\n    num[0] = num[0].replace(',', '')\n    num[0] = num[0].replace(' ', '')\n    num[0] = num[0].replace('-', '')\n    num[0] = num[0].replace('+', '')\n    num[0] = num[0].replace('(', '')\n    num[0] = num[0].replace(')', '')\n    num[0] = num[0].replace('.', '')\n    num[0] = num[0].replace('/', '')\n    num[0] = num[0].replace('*', '')\n    num[0] = num[0].replace('%', '')\n    num[0] = num[0].replace('^', '')\n    num[0] = num[0].replace('!', '')\n    num[0] = num[0].replace('&', '')\n    num[0] = num[0].replace('#', '')\n    num[0] = num[0].replace('$', '')\n    num[0] = num[0].replace('@', '')\n    num[0] = num[0].replace('~', '')\n    num[0] = num[0].replace('`', '')\n    num[0] = num[0].replace(';', '')\n    num[0] = num[0].replace(':', '')\n    num[0] = num[0].replace('<', '')\n    num[0] = num[0].replace('>', '')\n    num[0] = num[0].replace('?', '')\n    num[0] = num[0].replace('|', '')\n    num[\n",
            "def thousand_separator(num):\n    return '{:,}'.format(num)\n",
            "def thousand_separator(num):\n    num = str(num)\n    num_list = []\n    for i in range(len(num)):\n        num_list.append(num[i])\n    for i in range(len(num_list)):\n        if i % 4 == 0 and i != 0:\n            num_list.insert(i, ',')\n    return ''.join(num_list)\n"
        ],
        "results": 10
    },
    {
        "id": "1143",
        "source": "leetcodeTitles",
        "source_id": "1492",
        "url": "https://leetcode.com/problems/the-kth-factor-of-n/",
        "language": "python",
        "query": "The kth Factor of n",
        "snippets": [
            "def kthFactor(n, k):\n    if n == 1:\n        return 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return i\n    return -1\n",
            "def kth_factor(n, k):\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return i\n    return -1\n",
            "def kth_factor(n, k):\n    if n == 1:\n        return 1\n    else:\n        for i in range(1, n + 1):\n            if n % i == 0:\n                k -= 1\n            if k == 0:\n                return i\n    return -1\n",
            "def kthfactor(n, k):\n    if n == 1:\n        return 1\n    for i in range(2, n):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return i\n    return -1\n",
            "def kth_factor(n, k):\n    if n == 1:\n        return 1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k -= 1\n        if k == 0:\n            return i\n    return -1\n",
            "def kth_factor(n, k):\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    if k == n - 1:\n        return n\n    if k == 2:\n        return n // 2\n    if k == 3:\n        return n // 3\n    if k == 4:\n        return n // 4\n    if k == 5:\n        return n // 5\n    if k == 6:\n        return n // 6\n    if k == 7:\n        return n // 7\n    if k == 8:\n        return n // 8\n    if k == 9:\n        return n // 9\n    if k == 10:\n        return n // 10\n    if k == 11:\n        return n // 11\n    if k == 12:\n        return n // 12\n    if k == 13:\n        return n // 13\n    if k == 14:\n        return n // 14\n    if k == 15:\n        return n // 15\n    if k == 16:\n        return n // 16\n    if k == 17:\n        return n // 17\n    if k == 18:\n        return n // 18\n    if k == 19:\n        return n // 19\n    if k == 20:\n        return n // 20\n    if k == 21:\n        return n // 21\n    if k == 22:\n        return n // 22\n    if k == 23:\n        return n // 23\n    if k == 24:\n        return n // 24\n    if k == 25:\n        return n // 25\n    if k == 26:\n        return n // 26\n    if k == 27:\n        return n // 27\n    if k == 28:\n        return n // 28\n    if k == 29:\n        return n // 29\n    if k == 30:\n        return n // 30\n    if k == 31:\n        return n // 31\n    if k == 32:\n        return n // 32\n    if k == 33:\n        return n // 33\n    if k == 34:\n        return n // 34\n    if k == 35:\n        return n // 35\n",
            "def kth_factor(n, k):\n    \"\"\"\n    n: int\n    k: int\n    return: int\n    \"\"\"\n    if n == 1:\n        return 1\n    if k == 1:\n        return n\n    if k == n:\n        return 1\n    if k > n:\n        return -1\n    if k == n / 2 + 1:\n        return n / 2\n    if k == n / 2:\n        return n / 2\n    if k == n / 3 + 1:\n        return n / 3\n    if k == n / 3:\n        return n / 3\n    if k == n / 4 + 1:\n        return n / 4\n    if k == n / 4:\n        return n / 4\n    if k == n / 5 + 1:\n        return n / 5\n    if k == n / 5:\n        return n / 5\n    if k == n / 6 + 1:\n        return n / 6\n    if k == n / 6:\n        return n / 6\n    if k == n / 7 + 1:\n        return n / 7\n    if k == n / 7:\n        return n / 7\n    if k == n / 8 + 1:\n        return n / 8\n    if k == n / 8:\n        return n / 8\n    if k == n / 9 + 1:\n        return n / 9\n    if k == n / 9:\n        return n / 9\n    if k == n / 10 + 1:\n        return n / 10\n    if k == n / 10:\n        return n / 10\n    if k == n / 11 + 1:\n        return n / 11\n    if k == n / 11:\n        return n / 11\n    if k == n / 12 + 1:\n        return n / 12\n    if k == n / 12:\n        return n / 12\n    if k == n / 13 + 1:\n        return n / 13\n    if k == n / 13:\n        return n / 13\n    if k == n / 14 + 1:\n        return n / 14\n    if k == n / 14:\n        return n / 14\n    if k == n / 15\n"
        ],
        "results": 10
    },
    {
        "id": "1144",
        "source": "leetcodeTitles",
        "source_id": "257",
        "url": "https://leetcode.com/problems/binary-tree-paths/",
        "language": "python",
        "query": "Binary Tree Paths",
        "snippets": [
            "def binaryTreePaths(root):\n    if not root:\n        return []\n    if not root.left and not root.right:\n        return [str(root.val)]\n    left = binaryTreePaths(root.left)\n    right = binaryTreePaths(root.right)\n    return [str(root.val) + \"->\" + path for path in left + right]\n",
            "def binaryTreePaths(root):\n    if not root:\n        return []\n    if not root.left and not root.right:\n        return [str(root.val)]\n    left = binaryTreePaths(root.left)\n    right = binaryTreePaths(root.right)\n    return [str(root.val) + '->' + i for i in left] + [str(root.val) + '->' + i for i in right]\n",
            "def binaryTreePaths(root):\n    if root is None:\n        return []\n    if root.left is None and root.right is None:\n        return [str(root.val)]\n    left = binaryTreePaths(root.left)\n    right = binaryTreePaths(root.right)\n    return [str(root.val) + '->' + i for i in left] + [str(root.val) + '->' + i for i in right]\n",
            "def binaryTreePaths(root):\n    if not root:\n        return []\n    if not root.left and not root.right:\n        return [str(root.val)]\n    return [str(root.val) + \"->\" + i for i in binaryTreePaths(root.left) + binaryTreePaths(root.right)]\n",
            "def binary_tree_paths(root):\n    if root is None:\n        return []\n    if root.left is None and root.right is None:\n        return [str(root.val)]\n    left_paths = binary_tree_paths(root.left)\n    right_paths = binary_tree_paths(root.right)\n    return [str(root.val) + '->' + path for path in left_paths + right_paths]\n",
            "def binary_tree_paths(root):\n    if not root:\n        return []\n    if not root.left and not root.right:\n        return [str(root.val)]\n    left_paths = binary_tree_paths(root.left)\n    right_paths = binary_tree_paths(root.right)\n    return [str(root.val) + '->' + path for path in left_paths + right_paths]\n"
        ],
        "results": 10
    },
    {
        "id": "1145",
        "source": "leetcodeTitles",
        "source_id": "200",
        "url": "https://leetcode.com/problems/number-of-islands/",
        "language": "python",
        "query": "Number of Islands",
        "snippets": [
            "def numIslands(grid):\n    \"\"\"\n    :type grid: List[List[str]]\n    :rtype: int\n    \"\"\"\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '1' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                count += 1\n    return count\n",
            "def numIslands(grid):\n    \"\"\"\n    :type grid: List[List[str]]\n    :rtype: int\n    \"\"\"\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '1' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                count += 1\n    return count\n",
            "def numIslands(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '1':\n                dfs(grid, i, j)\n                count += 1\n    return count\n",
            "def numIslands(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False] * n for _ in range(m)]\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '1' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                count += 1\n    return count\n",
            "def numIslands(grid):\n    if not grid:\n        return 0\n    m, n = len(grid), len(grid[0])\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == '1' and not visited[i][j]:\n                dfs(grid, visited, i, j)\n                count += 1\n    return count\n"
        ],
        "results": 10
    },
    {
        "id": "1146",
        "source": "leetcodeTitles",
        "source_id": "1291",
        "url": "https://leetcode.com/problems/sequential-digits/",
        "language": "python",
        "query": "Sequential Digits",
        "snippets": [
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    for i in range(len(digits)):\n        for j in range(i, len(digits)):\n            if digits[i] <= low and digits[j] >= high:\n                result.append(int(str(digits[i]) + str(digits[j])))\n    return result\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    low = str(low)\n    high = str(high)\n    low_len = len(low)\n    high_len = len(high)\n    if low_len > high_len:\n        return []\n    if low_len == high_len:\n        if low > high:\n            return []\n    low_num = int(low)\n    high_num = int(high)\n    result = []\n    for i in range(low_num, high_num + 1):\n        if i % 10 == 0:\n            continue\n        if i % 10 == 1:\n            result.append(i)\n        else:\n            if i // 10 == i % 10:\n                result.append(i)\n    return result\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    low = str(low)\n    high = str(high)\n    low_len = len(low)\n    high_len = len(high)\n    if low_len > high_len:\n        return []\n    if low_len == high_len:\n        if low > high:\n            return []\n    if low_len == 1:\n        low = '0' + low\n    if high_len == 1:\n        high = '0' + high\n    low_int = int(low)\n    high_int = int(high)\n    result = []\n    for i in range(low_int, high_int + 1):\n        if i % 10 == 0:\n            continue\n        if i % 10 == 1:\n            result.append(i)\n        else:\n            temp = str(i)\n            for j in range(1, len(temp)):\n                if temp[j] == temp[j - 1]:\n                    continue\n                else:\n                    result.append(i)\n                    break\n    return result\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    for i in range(len(digits)):\n        for j in range(i, len(digits)):\n            num = int(str(digits[i]) + str(digits[j]))\n            if num >= low and num <= high:\n                result.append(num)\n    return result\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    low = str(low)\n    high = str(high)\n    low_len = len(low)\n    high_len = len(high)\n    if low_len > high_len:\n        return []\n    if low_len == high_len:\n        if low > high:\n            return []\n    if low_len == 1:\n        low = '0' + low\n    if high_len == 1:\n        high = '0' + high\n    low = int(low)\n    high = int(high)\n    result = []\n    for i in range(low, high + 1):\n        if i % 10 != 0:\n            result.append(i)\n    return result\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    while digits:\n        num = digits.pop(0)\n        if num >= low and num <= high:\n            result.append(num)\n        if num < high:\n            digits.append(num * 10 + 1)\n            digits.append(num * 10 + 2)\n            digits.append(num * 10 + 3)\n            digits.append(num * 10 + 4)\n            digits.append(num * 10 + 5)\n            digits.append(num * 10 + 6)\n            digits.append(num * 10 + 7)\n            digits.append(num * 10 + 8)\n            digits.append(num * 10 + 9)\n    return result\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    for i in range(len(digits)):\n        for j in range(i, len(digits)):\n            num = digits[i] * 10 + digits[j]\n            if num >= low and num <= high:\n                result.append(num)\n    return result\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    digits = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    result = []\n    for i in range(len(digits)):\n        for j in range(i, len(digits)):\n            if digits[i] <= low and digits[j] >= high:\n                result.append(int(str(digits[i]) + str(digits[j])))\n    return sorted(result)\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :type low: int\n    :type high: int\n    :rtype: List[int]\n    \"\"\"\n    low = str(low)\n    high = str(high)\n    low_len = len(low)\n    high_len = len(high)\n    if low_len > high_len:\n        return []\n    if low_len == high_len:\n        if low > high:\n            return []\n    if low_len == 1:\n        low = '0' + low\n    if high_len == 1:\n        high = '0' + high\n    low_list = list(low)\n    high_list = list(high)\n    low_list.sort()\n    high_list.sort()\n    low_list = ''.join(low_list)\n    high_list = ''.join(high_list)\n    low_list = int(low_list)\n    high_list = int(high_list)\n    if low_list > high_list:\n        return []\n    result = []\n    for i in range(low_list, high_list + 1):\n        if i == 0:\n            continue\n        if i % 10 == 0:\n            continue\n        if i % 10 == 1:\n            continue\n        if i % 10 == 2:\n            continue\n        if i % 10 == 3:\n            continue\n        if i % 10 == 4:\n            continue\n        if i % 10 == 5:\n            continue\n        if i % 10 == 6:\n            continue\n        if i % 10 == 7:\n            continue\n        if i % 10 == 8:\n            continue\n        if i % 10 == 9:\n            continue\n        result.append(i)\n    return result\n",
            "def sequentialDigits(low, high):\n    \"\"\"\n    :param low: int\n    :param high: int\n    :return: list\n    \"\"\"\n    result = []\n    for i in range(1, 10):\n        for j in range(i + 1, 10):\n            if i * 10 + j >= low and i * 10 + j <= high:\n                result.append(i * 10 + j)\n    return result\n"
        ],
        "results": 10
    },
    {
        "id": "1147",
        "source": "leetcodeTitles",
        "source_id": "687",
        "url": "https://leetcode.com/problems/longest-univalue-path/",
        "language": "python",
        "query": "Longest Univalue Path",
        "snippets": [
            "def longestUnivaluePath(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        left_len = right_len = 0\n        if node.left and node.left.val == node.val:\n            left_len = left + 1\n        if node.right and node.right.val == node.val:\n            right_len = right + 1\n        self.ans = max(self.ans, left_len + right_len)\n        return max(left_len, right_len)\n    self = LongestUnivaluePath()\n    dfs(root)\n    return self.ans\n",
            "def longestUnivaluePath(root):\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        left_len = right_len = 0\n        if node.left and node.left.val == node.val:\n            left_len = left + 1\n        if node.right and node.right.val == node.val:\n            right_len = right + 1\n        self.max_len = max(self.max_len, left_len + right_len)\n        return max(left_len, right_len)\n    self = LongestUnivaluePath()\n    dfs(root)\n    return self.max_len\n",
            "def longestUnivaluePath(root):\n    if not root:\n        return 0\n    res = [0]\n    def dfs(node):\n        if not node:\n            return 0\n        left = dfs(node.left)\n        right = dfs(node.right)\n        left_res = right_res = 0\n        if node.left and node.left.val == node.val:\n            left_res = left + 1\n        if node.right and node.right.val == node.val:\n            right_res = right + 1\n        res[0] = max(res[0], left_res + right_res)\n        return max(left_res, right_res)\n    dfs(root)\n    return res[0]\n",
            "def longestUnivaluePath(root):\n    if not root:\n        return 0\n    if not root.left and not root.right:\n        return 0\n    if root.left and root.left.val == root.val:\n        return 1 + longestUnivaluePath(root.left)\n    if root.right and root.right.val == root.val:\n        return 1 + longestUnivaluePath(root.right)\n    return max(longestUnivaluePath(root.left), longestUnivaluePath(root.right))\n",
            "def longestUnivaluePath(root):\n    if not root:\n        return 0\n    return max(helper(root.left, root.val) + helper(root.right, root.val),\n               longestUnivaluePath(root.left),\n               longestUnivaluePath(root.right))\n",
            "def longest_univalue_path(root):\n    if not root:\n        return 0\n    if not root.left and not root.right:\n        return 0\n    if root.left and root.right:\n        if root.left.val == root.val and root.right.val == root.val:\n            return max(longest_univalue_path(root.left), longest_univalue_path(root.right)) + 2\n        elif root.left.val == root.val:\n            return longest_univalue_path(root.left) + 1\n        elif root.right.val == root.val:\n            return longest_univalue_path(root.right) + 1\n        else:\n            return max(longest_univalue_path(root.left), longest_univalue_path(root.right))\n    elif root.left:\n        if root.left.val == root.val:\n            return longest_univalue_path(root.left) + 1\n        else:\n            return longest_univalue_path(root.left)\n    else:\n        if root.right.val == root.val:\n            return longest_univalue_path(root.right) + 1\n        else:\n            return longest_univalue_path(root.right)\n    return 0\n",
            "def longestUnivaluePath(root):\n    if not root:\n        return 0\n    return max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) + 1 if root.left and root.left.val == root.val else 0 + max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) if root.right and root.right.val == root.val else 0\n    # return max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) + 1 if root.left and root.left.val == root.val else 0 + max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) if root.right and root.right.val == root.val else 0\n    # return max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) + 1 if root.left and root.left.val == root.val else 0 + max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) if root.right and root.right.val == root.val else 0\n    # return max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) + 1 if root.left and root.left.val == root.val else 0 + max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) if root.right and root.right.val == root.val else 0\n    # return max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) + 1 if root.left and root.left.val == root.val else 0 + max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) if root.right and root.right.val == root.val else 0\n    # return max(longestUnivaluePath(root.left), longestUnivaluePath(root.right)) + 1 if root.left and root.left.val == root.val else 0 + max(longestUnivaluePath(root.\n"
        ],
        "results": 10
    },
    {
        "id": "1148",
        "source": "leetcodeTitles",
        "source_id": "1658",
        "url": "https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/",
        "language": "python",
        "query": "Minimum Operations to Reduce X to Zero",
        "snippets": [
            "def minOperations(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if x == 4:\n        return 4\n    if x == 5:\n        return 5\n    if x == 6:\n        return 6\n    if x == 7:\n        return 7\n    if x == 8:\n        return 8\n    if x == 9:\n        return 9\n    if x == 10:\n        return 10\n    if x == 11:\n        return 11\n    if x == 12:\n        return 12\n    if x == 13:\n        return 13\n    if x == 14:\n        return 14\n    if x == 15:\n        return 15\n    if x == 16:\n        return 16\n    if x == 17:\n        return 17\n    if x == 18:\n        return 18\n    if x == 19:\n        return 19\n    if x == 20:\n        return 20\n    if x == 21:\n        return 21\n    if x == 22:\n        return 22\n    if x == 23:\n        return 23\n    if x == 24:\n        return 24\n    if x == 25:\n        return 25\n    if x == 26:\n        return 26\n    if x == 27:\n        return 27\n    if x == 28:\n        return 28\n    if x == 29:\n        return 29\n    if x == 30:\n        return 30\n    if x == 31:\n        return 31\n    if x == 32:\n        return 32\n    if x == 33:\n        return 33\n    if x == 34:\n        return 34\n    if x == 35:\n        return 35\n    if x == 36:\n        return 36\n    if x == 37:\n        return 37\n    if x == 38:\n        return 38\n    if x == 39:\n        return 39\n    if x == 40:\n        return 40\n    if x == 41:\n        return 41\n    if x == 42:\n        return 42\n    if x == 43:\n        return 43\n    if x == 44:\n",
            "def minOperations(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 4\n    if x == 4:\n        return 7\n    if x == 5:\n        return 10\n    if x == 6:\n        return 15\n    if x == 7:\n        return 22\n    if x == 8:\n        return 30\n    if x == 9:\n        return 40\n    if x == 10:\n        return 51\n    if x == 11:\n        return 64\n    if x == 12:\n        return 78\n    if x == 13:\n        return 93\n    if x == 14:\n        return 108\n    if x == 15:\n        return 124\n    if x == 16:\n        return 141\n    if x == 17:\n        return 158\n    if x == 18:\n        return 176\n    if x == 19:\n        return 194\n    if x == 20:\n        return 213\n    if x == 21:\n        return 233\n    if x == 22:\n        return 253\n    if x == 23:\n        return 273\n    if x == 24:\n        return 294\n    if x == 25:\n        return 315\n    if x == 26:\n        return 337\n    if x == 27:\n        return 359\n    if x == 28:\n        return 381\n    if x == 29:\n        return 404\n    if x == 30:\n        return 428\n    if x == 31:\n        return 452\n    if x == 32:\n        return 476\n    if x == 33:\n        return 501\n    if x == 34:\n        return 526\n    if x == 35:\n        return 552\n    if x == 36:\n        return 578\n    if x == 37:\n        return 604\n    if x == 38:\n        return 631\n    if x == 39:\n        return 658\n    if x == 40:\n        return 685\n    if x == 41:\n        return 713\n    if x == 42:\n        return 741\n    if x == 43:\n",
            "def minOperations(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 4\n    if x == 4:\n        return 7\n    if x == 5:\n        return 11\n    if x == 6:\n        return 16\n    if x == 7:\n        return 22\n    if x == 8:\n        return 29\n    if x == 9:\n        return 37\n    if x == 10:\n        return 46\n    if x == 11:\n        return 56\n    if x == 12:\n        return 67\n    if x == 13:\n        return 79\n    if x == 14:\n        return 92\n    if x == 15:\n        return 106\n    if x == 16:\n        return 121\n    if x == 17:\n        return 137\n    if x == 18:\n        return 154\n    if x == 19:\n        return 172\n    if x == 20:\n        return 191\n    if x == 21:\n        return 211\n    if x == 22:\n        return 232\n    if x == 23:\n        return 254\n    if x == 24:\n        return 277\n    if x == 25:\n        return 301\n    if x == 26:\n        return 326\n    if x == 27:\n        return 352\n    if x == 28:\n        return 379\n    if x == 29:\n        return 407\n    if x == 30:\n        return 436\n    if x == 31:\n        return 466\n    if x == 32:\n        return 497\n    if x == 33:\n        return 529\n    if x == 34:\n        return 562\n    if x == 35:\n        return 596\n    if x == 36:\n        return 631\n    if x == 37:\n        return 667\n    if x == 38:\n        return 704\n    if x == 39:\n        return 742\n    if x == 40:\n        return 781\n    if x == 41:\n        return 821\n    if x == 42:\n        return 862\n    if x == 43:\n",
            "def minOperations(x):\n    # Write your code here.\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if x == 4:\n        return 4\n    if x == 5:\n        return 5\n    if x == 6:\n        return 6\n    if x == 7:\n        return 7\n    if x == 8:\n        return 8\n    if x == 9:\n        return 9\n    if x == 10:\n        return 10\n    if x == 11:\n        return 11\n    if x == 12:\n        return 12\n    if x == 13:\n        return 13\n    if x == 14:\n        return 14\n    if x == 15:\n        return 15\n    if x == 16:\n        return 16\n    if x == 17:\n        return 17\n    if x == 18:\n        return 18\n    if x == 19:\n        return 19\n    if x == 20:\n        return 20\n    if x == 21:\n        return 21\n    if x == 22:\n        return 22\n    if x == 23:\n        return 23\n    if x == 24:\n        return 24\n    if x == 25:\n        return 25\n    if x == 26:\n        return 26\n    if x == 27:\n        return 27\n    if x == 28:\n        return 28\n    if x == 29:\n        return 29\n    if x == 30:\n        return 30\n    if x == 31:\n        return 31\n    if x == 32:\n        return 32\n    if x == 33:\n        return 33\n    if x == 34:\n        return 34\n    if x == 35:\n        return 35\n    if x == 36:\n        return 36\n    if x == 37:\n        return 37\n    if x == 38:\n        return 38\n    if x == 39:\n        return 39\n    if x == 40:\n        return 40\n    if x == 41:\n        return 41\n    if x == 42:\n        return 42\n    if x == 43:\n        return 43 (Duplicates hidden)\n",
            "def minOperations(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if x == 4:\n        return 4\n    if x == 5:\n        return 5\n    if x == 6:\n        return 6\n    if x == 7:\n        return 7\n    if x == 8:\n        return 8\n    if x == 9:\n        return 9\n    if x == 10:\n        return 10\n    if x == 11:\n        return 11\n    if x == 12:\n        return 12\n    if x == 13:\n        return 13\n    if x == 14:\n        return 14\n    if x == 15:\n        return 15\n    if x == 16:\n        return 16\n    if x == 17:\n        return 17\n    if x == 18:\n        return 18\n    if x == 19:\n        return 19\n    if x == 20:\n        return 20\n    if x == 21:\n        return 21\n    if x == 22:\n        return 22\n    if x == 23:\n        return 23\n    if x == 24:\n        return 24\n    if x == 25:\n        return 25\n    if x == 26:\n        return 26\n    if x == 27:\n        return 27\n    if x == 28:\n        return 28\n    if x == 29:\n        return 29\n    if x == 30:\n        return 30\n    if x == 31:\n        return 31\n    if x == 32:\n        return 32\n    if x == 33:\n        return 33\n    if x == 34:\n        return 34\n    if x == 35:\n        return 35\n    if x == 36:\n        return 36\n    if x == 37:\n        return 37\n    if x == 38:\n        return 38\n    if x == 39:\n        return 39\n    if x == 40:\n        return 40\n    if x == 41:\n        return 41\n    if x == 42:\n        return 42\n    if x == 43:\n        return 43\n    if x == 44:\n",
            "def minOperations(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 4\n    if x == 4:\n        return 7\n    if x == 5:\n        return 10\n    if x == 6:\n        return 15\n    if x == 7:\n        return 22\n    if x == 8:\n        return 30\n    if x == 9:\n        return 40\n    if x == 10:\n        return 51\n    if x == 11:\n        return 64\n    if x == 12:\n        return 78\n    if x == 13:\n        return 93\n    if x == 14:\n        return 108\n    if x == 15:\n        return 124\n    if x == 16:\n        return 141\n    if x == 17:\n        return 158\n    if x == 18:\n        return 176\n    if x == 19:\n        return 194\n    if x == 20:\n        return 213\n    if x == 21:\n        return 233\n    if x == 22:\n        return 253\n    if x == 23:\n        return 273\n    if x == 24:\n        return 294\n    if x == 25:\n        return 315\n    if x == 26:\n        return 337\n    if x == 27:\n        return 359\n    if x == 28:\n        return 381\n    if x == 29:\n        return 404\n    if x == 30:\n        return 428\n    if x == 31:\n        return 452\n    if x == 32:\n        return 476\n    if x == 33:\n        return 501\n    if x == 34:\n        return 526\n    if x == 35:\n        return 552\n    if x == 36:\n        return 578\n    if x == 37:\n        return 604\n    if x == 38:\n        return 631\n    if x == 39:\n        return 658\n    if x == 40:\n        return 685\n    if x == 41:\n        return 713\n    if x == 42:\n        return 741\n    if x == 43:\n",
            "def minOperations(x):\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 4\n    if x == 4:\n        return 7\n    if x == 5:\n        return 11\n    if x == 6:\n        return 16\n    if x == 7:\n        return 22\n    if x == 8:\n        return 29\n    if x == 9:\n        return 37\n    if x == 10:\n        return 46\n    if x == 11:\n        return 56\n    if x == 12:\n        return 67\n    if x == 13:\n        return 79\n    if x == 14:\n        return 92\n    if x == 15:\n        return 106\n    if x == 16:\n        return 121\n    if x == 17:\n        return 137\n    if x == 18:\n        return 154\n    if x == 19:\n        return 172\n    if x == 20:\n        return 191\n    if x == 21:\n        return 211\n    if x == 22:\n        return 232\n    if x == 23:\n        return 254\n    if x == 24:\n        return 277\n    if x == 25:\n        return 301\n    if x == 26:\n        return 326\n    if x == 27:\n        return 352\n    if x == 28:\n        return 379\n    if x == 29:\n        return 407\n    if x == 30:\n        return 436\n    if x == 31:\n        return 466\n    if x == 32:\n        return 497\n    if x == 33:\n        return 529\n    if x == 34:\n        return 562\n    if x == 35:\n        return 596\n    if x == 36:\n        return 631\n    if x == 37:\n        return 667\n    if x == 38:\n        return 704\n    if x == 39:\n        return 742\n    if x == 40:\n        return 781\n    if x == 41:\n        return 821\n    if x == 42:\n        return 862\n    if x == 43:\n",
            "def minOperations(x):\n    # Write your code here.\n    if x == 0:\n        return 0\n    if x == 1:\n        return 1\n    if x == 2:\n        return 2\n    if x == 3:\n        return 3\n    if x == 4:\n        return 4\n    if x == 5:\n        return 5\n    if x == 6:\n        return 6\n    if x == 7:\n        return 7\n    if x == 8:\n        return 8\n    if x == 9:\n        return 9\n    if x == 10:\n        return 10\n    if x == 11:\n        return 11\n    if x == 12:\n        return 12\n    if x == 13:\n        return 13\n    if x == 14:\n        return 14\n    if x == 15:\n        return 15\n    if x == 16:\n        return 16\n    if x == 17:\n        return 17\n    if x == 18:\n        return 18\n    if x == 19:\n        return 19\n    if x == 20:\n        return 20\n    if x == 21:\n        return 21\n    if x == 22:\n        return 22\n    if x == 23:\n        return 23\n    if x == 24:\n        return 24\n    if x == 25:\n        return 25\n    if x == 26:\n        return 26\n    if x == 27:\n        return 27\n    if x == 28:\n        return 28\n    if x == 29:\n        return 29\n    if x == 30:\n        return 30\n    if x == 31:\n        return 31\n    if x == 32:\n        return 32\n    if x == 33:\n        return 33\n    if x == 34:\n        return 34\n    if x == 35:\n        return 35\n    if x == 36:\n        return 36\n    if x == 37:\n        return 37\n    if x == 38:\n        return 38\n    if x == 39:\n        return 39\n    if x == 40:\n        return 40\n    if x == 41:\n        return 41\n    if x == 42:\n        return 42\n    if x == 43:\n        return 43\n",
            "def minOperations(x):\n    # Write your code here.\n    count = 0\n    while x != 0:\n        if x % 4 == 0:\n            x = x // 4\n        elif x % 3 == 0:\n            x = x // 3\n        elif x % 2 == 0:\n            x = x // 2\n        else:\n            x -= 1\n        count += 1\n    return count\n",
            "def minOperations(x):\n    if x == 0:\n        return 0\n    elif x == 1:\n        return 1\n    else:\n        return minOperations(x - 1) + 1\n"
        ],
        "results": 10
    },
    {
        "id": "1149",
        "source": "leetcodeTitles",
        "source_id": "581",
        "url": "https://leetcode.com/problems/shortest-unsorted-continuous-subarray/",
        "language": "python",
        "query": "Shortest Unsorted Continuous Subarray",
        "snippets": [
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    nums.sort()\n    start = 0\n    end = len(nums) - 1\n    while nums[start] == nums[start + 1]:\n        start += 1\n    while nums[end] == nums[end - 1]:\n        end -= 1\n    return end - start + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    left = 0\n    right = len(nums) - 1\n    while left < right and nums[left] <= nums[left + 1]:\n        left += 1\n    if left == right:\n        return 0\n    while right > 0 and nums[right] >= nums[right - 1]:\n        right -= 1\n    while left < right and nums[left] <= nums[left + 1]:\n        left += 1\n    return right - left + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    left, right = 0, len(nums) - 1\n    while left < right:\n        if nums[left] <= nums[left + 1]:\n            left += 1\n        else:\n            break\n    while left < right:\n        if nums[right] >= nums[right - 1]:\n            right -= 1\n        else:\n            break\n    if left == right:\n        return 0\n    return right - left + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        if nums[left] <= nums[left + 1]:\n            left += 1\n        else:\n            break\n    while left < right:\n        if nums[right] >= nums[right - 1]:\n            right -= 1\n        else:\n            break\n    if left == right:\n        return 0\n    else:\n        return right - left + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    nums.sort()\n    left = 0\n    right = len(nums) - 1\n    while left < right and nums[left] == nums[left + 1]:\n        left += 1\n    while left < right and nums[right] == nums[right - 1]:\n        right -= 1\n    return right - left + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        if nums[left] > nums[left + 1]:\n            left += 1\n        else:\n            break\n    while left < right:\n        if nums[right] < nums[right - 1]:\n            right -= 1\n        else:\n            break\n    if left == right:\n        return 0\n    return right - left + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    left, right = 0, len(nums) - 1\n    while left < right and nums[left] <= nums[left + 1]:\n        left += 1\n    if left == right:\n        return 0\n    while right > 0 and nums[right] >= nums[right - 1]:\n        right -= 1\n    while left < right and nums[left] <= nums[left + 1]:\n        left += 1\n    return right - left + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    left = 0\n    right = len(nums) - 1\n    while left < right:\n        if nums[left] > nums[left + 1]:\n            left += 1\n        else:\n            break\n    while left < right:\n        if nums[right] < nums[right - 1]:\n            right -= 1\n        else:\n            break\n    if left == right:\n        return 0\n    else:\n        return right - left + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) <= 1:\n        return 0\n    sorted_nums = sorted(nums)\n    start = 0\n    end = len(nums) - 1\n    while start < end:\n        if nums[start] != sorted_nums[start]:\n            break\n        start += 1\n    while end > start:\n        if nums[end] != sorted_nums[end]:\n            break\n        end -= 1\n    return end - start + 1\n",
            "def findUnsortedSubarray(nums):\n    \"\"\"\n    :type nums: List[int]\n    :rtype: int\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n    sorted_nums = sorted(nums)\n    start = 0\n    end = len(nums) - 1\n    while start < end and nums[start] == sorted_nums[start]:\n        start += 1\n    while start < end and nums[end] == sorted_nums[end]:\n        end -= 1\n    if start >= end:\n        return 0\n    return end - start + 1\n"
        ],
        "results": 10
    },
    {
        "id": "1150",
        "source": "leetcodeTitles",
        "source_id": "344",
        "url": "https://leetcode.com/problems/reverse-string/",
        "language": "python",
        "query": "Reverse String",
        "snippets": [
            "def reverse(text):\n    return text[::-1]\n",
            "def reverse(s):\n    return s[::-1]\n",
            "def reverse_string(string):\n    return string[::-1]\n"
        ],
        "results": 10
    },
    {
        "id": "1151",
        "source": "leetcodeTitles",
        "source_id": "513",
        "url": "https://leetcode.com/problems/find-bottom-left-tree-value/",
        "language": "python",
        "query": "Find Bottom Left Tree Value",
        "snippets": [
            "def findBottomLeftValue(root):\n    if not root:\n        return None\n    queue = [root]\n    while queue:\n        for i in range(len(queue)):\n            node = queue.pop(0)\n            if node.left:\n                queue.append(node.left)\n            if node.right:\n                queue.append(node.right)\n    return node.val\n",
            "def findBottomLeftValue(root):\n    if not root:\n        return None\n    q = [root]\n    while q:\n        for i in range(len(q)):\n            node = q.pop(0)\n            if node.left:\n                q.append(node.left)\n            if node.right:\n                q.append(node.right)\n    return node.val\n",
            "def findBottomLeftValue(root):\n    if not root:\n        return None\n    q = [root]\n    while q:\n        q = [child for node in q for child in (node.left, node.right) if child]\n    return q[0].val\n",
            "def findBottomLeftValue(root):\n    if not root:\n        return None\n    q = [root]\n    while q:\n        for i in range(len(q)):\n            if q[i].left:\n                q.append(q[i].left)\n            if q[i].right:\n                q.append(q[i].right)\n        q = q[1:]\n    return q[0].val\n",
            "def find_bottom_left_value(root):\n    if not root:\n        return None\n    q = [root]\n    while q:\n        for i in range(len(q)):\n            if q[i].left:\n                q.append(q[i].left)\n            if q[i].right:\n                q.append(q[i].right)\n        q = q[1:]\n    return q[0].val\n"
        ],
        "results": 10
    },
    {
        "id": "1152",
        "source": "leetcodeTitles",
        "source_id": "539",
        "url": "https://leetcode.com/problems/minimum-time-difference/",
        "language": "python",
        "query": "Minimum Time Difference",
        "snippets": [
            "def minimum_time_difference(time_list, d):\n    time_list.sort()\n    min_diff = 24 * 60\n    for i in range(len(time_list) - 1):\n        diff = (time_list[i + 1] - time_list[i]) % (24 * 60)\n        if diff < min_diff and diff >= d:\n            min_diff = diff\n    return min_diff\n",
            "def minimumTime(timeList):\n    timeList.sort()\n    minDiff = 24 * 60\n    for i in range(len(timeList) - 1):\n        diff = (timeList[i + 1] - timeList[i]) % (24 * 60)\n        if diff < minDiff:\n            minDiff = diff\n    return minDiff\n",
            "def minimum_time_difference(time_list, d):\n    time_list.sort()\n    time_list = [int(time[:2]) * 60 + int(time[3:]) for time in time_list]\n    time_list.append(time_list[0] + d * 60)\n    time_list.sort()\n    return time_list[1] - time_list[0]\n",
            "def minimum_time_difference(time_list, d):\n    time_list.sort()\n    time_list = [int(time[:2]) * 60 + int(time[3:]) for time in time_list]\n    time_list.sort()\n    time_list = [time // d for time in time_list]\n    time_list = [time * d for time in time_list]\n    time_list = [time + d for time in time_list]\n    time_list = [time % 1440 for time in time_list]\n    time_list = [time // 60 for time in time_list]\n    time_list = [time % 60 for time in time_list]\n    time_list = [str(time // 10) + str(time % 10) for time in time_list]\n    return time_list\n",
            "def minimum_time_difference(time_list, minutes_difference):\n    time_list.sort()\n    for i in range(len(time_list)):\n        time_list[i] = int(time_list[i].split(':')[1])\n    for i in range(len(time_list)):\n        if time_list[i] % minutes_difference == 0:\n            return time_list[i]\n    return -1\n",
            "def minimum_time_difference(time_list, minutes):\n    time_list.sort()\n    time_list = [int(i[:2]) * 60 + int(i[3:]) for i in time_list]\n    time_list.sort()\n    time_list = [i // minutes * minutes for i in time_list]\n    time_list = [i // 60 + \":\" + str(i % 60).zfill(2) for i in time_list]\n    return time_list\n",
            "def minimum_time_difference(time_list, minutes):\n    time_list.sort()\n    time_list = [int(time[:2]) * 60 + int(time[3:]) for time in time_list]\n    time_list.sort()\n    min_diff = 1440\n    for i in range(len(time_list) - 1):\n        if time_list[i + 1] - time_list[i] < min_diff:\n            min_diff = time_list[i + 1] - time_list[i]\n    return min_diff // minutes\n"
        ],
        "results": 10
    },
    {
        "id": "1153",
        "source": "leetcodeTitles",
        "source_id": "242",
        "url": "https://leetcode.com/problems/valid-anagram/",
        "language": "java",
        "query": "Valid Anagram",
        "snippets": [
            "\tboolean isAnagram(String s, String t) {\n\t\tif(s.length() != t.length()) return false;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t\tcount[t.charAt(i) - 'a']--;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] != 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean isAnagram(String s, String t) {\n\t\tif(s.length() != t.length())\n\t\t\treturn false;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++)\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\tfor(int i = 0; i < t.length(); i++)\n\t\t\tcount[t.charAt(i) - 'a']--;\n\t\tfor(int i = 0; i < 26; i++)\n\t\t\tif(count[i] != 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1154",
        "source": "leetcodeTitles",
        "source_id": "841",
        "url": "https://leetcode.com/problems/keys-and-rooms/",
        "language": "java",
        "query": "Keys and Rooms",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString[] keys = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms2 = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms3 = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms4 = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms5 = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms6 = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\n",
            "\tstatic void main(String[] args){\n\t\tString[] keys = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms = {\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tint[] rooms_index = new int[26];\n\t\tint[] keys_index = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\trooms_index[i] = i;\n\t\t\tkeys_index[i] = i;\n\t\t}\n\t\tString[] rooms_new = new String[26];\n\t\tString[] keys_new = new String[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\trooms_new[i] = rooms[rooms_index[i]];\n\t\t\tkeys_new[i] = keys[keys_index[i]];\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tSystem.out.println(rooms_new[i]);\n\t\t\tSystem.out.println(keys_new[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] keys = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tint[] keys_rooms = new int[26];\n\t\tfor(int i = 0; i < keys.length; i++){\n\t\t\tkeys_rooms[i] = i;\n\t\t}\n\t\tfor(int i = 0; i < keys.length; i++){\n\t\t\tint index = (int)(Math.random()*keys.length);\n\t\t\tString temp = keys[i];\n\t\t\tkeys[i] = keys[index];\n\t\t\tkeys[index] = temp;\n\t\t\ttemp = rooms[i];\n\t\t\trooms[i] = rooms[index];\n\t\t\trooms[index] = temp;\n\t\t}\n\t\tfor(int i = 0; i < keys.length; i++){\n\t\t\tSystem.out.println(keys[i] + \" \" + rooms[i]);\n\t\t}\n\t\tfor(int i = 0; i < keys.length; i++){\n\t\t\tfor(int j = 0; j < keys.length; j++){\n\t\t\t\tif(keys[i].equals(rooms[j])){\n\t\t\t\t\tkeys_rooms[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < keys.length; i++){\n\t\t\tSystem.out.println(keys[i] + \" \" + keys_rooms[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] keys = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms = {\"i\",\"o\",\"d\",\"s\",\"a\",\"f\",\"c\",\"g\",\"b\",\"h\",\"n\",\"e\",\"p\",\"q\",\"u\",\"v\",\"y\",\"z\",\"l\",\"k\",\"r\",\"m\",\"w\",\"t\",\"j\"};\n\t\tint[] keys1 = new int[26];\n\t\tint[] keys2 = new int[26];\n\t\tint[] keys3 = new int[26];\n\t\tint[] keys4 = new int[26];\n\t\tint[] keys5 = new int[26];\n\t\tint[] keys6 = new int[26];\n\t\tint[] keys7 = new int[26];\n\t\tint[] keys8 = new int[26];\n\t\tint[] keys9 = new int[26];\n\t\tint[] keys10 = new int[26];\n\t\tint[] keys11 = new int[26];\n\t\tint[] keys12 = new int[26];\n\t\tint[] keys13 = new int[26];\n\t\tint[] keys14 = new int[26];\n\t\tint[] keys15 = new int[26];\n\t\tint[] keys16 = new int[26];\n\t\tint[] keys17 = new int[26];\n\t\tint[] keys18 = new int[26];\n\t\tint[] keys19 = new int[26];\n\t\tint[] keys20 = new int[26];\n\t\tint[] keys21 = new int[26];\n\t\tint[] keys22 = new int[26];\n\t\tint[] keys23 = new int[26];\n\t\tint[] keys24 = new int[26];\n\t\tint[] keys25 = new int[26];\n\t\tint[] keys26 = new int[26];\n\t\tint[] keys27 = new int[26];\n\t\tint[] keys28 = new int[26];\n\t\tint[] keys\n",
            "\tstatic void main(String[] args){\n\t\tString[] keys = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] doors = {\"ab\",\"cd\",\"pq\",\"xy\"};\n\t\tString[] rooms2 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] doors2 = {\"ab\",\"cd\",\"pq\",\"xy\"};\n\t\tString[] rooms3 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] doors3 = {\"ab\",\"cd\",\"pq\",\"xy\"};\n\t\tString[] rooms4 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] doors4 = {\"ab\",\"cd\",\"pq\",\"xy\"};\n\t\tString[] rooms5 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] doors5 = {\"ab\",\"cd\",\"pq\",\"xy\"};\n\t\tString[] rooms6 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] doors6 = {\"ab\",\"cd\",\"pq\",\"xy\"};\n\t\tString[] rooms7 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] doors7 = {\"ab\",\"cd\",\"pq\",\"xy\"};\n\t\tString[] rooms8 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] doors8 = {\"ab\",\"cd\",\"pq\",\"xy\"\n",
            "\tstatic void main(String[] args){\n\t\tString[] keys = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"};\n\t\tString[] rooms = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms2 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms3 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms4 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms5 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms6 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms7 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms8 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms9 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms10 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms11 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms12 = {\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqr\",\"stu\",\"vwx\",\"yz\"};\n\t\tString[] rooms13 = {\"abc\n",
            "\tint[] keys;\n\tint[] rooms;\n\tpublic Clazz(int[] keys, int[] rooms){\n\t\tthis.keys = keys;\n\t\tthis.rooms = rooms;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tRoom r1 = new Room(\"Room 1\");\n\t\tRoom r2 = new Room(\"Room 2\");\n\t\tRoom r3 = new Room(\"Room 3\");\n\t\tRoom r4 = new Room(\"Room 4\");\n\t\tRoom r5 = new Room(\"Room 5\");\n\t\tRoom r6 = new Room(\"Room 6\");\n\t\tRoom r7 = new Room(\"Room 7\");\n\t\tRoom r8 = new Room(\"Room 8\");\n\t\tRoom r9 = new Room(\"Room 9\");\n\t\tRoom r10 = new Room(\"Room 10\");\n\t\tRoom r11 = new Room(\"Room 11\");\n\t\tRoom r12 = new Room(\"Room 12\");\n\t\tRoom r13 = new Room(\"Room 13\");\n\t\tRoom r14 = new Room(\"Room 14\");\n\t\tRoom r15 = new Room(\"Room 15\");\n\t\tRoom r16 = new Room(\"Room 16\");\n\t\tRoom r17 = new Room(\"Room 17\");\n\t\tRoom r18 = new Room(\"Room 18\");\n\t\tRoom r19 = new Room(\"Room 19\");\n\t\tRoom r20 = new Room(\"Room 20\");\n\t\tRoom r21 = new Room(\"Room 21\");\n\t\tRoom r22 = new Room(\"Room 22\");\n\t\tRoom r23 = new Room(\"Room 23\");\n\t\tRoom r24 = new Room(\"Room 24\");\n\t\tRoom r25 = new Room(\"Room 25\");\n\t\tRoom r26 = new Room(\"Room 26\");\n\t\tRoom r27 = new Room(\"Room 27\");\n\t\tRoom r28 = new Room(\"Room 28\");\n\t\tRoom r29 = new Room(\"Room 29\");\n\t\tRoom r30 = new Room(\"Room 30\");\n\t\tRoom r31 = new Room(\"Room 31\");\n\t\tRoom r32 = new Room(\"Room 32\");\n\t\tRoom r33 = new Room(\"Room 33\");\n\t\tRoom r34 = new Room(\"Room 34\");\n\t\tRoom r35 = new Room(\"Room 35\");\n\t\tRoom r36 = new Room(\"Room 36\");\n\t\tRoom r37 = new Room(\"Room 37\");\n\t\tRoom r38 = new Room\n"
        ],
        "results": 9
    },
    {
        "id": "1155",
        "source": "leetcodeTitles",
        "source_id": "1009",
        "url": "https://leetcode.com/problems/complement-of-base-10-integer/",
        "language": "java",
        "query": "Complement of Base 10 Integer",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint complement = ~n;\n\t\tSystem.out.println(complement);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = n;\n\t\tint sum = 0;\n\t\twhile(n > 0){\n\t\t\tsum += n % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\tSystem.out.println(m + \" + \" + sum + \" = \" + (m + sum));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint k = Integer.parseInt(args[2]);\n\t\tint l = Integer.parseInt(args[3]);\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tint[] c = new int[k];\n\t\tint[] d = new int[l];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = Integer.parseInt(args[4+i]);\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = Integer.parseInt(args[4+n+i]);\n\t\t}\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = Integer.parseInt(args[4+n+m+i]);\n\t\t}\n\t\tfor(int i = 0; i < l; i++){\n\t\t\td[i] = Integer.parseInt(args[4+n+m+k+i]);\n\t\t}\n\t\tint[] a1 = complement(a);\n\t\tint[] b1 = complement(b);\n\t\tint[] c1 = complement(c);\n\t\tint[] d1 = complement(d);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(a1[i]+\" \");\n\t\t}\n\t\tSystem.out.println();\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tSystem.out.print(b1[i]+\" \");\n\t\t}\n\t\tSystem.out.println();\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tSystem.out.print(c1[i]+\" \");\n\t\t}\n\t\tSystem.out.println();\n\t\tfor(int i = 0; i < l;\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = n;\n\t\tint sum = 0;\n\t\twhile(n>0){\n\t\t\tsum = sum + (n%10);\n\t\t\tn = n/10;\n\t\t}\n\t\tSystem.out.println(sum);\n\t\tint sum1 = 0;\n\t\twhile(m>0){\n\t\t\tsum1 = sum1 + (m%10);\n\t\t\tm = m/10;\n\t\t}\n\t\tSystem.out.println(sum1);\n\t\tint sum2 = 0;\n\t\twhile(sum1>0){\n\t\t\tsum2 = sum2 + (sum1%10);\n\t\t\tsum1 = sum1/10;\n\t\t}\n\t\tSystem.out.println(sum2);\n\t\tint sum3 = 0;\n\t\twhile(sum2>0){\n\t\t\tsum3 = sum3 + (sum2%10);\n\t\t\tsum2 = sum2/10;\n\t\t}\n\t\tSystem.out.println(sum3);\n\t\tint sum4 = 0;\n\t\twhile(sum3>0){\n\t\t\tsum4 = sum4 + (sum3%10);\n\t\t\tsum3 = sum3/10;\n\t\t}\n\t\tSystem.out.println(sum4);\n\t\tint sum5 = 0;\n\t\twhile(sum4>0){\n\t\t\tsum5 = sum5 + (sum4%10);\n\t\t\tsum4 = sum4/10;\n\t\t}\n\t\tSystem.out.println(sum5);\n\t\tint sum6 = 0;\n\t\twhile(sum5>0){\n\t\t\tsum6 = sum6 + (sum5%10);\n\t\t\tsum5 = sum5/10;\n\t\t}\n\t\tSystem.out.println(sum6);\n\t\tint sum7 = 0;\n\t\twhile(sum6>0){\n\t\t\tsum7 = sum7 + (sum6%10);\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = n;\n\t\tint c = 0;\n\t\twhile(m > 0){\n\t\t\tc += m%10;\n\t\t\tm /= 10;\n\t\t}\n\t\tint r = n - c;\n\t\tSystem.out.println(r);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = n;\n\t\tint c = 0;\n\t\twhile(m>0){\n\t\t\tc = c + m%10;\n\t\t\tm = m/10;\n\t\t}\n\t\tint d = n - c;\n\t\tSystem.out.println(d);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint ans = 0;\n\t\tfor(int i = n; i <= m; i++){\n\t\t\tif(i % 2 == 1){\n\t\t\t\tans += i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1156",
        "source": "leetcodeTitles",
        "source_id": "82",
        "url": "https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/",
        "language": "java",
        "query": "Remove Duplicates from Sorted List II",
        "snippets": [
            "\tListNode deleteDuplicates(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode pre = dummy;\n\t\tListNode cur = head;\n\t\twhile(cur != null){\n\t\t\twhile(cur.next != null && cur.val == cur.next.val){\n\t\t\t\tcur = cur.next;\n\t\t\t}\n\t\t\tif(pre.next == cur){\n\t\t\t\tpre = pre.next;\n\t\t\t}else{\n\t\t\t\tpre.next = cur.next;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode deleteDuplicates(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode prev = dummy;\n\t\tListNode cur = head;\n\t\twhile(cur != null){\n\t\t\twhile(cur.next != null && cur.val == cur.next.val){\n\t\t\t\tcur = cur.next;\n\t\t\t}\n\t\t\tif(prev.next == cur){\n\t\t\t\tprev = prev.next;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tprev.next = cur.next;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode deleteDuplicates(ListNode head) {\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode pre = dummy;\n\t\tListNode cur = head;\n\t\twhile(cur != null){\n\t\t\twhile(cur.next != null && cur.val == cur.next.val){\n\t\t\t\tcur = cur.next;\n\t\t\t}\n\t\t\tif(pre.next == cur){\n\t\t\t\tpre = pre.next;\n\t\t\t}else{\n\t\t\t\tpre.next = cur.next;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode deleteDuplicates(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode p = head;\n\t\twhile(p.next != null){\n\t\t\tif(p.val == p.next.val){\n\t\t\t\tp.next = p.next.next;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t}\n\t\treturn head;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1157",
        "source": "leetcodeTitles",
        "source_id": "119",
        "url": "https://leetcode.com/problems/pascals-triangle-ii/",
        "language": "java",
        "query": "Pascal's Triangle II",
        "snippets": [
            "\tList<Integer> getRow(int rowIndex) {\n\t\tList<Integer> row = new ArrayList<Integer>();\n\t\tfor (int i = 0; i <= rowIndex; i++) {\n\t\t\trow.add(1);\n\t\t\tfor (int j = row.size() - 2; j > 0; j--) {\n\t\t\t\trow.set(j, row.get(j) + row.get(j - 1));\n\t\t\t}\n\t\t}\n\t\treturn row;\n\t}\n}\n",
            "\tList<Integer> getRow(int rowIndex) {\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tfor(int i = 0; i <= rowIndex; i++){\n\t\t\tlist.add(1);\n\t\t\tfor(int j = i - 1; j > 0; j--){\n\t\t\t\tlist.set(j, list.get(j) + list.get(j - 1));\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n}\n",
            "\tList<Integer> getRow(int rowIndex) {\n\t\tList<Integer> row = new ArrayList<Integer>();\n\t\tfor(int i = 0; i <= rowIndex; i++){\n\t\t\trow.add(0, 1);\n\t\t\tfor(int j = 1; j < row.size() - 1; j++){\n\t\t\t\trow.set(j, row.get(j) + row.get(j + 1));\n\t\t\t}\n\t\t}\n\t\treturn row;\n\t}\n}\n",
            "\tList<Integer> getRow(int rowIndex) {\n\t\tList<Integer> res = new ArrayList<Integer>();\n\t\tif(rowIndex == 0){\n\t\t\tres.add(1);\n\t\t\treturn res;\n\t\t}\n\t\tif(rowIndex == 1){\n\t\t\tres.add(1);\n\t\t\tres.add(1);\n\t\t\treturn res;\n\t\t}\n\t\tres.add(1);\n\t\tres.add(1);\n\t\tfor(int i = 2; i <= rowIndex; i++){\n\t\t\tres.add(1);\n\t\t\tfor(int j = i - 1; j > 0; j--){\n\t\t\t\tres.set(j, res.get(j) + res.get(j - 1));\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tList<Integer> getRow(int rowIndex) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor(int i = 0; i <= rowIndex; i++){\n\t\t\tresult.add(0, 1);\n\t\t\tfor(int j = 1; j < result.size() - 1; j++){\n\t\t\t\tresult.set(j, result.get(j) + result.get(j + 1));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> getRow(int rowIndex) {\n\t\tList<Integer> res = new ArrayList<Integer>();\n\t\tres.add(1);\n\t\tif(rowIndex == 0) return res;\n\t\tres.add(1);\n\t\tif(rowIndex == 1) return res;\n\t\tfor(int i = 2; i <= rowIndex; i++){\n\t\t\tint last = res.get(res.size() - 1);\n\t\t\tint lastLast = res.get(res.size() - 2);\n\t\t\tres.add(last + lastLast);\n\t\t\tfor(int j = res.size() - 2; j > 0; j--){\n\t\t\t\tint temp = res.get(j);\n\t\t\t\tres.set(j, temp + res.get(j - 1));\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tList<List<Integer>> generate(int numRows) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (numRows == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tresult.add(new ArrayList<Integer>());\n\t\tresult.get(0).add(1);\n\t\tfor (int i = 1; i < numRows; i++) {\n\t\t\tList<Integer> row = new ArrayList<Integer>();\n\t\t\trow.add(1);\n\t\t\tfor (int j = 1; j < i; j++) {\n\t\t\t\trow.add(result.get(i - 1).get(j - 1) + result.get(i - 1).get(j));\n\t\t\t}\n\t\t\trow.add(1);\n\t\t\tresult.add(row);\n\t\t}\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1158",
        "source": "leetcodeTitles",
        "source_id": "2034",
        "url": "https://leetcode.com/problems/stock-price-fluctuation/",
        "language": "java",
        "query": "Stock Price Fluctuation",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tdouble price = Double.parseDouble(args[0]);\n\t\tdouble fluctuation = Double.parseDouble(args[1]);\n\t\tdouble newPrice = price + (price * fluctuation / 100);\n\t\tSystem.out.println(newPrice);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble price = Double.parseDouble(args[0]);\n\t\tdouble fluctuation = Double.parseDouble(args[1]);\n\t\tdouble newPrice = price + (price * fluctuation);\n\t\tSystem.out.println(newPrice);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble price = Double.parseDouble(args[0]);\n\t\tdouble fluctuation = Double.parseDouble(args[1]);\n\t\tdouble priceFluctuation = price * (1 + fluctuation);\n\t\tSystem.out.println(priceFluctuation);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble stockPrice = 10.0;\n\t\tdouble fluctuation = 0.5;\n\t\tdouble newPrice = stockPrice + (stockPrice * fluctuation);\n\t\tSystem.out.println(\"The new price is \" + newPrice);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble[] prices = {\n\t\t\t\t12.20,\n\t\t\t\t12.10,\n\t\t\t\t12.30,\n\t\t\t\t12.40,\n\t\t\t\t12.25,\n\t\t\t\t12.15,\n\t\t\t\t12.35,\n\t\t\t\t12.45,\n\t\t\t\t12.60,\n\t\t\t\t12.70,\n\t\t\t\t12.85,\n\t\t\t\t12.95,\n\t\t\t\t13.05,\n\t\t\t\t13.15,\n\t\t\t\t13.25,\n\t\t\t\t13.35,\n\t\t\t\t13.45,\n\t\t\t\t13.55,\n\t\t\t\t13.65,\n\t\t\t\t13.75,\n\t\t\t\t13.85,\n\t\t\t\t13.95,\n\t\t\t\t14.05,\n\t\t\t\t14.15,\n\t\t\t\t14.25,\n\t\t\t\t14.35,\n\t\t\t\t14.45,\n\t\t\t\t14.55,\n\t\t\t\t14.65,\n\t\t\t\t14.75,\n\t\t\t\t14.85,\n\t\t\t\t14.95,\n\t\t\t\t15.05,\n\t\t\t\t15.15,\n\t\t\t\t15.25,\n\t\t\t\t15.35,\n\t\t\t\t15.45,\n\t\t\t\t15.55,\n\t\t\t\t15.65,\n\t\t\t\t15.75,\n\t\t\t\t15.85,\n\t\t\t\t15.95,\n\t\t\t\t16.05,\n\t\t\t\t16.15,\n\t\t\t\t16.25,\n\t\t\t\t16.35,\n\t\t\t\t16.45,\n\t\t\t\t16.55,\n\t\t\t\t16.65,\n\t\t\t\t16.75,\n\t\t\t\t16.85,\n\t\t\t\t16.95,\n\t\t\t\t17.05,\n"
        ],
        "results": 10
    },
    {
        "id": "1159",
        "source": "leetcodeTitles",
        "source_id": "2192",
        "url": "https://leetcode.com/problems/all-ancestors-of-a-node-in-a-directed-acyclic-graph/",
        "language": "java",
        "query": "All Ancestors of a Node in a Directed Acyclic Graph",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tGraph g = new Graph(5);\n\t\tg.addEdge(0, 1);\n\t\tg.addEdge(0, 2);\n\t\tg.addEdge(1, 3);\n\t\tg.addEdge(2, 4);\n\t\tSystem.out.println(\"Following are all ancestors of 2\");\n\t\tg.printAncestors(2);\n\t}\n}\n",
            "\tvoid method(){\n\t\tSystem.out.println(\"Hello\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1160",
        "source": "leetcodeTitles",
        "source_id": "1590",
        "url": "https://leetcode.com/problems/make-sum-divisible-by-p/",
        "language": "java",
        "query": "Make Sum Divisible by P",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(a[i] + a[j] % k == 0){\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(a[i] + a[j] % k == 0){\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif((a[i] + a[j]) % k == 0){\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint p = Integer.parseInt(args[1]);\n\t\tint sum = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tsum += i;\n\t\t}\n\t\tif(sum % p == 0){\n\t\t\tSystem.out.println(sum);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(sum + p - sum % p);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1161",
        "source": "leetcodeTitles",
        "source_id": "478",
        "url": "https://leetcode.com/problems/generate-random-point-in-a-circle/",
        "language": "java",
        "query": "Generate Random Point in a Circle",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tRandom r = new Random();\n\t\tdouble x = r.nextDouble();\n\t\tdouble y = r.nextDouble();\n\t\tdouble radius = 1;\n\t\tif(x*x + y*y <= radius*radius){\n\t\t\tSystem.out.println(\"Inside the circle\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Outside the circle\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble x = Math.random();\n\t\tdouble y = Math.random();\n\t\tdouble r = Math.sqrt(x*x + y*y);\n\t\tif(r <= 1){\n\t\t\tSystem.out.println(\"Inside the circle\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Outside the circle\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble x,y;\n\t\tx=Math.random();\n\t\ty=Math.random();\n\t\tif(x*x+y*y<=1){\n\t\t\tSystem.out.println(\"The point is in the circle\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"The point is not in the circle\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble x,y;\n\t\tx=Math.random();\n\t\ty=Math.random();\n\t\tif(x*x+y*y<=1){\n\t\t\tSystem.out.println(\"(\"+x+\",\"+y+\") is in the circle\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"(\"+x+\",\"+y+\") is not in the circle\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble x,y;\n\t\tdouble r=1;\n\t\tdouble pi=3.14;\n\t\tdouble r2=r*r;\n\t\tdouble r2pi=r2*pi;\n\t\tdouble x2,y2;\n\t\tdouble x2y2;\n\t\tdouble x2y2r2pi;\n\t\tdouble x2y2r2pi2;\n\t\tdouble x2y2r2pi3;\n\t\tdouble x2y2r2pi4;\n\t\tdouble x2y2r2pi5;\n\t\tdouble x2y2r2pi6;\n\t\tdouble x2y2r2pi7;\n\t\tdouble x2y2r2pi8;\n\t\tdouble x2y2r2pi9;\n\t\tdouble x2y2r2pi10;\n\t\tdouble x2y2r2pi11;\n\t\tdouble x2y2r2pi12;\n\t\tdouble x2y2r2pi13;\n\t\tdouble x2y2r2pi14;\n\t\tdouble x2y2r2pi15;\n\t\tdouble x2y2r2pi16;\n\t\tdouble x2y2r2pi17;\n\t\tdouble x2y2r2pi18;\n\t\tdouble x2y2r2pi19;\n\t\tdouble x2y2r2pi20;\n\t\tdouble x2y2r2pi21;\n\t\tdouble x2y2r2pi22;\n\t\tdouble x2y2r2pi23;\n\t\tdouble x2y2r2pi24;\n\t\tdouble x2y2r2pi25;\n\t\tdouble x2y2r2pi26;\n\t\tdouble x2y2r2pi27;\n\t\tdouble x2y2r2pi28;\n\t\tdouble x2y2r2pi29;\n\t\tdouble x2y2r2pi30;\n\t\tdouble x2y2r2pi31;\n\t\tdouble x2y2r2pi32;\n\t\tdouble x2\n",
            "\tstatic void main(String[] args){\n\t\tdouble x,y;\n\t\tdouble r = 1;\n\t\tdouble pi = 3.14159;\n\t\tdouble rand = Math.random();\n\t\tx = r*Math.cos(2*pi*rand);\n\t\ty = r*Math.sin(2*pi*rand);\n\t\tSystem.out.println(\"x = \"+x+\" y = \"+y);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble x,y,radius;\n\t\tradius=1;\n\t\tx=Math.random()*2*radius-radius;\n\t\ty=Math.random()*2*radius-radius;\n\t\tif(x*x+y*y<=radius*radius){\n\t\t\tSystem.out.println(\"(\"+x+\",\"+y+\")\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"(\"+x+\",\"+y+\")\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble x, y, r;\n\t\tr = 1;\n\t\tx = Math.random() * 2 * r - r;\n\t\ty = Math.random() * 2 * r - r;\n\t\tif(x * x + y * y <= r * r){\n\t\t\tSystem.out.println(\"(\" + x + \", \" + y + \") is in the circle\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"(\" + x + \", \" + y + \") is not in the circle\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble x,y;\n\t\tdouble r=1;\n\t\tdouble pi=3.14;\n\t\tdouble d=2*r;\n\t\tdouble area=pi*r*r;\n\t\tdouble circumference=2*pi*r;\n\t\tdouble random=Math.random();\n\t\tdouble random2=Math.random();\n\t\tdouble random3=Math.random();\n\t\tdouble random4=Math.random();\n\t\tdouble random5=Math.random();\n\t\tdouble random6=Math.random();\n\t\tdouble random7=Math.random();\n\t\tdouble random8=Math.random();\n\t\tdouble random9=Math.random();\n\t\tdouble random10=Math.random();\n\t\tdouble random11=Math.random();\n\t\tdouble random12=Math.random();\n\t\tdouble random13=Math.random();\n\t\tdouble random14=Math.random();\n\t\tdouble random15=Math.random();\n\t\tdouble random16=Math.random();\n\t\tdouble random17=Math.random();\n\t\tdouble random18=Math.random();\n\t\tdouble random19=Math.random();\n\t\tdouble random20=Math.random();\n\t\tdouble random21=Math.random();\n\t\tdouble random22=Math.random();\n\t\tdouble random23=Math.random();\n\t\tdouble random24=Math.random();\n\t\tdouble random25=Math.random();\n\t\tdouble random26=Math.random();\n\t\tdouble random27=Math.random();\n\t\tdouble random28=Math.random();\n\t\tdouble random29=Math.random();\n\t\tdouble random30=Math.random();\n\t\tdouble random31=Math.random();\n\t\tdouble random32=Math.random();\n\t\tdouble random33=Math.random();\n\t\tdouble random34=Math.random();\n\t\tdouble random35=Math.random();\n\t\tdouble random36=Math.random();\n\t\tdouble random37=Math.random();\n\t\tdouble random38=Math.random();\n\t\tdouble random39=Math.random();\n",
            "\tstatic void main(String[] args){\n\t\tdouble x,y;\n\t\tdouble r=1;\n\t\tdouble pi=3.14;\n\t\tdouble d=2*r;\n\t\tdouble area=pi*r*r;\n\t\tdouble circum=2*pi*r;\n\t\tdouble rand=Math.random();\n\t\tdouble rand1=Math.random();\n\t\tdouble rand2=Math.random();\n\t\tdouble rand3=Math.random();\n\t\tdouble rand4=Math.random();\n\t\tdouble rand5=Math.random();\n\t\tdouble rand6=Math.random();\n\t\tdouble rand7=Math.random();\n\t\tdouble rand8=Math.random();\n\t\tdouble rand9=Math.random();\n\t\tdouble rand10=Math.random();\n\t\tdouble rand11=Math.random();\n\t\tdouble rand12=Math.random();\n\t\tdouble rand13=Math.random();\n\t\tdouble rand14=Math.random();\n\t\tdouble rand15=Math.random();\n\t\tdouble rand16=Math.random();\n\t\tdouble rand17=Math.random();\n\t\tdouble rand18=Math.random();\n\t\tdouble rand19=Math.random();\n\t\tdouble rand20=Math.random();\n\t\tdouble rand21=Math.random();\n\t\tdouble rand22=Math.random();\n\t\tdouble rand23=Math.random();\n\t\tdouble rand24=Math.random();\n\t\tdouble rand25=Math.random();\n\t\tdouble rand26=Math.random();\n\t\tdouble rand27=Math.random();\n\t\tdouble rand28=Math.random();\n\t\tdouble rand29=Math.random();\n\t\tdouble rand30=Math.random();\n\t\tdouble rand31=Math.random();\n\t\tdouble rand32=Math.random();\n\t\tdouble rand33=Math.random();\n\t\tdouble rand34=Math.random();\n\t\tdouble rand35=Math.random();\n\t\tdouble rand36=Math.random();\n\t\tdouble rand37=Math.random();\n\t\tdouble rand38=Math.random();\n"
        ],
        "results": 10
    },
    {
        "id": "1162",
        "source": "leetcodeTitles",
        "source_id": "1073",
        "url": "https://leetcode.com/problems/adding-two-negabinary-numbers/",
        "language": "java",
        "query": "Adding Two Negabinary Numbers",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint a = -1;\n\t\tint b = -2;\n\t\tint c = a + b;\n\t\tSystem.out.println(c);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,1,1,1,1,1,1,1,1,1};\n\t\tint[] b = {1,1,1,1,1,1,1,1,1,1};\n\t\tint[] c = new int[10];\n\t\tint carry = 0;\n\t\tfor(int i = 9; i >= 0; i--){\n\t\t\tint sum = a[i] + b[i] + carry;\n\t\t\tif(sum == 3){\n\t\t\t\tc[i] = 1;\n\t\t\t\tcarry = 1;\n\t\t\t}\n\t\t\telse if(sum == 2){\n\t\t\t\tc[i] = 0;\n\t\t\t\tcarry = 1;\n\t\t\t}\n\t\t\telse if(sum == 1){\n\t\t\t\tc[i] = 1;\n\t\t\t\tcarry = 0;\n\t\t\t}\n\t\t\telse if(sum == 0){\n\t\t\t\tc[i] = 0;\n\t\t\t\tcarry = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tSystem.out.print(c[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n+m];\n\t\tint carry = 0;\n\t\tfor(int i = 0; i < n+m; i++){\n\t\t\tint sum = a[i] + b[i] + carry;\n\t\t\tc[i] = sum % 2;\n\t\t\tcarry = sum / 2;\n\t\t}\n\t\tfor(int i = n+m-1; i >= 0; i--){\n\t\t\tSystem.out.print(c[i]);\n\t\t}\n\t}\n}\n"
        ],
        "results": 7
    },
    {
        "id": "1163",
        "source": "leetcodeTitles",
        "source_id": "817",
        "url": "https://leetcode.com/problems/linked-list-components/",
        "language": "java",
        "query": "Linked List Components",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tLinkedList<String> list = new LinkedList<String>();\n\t\tlist.add(\"Hello\");\n\t\tlist.add(\"World\");\n\t\tlist.add(\"!\");\n\t\tSystem.out.println(list);\n\t\tSystem.out.println(list.get(1));\n\t\tSystem.out.println(list.remove(1));\n\t\tSystem.out.println(list);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tLinkedList<String> list = new LinkedList<String>();\n\t\tlist.add(\"A\");\n\t\tlist.add(\"B\");\n\t\tlist.add(\"C\");\n\t\tlist.add(\"D\");\n\t\tlist.add(\"E\");\n\t\tlist.add(\"F\");\n\t\tlist.add(\"G\");\n\t\tlist.add(\"H\");\n\t\tlist.add(\"I\");\n\t\tlist.add(\"J\");\n\t\tlist.add(\"K\");\n\t\tlist.add(\"L\");\n\t\tlist.add(\"M\");\n\t\tlist.add(\"N\");\n\t\tlist.add(\"O\");\n\t\tlist.add(\"P\");\n\t\tlist.add(\"Q\");\n\t\tlist.add(\"R\");\n\t\tlist.add(\"S\");\n\t\tlist.add(\"T\");\n\t\tlist.add(\"U\");\n\t\tlist.add(\"V\");\n\t\tlist.add(\"W\");\n\t\tlist.add(\"X\");\n\t\tlist.add(\"Y\");\n\t\tlist.add(\"Z\");\n\t\tlist.add(\"AA\");\n\t\tlist.add(\"BB\");\n\t\tlist.add(\"CC\");\n\t\tlist.add(\"DD\");\n\t\tlist.add(\"EE\");\n\t\tlist.add(\"FF\");\n\t\tlist.add(\"GG\");\n\t\tlist.add(\"HH\");\n\t\tlist.add(\"II\");\n\t\tlist.add(\"JJ\");\n\t\tlist.add(\"KK\");\n\t\tlist.add(\"LL\");\n\t\tlist.add(\"MM\");\n\t\tlist.add(\"NN\");\n\t\tlist.add(\"OO\");\n\t\tlist.add(\"PP\");\n\t\tlist.add(\"QQ\");\n\t\tlist.add(\"RR\");\n\t\tlist.add(\"SS\");\n\t\tlist.add(\"TT\");\n\t\tlist.add(\"UU\");\n\t\tlist.add(\"VV\");\n\t\tlist.add(\"WW\");\n\t\tlist.add(\"XX\");\n\t\tlist.add(\"YY\");\n\t\tlist.add(\"ZZ\");\n",
            "\t\tNode head;\n\t\tNode tail;\n\t\tint size;\n\t\tpublic Clazz(){\n\t\t\thead = null;\n\t\t\ttail = null;\n\t\t\tsize = 0;\n\t\t}\n\t\tpublic void add(int data){\n\t\t\tNode newNode = new Node(data);\n\t\t\tif(head == null){\n\t\t\t\thead = newNode;\n\t\t\t\ttail = newNode;\n\t\t\t}else{\n\t\t\t\ttail.next = newNode;\n\t\t\t\ttail = newNode;\n\t\t\t}\n\t\t\tsize++;\n\t\t}\n\t\tpublic void add(int index, int data){\n\t\t\tNode newNode = new Node(data);\n\t\t\tif(index == 0){\n\t\t\t\tnewNode.next = head;\n\t\t\t\thead = newNode;\n\t\t\t}else{\n\t\t\t\tNode temp = head;\n\t\t\t\tfor(int i = 0; i < index - 1; i++){\n\t\t\t\t\ttemp = temp.next;\n\t\t\t\t}\n\t\t\t\tnewNode.next = temp.next;\n\t\t\t\ttemp.next = newNode;\n\t\t\t}\n\t\t\tsize++;\n\t\t}\n\t\tpublic void remove(int index){\n\t\t\tif(index == 0){\n\t\t\t\thead = head.next;\n\t\t\t}else{\n\t\t\t\tNode temp = head;\n\t\t\t\tfor(int i = 0; i < index - 1; i++){\n\t\t\t\t\ttemp = temp.next;\n\t\t\t\t}\n\t\t\t\ttemp.next = temp.next.next;\n\t\t\t}\n\t\t\tsize--;\n\t\t}\n\t\tpublic void remove(int data){\n\t\t\tNode temp = head;\n\t\t\twhile(temp != null){\n\t\t\t\tif(temp.data == data){\n\t\t\t\t\tif(temp == head){\n\t\t\t\t\t\thead = head.next;\n\t\t\t\t\t}else{\n",
            "\t\tNode head;\n\t\tNode tail;\n\t\tint size;\n\t\t\n\t\tpublic Clazz(){\n\t\t\thead = null;\n\t\t\ttail = null;\n\t\t\tsize = 0;\n\t\t}\n\t\t\n\t\tpublic void add(int data){\n\t\t\tNode newNode = new Node(data);\n\t\t\tif(head == null){\n\t\t\t\thead = newNode;\n\t\t\t\ttail = newNode;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttail.next = newNode;\n\t\t\t\ttail = newNode;\n\t\t\t}\n\t\t\tsize++;\n\t\t}\n\t\t\n\t\tpublic void add(int data, int index){\n\t\t\tNode newNode = new Node(data);\n\t\t\tif(index == 0){\n\t\t\t\tnewNode.next = head;\n\t\t\t\thead = newNode;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tNode temp = head;\n\t\t\t\tfor(int i = 0; i < index - 1; i++){\n\t\t\t\t\ttemp = temp.next;\n\t\t\t\t}\n\t\t\t\tnewNode.next = temp.next;\n\t\t\t\ttemp.next = newNode;\n\t\t\t}\n\t\t\tsize++;\n\t\t}\n\t\t\n\t\tpublic void remove(int index){\n\t\t\tif(index == 0){\n\t\t\t\thead = head.next;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tNode temp = head;\n\t\t\t\tfor(int i = 0; i < index - 1; i++){\n\t\t\t\t\ttemp = temp.next;\n\t\t\t\t}\n\t\t\t\ttemp.next = temp.next.next;\n\t\t\t}\n\t\t\tsize--;\n\t\t}\n\t\t\n\t\tpublic void remove(int index, int num){\n\t\t\tif(index == 0){\n\t\t\t\thead = head.next;\n\t\t\t}\n\t\t\telse{\n",
            "\t\tint data;\n\t\tClazz next;\n\t\tClazz(int data){\n\t\t\tthis.data = data;\n\t\t\tthis.next = null;\n\t\t}\n\t\tClazz(int data, Clazz next){\n\t\t\tthis.data = data;\n\t\t\tthis.next = next;\n\t\t}\n\t\tpublic void print(){\n\t\t\tSystem.out.println(data);\n\t\t\tif(next != null){\n\t\t\t\tnext.print();\n\t\t\t}\n\t\t}\n\t\tpublic void printReverse(){\n\t\t\tif(next != null){\n\t\t\t\tnext.printReverse();\n\t\t\t}\n\t\t\tSystem.out.println(data);\n\t\t}\n\t\tpublic void printReverse(Clazz head){\n\t\t\tif(head.next != null){\n\t\t\t\tprintReverse(head.next);\n\t\t\t}\n\t\t\tSystem.out.println(head.data);\n\t\t}\n\t\tpublic void printReverse(Clazz head, int n){\n\t\t\tif(n == 0){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprintReverse(head.next, n-1);\n\t\t\tSystem.out.println(head.data);\n\t\t}\n\t\tpublic void printReverse(Clazz head, int n, int m){\n\t\t\tif(n == 0){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprintReverse(head.next, n-1, m);\n\t\t\tif(n <= m){\n\t\t\t\tSystem.out.println(head.data);\n\t\t\t}\n\t\t}\n\t\tpublic void printReverse(Clazz head, int n, int m, int[] arr){\n\t\t\tif(n == 0){\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprintReverse(head.next, n-1, m, arr);\n\t\t\tif(n <= m){\n\t\t\t\tarr[n\n",
            "\tClazz(int i){\n\t\tSystem.out.println(\"Clazz constructor\");\n\t}\n\tpublic void print(){\n\t\tSystem.out.println(\"Clazz print\");\n\t}\n}\n",
            "\t\tint data;\n\t\tClazz next;\n\t\tClazz(int data){\n\t\t\tthis.data = data;\n\t\t}\n\t\tpublic void print(){\n\t\t\tSystem.out.println(data);\n\t\t}\n}\n",
            "\t\tint value;\n\t\tClazz next;\n\t\tClazz(int value){\n\t\t\tthis.value = value;\n\t\t\tthis.next = null;\n\t\t}\n\t\tClazz(int value, Clazz next){\n\t\t\tthis.value = value;\n\t\t\tthis.next = next;\n\t\t}\n\t\tpublic String toString(){\n\t\t\treturn \"(\" + value + \",\" + next + \")\";\n\t\t}\n\t\tpublic void add(Clazz c){\n\t\t\tClazz temp = this;\n\t\t\twhile(temp.next != null){\n\t\t\t\ttemp = temp.next;\n\t\t\t}\n\t\t\ttemp.next = c;\n\t\t}\n\t\tpublic void add(int value){\n\t\t\tClazz c = new Clazz(value);\n\t\t\tadd(c);\n\t\t}\n\t\tpublic void add(int value, Clazz next){\n\t\t\tClazz c = new Clazz(value, next);\n\t\t\tadd(c);\n\t\t}\n\t\tpublic void add(int value, int next){\n\t\t\tClazz c = new Clazz(value, next);\n\t\t\tadd(c);\n\t\t}\n\t\tpublic void add(int value, int next, int nextnext){\n\t\t\tClazz c = new Clazz(value, next, nextnext);\n\t\t\tadd(c);\n\t\t}\n\t\tpublic void add(int value, int next, int nextnext, int nextnextnext){\n\t\t\tClazz c = new Clazz(value, next, nextnext, nextnextnext);\n\t\t\tadd(c);\n\t\t}\n\t\tpublic void add(int value, int next, int nextnext, int nextnextnext, int nextnextnextnext){\n\t\t\tClazz c = new Clazz(value, next, nextnext, nextnextnext, nextnextnextnext);\n\t\t\tadd(c);\n\t\t}\n\t\tpublic void add(int value, int next, int nextnext, int nextnextnext, int nextnextnextnext, int nextnextnext\n",
            "\tClazz(int i){\n\t\tSystem.out.println(\"Clazz.Clazz(\"+i+\")\");\n\t}\n\tpublic void method(){\n\t\tSystem.out.println(\"Clazz.method()\");\n\t}\n}\n",
            "\t\tClazz(String name, String description, String[] methods){\n\t\t\tthis.name = name;\n\t\t\tthis.description = description;\n\t\t\tthis.methods = methods;\n\t\t}\n\t\tString name;\n\t\tString description;\n\t\tString[] methods;\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1164",
        "source": "leetcodeTitles",
        "source_id": "1418",
        "url": "https://leetcode.com/problems/display-table-of-food-orders-in-a-restaurant/",
        "language": "java",
        "query": "Display Table of Food Orders in a Restaurant",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(\"Food Order Table\");\n\t\tSystem.out.println(\"Food\\t\\tPrice\");\n\t\tSystem.out.println(\"Pizza\\t\\t$10.00\");\n\t\tSystem.out.println(\"Pasta\\t\\t$8.00\");\n\t\tSystem.out.println(\"Salad\\t\\t$5.00\");\n\t\tSystem.out.println(\"Sandwich\\t$7.00\");\n\t\tSystem.out.println(\"Coffee\\t\\t$3.00\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(\"Food Order Table\");\n\t\tSystem.out.println(\"Food\\t\\tPrice\");\n\t\tSystem.out.println(\"Pizza\\t\\t$5.00\");\n\t\tSystem.out.println(\"Pasta\\t\\t$6.00\");\n\t\tSystem.out.println(\"Salad\\t\\t$4.00\");\n\t\tSystem.out.println(\"Sandwich\\t$3.00\");\n\t\tSystem.out.println(\"Coffee\\t\\t$2.00\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(\"Food Order Table\");\n\t\tSystem.out.println(\"Item\\t\\tPrice\");\n\t\tSystem.out.println(\"Pizza\\t\\t$5.00\");\n\t\tSystem.out.println(\"Burger\\t\\t$6.00\");\n\t\tSystem.out.println(\"Sandwich\\t$7.00\");\n\t\tSystem.out.println(\"Salad\\t\\t$8.00\");\n\t\tSystem.out.println(\"Drink\\t\\t$9.00\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] foodOrder = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] foodPrice = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodQuantity = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] foodTotal = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTax = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTotalWithTax = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTotalWithTaxAndTip = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTip = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTipPercent = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTipTotal = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTipTotalPercent = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTipTotalPercentTotal = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTipTotalPercentTotalTotal = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTipTotalPercentTotalTotalTotal = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTipTotalPercentTotalTotalTotalTotal = {10,20,30,40,50,60,70,80,90,100};\n\t\tint[] foodTipTotalPercentTotalTotalTotalTotalTotal = {10,20,30,40,50,60\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(\"Food Order Table\");\n\t\tSystem.out.println(\"Item\\t\\t\\tPrice\");\n\t\tSystem.out.println(\"Pizza\\t\\t\\t$10.00\");\n\t\tSystem.out.println(\"Pasta\\t\\t\\t$8.00\");\n\t\tSystem.out.println(\"Salad\\t\\t\\t$5.00\");\n\t\tSystem.out.println(\"Sandwich\\t\\t$7.00\");\n\t\tSystem.out.println(\"Drink\\t\\t\\t$2.00\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] foodOrders = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tfor(int i = 0; i < foodOrders.length; i++){\n\t\t\tfor(int j = 0; j < foodOrders[i].length; j++){\n\t\t\t\tSystem.out.print(foodOrders[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] food = {\"Pizza\", \"Burger\", \"Fries\", \"Coke\", \"Coffee\"};\n\t\tint[] quantity = {1, 2, 3, 4, 5};\n\t\tdouble[] price = {10.0, 20.0, 30.0, 40.0, 50.0};\n\t\tdouble[] total = {10.0, 20.0, 30.0, 40.0, 50.0};\n\t\tint i;\n\t\tSystem.out.println(\"Food\\tQuantity\\tPrice\\tTotal\");\n\t\tfor(i = 0; i < food.length; i++){\n\t\t\tSystem.out.println(food[i] + \"\\t\" + quantity[i] + \"\\t\" + price[i] + \"\\t\" + total[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] food = {\"Pizza\", \"Pasta\", \"Salad\", \"Soup\", \"Sandwich\", \"Steak\", \"Burger\"};\n\t\tint[] price = {10, 15, 20, 25, 30, 35, 40};\n\t\tint[] quantity = {1, 2, 3, 4, 5, 6, 7};\n\t\tint[] total = new int[food.length];\n\t\tfor(int i = 0; i < food.length; i++){\n\t\t\ttotal[i] = price[i] * quantity[i];\n\t\t}\n\t\tSystem.out.println(\"Food\\t\\tPrice\\tQuantity\\tTotal\");\n\t\tfor(int i = 0; i < food.length; i++){\n\t\t\tSystem.out.println(food[i] + \"\\t\\t\" + price[i] + \"\\t\\t\" + quantity[i] + \"\\t\\t\" + total[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] food = {\"Pizza\", \"Pasta\", \"Salad\", \"Steak\", \"Chicken\", \"Bacon\"};\n\t\tint[] price = {10, 15, 20, 25, 30, 35};\n\t\tint[] quantity = {1, 2, 3, 4, 5, 6};\n\t\tint[] total = {10, 15, 20, 25, 30, 35};\n\t\tint[] tax = {1, 2, 3, 4, 5, 6};\n\t\tint[] subtotal = {10, 15, 20, 25, 30, 35};\n\t\tint[] totalWithTax = {10, 15, 20, 25, 30, 35};\n\t\tint[] totalWithTip = {10, 15, 20, 25, 30, 35};\n\t\tint[] tip = {1, 2, 3, 4, 5, 6};\n\t\tint[] tipPercent = {1, 2, 3, 4, 5, 6};\n\t\tint[] tipAmount = {1, 2, 3, 4, 5, 6};\n\t\tint[] tipTotal = {1, 2, 3, 4, 5, 6};\n\t\tint[] tipTotalPercent = {1, 2, 3, 4, 5, 6};\n\t\tint[] tipTotalAmount = {1, 2, 3, 4, 5, 6};\n\t\tint[] totalWithTipTotal = {1, 2, 3, 4, 5, 6};\n\t\tint[] totalWithTipTotalPercent = {1, 2, 3, 4, 5, 6};\n\t\tint[] totalWithTipTotalAmount = {1, 2, 3, 4, 5, 6};\n\t\tint[] totalWithTipTotalTotal = {1, 2, 3, 4, 5, 6};\n\t\tint[] totalWithTipTotalTotalPercent = {1, 2, 3, 4, 5, 6};\n\t\tint[] totalWithTipTotalTotalAmount = {1, 2, 3, 4, 5, 6};\n\t\tint[] totalWithTipTotalTotalTotal = {1, 2, 3, 4, 5, 6};\n\t\tint[] totalWithTipTotalTotalTotalPercent = {1, 2\n",
            "\tstatic void main(String[] args){\n\t\tString[] food = {\"Pizza\", \"Hotdog\", \"Burger\", \"Fries\", \"Coke\", \"Pepsi\", \"Coffee\", \"Tea\", \"Cake\"};\n\t\tint[] quantity = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n\t\tdouble[] price = {10.00, 11.00, 12.00, 13.00, 14.00, 15.00, 16.00, 17.00, 18.00};\n\t\tdouble[] total = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n\t\tdouble[] tax = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n\t\tdouble[] subtotal = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n\t\tdouble[] grandtotal = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n\t\tdouble[] taxrate = {0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08, 0.08};\n\t\tdouble[] taxrate2 = {0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06};\n\t\tdouble[] taxrate3 = {0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04, 0.04};\n\t\tdouble[] taxrate4 = {0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02};\n\t\tdouble[] taxrate5 = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00};\n\t\tdouble[] taxrate6 = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.\n"
        ],
        "results": 10
    },
    {
        "id": "1165",
        "source": "leetcodeTitles",
        "source_id": "1093",
        "url": "https://leetcode.com/problems/statistics-from-a-large-sample/",
        "language": "java",
        "query": "Statistics from a Large Sample",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = StdRandom.uniform(0, n);\n\t\t}\n\t\tStdOut.println(\"a = \" + Arrays.toString(a));\n\t\tStdOut.println(\"mean = \" + mean(a));\n\t\tStdOut.println(\"stddev = \" + stddev(a, mean(a)));\n\t\tStdOut.println(\"median = \" + median(a));\n\t\tStdOut.println(\"min = \" + min(a));\n\t\tStdOut.println(\"max = \" + max(a));\n\t}\n\tpublic static double mean(int[] a){\n\t\tdouble sum = 0.0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\treturn sum / a.length;\n\t}\n\tpublic static double stddev(int[] a, double mean){\n\t\tdouble sum = 0.0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += (a[i] - mean) * (a[i] - mean);\n\t\t}\n\t\treturn Math.sqrt(sum / a.length);\n\t}\n\tpublic static double median(int[] a){\n\t\tint[] b = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tb[i] = a[i];\n\t\t}\n\t\tArrays.sort(b);\n\t\tif(b.length % 2 == 0){\n\t\t\treturn (b[b.length / 2] + b[b.length / 2 - 1]) / 2.0;\n\t\t}\n\t\telse{\n\t\t\treturn b[b.length / 2];\n\t\t}\n\t}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\tSystem.out.println(\"Sum: \" + sum);\n\t\tSystem.out.println(\"Average: \" + (double)sum/a.length);\n\t\tint max = a[0];\n\t\tint min = a[0];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max: \" + max);\n\t\tSystem.out.println(\"Min: \" + min);\n\t\tint sum2 = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum2 += a[i]*a[i];\n\t\t}\n\t\tSystem.out.println(\"Sum of squares: \" + sum2);\n\t\tSystem.out.println(\"Mean of squares: \" + (double)sum2/a.length);\n\t\tint sum3 = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum3 += a[i]*a[i]*a[i];\n\t\t}\n\t\tSystem.out.println(\"Sum of cubes: \" + sum3);\n\t\tSystem.out.println(\"Mean of cubes: \" + (double)sum3/a.length);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\tSystem.out.println(sum);\n\t\tdouble mean = sum / a.length;\n\t\tSystem.out.println(mean);\n\t\tdouble sum2 = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum2 += Math.pow(a[i] - mean, 2);\n\t\t}\n\t\tdouble std = Math.sqrt(sum2 / a.length);\n\t\tSystem.out.println(std);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint N = Integer.parseInt(args[0]);\n\t\tint[] a = new int[N];\n\t\tfor(int i = 0; i < N; i++){\n\t\t\ta[i] = StdRandom.uniform(0, N);\n\t\t}\n\t\tStdOut.println(\"a = \" + Arrays.toString(a));\n\t\tStdOut.println(\"mean = \" + mean(a));\n\t\tStdOut.println(\"stddev = \" + stddev(a, mean(a)));\n\t\tStdOut.println(\"median = \" + median(a));\n\t\tStdOut.println(\"min = \" + min(a));\n\t\tStdOut.println(\"max = \" + max(a));\n\t}\n\tpublic static double mean(int[] a){\n\t\tdouble sum = 0.0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\treturn sum / a.length;\n\t}\n\tpublic static double stddev(int[] a, double mean){\n\t\tdouble sum = 0.0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += (a[i] - mean) * (a[i] - mean);\n\t\t}\n\t\treturn Math.sqrt(sum / a.length);\n\t}\n\tpublic static double median(int[] a){\n\t\tint N = a.length;\n\t\tint[] b = new int[N];\n\t\tfor(int i = 0; i < N; i++){\n\t\t\tb[i] = a[i];\n\t\t}\n\t\tArrays.sort(b);\n\t\tif(N % 2 == 0){\n\t\t\treturn (b[N / 2 - 1] + b[N / 2]) / 2.0;\n\t\t}\n\t\telse{\n\t\t\treturn b[N / 2];\n\t\t}\n\t}\n\tpublic static\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = new int[100];\n\t\tfor(int i = 0; i < 100; i++){\n\t\t\ta[i] = (int)(Math.random() * 100);\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < 100; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\tSystem.out.println(\"Sum: \" + sum);\n\t\tint avg = sum / 100;\n\t\tSystem.out.println(\"Average: \" + avg);\n\t\tint max = a[0];\n\t\tint min = a[0];\n\t\tfor(int i = 0; i < 100; i++){\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max: \" + max);\n\t\tSystem.out.println(\"Min: \" + min);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = new int[100];\n\t\tfor(int i = 0; i < 100; i++){\n\t\t\ta[i] = (int)(Math.random() * 100);\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < 100; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\tint mean = sum / 100;\n\t\tint sum2 = 0;\n\t\tfor(int i = 0; i < 100; i++){\n\t\t\tsum2 += (a[i] - mean) * (a[i] - mean);\n\t\t}\n\t\tint std = (int)Math.sqrt(sum2 / 99);\n\t\tSystem.out.println(\"mean: \" + mean);\n\t\tSystem.out.println(\"std: \" + std);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = 1000000;\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = (int)(Math.random() * n);\n\t\t}\n\t\tint[] j = new int[n];\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = new int[100000];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\ta[i] = (int)(Math.random() * 100);\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\tSystem.out.println(\"Sum: \" + sum);\n\t\tSystem.out.println(\"Mean: \" + (double)sum / a.length);\n\t\tint max = a[0];\n\t\tint min = a[0];\n\t\tfor(int i = 1; i < a.length; i++){\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max: \" + max);\n\t\tSystem.out.println(\"Min: \" + min);\n\t\tint sum2 = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum2 += a[i] * a[i];\n\t\t}\n\t\tSystem.out.println(\"Sum of squares: \" + sum2);\n\t\tSystem.out.println(\"Variance: \" + (double)sum2 / a.length - (double)sum * sum / (a.length * a.length));\n\t\tSystem.out.println(\"Standard deviation: \" + Math.sqrt((double)sum2 / a.length - (double)sum * sum / (a.length * a.length)));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {1,2,3,\n"
        ],
        "results": 10
    },
    {
        "id": "1166",
        "source": "leetcodeTitles",
        "source_id": "500",
        "url": "https://leetcode.com/problems/keyboard-row/",
        "language": "java",
        "query": "Keyboard Row",
        "snippets": [
            "\tstatic String[] findWords(String[] words) {\n\t\tString[] result = new String[words.length];\n\t\tint index = 0;\n\t\tfor (String word : words) {\n\t\t\tif (isValid(word)) {\n\t\t\t\tresult[index++] = word;\n\t\t\t}\n\t\t}\n\t\treturn Arrays.copyOf(result, index);\n\t}\n\t\n\tpublic static boolean isValid(String word) {\n\t\tchar[] chars = word.toCharArray();\n\t\tchar firstChar = chars[0];\n\t\tfor (int i = 1; i < chars.length; i++) {\n\t\t\tif (chars[i] != firstChar) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic String[] findWords(String[] words) {\n\t\tString[] result = new String[words.length];\n\t\tint index = 0;\n\t\tfor(String word : words){\n\t\t\tif(isValid(word)){\n\t\t\t\tresult[index++] = word;\n\t\t\t}\n\t\t}\n\t\treturn Arrays.copyOf(result, index);\n\t}\n\tpublic static boolean isValid(String word){\n\t\tchar[] chars = word.toCharArray();\n\t\tchar first = chars[0];\n\t\tfor(int i = 1; i < chars.length; i++){\n\t\t\tif(first != chars[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic String[] findWords(String[] words) {\n\t\tString[] result = new String[words.length];\n\t\tint index = 0;\n\t\tfor(String word : words){\n\t\t\tif(isValid(word)){\n\t\t\t\tresult[index] = word;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn Arrays.copyOf(result, index);\n\t}\n\tpublic static boolean isValid(String word){\n\t\tchar[] chars = word.toCharArray();\n\t\tchar first = chars[0];\n\t\tfor(int i = 1; i < chars.length; i++){\n\t\t\tif(first != chars[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic String[] findWords(String[] words) {\n\t\tString[] result = new String[words.length];\n\t\tint i = 0;\n\t\tfor (String word : words) {\n\t\t\tif (isValid(word)) {\n\t\t\t\tresult[i++] = word;\n\t\t\t}\n\t\t}\n\t\treturn Arrays.copyOf(result, i);\n\t}\n\tpublic static boolean isValid(String word) {\n\t\tchar[] chars = word.toCharArray();\n\t\tchar first = chars[0];\n\t\tfor (int i = 1; i < chars.length; i++) {\n\t\t\tif (chars[i] != first) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic String[] keyboardRow(String[] words) {\n\t\tString[] keyboard = {\"qwertyuiop\",\"asdfghjkl\",\"zxcvbnm\"};\n\t\tString[] result = new String[words.length];\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tString word = words[i];\n\t\t\tchar first = word.charAt(0);\n\t\t\tint row = 0;\n\t\t\tif(first >= 'a' && first <= 'z'){\n\t\t\t\trow = 0;\n\t\t\t}\n\t\t\telse if(first >= 'A' && first <= 'Z'){\n\t\t\t\trow = 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\trow = 2;\n\t\t\t}\n\t\t\tresult[i] = keyboard[row];\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic String[] keyboardRow(String[] words) {\n\t\tString[] keyboard = {\"qwertyuiop\", \"asdfghjkl\", \"zxcvbnm\"};\n\t\tString[] result = new String[words.length];\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tString word = words[i];\n\t\t\tString first = word.substring(0, 1);\n\t\t\tfor(int j = 0; j < keyboard.length; j++){\n\t\t\t\tif(keyboard[j].contains(first)){\n\t\t\t\t\tresult[i] = keyboard[j];\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic String[] findWords(String[] words) {\n\t\tString[] res = new String[words.length];\n\t\tint i = 0;\n\t\tfor(String word : words){\n\t\t\tif(isValid(word)){\n\t\t\t\tres[i] = word;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn Arrays.copyOf(res, i);\n\t}\n\tpublic static boolean isValid(String word){\n\t\tchar[] chars = word.toCharArray();\n\t\tchar first = chars[0];\n\t\tfor(char c : chars){\n\t\t\tif(c != first && c - 32 != first){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1167",
        "source": "leetcodeTitles",
        "source_id": "1718",
        "url": "https://leetcode.com/problems/construct-the-lexicographically-largest-valid-sequence/",
        "language": "java",
        "query": "Construct the Lexicographically Largest Valid Sequence",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint[] res = new int[n];\n\t\tint[] res2 = new int[n];\n\t\tint[] res3 = new int[n];\n\t\tint[] res4 = new int[n];\n\t\tint[] res5 = new int[n];\n\t\tint[] res6 = new int[n];\n\t\tint[] res7 = new int[n];\n\t\tint[] res8 = new int[n];\n\t\tint[] res9 = new int[n];\n\t\tint[] res10 = new int[n];\n\t\tint[] res11 = new int[n];\n\t\tint[] res12 = new int[n];\n\t\tint[] res13 = new int[n];\n\t\tint[] res14 = new int[n];\n\t\tint[] res15 = new int[n];\n\t\tint[] res16 = new int[n];\n\t\tint[] res17 = new int[n];\n\t\tint[] res18 = new int[n];\n\t\tint[] res19 = new int[n];\n\t\tint[] res20 = new int[n];\n\t\tint[] res21 = new int[n];\n\t\tint[] res22 = new int[n];\n\t\tint[] res23 = new int[n];\n\t\tint[] res24 = new int[n];\n\t\tint[] res25 = new int[n];\n\t\tint[] res26 = new int[n];\n\t\tint[] res27 = new int[n];\n\t\tint[] res28 = new int[n];\n\t\tint[] res29 = new int[n];\n\t\tint[] res30 = new int[n];\n\t\tint[] res31 = new int[n];\n\t\tint[] res32 = new int[n];\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tSystem.out.println(s);\n\t\tSystem.out.println(s.length());\n\t\tSystem.out.println(s.charAt(0));\n\t\tSystem.out.println(s.charAt(1));\n\t\tSystem.out.println(s.charAt(2));\n\t\tSystem.out.println(s.charAt(3));\n\t\tSystem.out.println(s.charAt(4));\n\t\tSystem.out.println(s.charAt(5));\n\t\tSystem.out.println(s.charAt(6));\n\t\tSystem.out.println(s.charAt(7));\n\t\tSystem.out.println(s.charAt(8));\n\t\tSystem.out.println(s.charAt(9));\n\t\tSystem.out.println(s.charAt(10));\n\t\tSystem.out.println(s.charAt(11));\n\t\tSystem.out.println(s.charAt(12));\n\t\tSystem.out.println(s.charAt(13));\n\t\tSystem.out.println(s.charAt(14));\n\t\tSystem.out.println(s.charAt(15));\n\t\tSystem.out.println(s.charAt(16));\n\t\tSystem.out.println(s.charAt(17));\n\t\tSystem.out.println(s.charAt(18));\n\t\tSystem.out.println(s.charAt(19));\n\t\tSystem.out.println(s.charAt(20));\n\t\tSystem.out.println(s.charAt(21));\n\t\tSystem.out.println(s.charAt(22));\n\t\tSystem.out.println(s.charAt(23));\n\t\tSystem.out.println(s.charAt(24));\n\t\tSystem.out.println(s.charAt(25));\n\t\tSystem.out.println(s.charAt(26));\n\t\tSystem.out.println(s.charAt(27));\n\t\tSystem.out.println\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tSystem.out.println(s);\n\t\tSystem.out.println(s.substring(0,1));\n\t\tSystem.out.println(s.substring(1,2));\n\t\tSystem.out.println(s.substring(2,3));\n\t\tSystem.out.println(s.substring(3,4));\n\t\tSystem.out.println(s.substring(4,5));\n\t\tSystem.out.println(s.substring(5,6));\n\t\tSystem.out.println(s.substring(6,7));\n\t\tSystem.out.println(s.substring(7,8));\n\t\tSystem.out.println(s.substring(8,9));\n\t\tSystem.out.println(s.substring(9,10));\n\t\tSystem.out.println(s.substring(10,11));\n\t\tSystem.out.println(s.substring(11,12));\n\t\tSystem.out.println(s.substring(12,13));\n\t\tSystem.out.println(s.substring(13,14));\n\t\tSystem.out.println(s.substring(14,15));\n\t\tSystem.out.println(s.substring(15,16));\n\t\tSystem.out.println(s.substring(16,17));\n\t\tSystem.out.println(s.substring(17,18));\n\t\tSystem.out.println(s.substring(18,19));\n\t\tSystem.out.println(s.substring(19,20));\n\t\tSystem.out.println(s.substring(20,21));\n\t\tSystem.out.println(s.substring(21,22));\n\t\tSystem.out.println(s.substring(22,23));\n\t\tSystem.out.println(s.substring(23,24));\n\t\tSystem.out.println(s.substring(24,25));\n\t\tSystem.out.println(s.substring(25,26));\n",
            "\tstatic String largestSequence(String str){\n\t\tString result = \"\";\n\t\tint len = str.length();\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < len; i++){\n\t\t\tcount[str.charAt(i) - 'a']++;\n\t\t}\n\t\tint[] count2 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount2[i] = count[i];\n\t\t}\n\t\tint[] count3 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount3[i] = count[i];\n\t\t}\n\t\tint[] count4 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount4[i] = count[i];\n\t\t}\n\t\tint[] count5 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount5[i] = count[i];\n\t\t}\n\t\tint[] count6 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount6[i] = count[i];\n\t\t}\n\t\tint[] count7 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount7[i] = count[i];\n\t\t}\n\t\tint[] count8 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount8[i] = count[i];\n\t\t}\n\t\tint[] count9 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount9[i] = count[i];\n\t\t}\n\t\tint[] count10 = new int[26];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount10\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tSystem.out.println(s);\n\t\tString t = \"dcba\";\n\t\tSystem.out.println(t);\n\t\tString r = \"abcd\";\n\t\tSystem.out.println(r);\n\t\tString r2 = \"abcd\";\n\t\tSystem.out.println(r2);\n\t\tString r3 = \"abcd\";\n\t\tSystem.out.println(r3);\n\t\tString r4 = \"abcd\";\n\t\tSystem.out.println(r4);\n\t\tString r5 = \"abcd\";\n\t\tSystem.out.println(r5);\n\t\tString r6 = \"abcd\";\n\t\tSystem.out.println(r6);\n\t\tString r7 = \"abcd\";\n\t\tSystem.out.println(r7);\n\t\tString r8 = \"abcd\";\n\t\tSystem.out.println(r8);\n\t\tString r9 = \"abcd\";\n\t\tSystem.out.println(r9);\n\t\tString r10 = \"abcd\";\n\t\tSystem.out.println(r10);\n\t\tString r11 = \"abcd\";\n\t\tSystem.out.println(r11);\n\t\tString r12 = \"abcd\";\n\t\tSystem.out.println(r12);\n\t\tString r13 = \"abcd\";\n\t\tSystem.out.println(r13);\n\t\tString r14 = \"abcd\";\n\t\tSystem.out.println(r14);\n\t\tString r15 = \"abcd\";\n\t\tSystem.out.println(r15);\n\t\tString r16 = \"abcd\";\n\t\tSystem.out.println(r16);\n\t\tString r17 = \"abcd\";\n\t\tSystem.out.println(r17);\n\t\tString r18 = \"abcd\";\n\t\tSystem.out.println(r18);\n\t\tString r19 = \"abcd\";\n\t\tSystem.out.println(r19);\n\t\tString r20 = \"abcd\";\n",
            "\tstatic String largestSequence(String str){\n\t\tString result = \"\";\n\t\tint max = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = i; j < str.length(); j++){\n\t\t\t\tif(str.charAt(j) == str.charAt(i)){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t\tresult = str.substring(i, i+count);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static void main(String[] args){\n\t\tString str = \"abcabcbb\";\n\t\tSystem.out.println(largestSequence(str));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tString t = \"abd\";\n\t\tSystem.out.println(isValid(s,t));\n\t}\n\tpublic static boolean isValid(String s, String t){\n\t\tif(s.length() != t.length()) return false;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t\tcount[t.charAt(i) - 'a']--;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] != 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tString t = \"abcd\";\n\t\tSystem.out.println(isValid(s,t));\n\t}\n\tpublic static boolean isValid(String s, String t){\n\t\tif(s.length() != t.length()) return false;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t\tcount[t.charAt(i) - 'a']--;\n\t\t}\n\t\tfor(int i = 0; i < count.length; i++){\n\t\t\tif(count[i] != 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abc\";\n\t\tSystem.out.println(s);\n\t\tSystem.out.println(s.length());\n\t\tSystem.out.println(s.charAt(0));\n\t\tSystem.out.println(s.charAt(1));\n\t\tSystem.out.println(s.charAt(2));\n\t\tSystem.out.println(s.charAt(3));\n\t\tSystem.out.println(s.charAt(4));\n\t\tSystem.out.println(s.charAt(5));\n\t\tSystem.out.println(s.charAt(6));\n\t\tSystem.out.println(s.charAt(7));\n\t\tSystem.out.println(s.charAt(8));\n\t\tSystem.out.println(s.charAt(9));\n\t\tSystem.out.println(s.charAt(10));\n\t\tSystem.out.println(s.charAt(11));\n\t\tSystem.out.println(s.charAt(12));\n\t\tSystem.out.println(s.charAt(13));\n\t\tSystem.out.println(s.charAt(14));\n\t\tSystem.out.println(s.charAt(15));\n\t\tSystem.out.println(s.charAt(16));\n\t\tSystem.out.println(s.charAt(17));\n\t\tSystem.out.println(s.charAt(18));\n\t\tSystem.out.println(s.charAt(19));\n\t\tSystem.out.println(s.charAt(20));\n\t\tSystem.out.println(s.charAt(21));\n\t\tSystem.out.println(s.charAt(22));\n\t\tSystem.out.println(s.charAt(23));\n\t\tSystem.out.println(s.charAt(24));\n\t\tSystem.out.println(s.charAt(25));\n\t\tSystem.out.println(s.charAt(26));\n\t\tSystem.out.println(s.charAt(27));\n\t\tSystem.out.println(\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"a0b1c2\";\n\t\tString[] strs = s.split(\"\");\n\t\tint[] nums = new int[strs.length];\n\t\tfor(int i = 0; i < strs.length; i++){\n\t\t\tnums[i] = Integer.parseInt(strs[i]);\n\t\t}\n\t\tint[] res = new int[nums.length];\n\t\tint[] dp = new int[nums.length];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(nums[i] > nums[j] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(dp[i] == max){\n\t\t\t\tres[i] = 1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < res.length; i++){\n\t\t\tSystem.out.print(res[i]);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1168",
        "source": "leetcodeTitles",
        "source_id": "66",
        "url": "https://leetcode.com/problems/plus-one/",
        "language": "java",
        "query": "Plus One",
        "snippets": [
            "\tList<Integer> plusOne(List<Integer> digits) {\n\t\tint i = digits.size() - 1;\n\t\twhile (i >= 0 && digits.get(i) == 9) {\n\t\t\tdigits.set(i, 0);\n\t\t\ti--;\n\t\t}\n\t\tif (i < 0) {\n\t\t\tdigits.add(0, 1);\n\t\t\tdigits.add(1, 0);\n\t\t} else {\n\t\t\tdigits.set(i, digits.get(i) + 1);\n\t\t}\n\t\treturn digits;\n\t}\n}\n",
            "\tList<Integer> plusOne(List<Integer> digits) {\n\t\tint carry = 1;\n\t\tfor(int i = digits.size() - 1; i >= 0; i--){\n\t\t\tint sum = digits.get(i) + carry;\n\t\t\tif(sum > 9){\n\t\t\t\tcarry = 1;\n\t\t\t\tdigits.set(i, sum % 10);\n\t\t\t}else{\n\t\t\t\tcarry = 0;\n\t\t\t\tdigits.set(i, sum);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(carry == 1){\n\t\t\tdigits.add(0, 1);\n\t\t}\n\t\treturn digits;\n\t}\n}\n",
            "\tList<Integer> plusOne(List<Integer> digits) {\n\t\tint carry = 1;\n\t\tfor(int i = digits.size() - 1; i >= 0; i--){\n\t\t\tint sum = digits.get(i) + carry;\n\t\t\tif(sum >= 10){\n\t\t\t\tdigits.set(i, sum % 10);\n\t\t\t\tcarry = 1;\n\t\t\t}else{\n\t\t\t\tdigits.set(i, sum);\n\t\t\t\tcarry = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(carry == 1){\n\t\t\tdigits.add(0, 1);\n\t\t}\n\t\treturn digits;\n\t}\n}\n",
            "\tint[] plusOne(int[] digits){\n\t\tint carry = 1;\n\t\tfor(int i = digits.length - 1; i >= 0; i--){\n\t\t\tint sum = digits[i] + carry;\n\t\t\tif(sum == 10){\n\t\t\t\tdigits[i] = 0;\n\t\t\t\tcarry = 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdigits[i] = sum;\n\t\t\t\tcarry = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(carry == 1){\n\t\t\tint[] newDigits = new int[digits.length + 1];\n\t\t\tnewDigits[0] = 1;\n\t\t\tfor(int i = 0; i < digits.length; i++){\n\t\t\t\tnewDigits[i + 1] = digits[i];\n\t\t\t}\n\t\t\treturn newDigits;\n\t\t}\n\t\telse{\n\t\t\treturn digits;\n\t\t}\n\t}\n}\n",
            "\tList<Integer> plusOne(List<Integer> digits) {\n\t\tint len = digits.size();\n\t\tint i = len - 1;\n\t\twhile (i >= 0 && digits.get(i) == 9) {\n\t\t\tdigits.set(i, 0);\n\t\t\ti--;\n\t\t}\n\t\tif (i < 0) {\n\t\t\tdigits.add(0, 1);\n\t\t\treturn digits;\n\t\t}\n\t\tdigits.set(i, digits.get(i) + 1);\n\t\treturn digits;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] digits = {1,2,3};\n\t\tint[] digits2 = {4,3,2,1};\n\t\tint[] digits3 = {9,9,9,9};\n\t\tint[] digits4 = {1,2,3,4};\n\t\tint[] digits5 = {1,2,3,4,5};\n\t\tint[] digits6 = {1,2,3,4,5,6};\n\t\tint[] digits7 = {1,2,3,4,5,6,7};\n\t\tint[] digits8 = {1,2,3,4,5,6,7,8};\n\t\tint[] digits9 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] digits10 = {1,2,3,4,5,6,7,8,9,0};\n\t\tint[] digits11 = {1,2,3,4,5,6,7,8,9,0,1};\n\t\tint[] digits12 = {1,2,3,4,5,6,7,8,9,0,1,2};\n\t\tint[] digits13 = {1,2,3,4,5,6,7,8,9,0,1,2,3};\n\t\tint[] digits14 = {1,2,3,4,5,6,7,8,9,0,1,2,3,4};\n\t\tint[] digits15 = {1,2,3,4,5,6,7,8,9,0,1,2,3,4,5};\n\t\tint[] digits16 = {1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6};\n\t\tint[] digits17 = {1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7};\n\t\tint[] digits18 = {1,2,3,4,5,6,7\n",
            "\tint[] plusOne(int[] digits) {\n\t\tint len = digits.length;\n\t\tint carry = 1;\n\t\tfor(int i = len - 1; i >= 0; i--){\n\t\t\tint sum = digits[i] + carry;\n\t\t\tif(sum > 9){\n\t\t\t\tdigits[i] = sum % 10;\n\t\t\t\tcarry = 1;\n\t\t\t}else{\n\t\t\t\tdigits[i] = sum;\n\t\t\t\tcarry = 0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(carry == 1){\n\t\t\tint[] newDigits = new int[len + 1];\n\t\t\tnewDigits[0] = 1;\n\t\t\tfor(int i = 0; i < len; i++){\n\t\t\t\tnewDigits[i + 1] = digits[i];\n\t\t\t}\n\t\t\treturn newDigits;\n\t\t}\n\t\treturn digits;\n\t}\n}\n",
            "\tstatic int[] plusOne(int[] digits){\n\t\tint len = digits.length;\n\t\tint i = len - 1;\n\t\twhile(i >= 0 && digits[i] == 9){\n\t\t\tdigits[i] = 0;\n\t\t\ti--;\n\t\t}\n\t\tif(i < 0){\n\t\t\tint[] newDigits = new int[len + 1];\n\t\t\tnewDigits[0] = 1;\n\t\t\treturn newDigits;\n\t\t}\n\t\tdigits[i]++;\n\t\treturn digits;\n\t}\n}\n",
            "\tint[] plusOne(int[] digits){\n\t\tint len = digits.length;\n\t\tint i = len-1;\n\t\twhile(i>=0){\n\t\t\tif(digits[i]<9){\n\t\t\t\tdigits[i]++;\n\t\t\t\treturn digits;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdigits[i] = 0;\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t\tint[] newDigits = new int[len+1];\n\t\tnewDigits[0] = 1;\n\t\treturn newDigits;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1169",
        "source": "leetcodeTitles",
        "source_id": "1620",
        "url": "https://leetcode.com/problems/coordinate-with-maximum-network-quality/",
        "language": "java",
        "query": "Coordinate With Maximum Network Quality",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tint sum = 0;\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tfor(int l = 0; l < m; l++){\n\t\t\t\t\t\tsum += a[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t\tx = i;\n\t\t\t\t\ty = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(x + \" \" + y);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint[] ans = new int[2];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tint sum = 0;\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tfor(int l = 0; l < m; l++){\n\t\t\t\t\t\tif(k == i && l == j) continue;\n\t\t\t\t\t\tsum += a[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t\tans[0] = i;\n\t\t\t\t\tans[1] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t\tSystem.out.println(ans[0] + \" \" + ans[1]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tint sum = 0;\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tfor(int l = 0; l < m; l++){\n\t\t\t\t\t\tsum += a[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t\tx = i;\n\t\t\t\t\ty = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(x + \" \" + y);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[][] a = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tint sum = 0;\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tsum += a[i][k] * a[k][j];\n\t\t\t\t}\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t\tx = i;\n\t\t\t\t\ty = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(x + \" \" + y);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] quality = {{1,2,3},{2,3,3},{3,3,2}};\n\t\tint[] coordinate = new int[2];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < quality.length; i++){\n\t\t\tfor(int j = 0; j < quality[i].length; j++){\n\t\t\t\tif(quality[i][j] > max){\n\t\t\t\t\tmax = quality[i][j];\n\t\t\t\t\tcoordinate[0] = i;\n\t\t\t\t\tcoordinate[1] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(coordinate[0] + \" \" + coordinate[1]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] quality = {5,1,2,3,4};\n\t\tint[] coords = {1,2,3,4,5};\n\t\tint[] result = coordinate(quality,coords);\n\t\tfor(int i = 0; i < result.length; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n\tpublic static int[] coordinate(int[] quality, int[] coords){\n\t\tint[] result = new int[quality.length];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < quality.length; i++){\n\t\t\tif(quality[i] > max){\n\t\t\t\tmax = quality[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < quality.length; i++){\n\t\t\tif(quality[i] == max){\n\t\t\t\tresult[i] = coords[i];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] quality = {2,1,3,4,5};\n\t\tint[] coords = {1,1,0,0,1};\n\t\tint[] res = new int[2];\n\t\tres = coordWithMaxNetworkQuality(quality, coords);\n\t\tSystem.out.println(res[0] + \" \" + res[1]);\n\t}\n\tpublic static int[] coordWithMaxNetworkQuality(int[] quality, int[] coords){\n\t\tint[] res = new int[2];\n\t\tint max = 0;\n\t\tint max_i = 0;\n\t\tfor(int i = 0; i < quality.length; i++){\n\t\t\tif(quality[i] > max){\n\t\t\t\tmax = quality[i];\n\t\t\t\tmax_i = i;\n\t\t\t}\n\t\t}\n\t\tres[0] = coords[max_i];\n\t\tres[1] = max_i;\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1170",
        "source": "leetcodeTitles",
        "source_id": "1525",
        "url": "https://leetcode.com/problems/number-of-good-ways-to-split-a-string/",
        "language": "java",
        "query": "Number of Good Ways to Split a String",
        "snippets": [
            "\tstatic int countSplits(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tfor(int j = i + 1; j < s.length(); j++){\n\t\t\t\tif(s.substring(i, j).equals(s.substring(j, i + j))){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countGoodStrings(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tfor(int j = i + 1; j < s.length(); j++){\n\t\t\t\tif(isGoodString(s.substring(i, j))){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic boolean isGoodString(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == 'a'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count == s.length() / 2;\n\t}\n}\n",
            "\tstatic int countGoodStrings(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tfor(int j = i + 1; j < s.length(); j++){\n\t\t\t\tif(isGood(s.substring(i, j))){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic boolean isGood(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == 'a'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count >= 2;\n\t}\n}\n",
            "\tstatic int countSplits(String s) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tfor (int j = i + 1; j < s.length(); j++) {\n\t\t\t\tif (s.charAt(i) == s.charAt(j)) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint numSplits(String s){\n\t\tint count = 0;\n\t\tint[] left = new int[26];\n\t\tint[] right = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tleft[s.charAt(i) - 'a']++;\n\t\t\tright[s.charAt(s.length() - i - 1) - 'a']++;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(left[i] != 0 && right[i] != 0)\n\t\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSplits(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tfor(int j = i+1; j < s.length(); j++){\n\t\t\t\tif(s.substring(i, j).equals(s.substring(j, i+j))){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1171",
        "source": "leetcodeTitles",
        "source_id": "173",
        "url": "https://leetcode.com/problems/binary-search-tree-iterator/",
        "language": "java",
        "query": "Binary Search Tree Iterator",
        "snippets": [
            "\tvoid main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(28);\n\t\troot.right.right.\n",
            "\tvoid main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\tBinaryTreeIterator iterator = new BinaryTreeIterator(root);\n\t\twhile(iterator.hasNext()){\n\t\t\tSystem.out.println(iterator.next());\n\t\t}\n\t}\n}\n",
            "\tIterator<Integer> iterator(){\n\t\treturn new Iterator<Integer>(){\n\t\t\tprivate Node current = root;\n\t\t\tpublic boolean hasNext(){\n\t\t\t\treturn current != null;\n\t\t\t}\n\t\t\tpublic Integer next(){\n\t\t\t\tInteger res = current.val;\n\t\t\t\tcurrent = current.next;\n\t\t\t\treturn res;\n\t\t\t}\n\t\t\tpublic void remove(){\n\t\t\t\tthrow new UnsupportedOperationException();\n\t\t\t}\n\t\t};\n\t}\n}\n",
            "\tClazz(){\n\t\t\n\t}\n\tpublic\n\tvoid method(){\n\t\t\n\t}\n}\n",
            "\tTreeNode root;\n\tpublic Clazz(TreeNode root){\n\t\tthis.root = root;\n\t}\n\tpublic boolean hasNext(){\n\t\tif(root == null){\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic TreeNode next(){\n\t\tif(root == null){\n\t\t\treturn null;\n\t\t}\n\t\tTreeNode current = root;\n\t\tTreeNode parent = null;\n\t\twhile(current.left != null){\n\t\t\tparent = current;\n\t\t\tcurrent = current.left;\n\t\t}\n\t\tif(parent == null){\n\t\t\troot = root.right;\n\t\t}\n\t\telse{\n\t\t\tparent.left = current.right;\n\t\t}\n\t\treturn current;\n\t}\n}\n",
            "\tClazz(){\n\t\t\n\t}\n\tpublic\n\tvoid func(){\n\t\t\n\t}\n}\n",
            "\tClazz(){\n\t\t\n\t}\n\tpublic\n\tvoid function(){\n\t\t\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1172",
        "source": "leetcodeTitles",
        "source_id": "2033",
        "url": "https://leetcode.com/problems/minimum-operations-to-make-a-uni-value-grid/",
        "language": "java",
        "query": "Minimum Operations to Make a Uni-Value Grid",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] grid = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tgrid[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tans += dfs(grid, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n\tpublic static int dfs(int[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0){\n\t\t\treturn 0;\n\t\t}\n\t\tgrid[i][j] = 0;\n\t\treturn 1 + dfs(grid, i + 1, j) + dfs(grid, i - 1, j) + dfs(grid, i, j + 1) + dfs(grid, i, j - 1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] grid = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tgrid[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[n-1][m-1]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] grid = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tgrid[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t\tgrid[i][j] = 0;\n\t\t\t\t\tif(i > 0){\n\t\t\t\t\t\tgrid[i-1][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif(j > 0){\n\t\t\t\t\t\tgrid[i][j-1] = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif(i < n-1){\n\t\t\t\t\t\tgrid[i+1][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif(j < m-1){\n\t\t\t\t\t\tgrid[i][j+1] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] grid = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tgrid[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tans += dfs(grid, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n\tpublic static int dfs(int[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0){\n\t\t\treturn 0;\n\t\t}\n\t\tgrid[i][j] = 0;\n\t\treturn 1 + dfs(grid, i + 1, j) + dfs(grid, i - 1, j) + dfs(grid, i, j + 1) + dfs(grid, i, j - 1);\n\t}\n}\n",
            "\tstatic int minOperations(int n, int m) {\n\t\tint count = 0;\n\t\twhile(n>1 && m>1){\n\t\t\tif(n%2==0){\n\t\t\t\tn/=2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn=(n+1)/2;\n\t\t\t}\n\t\t\tif(m%2==0){\n\t\t\t\tm/=2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tm=(m+1)/2;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int n, int m) {\n\t\tint ans = 0;\n\t\twhile(n > 0 && m > 0){\n\t\t\tif(n % 2 == 1 && m % 2 == 1){\n\t\t\t\tans += 2;\n\t\t\t\tn--;\n\t\t\t\tm--;\n\t\t\t}\n\t\t\telse if(n % 2 == 1){\n\t\t\t\tans++;\n\t\t\t\tn--;\n\t\t\t}\n\t\t\telse if(m % 2 == 1){\n\t\t\t\tans++;\n\t\t\t\tm--;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn /= 2;\n\t\t\t\tm /= 2;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int minOperations(int n, int m){\n\t\tint ans = 0;\n\t\twhile(n > 1 || m > 1){\n\t\t\tif(n > m){\n\t\t\t\tn -= m;\n\t\t\t\tans++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tm -= n;\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint minOperations(int n, int m) {\n\t\tint ans = 0;\n\t\tint i = n;\n\t\tint j = m;\n\t\twhile(i > 0 && j > 0){\n\t\t\tif(i % 2 == 0){\n\t\t\t\ti /= 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti = i / 2 + 1;\n\t\t\t}\n\t\t\tif(j % 2 == 0){\n\t\t\t\tj /= 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj = j / 2 + 1;\n\t\t\t}\n\t\t\tans++;\n\t\t}\n\t\treturn ans;\n\t}\n}\n"
        ],
        "results": 9
    },
    {
        "id": "1173",
        "source": "leetcodeTitles",
        "source_id": "1008",
        "url": "https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/",
        "language": "java",
        "query": "Construct Binary Search Tree from Preorder Traversal",
        "snippets": [
            "\tTreeNode buildTree(int[] preorder) {\n\t\tif(preorder == null || preorder.length == 0) return null;\n\t\treturn buildTree(preorder, 0, preorder.length - 1);\n\t}\n\t\n\tprivate TreeNode buildTree(int[] preorder, int start, int end){\n\t\tif(start > end) return null;\n\t\tTreeNode root = new TreeNode(preorder[start]);\n\t\tint index = start + 1;\n\t\twhile(index <= end && preorder[index] < preorder[start]){\n\t\t\tindex++;\n\t\t}\n\t\troot.left = buildTree(preorder, start + 1, index - 1);\n\t\troot.right = buildTree(preorder, index, end);\n\t\treturn root;\n\t}\n}\n",
            "\tTreeNode bstFromPreorder(int[] preorder) {\n\t\tif(preorder == null || preorder.length == 0) return null;\n\t\tTreeNode root = new TreeNode(preorder[0]);\n\t\tfor(int i = 1; i < preorder.length; i++){\n\t\t\tTreeNode node = new TreeNode(preorder[i]);\n\t\t\tinsert(root, node);\n\t\t}\n\t\treturn root;\n\t}\n\tpublic void insert(TreeNode root, TreeNode node){\n\t\tif(root == null) return;\n\t\tif(root.val > node.val){\n\t\t\tif(root.left == null) root.left = node;\n\t\t\telse insert(root.left, node);\n\t\t}\n\t\telse{\n\t\t\tif(root.right == null) root.right = node;\n\t\t\telse insert(root.right, node);\n\t\t}\n\t}\n}\n",
            "\tTreeNode bstFromPreorder(int[] preorder) {\n\t\tif(preorder == null || preorder.length == 0)\n\t\t\treturn null;\n\t\treturn bstFromPreorder(preorder, 0, preorder.length - 1);\n\t}\n\tprivate TreeNode bstFromPreorder(int[] preorder, int start, int end){\n\t\tif(start > end)\n\t\t\treturn null;\n\t\tTreeNode root = new TreeNode(preorder[start]);\n\t\tint i = start + 1;\n\t\twhile(i <= end && preorder[i] < root.val)\n\t\t\ti++;\n\t\troot.left = bstFromPreorder(preorder, start + 1, i - 1);\n\t\troot.right = bstFromPreorder(preorder, i, end);\n\t\treturn root;\n\t}\n}\n",
            "\tTreeNode bstFromPreorder(int[] preorder) {\n\t\tif(preorder == null || preorder.length == 0)\n\t\t\treturn null;\n\t\treturn bstFromPreorder(preorder, 0, preorder.length - 1);\n\t}\n\tprivate TreeNode bstFromPreorder(int[] preorder, int start, int end){\n\t\tif(start > end)\n\t\t\treturn null;\n\t\tTreeNode root = new TreeNode(preorder[start]);\n\t\tint i = start + 1;\n\t\twhile(i <= end && preorder[i] < preorder[start])\n\t\t\ti++;\n\t\troot.left = bstFromPreorder(preorder, start + 1, i - 1);\n\t\troot.right = bstFromPreorder(preorder, i, end);\n\t\treturn root;\n\t}\n}\n",
            "\tTreeNode bstFromPreorder(int[] preorder) {\n\t\tif(preorder == null || preorder.length == 0)\n\t\t\treturn null;\n\t\tTreeNode root = new TreeNode(preorder[0]);\n\t\tfor(int i = 1; i < preorder.length; i++){\n\t\t\tTreeNode node = new TreeNode(preorder[i]);\n\t\t\tinsert(root, node);\n\t\t}\n\t\treturn root;\n\t}\n\tpublic void insert(TreeNode root, TreeNode node){\n\t\tif(root.val > node.val){\n\t\t\tif(root.left == null)\n\t\t\t\troot.left = node;\n\t\t\telse\n\t\t\t\tinsert(root.left, node);\n\t\t}\n\t\telse{\n\t\t\tif(root.right == null)\n\t\t\t\troot.right = node;\n\t\t\telse\n\t\t\t\tinsert(root.right, node);\n\t\t}\n\t}\n}\n",
            "\tTreeNode bstFromPreorder(int[] preorder) {\n\t\treturn bstFromPreorder(preorder, 0, preorder.length - 1);\n\t}\n\t\n\tprivate TreeNode bstFromPreorder(int[] preorder, int start, int end) {\n\t\tif (start > end) {\n\t\t\treturn null;\n\t\t}\n\t\tTreeNode root = new TreeNode(preorder[start]);\n\t\tint i = start + 1;\n\t\twhile (i <= end && preorder[i] < root.val) {\n\t\t\ti++;\n\t\t}\n\t\troot.left = bstFromPreorder(preorder, start + 1, i - 1);\n\t\troot.right = bstFromPreorder(preorder, i, end);\n\t\treturn root;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1174",
        "source": "leetcodeTitles",
        "source_id": "1025",
        "url": "https://leetcode.com/problems/divisor-game/",
        "language": "java",
        "query": "Divisor Game",
        "snippets": [
            "\tstatic boolean divisorGame(int N){\n\t\tif(N==1) return false;\n\t\tif(N==2) return true;\n\t\tif(N==3) return true;\n\t\tif(N==4) return false;\n\t\tif(N==5) return true;\n\t\tif(N==6) return true;\n\t\tif(N==7) return false;\n\t\tif(N==8) return true;\n\t\tif(N==9) return true;\n\t\tif(N==10) return false;\n\t\tif(N==11) return true;\n\t\tif(N==12) return true;\n\t\tif(N==13) return false;\n\t\tif(N==14) return true;\n\t\tif(N==15) return true;\n\t\tif(N==16) return false;\n\t\tif(N==17) return true;\n\t\tif(N==18) return true;\n\t\tif(N==19) return false;\n\t\tif(N==20) return true;\n\t\tif(N==21) return true;\n\t\tif(N==22) return false;\n\t\tif(N==23) return true;\n\t\tif(N==24) return true;\n\t\tif(N==25) return false;\n\t\tif(N==26) return true;\n\t\tif(N==27) return true;\n\t\tif(N==28) return false;\n\t\tif(N==29) return true;\n\t\tif(N==30) return true;\n\t\tif(N==31) return false;\n\t\tif(N==32) return true;\n\t\tif(N==33) return true;\n\t\tif(N==34) return false;\n\t\tif(N==35) return true;\n\t\tif(N==36) return true;\n\t\tif(N==37) return false;\n\t\tif(N==38) return true;\n\t\tif(N==39) return true;\n\t\tif(N==40) return false;\n\t\tif(N==41\n",
            "\tstatic boolean divisorGame(int N){\n\t\tif(N==1) return false;\n\t\tif(N==2) return true;\n\t\tif(N==3) return true;\n\t\tif(N==4) return false;\n\t\tif(N==5) return true;\n\t\tif(N==6) return false;\n\t\tif(N==7) return true;\n\t\tif(N==8) return false;\n\t\tif(N==9) return true;\n\t\tif(N==10) return false;\n\t\tif(N==11) return true;\n\t\tif(N==12) return false;\n\t\tif(N==13) return true;\n\t\tif(N==14) return false;\n\t\tif(N==15) return true;\n\t\tif(N==16) return false;\n\t\tif(N==17) return true;\n\t\tif(N==18) return false;\n\t\tif(N==19) return true;\n\t\tif(N==20) return false;\n\t\tif(N==21) return true;\n\t\tif(N==22) return false;\n\t\tif(N==23) return true;\n\t\tif(N==24) return false;\n\t\tif(N==25) return true;\n\t\tif(N==26) return false;\n\t\tif(N==27) return true;\n\t\tif(N==28) return false;\n\t\tif(N==29) return true;\n\t\tif(N==30) return false;\n\t\tif(N==31) return true;\n\t\tif(N==32) return false;\n\t\tif(N==33) return true;\n\t\tif(N==34) return false;\n\t\tif(N==35) return true;\n\t\tif(N==36) return false;\n\t\tif(N==37) return true;\n\t\tif(N==38) return false;\n\t\tif(N==39) return true;\n\t\tif(N==40) return false;\n\t\tif(N==41\n",
            "\tstatic boolean divisorGame(int N){\n\t\tif(N==1)\n\t\t\treturn false;\n\t\tif(N==2)\n\t\t\treturn true;\n\t\tif(N==3)\n\t\t\treturn false;\n\t\tif(N==4)\n\t\t\treturn true;\n\t\tif(N==5)\n\t\t\treturn false;\n\t\tif(N==6)\n\t\t\treturn true;\n\t\tif(N==7)\n\t\t\treturn false;\n\t\tif(N==8)\n\t\t\treturn true;\n\t\tif(N==9)\n\t\t\treturn false;\n\t\tif(N==10)\n\t\t\treturn true;\n\t\tif(N==11)\n\t\t\treturn false;\n\t\tif(N==12)\n\t\t\treturn true;\n\t\tif(N==13)\n\t\t\treturn false;\n\t\tif(N==14)\n\t\t\treturn true;\n\t\tif(N==15)\n\t\t\treturn false;\n\t\tif(N==16)\n\t\t\treturn true;\n\t\tif(N==17)\n\t\t\treturn false;\n\t\tif(N==18)\n\t\t\treturn true;\n\t\tif(N==19)\n\t\t\treturn false;\n\t\tif(N==20)\n\t\t\treturn true;\n\t\tif(N==21)\n\t\t\treturn false;\n\t\tif(N==22)\n\t\t\treturn true;\n\t\tif(N==23)\n\t\t\treturn false;\n\t\tif(N==24)\n\t\t\treturn true;\n\t\tif(N==25)\n\t\t\treturn false;\n\t\tif(N==26)\n\t\t\treturn true;\n\t\tif(N==27)\n\t\t\treturn false;\n\t\tif(N==28)\n\t\t\treturn true;\n\t\tif(N==29)\n\t\t\treturn false;\n\t\tif(N==30)\n\t\t\treturn true;\n\t\tif(N==31\n",
            "\tboolean divisorGame(int N){\n\t\tif(N==1) return false;\n\t\tif(N==2) return true;\n\t\tif(N==3) return true;\n\t\tif(N==4) return false;\n\t\tif(N==5) return true;\n\t\tif(N==6) return true;\n\t\tif(N==7) return false;\n\t\tif(N==8) return true;\n\t\tif(N==9) return true;\n\t\tif(N==10) return false;\n\t\tif(N==11) return true;\n\t\tif(N==12) return true;\n\t\tif(N==13) return false;\n\t\tif(N==14) return true;\n\t\tif(N==15) return true;\n\t\tif(N==16) return false;\n\t\tif(N==17) return true;\n\t\tif(N==18) return true;\n\t\tif(N==19) return false;\n\t\tif(N==20) return true;\n\t\tif(N==21) return true;\n\t\tif(N==22) return false;\n\t\tif(N==23) return true;\n\t\tif(N==24) return true;\n\t\tif(N==25) return false;\n\t\tif(N==26) return true;\n\t\tif(N==27) return true;\n\t\tif(N==28) return false;\n\t\tif(N==29) return true;\n\t\tif(N==30) return true;\n\t\tif(N==31) return false;\n\t\tif(N==32) return true;\n\t\tif(N==33) return true;\n\t\tif(N==34) return false;\n\t\tif(N==35) return true;\n\t\tif(N==36) return true;\n\t\tif(N==37) return false;\n\t\tif(N==38) return true;\n\t\tif(N==39) return true;\n\t\tif(N==40) return false;\n\t\tif(N==41\n"
        ],
        "results": 10
    },
    {
        "id": "1175",
        "source": "leetcodeTitles",
        "source_id": "946",
        "url": "https://leetcode.com/problems/validate-stack-sequences/",
        "language": "java",
        "query": "Validate Stack Sequences",
        "snippets": [
            "\tboolean validateStackSequences(int[] pushed, int[] popped) {\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i < pushed.length) {\n\t\t\tstack.push(pushed[i]);\n\t\t\twhile (!stack.isEmpty() && stack.peek() == popped[j]) {\n\t\t\t\tstack.pop();\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}\n",
            "\tboolean validateStackSequences(int[] pushed, int[] popped) {\n\t\tint i = 0, j = 0;\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\twhile (i < pushed.length) {\n\t\t\tstack.push(pushed[i]);\n\t\t\twhile (!stack.isEmpty() && stack.peek() == popped[j]) {\n\t\t\t\tstack.pop();\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}\n",
            "\tboolean validateStackSequences(int[] pushed, int[] popped) {\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\twhile (i < pushed.length) {\n\t\t\tstack.push(pushed[i]);\n\t\t\twhile (!stack.isEmpty() && stack.peek() == popped[j]) {\n\t\t\t\tstack.pop();\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}\n",
            "\tboolean validateStackSequences(int[] pushed, int[] popped) {\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\tint i = 0, j = 0;\n\t\twhile (i < pushed.length) {\n\t\t\tstack.push(pushed[i]);\n\t\t\twhile (!stack.isEmpty() && stack.peek() == popped[j]) {\n\t\t\t\tstack.pop();\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}\n",
            "\tboolean validateStackSequences(int[] pushed, int[] popped) {\n\t\tif(pushed.length == 0 && popped.length == 0)\n\t\t\treturn true;\n\t\tif(pushed.length == 0 || popped.length == 0)\n\t\t\treturn false;\n\t\tint i = 0, j = 0;\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\twhile(i < pushed.length){\n\t\t\tstack.push(pushed[i]);\n\t\t\twhile(!stack.isEmpty() && j < popped.length && stack.peek() == popped[j]){\n\t\t\t\tstack.pop();\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn stack.isEmpty();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1176",
        "source": "leetcodeTitles",
        "source_id": "1991",
        "url": "https://leetcode.com/problems/find-the-middle-index-in-array/",
        "language": "java",
        "query": "Find the Middle Index in Array",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint mid = arr.length/2;\n\t\tSystem.out.println(arr[mid]);\n\t}\n}\n",
            "\tstatic int findMiddleIndex(int[] arr){\n\t\tint mid = arr.length/2;\n\t\tif(arr.length%2==0){\n\t\t\treturn mid;\n\t\t}\n\t\telse{\n\t\t\treturn mid+1;\n\t\t}\n\t}\n}\n",
            "\tstatic int findMiddleIndex(int[] arr){\n\t\tint middleIndex = 0;\n\t\tif(arr.length % 2 == 0){\n\t\t\tmiddleIndex = arr.length/2 - 1;\n\t\t}\n\t\telse{\n\t\t\tmiddleIndex = arr.length/2;\n\t\t}\n\t\treturn middleIndex;\n\t}\n}\n",
            "\tstatic int findMiddleIndex(int[] arr){\n\t\tint middleIndex = 0;\n\t\tif(arr.length%2 == 0){\n\t\t\tmiddleIndex = arr.length/2;\n\t\t}else{\n\t\t\tmiddleIndex = arr.length/2 + 1;\n\t\t}\n\t\treturn middleIndex;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1177",
        "source": "leetcodeTitles",
        "source_id": "2216",
        "url": "https://leetcode.com/problems/minimum-deletions-to-make-array-beautiful/",
        "language": "java",
        "query": "Minimum Deletions to Make Array Beautiful",
        "snippets": [
            "\tint minDeletions(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tres += Math.max(0, count[i] - 1);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minimumDeletions(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tres += Math.max(0, count[i] - (s.length() + 1) / 2);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minimumDeletions(String A){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < A.length(); i++){\n\t\t\tcount[A.charAt(i) - 'a']++;\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tans += Math.max(0, count[i] - 1);\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint minimumDeletions(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == 'a'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn s.length() - count;\n\t}\n}\n",
            "\tint minimumDeletions(String A){\n\t\tint count = 0;\n\t\tint[] arr = new int[26];\n\t\tfor(int i = 0; i < A.length(); i++){\n\t\t\tarr[A.charAt(i) - 'a']++;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(arr[i] > 1){\n\t\t\t\tcount += arr[i] - 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minimumDeletions(String s) {\n\t\tint count = 0;\n\t\tint[] counts = new int[26];\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tcounts[s.charAt(i) - 'a']++;\n\t\t}\n\t\tfor (int i = 0; i < counts.length; i++) {\n\t\t\tif (counts[i] % 2 != 0) {\n\t\t\t\tcount += counts[i] / 2;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minimumDeletions(String[] a){\n\t\tint n = a.length;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < a[i].length(); j++){\n\t\t\t\tcount[a[i].charAt(j) - 'a']++;\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tans += count[i] / 2;\n\t\t}\n\t\treturn ans;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1178",
        "source": "leetcodeTitles",
        "source_id": "2315",
        "url": "https://leetcode.com/problems/count-asterisks/",
        "language": "java",
        "query": "Count Asterisks",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString str = \"*\";\n\t\tint count = 0;\n\t\twhile(count < 10){\n\t\t\tSystem.out.println(str);\n\t\t\tstr += \"*\";\n\t\t\tcount++;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"*\";\n\t\tint count = 0;\n\t\twhile(count < 10){\n\t\t\tSystem.out.println(str);\n\t\t\tcount++;\n\t\t\tstr += \"*\";\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"*\";\n\t\tint n = 5;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.println(str);\n\t\t\tstr = str + \"*\";\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"*\";\n\t\tint i = 0;\n\t\twhile(i<10){\n\t\t\tSystem.out.println(str);\n\t\t\tstr = str + \"*\";\n\t\t\ti++;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"*\";\n\t\tint i = 0;\n\t\twhile(i<5){\n\t\t\tSystem.out.println(str);\n\t\t\tstr = str + \"*\";\n\t\t\ti++;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1179",
        "source": "leetcodeTitles",
        "source_id": "2116",
        "url": "https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid/",
        "language": "java",
        "query": "Check if a Parentheses String Can be Valid",
        "snippets": [
            "\tboolean checkValidString(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '(')\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tcount--;\n\t\t\tif(count < 0)\n\t\t\t\treturn false;\n\t\t}\n\t\tcount = 0;\n\t\tfor(int i = s.length() - 1; i >= 0; i--){\n\t\t\tif(s.charAt(i) == ')')\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tcount--;\n\t\t\tif(count < 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean checkValidString(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '(')\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tcount--;\n\t\t\tif(count < 0)\n\t\t\t\treturn false;\n\t\t}\n\t\tif(count == 0)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}\n",
            "\tboolean checkValidString(String s){\n\t\tint cnt = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '(') cnt++;\n\t\t\telse cnt--;\n\t\t\tif(cnt < 0) return false;\n\t\t}\n\t\tcnt = 0;\n\t\tfor(int i = s.length() - 1; i >= 0; i--){\n\t\t\tif(s.charAt(i) == ')') cnt++;\n\t\t\telse cnt--;\n\t\t\tif(cnt < 0) return false;\n\t\t}\n\t\treturn cnt == 0;\n\t}\n}\n",
            "\tboolean checkValidString(String s) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (s.charAt(i) == '(') {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif (count < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tcount = 0;\n\t\tfor (int i = s.length() - 1; i >= 0; i--) {\n\t\t\tif (s.charAt(i) == ')') {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif (count < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn count == 0;\n\t}\n}\n",
            "\tboolean checkValidString(String s) {\n\t\tint cnt = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (s.charAt(i) == '(') {\n\t\t\t\tcnt++;\n\t\t\t} else {\n\t\t\t\tcnt--;\n\t\t\t}\n\t\t\tif (cnt < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tcnt = 0;\n\t\tfor (int i = s.length() - 1; i >= 0; i--) {\n\t\t\tif (s.charAt(i) == ')') {\n\t\t\t\tcnt++;\n\t\t\t} else {\n\t\t\t\tcnt--;\n\t\t\t}\n\t\t\tif (cnt < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn cnt == 0;\n\t}\n}\n",
            "\tboolean checkValidString(String s) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (s.charAt(i) == '(') {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif (count < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (count == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tcount = 0;\n\t\tfor (int i = s.length() - 1; i >= 0; i--) {\n\t\t\tif (s.charAt(i) == ')') {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif (count < 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn count == 0;\n\t}\n}\n",
            "\tboolean checkValidString(String s) {\n\t\tint left = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tif (s.charAt(i) == '(') {\n\t\t\t\tleft++;\n\t\t\t} else {\n\t\t\t\tif (left == 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tleft--;\n\t\t\t}\n\t\t}\n\t\tint right = 0;\n\t\tfor (int i = s.length() - 1; i >= 0; i--) {\n\t\t\tif (s.charAt(i) == ')') {\n\t\t\t\tright++;\n\t\t\t} else {\n\t\t\t\tif (right == 0) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t\treturn left == right;\n\t}\n}\n",
            "\tboolean checkValidString(String s){\n\t\tint left = 0;\n\t\tint right = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '(')\n\t\t\t\tleft++;\n\t\t\telse\n\t\t\t\tright++;\n\t\t}\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == ')')\n\t\t\t\tleft--;\n\t\t\telse\n\t\t\t\tright--;\n\t\t\tif(left < 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn left == 0;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1180",
        "source": "leetcodeTitles",
        "source_id": "1013",
        "url": "https://leetcode.com/problems/partition-array-into-three-parts-with-equal-sum/",
        "language": "java",
        "query": "Partition Array Into Three Parts With Equal Sum",
        "snippets": [
            "\tboolean canThreePartsEqualSum(int[] A) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tsum += A[i];\n\t\t}\n\t\tif (sum % 3 != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / 3;\n\t\tint cur = 0;\n\t\tint count = 0;\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tcur += A[i];\n\t\t\tif (cur == target) {\n\t\t\t\tcount++;\n\t\t\t\tcur = 0;\n\t\t\t}\n\t\t}\n\t\treturn count >= 3;\n\t}\n}\n",
            "\tboolean canThreePartsEqualSum(int[] A) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tsum += A[i];\n\t\t}\n\t\tif (sum % 3 != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / 3;\n\t\tint left = 0;\n\t\tint right = 0;\n\t\tint count = 0;\n\t\twhile (right < A.length) {\n\t\t\tif (A[right] == target) {\n\t\t\t\tcount++;\n\t\t\t\tright++;\n\t\t\t} else if (A[right] < target) {\n\t\t\t\tright++;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tif (count == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (count == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tint leftSum = 0;\n\t\tint rightSum = 0;\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tif (i < A.length / 3) {\n\t\t\t\tleftSum += A[i];\n\t\t\t} else {\n\t\t\t\trightSum += A[i];\n\t\t\t}\n\t\t}\n\t\treturn leftSum == rightSum;\n\t}\n}\n",
            "\tboolean canThreePartsEqualSum(int[] A) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tsum += A[i];\n\t\t}\n\t\tif (sum % 3 != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / 3;\n\t\tint count = 0;\n\t\tint cur = 0;\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tcur += A[i];\n\t\t\tif (cur == target) {\n\t\t\t\tcount++;\n\t\t\t\tcur = 0;\n\t\t\t}\n\t\t}\n\t\treturn count >= 3;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1181",
        "source": "leetcodeTitles",
        "source_id": "275",
        "url": "https://leetcode.com/problems/h-index-ii/",
        "language": "java",
        "query": "H-Index II",
        "snippets": [
            "\tint hIndex(int[] citations) {\n\t\tint n = citations.length;\n\t\tint[] buckets = new int[n + 1];\n\t\tfor (int c : citations) {\n\t\t\tif (c >= n) {\n\t\t\t\tbuckets[n]++;\n\t\t\t} else {\n\t\t\t\tbuckets[c]++;\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\tfor (int i = n; i >= 0; i--) {\n\t\t\tsum += buckets[i];\n\t\t\tif (sum >= i) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n}\n",
            "\tint hIndex(int[] citations) {\n\t\tint n = citations.length;\n\t\tint[] count = new int[n + 1];\n\t\tfor (int c : citations) {\n\t\t\tif (c >= n) {\n\t\t\t\tcount[n]++;\n\t\t\t} else {\n\t\t\t\tcount[c]++;\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\tfor (int i = n; i >= 0; i--) {\n\t\t\tsum += count[i];\n\t\t\tif (sum >= i) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1182",
        "source": "leetcodeTitles",
        "source_id": "1111",
        "url": "https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/",
        "language": "java",
        "query": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "snippets": [
            "\tint maxDepth(String s) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tmax = Math.max(max, count);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxDepth(String s) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '(')\n\t\t\t\tcount++;\n\t\t\telse\n\t\t\t\tcount--;\n\t\t\tmax = Math.max(max, count);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxDepth(String s) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxDepth(String s) {\n\t\tint max = 0;\n\t\tint depth = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '(')\n\t\t\t\tdepth++;\n\t\t\telse\n\t\t\t\tdepth--;\n\t\t\tmax = Math.max(max, depth);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxDepth(String s){\n\t\tint max = 0;\n\t\tint depth = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tdepth++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdepth--;\n\t\t\t}\n\t\t\tif(depth > max){\n\t\t\t\tmax = depth;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"()\";\n\t\tSystem.out.println(maxDepth(s));\n\t}\n\tpublic static int maxDepth(String s){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1183",
        "source": "leetcodeTitles",
        "source_id": "1921",
        "url": "https://leetcode.com/problems/eliminate-maximum-number-of-monsters/",
        "language": "java",
        "query": "Eliminate Maximum Number of Monsters",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {1,2,3,\n",
            "\tstatic int maxMonsters(int[] a, int[] b, int[] c){\n\t\tint n = a.length;\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = a[i] + b[i] + c[i];\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tsum += d[j];\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxMonsters(int[] a, int[] b, int[] c){\n\t\tint n = a.length;\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = a[i] + b[i] + c[i];\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tsum += d[j];\n\t\t\t\tmax = Math.max(max, sum);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxMonsters(int[] a, int[] b, int[] c){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = a[0] + b[0] + c[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = Math.max(dp[i-1], a[i] + b[i] + c[i]);\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + a[i] + b[i] + c[i]);\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tint maxMonsters(int[] a, int[] b, int[] c){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = a[0] + b[0] + c[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = Math.max(dp[i-1], a[i] + b[i] + c[i]);\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + a[i] + b[i] + c[i]);\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tstatic int eliminate(int[] A, int[] B, int[] C, int[] D){\n\t\tint n = A.length;\n\t\tint m = B.length;\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tint[] c = new int[n];\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = A[i];\n\t\t\tc[i] = C[i];\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = B[i];\n\t\t\td[i] = D[i];\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] > b[j]){\n\t\t\t\t\tans = Math.max(ans, c[i] + d[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1184",
        "source": "leetcodeTitles",
        "source_id": "2304",
        "url": "https://leetcode.com/problems/minimum-path-cost-in-a-grid/",
        "language": "java",
        "query": "Minimum Path Cost in a Grid",
        "snippets": [
            "\tint minCost(int[][] grid){\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n}\n",
            "\tstatic int minPathCost(int[][] grid){\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tdp[0][0] = grid[0][0];\n\t\tfor(int i = 1; i < m; i++){\n\t\t\tdp[i][0] = dp[i-1][0] + grid[i][0];\n\t\t}\n\t\tfor(int j = 1; j < n; j++){\n\t\t\tdp[0][j] = dp[0][j-1] + grid[0][j];\n\t\t}\n\t\tfor(int i = 1; i < m; i++){\n\t\t\tfor(int j = 1; j < n; j++){\n\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n}\n",
            "\tstatic int minPathCost(int[][] grid){\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\tif(i==0 && j==0){\n\t\t\t\t\tdp[i][j] = grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i==0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j==0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j-1],dp[i-1][j]) + grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n\tpublic static void main(String[] args){\n\t\tint[][] grid = {{1,2,3},{4,8,2},{1,5,3}};\n\t\tSystem.out.println(minPathCost(grid));\n\t}\n}\n",
            "\tint minCost(int[][] grid) {\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tdp[0][0] = grid[0][0];\n\t\tfor (int i = 1; i < m; i++) {\n\t\t\tdp[i][0] = dp[i - 1][0] + grid[i][0];\n\t\t}\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tdp[0][j] = dp[0][j - 1] + grid[0][j];\n\t\t}\n\t\tfor (int i = 1; i < m; i++) {\n\t\t\tfor (int j = 1; j < n; j++) {\n\t\t\t\tdp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];\n\t\t\t}\n\t\t}\n\t\treturn dp[m - 1][n - 1];\n\t}\n}\n",
            "\tstatic int minPathCost(int[][] grid){\n\t\tint[][] dp = new int[grid.length][grid[0].length];\n\t\tdp[0][0] = grid[0][0];\n\t\tfor(int i = 1; i < grid.length; i++){\n\t\t\tdp[i][0] = dp[i-1][0] + grid[i][0];\n\t\t}\n\t\tfor(int i = 1; i < grid[0].length; i++){\n\t\t\tdp[0][i] = dp[0][i-1] + grid[0][i];\n\t\t}\n\t\tfor(int i = 1; i < grid.length; i++){\n\t\t\tfor(int j = 1; j < grid[0].length; j++){\n\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t}\n\t\t}\n\t\treturn dp[grid.length-1][grid[0].length-1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1185",
        "source": "leetcodeTitles",
        "source_id": "1129",
        "url": "https://leetcode.com/problems/shortest-path-with-alternating-colors/",
        "language": "java",
        "query": "Shortest Path with Alternating Colors",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] edges = new int[m][2];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tedges[i][0] = in.nextInt();\n\t\t\tedges[i][1] = in.nextInt();\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcolors[i] = in.nextInt();\n\t\t}\n\t\tint[] ans = new int[n];\n\t\tans = shortestAlternatingPaths(n, m, edges, colors);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.println(ans[i]);\n\t\t}\n\t}\n\tpublic static int[] shortestAlternatingPaths(int n, int m, int[][] edges, int[] colors){\n\t\tint[] ans = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tans[i] = -1;\n\t\t}\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tgraph[edges[i][0]][edges[i][1]] = 1;\n\t\t\tgraph[edges[i][1]][edges[i][0]] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(colors[i] == 1){\n\t\t\t\tans[i] = bfs(graph, i, colors);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(colors[i] == 0){\n\t\t\t\tans[i] = bfs(graph, i,\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tint u = in.nextInt();\n\t\t\tint v = in.nextInt();\n\t\t\tgraph[u][v] = 1;\n\t\t\tgraph[v][u] = 1;\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tint[] ans = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcolors[i] = in.nextInt();\n\t\t}\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[0] = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tif(colors[i] == colors[j]){\n\t\t\t\t\t\tdp[j] = Integer.MAX_VALUE;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tdp[j] = Math.min(dp[j], dp[i] + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmin = Math.min(min, dp[i]);\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] edges = new int[m][2];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tedges[i][0] = in.nextInt();\n\t\t\tedges[i][1] = in.nextInt();\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcolors[i] = in.nextInt();\n\t\t}\n\t\tint[] result = new int[n];\n\t\tresult = shortestAlternatingPaths(n, m, edges, colors);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n\tpublic static int[] shortestAlternatingPaths(int n, int m, int[][] edges, int[] colors){\n\t\tint[] result = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tresult[i] = -1;\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tif(colors[edges[i][0]] == colors[edges[i][1]]){\n\t\t\t\tresult[edges[i][0]] = -1;\n\t\t\t\tresult[edges[i][1]] = -1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tif(result[edges[i][0]] == -1 && result[edges[i][1]] == -1){\n\t\t\t\tresult[edges[i][0]] = 1;\n\t\t\t\tresult[edges[i][1]] = 1;\n\t\t\t}\n\t\t\telse if(result[edges\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] edges = new int[m][2];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tedges[i][0] = in.nextInt();\n\t\t\tedges[i][1] = in.nextInt();\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcolors[i] = in.nextInt();\n\t\t}\n\t\tint[] result = new int[n];\n\t\tresult = shortestAlternatingPaths(n, m, edges, colors);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n\tpublic static int[] shortestAlternatingPaths(int n, int m, int[][] edges, int[] colors){\n\t\tint[] result = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tresult[i] = -1;\n\t\t}\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tgraph[edges[i][0]][edges[i][1]] = 1;\n\t\t\tgraph[edges[i][1]][edges[i][0]] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(colors[i] == 1){\n\t\t\t\tresult[i] = bfs(graph, i, 0);\n\t\t\t}\n\t\t\telse if(colors[i] == 0){\n\t\t\t\tresult[i] = bfs(graph, i, 1);\n\t\t\t}\n\t\t}\n\t\treturn result\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tint u = in.nextInt();\n\t\t\tint v = in.nextInt();\n\t\t\tgraph[u][v] = 1;\n\t\t\tgraph[v][u] = 1;\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tint[] ans = new int[n];\n\t\tint[] visited = new int[n];\n\t\tint[] path = new int[n];\n\t\tint[] path_length = new int[n];\n\t\tint[] path_color = new int[n];\n\t\tint[] path_visited = new int[n];\n\t\tint[] path_ans = new int[n];\n\t\tint[] path_ans_length = new int[n];\n\t\tint[] path_ans_color = new int[n];\n\t\tint[] path_ans_visited = new int[n];\n\t\tint[] path_ans_path = new int[n];\n\t\tint[] path_ans_path_length = new int[n];\n\t\tint[] path_ans_path_color = new int[n];\n\t\tint[] path_ans_path_visited = new int[n];\n\t\tint[] path_ans_path_ans = new int[n];\n\t\tint[] path_ans_path_ans_length = new int[n];\n\t\tint[] path_ans_path_ans_color = new int[n];\n\t\tint[] path_ans_path_ans_visited = new int[n];\n\t\tint[] path_ans_path_ans_path = new int[n];\n\t\tint[] path_ans_path_ans_path_length = new int[n];\n\t\tint[] path_ans_path_ans_path_color = new int[\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tint a = in.nextInt();\n\t\t\tint b = in.nextInt();\n\t\t\tgraph[a][b] = 1;\n\t\t\tgraph[b][a] = 1;\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tint[] ans = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcolors[i] = in.nextInt();\n\t\t}\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[0] = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tif(colors[i] != colors[j]){\n\t\t\t\t\t\tdp[j] = Math.min(dp[j], dp[i] + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmin = Math.min(min, dp[i]);\n\t\t}\n\t\tif(min == Integer.MAX_VALUE){\n\t\t\tSystem.out.println(-1);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(min);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] edges = new int[m][2];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tedges[i][0] = in.nextInt();\n\t\t\tedges[i][1] = in.nextInt();\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcolors[i] = in.nextInt();\n\t\t}\n\t\tint[] result = new int[n];\n\t\tresult = shortestAlternatingPaths(n, m, edges, colors);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n\tpublic static int[] shortestAlternatingPaths(int n, int m, int[][] edges, int[] colors){\n\t\tint[] result = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tresult[i] = -1;\n\t\t}\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tgraph[edges[i][0]][edges[i][1]] = 1;\n\t\t\tgraph[edges[i][1]][edges[i][0]] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(colors[i] == 1){\n\t\t\t\tresult[i] = bfs(graph, i, 0);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult[i] = bfs(graph, i, 1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static int\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] edges = new int[m][2];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tedges[i][0] = in.nextInt();\n\t\t\tedges[i][1] = in.nextInt();\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcolors[i] = in.nextInt();\n\t\t}\n\t\tint[] result = new int[n];\n\t\tresult = shortestAlternatingPaths(n, m, edges, colors);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.println(result[i]);\n\t\t}\n\t}\n\tpublic static int[] shortestAlternatingPaths(int n, int m, int[][] edges, int[] colors){\n\t\tint[] result = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tresult[i] = -1;\n\t\t}\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tgraph[edges[i][0]][edges[i][1]] = 1;\n\t\t\tgraph[edges[i][1]][edges[i][0]] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(colors[i] == 1){\n\t\t\t\tresult[i] = bfs(graph, i, 0);\n\t\t\t}\n\t\t\telse if(colors[i] == 0){\n\t\t\t\tresult[i] = bfs(graph, i, 1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n",
            "\tstatic void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] edges = new int[m][2];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tedges[i][0] = in.nextInt();\n\t\t\tedges[i][1] = in.nextInt();\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcolors[i] = in.nextInt();\n\t\t}\n\t\tint[] result = new int[n];\n\t\tresult = shortestAlternatingPaths(n, m, edges, colors);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n\tpublic static int[] shortestAlternatingPaths(int n, int m, int[][] edges, int[] colors){\n\t\tint[] result = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tresult[i] = -1;\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tvisited[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tif(colors[edges[i][0]] == colors[edges[i][1]]){\n\t\t\t\tresult[edges[i][0]] = -1;\n\t\t\t\tresult[edges[i][1]] = -1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(result[i] == -1){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(visited[i\n",
            "\tstatic void main(String[] args){\n\t\tint n = 6;\n\t\tint[][] graph = new int[n][n];\n\t\tgraph[0][1] = 1;\n\t\tgraph[0][2] = 1;\n\t\tgraph[1][3] = 1;\n\t\tgraph[2][3] = 1;\n\t\tgraph[2][4] = 1;\n\t\tgraph[3][5] = 1;\n\t\tgraph[4][5] = 1;\n\t\tSystem.out.println(isAlternating(graph));\n\t}\n\tpublic static boolean isAlternating(int[][] graph){\n\t\tint[] color = new int[graph.length];\n\t\tcolor[0] = 1;\n\t\tfor(int i = 1; i < graph.length; i++){\n\t\t\tif(color[i] == 0){\n\t\t\t\tcolor[i] = 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcolor[i] = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < graph.length; i++){\n\t\t\tfor(int j = 0; j < graph.length; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tif(color[i] == color[j]){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1186",
        "source": "leetcodeTitles",
        "source_id": "1297",
        "url": "https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/",
        "language": "java",
        "query": "Maximum Number of Occurrences of a Substring",
        "snippets": [
            "\tstatic int maxOccurrences(String str, String sub){\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tint i = 0;\n\t\twhile(i < str.length()){\n\t\t\tif(str.substring(i, i + sub.length()).equals(sub)){\n\t\t\t\tcount++;\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxFreq(String s, String t) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < s.length()){\n\t\t\tif(s.charAt(i) == t.charAt(j)){\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxOccurrences(String str, String sub){\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tint i = 0;\n\t\twhile(i < str.length()){\n\t\t\tif(str.substring(i).startsWith(sub)){\n\t\t\t\tcount++;\n\t\t\t\ti += sub.length();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxOccurrences(String str, String sub){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < str.length()){\n\t\t\tif(str.substring(i, i + sub.length()).equals(sub)){\n\t\t\t\tcount++;\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxFreq(String str, String sub){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < str.length()){\n\t\t\tif(str.substring(i, i + sub.length()).equals(sub)){\n\t\t\t\tcount++;\n\t\t\t\ti += sub.length();\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tif(count > max){\n\t\t\tmax = count;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxFreq(String str, String sub){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == sub.charAt(0)){\n\t\t\t\tcount++;\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxFreq(String str, String sub) {\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tint n = str.length();\n\t\tint m = sub.length();\n\t\tfor (int i = 0; i <= n - m; i++) {\n\t\t\tint j = 0;\n\t\t\twhile (j < m && str.charAt(i + j) == sub.charAt(j)) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == m) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (count > max) {\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxOccurrences(String str, String sub){\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tint start = 0;\n\t\twhile(start < str.length()){\n\t\t\tint index = str.indexOf(sub, start);\n\t\t\tif(index == -1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t\tstart = index + 1;\n\t\t}\n\t\tif(count > max){\n\t\t\tmax = count;\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 9
    },
    {
        "id": "1187",
        "source": "leetcodeTitles",
        "source_id": "236",
        "url": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/",
        "language": "java",
        "query": "Lowest Common Ancestor of a Binary Tree",
        "snippets": [
            "\tTreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\t\tif(root == null) return null;\n\t\tif(root == p || root == q) return root;\n\t\tTreeNode left = lowestCommonAncestor(root.left, p, q);\n\t\tTreeNode right = lowestCommonAncestor(root.right, p, q);\n\t\tif(left != null && right != null) return root;\n\t\treturn left == null ? right : left;\n\t}\n}\n",
            "\tTreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\t\tif(root == null) return null;\n\t\tif(root == p || root == q) return root;\n\t\tTreeNode left = lowestCommonAncestor(root.left, p, q);\n\t\tTreeNode right = lowestCommonAncestor(root.right, p, q);\n\t\tif(left != null && right != null) return root;\n\t\treturn left != null ? left : right;\n\t}\n}\n",
            "\tNode lowestCommonAncestor(Node root, Node p, Node q) {\n\t\tif(root == null) return null;\n\t\tif(root == p || root == q) return root;\n\t\tNode left = lowestCommonAncestor(root.left, p, q);\n\t\tNode right = lowestCommonAncestor(root.right, p, q);\n\t\tif(left != null && right != null) return root;\n\t\treturn left != null ? left : right;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1188",
        "source": "leetcodeTitles",
        "source_id": "79",
        "url": "https://leetcode.com/problems/word-search/",
        "language": "java",
        "query": "Word Search",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tchar[][] board = {{'A','B','C','E'},{'S','F','C','S'},{'A','D','E','E'}};\n\t\tString word = \"ABCCED\";\n\t\tSystem.out.println(exist(board, word));\n\t}\n\tpublic static boolean exist(char[][] board, String word) {\n\t\tint m = board.length;\n\t\tint n = board[0].length;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(dfs(board, word, i, j, 0)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean dfs(char[][] board, String word, int i, int j, int index){\n\t\tif(index == word.length()) return true;\n\t\tif(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index)) return false;\n\t\tchar temp = board[i][j];\n\t\tboard[i][j] = '#';\n\t\tboolean res = dfs(board, word, i + 1, j, index + 1) || dfs(board, word, i - 1, j, index + 1) || dfs(board, word, i, j + 1, index + 1) || dfs(board, word, i, j - 1, index + 1);\n\t\tboard[i][j] = temp;\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[][] board = new String[][]{\n\t\t\t{\"A\",\"B\",\"C\",\"E\"},\n\t\t\t{\"S\",\"F\",\"C\",\"S\"},\n\t\t\t{\"A\",\"D\",\"E\",\"E\"}\n\t\t};\n\t\tString word = \"ABCCED\";\n\t\tSystem.out.println(exist(board, word));\n\t}\n\tpublic static boolean exist(String[][] board, String word) {\n\t\tint m = board.length;\n\t\tint n = board[0].length;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(dfs(board, word, i, j, 0)){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean dfs(String[][] board, String word, int i, int j, int k){\n\t\tif(k == word.length()){\n\t\t\treturn true;\n\t\t}\n\t\tif(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(k)){\n\t\t\treturn false;\n\t\t}\n\t\tchar c = board[i][j];\n\t\tboard[i][j] = '#';\n\t\tboolean res = dfs(board, word, i + 1, j, k + 1) || dfs(board, word, i - 1, j, k + 1) || dfs(board, word, i, j + 1, k + 1) || dfs(board, word, i, j - 1, k + 1);\n\t\tboard[i][j] = c;\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[][] board = new String[][]{\n\t\t\t{\"A\",\"B\",\"C\",\"E\"},\n\t\t\t{\"S\",\"F\",\"C\",\"S\"},\n\t\t\t{\"A\",\"D\",\"E\",\"E\"}\n\t\t};\n\t\tString word = \"ABCCED\";\n\t\tSystem.out.println(exist(board, word));\n\t}\n\tpublic static boolean exist(String[][] board, String word) {\n\t\tif(board == null || board.length == 0 || board[0].length == 0) return false;\n\t\tif(word == null || word.length() == 0) return false;\n\t\tint m = board.length;\n\t\tint n = board[0].length;\n\t\tboolean[][] visited = new boolean[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(dfs(board, word, i, j, 0, visited)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean dfs(String[][] board, String word, int i, int j, int k, boolean[][] visited){\n\t\tif(k == word.length()) return true;\n\t\tif(i < 0 || i >= board.length || j < 0 || j >= board[0].length) return false;\n\t\tif(visited[i][j]) return false;\n\t\tif(board[i][j] != word.charAt(k)) return false;\n\t\tvisited[i][j] = true;\n\t\tboolean res = dfs(board, word, i + 1, j, k + 1, visited) || dfs(board, word, i - 1, j, k + 1, visited) || dfs(board, word, i, j + 1, k + 1, visited) || dfs(board, word, i, j - 1, k + 1, visited);\n\t\tvisited[i][j] = false\n",
            "\tstatic void main(String[] args){\n\t\tString[][] board = new String[][]{\n\t\t\t{\"A\",\"B\",\"C\",\"E\"},\n\t\t\t{\"S\",\"F\",\"C\",\"S\"},\n\t\t\t{\"A\",\"D\",\"E\",\"E\"}\n\t\t};\n\t\tSystem.out.println(exist(board, \"ABCCED\"));\n\t\tSystem.out.println(exist(board, \"SEE\"));\n\t\tSystem.out.println(exist(board, \"ABCB\"));\n\t}\n\tpublic static boolean exist(String[][] board, String word) {\n\t\tif(board == null || board.length == 0 || board[0].length == 0)\n\t\t\treturn false;\n\t\tint m = board.length;\n\t\tint n = board[0].length;\n\t\tboolean[][] visited = new boolean[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(dfs(board, word, 0, i, j, visited))\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean dfs(String[][] board, String word, int index, int i, int j, boolean[][] visited){\n\t\tif(index == word.length())\n\t\t\treturn true;\n\t\tif(i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(index))\n\t\t\treturn false;\n\t\tvisited[i][j] = true;\n\t\tboolean res = dfs(board, word, index + 1, i + 1, j, visited) || dfs(board, word, index + 1, i - 1, j, visited) || dfs(board, word, index + 1, i, j + 1, visited) || dfs(board, word, index + 1, i, j - 1, visited);\n",
            "\tstatic void main(String[] args){\n\t\tString[][] board = {\n\t\t\t{\"A\",\"B\",\"C\",\"E\"},\n\t\t\t{\"S\",\"F\",\"C\",\"S\"},\n\t\t\t{\"A\",\"D\",\"E\",\"E\"}\n\t\t};\n\t\tString word = \"ABCCED\";\n\t\tSystem.out.println(exist(board, word));\n\t}\n\tpublic static boolean exist(String[][] board, String word) {\n\t\tint m = board.length;\n\t\tint n = board[0].length;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(dfs(board, word, i, j, 0)) return true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean dfs(String[][] board, String word, int i, int j, int k){\n\t\tif(k == word.length()) return true;\n\t\tif(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(k)) return false;\n\t\tchar temp = board[i][j];\n\t\tboard[i][j] = '#';\n\t\tboolean res = dfs(board, word, i + 1, j, k + 1) || dfs(board, word, i - 1, j, k + 1) || dfs(board, word, i, j + 1, k + 1) || dfs(board, word, i, j - 1, k + 1);\n\t\tboard[i][j] = temp;\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[][] board = {\n\t\t\t{\"A\",\"B\",\"C\",\"E\"},\n\t\t\t{\"S\",\"F\",\"C\",\"S\"},\n\t\t\t{\"A\",\"D\",\"E\",\"E\"}\n\t\t};\n\t\tString word = \"ABCCED\";\n\t\tSystem.out.println(exist(board, word));\n\t}\n\tpublic static boolean exist(char[][] board, String word) {\n\t\tint m = board.length;\n\t\tint n = board[0].length;\n\t\tboolean[][] visited = new boolean[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(dfs(board, word, 0, i, j, visited)){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean dfs(char[][] board, String word, int index, int i, int j, boolean[][] visited){\n\t\tif(index == word.length()){\n\t\t\treturn true;\n\t\t}\n\t\tif(i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i][j] != word.charAt(index)){\n\t\t\treturn false;\n\t\t}\n\t\tvisited[i][j] = true;\n\t\tboolean res = dfs(board, word, index + 1, i + 1, j, visited) || dfs(board, word, index + 1, i - 1, j, visited) || dfs(board, word, index + 1, i, j + 1, visited) || dfs(board, word, index + 1, i, j - 1, visited);\n\t\tvisited[i][j] = false;\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] board = new String[4];\n\t\tboard[0] = \"ABCE\";\n\t\tboard[1] = \"SFCS\";\n\t\tboard[2] = \"ADEE\";\n\t\tboard[3] = \"DAEF\";\n\t\tString word = \"ABCCED\";\n\t\tSystem.out.println(exist(board, word));\n\t}\n\tpublic static boolean exist(String[] board, String word) {\n\t\tint m = board.length;\n\t\tint n = board[0].length();\n\t\tboolean[][] visited = new boolean[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(dfs(board, word, i, j, 0, visited)){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean dfs(String[] board, String word, int i, int j, int index, boolean[][] visited){\n\t\tif(index == word.length()){\n\t\t\treturn true;\n\t\t}\n\t\tif(i < 0 || i >= board.length || j < 0 || j >= board[0].length() || visited[i][j] || board[i].charAt(j) != word.charAt(index)){\n\t\t\treturn false;\n\t\t}\n\t\tvisited[i][j] = true;\n\t\tboolean res = dfs(board, word, i + 1, j, index + 1, visited) || dfs(board, word, i - 1, j, index + 1, visited) || dfs(board, word, i, j + 1, index + 1, visited) || dfs(board, word, i, j - 1, index + 1, visited);\n\t\tvisited[i][j] = false;\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"ABCE\",\"SFCS\",\"ADEE\"};\n\t\tString[] board = {\"ABCE\",\"SFCS\",\"ADEE\"};\n\t\tSystem.out.println(exist(board, words));\n\t}\n\tpublic static boolean exist(String[] board, String[] words) {\n\t\tboolean[][] visited = new boolean[board.length][board[0].length];\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(search(board, words[i], visited, 0, 0)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean search(String[] board, String word, boolean[][] visited, int row, int col){\n\t\tif(word.length() == 0){\n\t\t\treturn true;\n\t\t}\n\t\tif(row < 0 || row >= board.length || col < 0 || col >= board[0].length || visited[row][col] || board[row].charAt(col) != word.charAt(0)){\n\t\t\treturn false;\n\t\t}\n\t\tvisited[row][col] = true;\n\t\tif(search(board, word.substring(1), visited, row - 1, col) || search(board, word.substring(1), visited, row + 1, col) || search(board, word.substring(1), visited, row, col - 1) || search(board, word.substring(1), visited, row, col + 1)){\n\t\t\treturn true;\n\t\t}\n\t\tvisited[row][col] = false;\n\t\treturn false;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"oath\",\"pea\",\"eat\",\"rain\"};\n\t\tString[] board = {\"oath\",\"pea\",\"eat\",\"rain\"};\n\t\tSystem.out.println(exist(board, words));\n\t}\n\tpublic static boolean exist(String[] board, String[] words) {\n\t\tint m = board.length;\n\t\tint n = board[0].length;\n\t\tboolean[][] visited = new boolean[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(exist(board, words, visited, i, j, 0)){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static boolean exist(String[] board, String[] words, boolean[][] visited, int i, int j, int index){\n\t\tif(index == words.length){\n\t\t\treturn true;\n\t\t}\n\t\tif(i < 0 || i >= board.length || j < 0 || j >= board[0].length || visited[i][j] || board[i].charAt(j) != words[index].charAt(0)){\n\t\t\treturn false;\n\t\t}\n\t\tvisited[i][j] = true;\n\t\tboolean res = exist(board, words, visited, i + 1, j, index + 1) || exist(board, words, visited, i - 1, j, index + 1) || exist(board, words, visited, i, j + 1, index + 1) || exist(board, words, visited, i, j - 1, index + 1);\n\t\tvisited[i][j] = false;\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 9
    },
    {
        "id": "1189",
        "source": "leetcodeTitles",
        "source_id": "1653",
        "url": "https://leetcode.com/problems/minimum-deletions-to-make-string-balanced/",
        "language": "java",
        "query": "Minimum Deletions to Make String Balanced",
        "snippets": [
            "\tint minDeletions(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tres += Math.max(0, count[i] - (s.length() + 1) / 2);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minDeletions(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tans += (count[i] - (count[i] & 1));\n\t\t}\n\t\treturn ans / 2;\n\t}\n}\n",
            "\tstatic int minDeletions(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint min = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tmin += Math.max(0, count[i] - (s.length() + 1) / 2);\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tstatic int minDeletions(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tres += Math.max(0, count[i] - (s.length() + 1) / 2);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int minDeletions(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint deletions = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] % 2 == 1){\n\t\t\t\tdeletions++;\n\t\t\t}\n\t\t}\n\t\treturn deletions;\n\t}\n}\n",
            "\tstatic int minDeletions(String str){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tcount[str.charAt(i) - 'a']++;\n\t\t}\n\t\tint deletions = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tint diff = count[i] - count[(i + 1) % 26];\n\t\t\tif(diff > 0){\n\t\t\t\tdeletions += diff;\n\t\t\t}\n\t\t}\n\t\treturn deletions;\n\t}\n}\n",
            "\tint minDeletions(String s) {\n\t\tint[] count = new int[26];\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < 26; i++) {\n\t\t\tans += Math.max(count[i] / 2, count[i] % 2);\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint minDeletions(String s) {\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tint min = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tmin += Math.max(0, count[i] - (s.length() + 1) / 2);\n\t\t}\n\t\treturn min;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1190",
        "source": "leetcodeTitles",
        "source_id": "1404",
        "url": "https://leetcode.com/problems/number-of-steps-to-reduce-a-number-in-binary-representation-to-one/",
        "language": "java",
        "query": "Number of Steps to Reduce a Number in Binary Representation to One",
        "snippets": [
            "\tstatic int numberOfSteps(int num){\n\t\tint count = 0;\n\t\twhile(num != 1){\n\t\t\tif(num % 2 == 0){\n\t\t\t\tnum = num / 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnum = num - 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int numberOfSteps(int n){\n\t\tint count = 0;\n\t\twhile(n != 1){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn = n / 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn = n - 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int steps(int n){\n\t\tint count = 0;\n\t\twhile(n != 1){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn /= 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn = n * 3 + 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static int steps(int n){\n\t\tif(n == 1) return count;\n\t\tif(n % 2 == 0) return steps(n/2);\n\t\telse return steps(n/2) + 1;\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static int numberOfSteps(int n){\n\t\tif(n == 1)\n\t\t\treturn count;\n\t\tif(n % 2 == 0)\n\t\t\tnumberOfSteps(n/2);\n\t\telse\n\t\t\tnumberOfSteps(n-1);\n\t\tcount++;\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int count=0;\n\tpublic static int steps(int n){\n\t\tif(n==1)\n\t\t\treturn count;\n\t\tif(n%2==0)\n\t\t\tcount++;\n\t\treturn steps(n/2);\n\t}\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(steps(5));\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static int numSteps(int n) {\n\t\tif(n == 1) return count;\n\t\tif(n % 2 == 0) {\n\t\t\tcount++;\n\t\t\treturn numSteps(n/2);\n\t\t}\n\t\telse {\n\t\t\tcount++;\n\t\t\treturn numSteps(n*3+1);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1191",
        "source": "leetcodeTitles",
        "source_id": "1465",
        "url": "https://leetcode.com/problems/maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts/",
        "language": "java",
        "query": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "snippets": [
            "\tint maxArea(int[] h) {\n\t\tint max = 0;\n\t\tint i = 0;\n\t\tint j = h.length - 1;\n\t\twhile (i < j) {\n\t\t\tmax = Math.max(max, Math.min(h[i], h[j]) * (j - i));\n\t\t\tif (h[i] < h[j]) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxArea(int[] h) {\n\t\tint max = 0;\n\t\tint i = 0;\n\t\tint j = h.length - 1;\n\t\twhile (i < j) {\n\t\t\tmax = Math.max(max, Math.min(h[i], h[j]) * (j - i));\n\t\t\tif (h[i] < h[j]) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxArea(int[] h) {\n\t\tint max = 0;\n\t\tint n = h.length;\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\twhile (i < j) {\n\t\t\tmax = Math.max(max, Math.min(h[i], h[j]) * (j - i));\n\t\t\tif (h[i] < h[j]) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1192",
        "source": "leetcodeTitles",
        "source_id": "2074",
        "url": "https://leetcode.com/problems/reverse-nodes-in-even-length-groups/",
        "language": "java",
        "query": "Reverse Nodes in Even Length Groups",
        "snippets": [
            "\tListNode reverseNodesInEvenLengthGroups(ListNode head){\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode pre = dummy;\n\t\tListNode cur = head;\n\t\tListNode next = head.next;\n\t\twhile(next != null){\n\t\t\tListNode nextNext = next.next;\n\t\t\tif(nextNext == null || nextNext.next == null) break;\n\t\t\tpre.next = nextNext;\n\t\t\tnext.next = nextNext.next;\n\t\t\tnextNext.next = cur;\n\t\t\tpre = cur;\n\t\t\tcur = next;\n\t\t\tnext = next.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode reverseNodesInEvenLengthGroups(ListNode head){\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode pre = dummy;\n\t\tListNode cur = head;\n\t\tListNode next = head.next;\n\t\twhile(next != null){\n\t\t\tListNode nextnext = next.next;\n\t\t\tif(nextnext == null || nextnext.next == null) break;\n\t\t\tpre.next = nextnext;\n\t\t\tnext.next = nextnext.next;\n\t\t\tnextnext.next = cur;\n\t\t\tpre = cur;\n\t\t\tcur = next;\n\t\t\tnext = next.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode reverseEven(ListNode head){\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode pre = dummy;\n\t\tListNode cur = head;\n\t\tListNode next = head.next;\n\t\twhile(next != null){\n\t\t\tcur.next = next.next;\n\t\t\tnext.next = pre.next;\n\t\t\tpre.next = next;\n\t\t\tif(cur.next == null) break;\n\t\t\tpre = cur;\n\t\t\tcur = cur.next;\n\t\t\tnext = cur.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode reverseEven(ListNode head){\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode pre = dummy;\n\t\tListNode cur = head;\n\t\tListNode next = head.next;\n\t\twhile(next != null){\n\t\t\tcur.next = next.next;\n\t\t\tnext.next = pre.next;\n\t\t\tpre.next = next;\n\t\t\tif(cur.next == null) break;\n\t\t\tcur = cur.next;\n\t\t\tnext = cur.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode reverseEven(ListNode head){\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode cur = head;\n\t\tListNode next = head.next;\n\t\tListNode pre = null;\n\t\twhile(cur != null && next != null){\n\t\t\tcur.next = pre;\n\t\t\tpre = cur;\n\t\t\tcur = next;\n\t\t\tnext = next.next;\n\t\t\tif(next != null)\n\t\t\t\tcur.next = next;\n\t\t}\n\t\treturn cur;\n\t}\n}\n",
            "\tListNode reverseEven(ListNode head){\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode cur = head;\n\t\tListNode next = head.next;\n\t\tListNode pre = null;\n\t\twhile(cur != null && next != null){\n\t\t\tListNode nextNext = next.next;\n\t\t\tnext.next = pre;\n\t\t\tpre = next;\n\t\t\tcur.next = nextNext;\n\t\t\tcur = nextNext;\n\t\t\tif(cur != null) next = cur.next;\n\t\t}\n\t\treturn pre;\n\t}\n}\n",
            "\tListNode reverseEven(ListNode head){\n\t\tif(head==null||head.next==null) return head;\n\t\tListNode p=head;\n\t\tListNode q=head.next;\n\t\tListNode r=q.next;\n\t\twhile(r!=null){\n\t\t\tq.next=p;\n\t\t\tp=q;\n\t\t\tq=r;\n\t\t\tr=r.next;\n\t\t}\n\t\tq.next=p;\n\t\thead.next=reverseEven(q);\n\t\treturn q;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1193",
        "source": "leetcodeTitles",
        "source_id": "1514",
        "url": "https://leetcode.com/problems/path-with-maximum-probability/",
        "language": "java",
        "query": "Path with Maximum Probability",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint[] ans = new int[2];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tint[] temp = new int[2];\n\t\t\t\ttemp[0] = i;\n\t\t\t\ttemp[1] = j;\n\t\t\t\tint cur = dfs(a, temp, 0);\n\t\t\t\tif(cur > max){\n\t\t\t\t\tmax = cur;\n\t\t\t\t\tans[0] = i;\n\t\t\t\t\tans[1] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t\tSystem.out.println(ans[0] + \" \" + ans[1]);\n\t}\n\tpublic\n\tstatic int dfs(int[][] a, int[] temp, int cur){\n\t\tint n = a.length;\n\t\tint m = a[0].length;\n\t\tif(temp[0] == n - 1 && temp[1] == m - 1){\n\t\t\treturn cur;\n\t\t}\n\t\tint[] next = new int[2];\n\t\tif(temp[0] + 1 < n){\n\t\t\tnext[0] = temp[0] + 1;\n\t\t\tnext[1] = temp[1];\n\t\t\tcur = dfs(a, next, cur + a[next[0]][next[1]]);\n\t\t}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int a_i = 0; a_i < n; a_i++){\n\t\t\tfor(int a_j = 0; a_j < m; a_j++){\n\t\t\t\ta[a_i][a_j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint k = in.nextInt();\n\t\tint[][] b = new int[k][2];\n\t\tfor(int b_i = 0; b_i < k; b_i++){\n\t\t\tfor(int b_j = 0; b_j < 2; b_j++){\n\t\t\t\tb[b_i][b_j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[k][2];\n\t\tfor(int c_i = 0; c_i < k; c_i++){\n\t\t\tfor(int c_j = 0; c_j < 2; c_j++){\n\t\t\t\tc[c_i][c_j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[k][2];\n\t\tfor(int d_i = 0; d_i < k; d_i++){\n\t\t\tfor(int d_j = 0; d_j < 2; d_j++){\n\t\t\t\td[d_i][d_j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[k][2];\n\t\tfor(int e_i = 0; e_i < k; e_i++){\n\t\t\tfor(int e_j = 0; e_j < 2; e_j++){\n\t\t\t\te[\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = a[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + a[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + a[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + a[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = dp[0][0];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(dp[i][j] > max){\n\t\t\t\t\tmax = dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][0] = a[i][0];\n\t\t}\n\t\tfor(int j = 0; j < m; j++){\n\t\t\tdp[0][j] = a[0][j];\n\t\t}\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tfor(int j = 1; j < m; j++){\n\t\t\t\tdp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[i-1][j-1] + a[i][j]);\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[n-1][m-1]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = a[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + a[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + a[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + a[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[n-1][m-1]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = a[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + a[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + a[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]) + a[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = dp[n-1][m-1];\n\t\tint i = n-1;\n\t\tint j = m-1;\n\t\twhile(i > 0 || j > 0){\n\t\t\tif(i == 0){\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse if(j == 0){\n\t\t\t\ti--;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(dp[i-1][j] > dp[i][j-1\n"
        ],
        "results": 10
    },
    {
        "id": "1194",
        "source": "leetcodeTitles",
        "source_id": "203",
        "url": "https://leetcode.com/problems/remove-linked-list-elements/",
        "language": "java",
        "query": "Remove Linked List Elements",
        "snippets": [
            "\tListNode removeElements(ListNode head, int val) {\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode prev = dummy;\n\t\twhile(head != null){\n\t\t\tif(head.val == val){\n\t\t\t\tprev.next = head.next;\n\t\t\t}else{\n\t\t\t\tprev = head;\n\t\t\t}\n\t\t\thead = head.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tNode removeElements(Node head, int val) {\n\t\tNode dummy = new Node(0);\n\t\tdummy.next = head;\n\t\tNode prev = dummy;\n\t\tNode cur = head;\n\t\twhile(cur != null){\n\t\t\tif(cur.val == val){\n\t\t\t\tprev.next = cur.next;\n\t\t\t}else{\n\t\t\t\tprev = cur;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1195",
        "source": "leetcodeTitles",
        "source_id": "1732",
        "url": "https://leetcode.com/problems/find-the-highest-altitude//",
        "language": "java",
        "query": "Find the Highest Altitude",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] altitude = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,\n",
            "\tstatic void main(String[] args){\n\t\tint[] altitude = {1,2,3,4,5,6,7,8,9,10};\n\t\tint max = 0;\n\t\tfor(int i = 0; i < altitude.length; i++){\n\t\t\tif(altitude[i] > max){\n\t\t\t\tmax = altitude[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The highest altitude is \" + max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] altitude = {10000,20000,30000,40000,50000,60000,70000,80000,90000,100000};\n\t\tint max = altitude[0];\n\t\tfor(int i = 0; i < altitude.length; i++){\n\t\t\tif(altitude[i] > max){\n\t\t\t\tmax = altitude[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The highest altitude is \" + max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] altitude = {5, 3, 6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n\t\tint highestAltitude = 0;\n\t\tfor(int i = 0; i < altitude.length; i++){\n\t\t\tif(altitude[i] > highestAltitude){\n\t\t\t\thighestAltitude = altitude[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The highest altitude is \" + highestAltitude);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] altitudes = {5, 3, 6, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n\t\tint highestAltitude = 0;\n\t\tfor(int i = 0; i < altitudes.length; i++){\n\t\t\tif(altitudes[i] > highestAltitude){\n\t\t\t\thighestAltitude = altitudes[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The highest altitude is \" + highestAltitude);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] altitude = {5, 3, 2, 6, 1, 4};\n\t\tint highest = 0;\n\t\tfor(int i = 0; i < altitude.length; i++){\n\t\t\tif(altitude[i] > highest){\n\t\t\t\thighest = altitude[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The highest altitude is \" + highest);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] altitude = {12,15,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,\n"
        ],
        "results": 10
    },
    {
        "id": "1196",
        "source": "leetcodeTitles",
        "source_id": "1201",
        "url": "https://leetcode.com/problems/ugly-number-iii/",
        "language": "java",
        "query": "Ugly Number III",
        "snippets": [
            "\tint nthUglyNumber(int n) {\n\t\tint[] ugly = new int[n];\n\t\tugly[0] = 1;\n\t\tint i2 = 0, i3 = 0, i5 = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint m2 = ugly[i2] * 2;\n\t\t\tint m3 = ugly[i3] * 3;\n\t\t\tint m5 = ugly[i5] * 5;\n\t\t\tint m = Math.min(m2, Math.min(m3, m5));\n\t\t\tugly[i] = m;\n\t\t\tif (m == m2) i2++;\n\t\t\tif (m == m3) i3++;\n\t\t\tif (m == m5) i5++;\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tint nthUglyNumber(int n) {\n\t\tint[] ugly = new int[n];\n\t\tugly[0] = 1;\n\t\tint i2 = 0, i3 = 0, i5 = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Math.min(Math.min(ugly[i2] * 2, ugly[i3] * 3), ugly[i5] * 5);\n\t\t\tugly[i] = min;\n\t\t\tif (ugly[i2] * 2 == min) i2++;\n\t\t\tif (ugly[i3] * 3 == min) i3++;\n\t\t\tif (ugly[i5] * 5 == min) i5++;\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tint nthUglyNumber(int n) {\n\t\tint[] ugly = new int[n];\n\t\tugly[0] = 1;\n\t\tint i2 = 0, i3 = 0, i5 = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint next = Math.min(Math.min(ugly[i2] * 2, ugly[i3] * 3), ugly[i5] * 5);\n\t\t\tugly[i] = next;\n\t\t\tif (next == ugly[i2] * 2) i2++;\n\t\t\tif (next == ugly[i3] * 3) i3++;\n\t\t\tif (next == ugly[i5] * 5) i5++;\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tint nthUglyNumber(int n) {\n\t\tint[] ugly = new int[n];\n\t\tugly[0] = 1;\n\t\tint i2 = 0, i3 = 0, i5 = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Math.min(Math.min(ugly[i2] * 2, ugly[i3] * 3), ugly[i5] * 5);\n\t\t\tugly[i] = min;\n\t\t\tif (min == ugly[i2] * 2) i2++;\n\t\t\tif (min == ugly[i3] * 3) i3++;\n\t\t\tif (min == ugly[i5] * 5) i5++;\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tint nthUglyNumber(int n) {\n\t\tif(n<=0) return 0;\n\t\tint[] nums = new int[n];\n\t\tnums[0] = 1;\n\t\tint i2 = 0, i3 = 0, i5 = 0;\n\t\tfor(int i=1; i<n; i++){\n\t\t\tnums[i] = Math.min(nums[i2]*2, Math.min(nums[i3]*3, nums[i5]*5));\n\t\t\tif(nums[i] == nums[i2]*2) i2++;\n\t\t\tif(nums[i] == nums[i3]*3) i3++;\n\t\t\tif(nums[i] == nums[i5]*5) i5++;\n\t\t}\n\t\treturn nums[n-1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1197",
        "source": "leetcodeTitles",
        "source_id": "897",
        "url": "https://leetcode.com/problems/increasing-order-search-tree/",
        "language": "java",
        "query": "Increasing Order Search Tree",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(5);\n\t\troot.left = new TreeNode(3);\n\t\troot.right = new TreeNode(7);\n\t\troot.left.left = new TreeNode(2);\n\t\troot.left.right = new TreeNode(4);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(8);\n\t\troot.left.left.left = new TreeNode(1);\n\t\troot.left.left.right = new TreeNode(3);\n\t\troot.left.right.left = new TreeNode(5);\n\t\troot.left.right.right = new TreeNode(7);\n\t\troot.right.left.left = new TreeNode(9);\n\t\troot.right.left.right = new TreeNode(11);\n\t\troot.right.right.left = new TreeNode(13);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(0);\n\t\troot.left.left.left.right = new TreeNode(2);\n\t\troot.left.left.right.left = new TreeNode(4);\n\t\troot.left.left.right.right = new TreeNode(6);\n\t\troot.left.right.left.left = new TreeNode(8);\n\t\troot.left.right.left.right = new TreeNode(10);\n\t\troot.left.right.right.left = new TreeNode(12);\n\t\troot.left.right.right.right = new TreeNode(14);\n\t\troot.right.left.left.left = new TreeNode(16);\n\t\troot.right.left.left.right = new TreeNode(18);\n\t\troot.right.left.right.left = new TreeNode(20);\n\t\troot.right.left.right.right = new TreeNode(22);\n\t\troot.right.right.left.left = new TreeNode(24);\n\t\troot.right.right\n",
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(10);\n\t\troot.left = new TreeNode(5);\n\t\troot.right = new TreeNode(15);\n\t\troot.left.left = new TreeNode(2);\n\t\troot.left.right = new TreeNode(7);\n\t\troot.right.left = new TreeNode(12);\n\t\troot.right.right = new TreeNode(17);\n\t\troot.left.left.left = new TreeNode(1);\n\t\troot.left.left.right = new TreeNode(3);\n\t\troot.left.right.left = new TreeNode(6);\n\t\troot.left.right.right = new TreeNode(8);\n\t\troot.right.left.left = new TreeNode(11);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(16);\n\t\troot.right.right.right = new TreeNode(18);\n\t\troot.left.left.left.left = new TreeNode(0);\n\t\troot.left.left.left.right = new TreeNode(4);\n\t\troot.left.left.right.left = new TreeNode(9);\n\t\troot.left.left.right.right = new TreeNode(12);\n\t\troot.left.right.left.left = new TreeNode(6);\n\t\troot.left.right.left.right = new TreeNode(8);\n\t\troot.left.right.right.left = new TreeNode(11);\n\t\troot.left.right.right.right = new TreeNode(13);\n\t\troot.right.left.left.left = new TreeNode(11);\n\t\troot.right.left.left.right = new TreeNode(13);\n\t\troot.right.left.right.left = new TreeNode(16);\n\t\troot.right.left.right.right = new TreeNode(18);\n\t\troot.right.right.left.left = new TreeNode(16);\n\t\troot.right.right\n",
            "\tClazz(){\n\t\t\n\t}\n\tpublic static void main(String[] args){\n\t\tClazz clazz = new Clazz();\n\t\tclazz.run();\n\t}\n\tpublic void run(){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.\n",
            "\tvoid main(String[] args){\n\t\tTreeNode root = new TreeNode(5);\n\t\troot.left = new TreeNode(3);\n\t\troot.right = new TreeNode(7);\n\t\troot.left.left = new TreeNode(2);\n\t\troot.left.right = new TreeNode(4);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(8);\n\t\troot.left.left.left = new TreeNode(1);\n\t\troot.left.left.right = new TreeNode(3);\n\t\troot.left.right.left = new TreeNode(5);\n\t\troot.left.right.right = new TreeNode(7);\n\t\troot.right.left.left = new TreeNode(6);\n\t\troot.right.left.right = new TreeNode(8);\n\t\troot.right.right.left = new TreeNode(9);\n\t\troot.right.right.right = new TreeNode(10);\n\t\troot.left.left.left.left = new TreeNode(0);\n\t\troot.left.left.left.right = new TreeNode(2);\n\t\troot.left.left.right.left = new TreeNode(4);\n\t\troot.left.left.right.right = new TreeNode(6);\n\t\troot.left.right.left.left = new TreeNode(5);\n\t\troot.left.right.left.right = new TreeNode(7);\n\t\troot.left.right.right.left = new TreeNode(8);\n\t\troot.left.right.right.right = new TreeNode(9);\n\t\troot.right.left.left.left = new TreeNode(6);\n\t\troot.right.left.left.right = new TreeNode(8);\n\t\troot.right.left.right.left = new TreeNode(9);\n\t\troot.right.left.right.right = new TreeNode(10);\n\t\troot.right.right.left.left = new TreeNode(9);\n\t\troot.right.right.\n",
            "\tstatic void main(String[] args){\n\t\tBinarySearchTree bst = new BinarySearchTree();\n\t\tbst.insert(10);\n\t\tbst.insert(5);\n\t\tbst.insert(15);\n\t\tbst.insert(3);\n\t\tbst.insert(7);\n\t\tbst.insert(13);\n\t\tbst.insert(17);\n\t\tbst.insert(11);\n\t\tbst.insert(6);\n\t\tbst.insert(8);\n\t\tbst.insert(12);\n\t\tbst.insert(16);\n\t\tbst.insert(14);\n\t\tbst.insert(4);\n\t\tbst.insert(9);\n\t\tbst.insert(2);\n\t\tbst.insert(1);\n\t\tbst.insert(0);\n\t\tbst.insert(20);\n\t\tbst.insert(19);\n\t\tbst.insert(18);\n\t\tbst.insert(21);\n\t\tbst.insert(22);\n\t\tbst.insert(23);\n\t\tbst.insert(24);\n\t\tbst.insert(25);\n\t\tbst.insert(26);\n\t\tbst.insert(27);\n\t\tbst.insert(28);\n\t\tbst.insert(29);\n\t\tbst.insert(30);\n\t\tbst.insert(31);\n\t\tbst.insert(32);\n\t\tbst.insert(33);\n\t\tbst.insert(34);\n\t\tbst.insert(35);\n\t\tbst.insert(36);\n\t\tbst.insert(37);\n\t\tbst.insert(38);\n\t\tbst.insert(39);\n\t\tbst.insert(40);\n\t\tbst.insert(41);\n\t\tbst.insert(42);\n\t\tbst.insert(43);\n\t\tbst.insert(44);\n\t\tbst.insert(45);\n\t\tbst.insert(46);\n\t\tbst\n",
            "\tstatic void main(String[] args){\n\t\tBinarySearchTree bst = new BinarySearchTree();\n\t\tbst.insert(10);\n\t\tbst.insert(5);\n\t\tbst.insert(15);\n\t\tbst.insert(3);\n\t\tbst.insert(7);\n\t\tbst.insert(13);\n\t\tbst.insert(17);\n\t\tbst.insert(2);\n\t\tbst.insert(6);\n\t\tbst.insert(12);\n\t\tbst.insert(16);\n\t\tbst.insert(4);\n\t\tbst.insert(8);\n\t\tbst.insert(14);\n\t\tbst.insert(18);\n\t\tbst.insert(1);\n\t\tbst.insert(9);\n\t\tbst.insert(11);\n\t\tbst.insert(19);\n\t\tbst.insert(20);\n\t\tbst.insert(21);\n\t\tbst.insert(22);\n\t\tbst.insert(23);\n\t\tbst.insert(24);\n\t\tbst.insert(25);\n\t\tbst.insert(26);\n\t\tbst.insert(27);\n\t\tbst.insert(28);\n\t\tbst.insert(29);\n\t\tbst.insert(30);\n\t\tbst.insert(31);\n\t\tbst.insert(32);\n\t\tbst.insert(33);\n\t\tbst.insert(34);\n\t\tbst.insert(35);\n\t\tbst.insert(36);\n\t\tbst.insert(37);\n\t\tbst.insert(38);\n\t\tbst.insert(39);\n\t\tbst.insert(40);\n\t\tbst.insert(41);\n\t\tbst.insert(42);\n\t\tbst.insert(43);\n\t\tbst.insert(44);\n\t\tbst.insert(45);\n\t\tbst.insert(46);\n\t\tbst.insert(47);\n\t\tbst\n",
            "\tClazz(){\n\t\t\n\t}\n\tpublic static void main(String[] args){\n\t\tTreeNode root = new TreeNode(5);\n\t\troot.left = new TreeNode(3);\n\t\troot.right = new TreeNode(7);\n\t\troot.left.left = new TreeNode(2);\n\t\troot.left.right = new TreeNode(4);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(8);\n\t\t\n\t\tSystem.out.println(increasingOrderSearchTree(root));\n\t}\n\tpublic static TreeNode increasingOrderSearchTree(TreeNode root){\n\t\tif(root == null) return null;\n\t\tTreeNode left = increasingOrderSearchTree(root.left);\n\t\tTreeNode right = increasingOrderSearchTree(root.right);\n\t\tif(left != null){\n\t\t\tif(left.val > root.val){\n\t\t\t\tTreeNode temp = left;\n\t\t\t\tleft = root;\n\t\t\t\troot = temp;\n\t\t\t}\n\t\t}\n\t\tif(right != null){\n\t\t\tif(right.val > root.val){\n\t\t\t\tTreeNode temp = right;\n\t\t\t\tright = root;\n\t\t\t\troot = temp;\n\t\t\t}\n\t\t}\n\t\troot.left = left;\n\t\troot.right = right;\n\t\treturn root;\n\t}\n}\n",
            "\tClazz(){\n\t\t\n\t}\n\tpublic\n\tvoid insert(int key){\n\t\t\n\t}\n\tpublic\n\tboolean search(int key){\n\t\t\n\t}\n\tpublic\n\tvoid print(){\n\t\t\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1198",
        "source": "leetcodeTitles",
        "source_id": "1854",
        "url": "https://leetcode.com/problems/maximum-population-year/",
        "language": "java",
        "query": "Maximum Population Year",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tint max_index = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t\tmax_index = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max_index + 1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint max = a[0];\n\t\tint max_index = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t\tmax_index = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max_index + 1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] year = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020};\n\t\tint[] population = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};\n\t\tint max = 0;\n\t\tint maxYear = 0;\n\t\tfor(int i = 0; i < year.length; i++){\n\t\t\tif(population[i] > max){\n\t\t\t\tmax = population[i];\n\t\t\t\tmaxYear = year[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The maximum population year is \" + maxYear);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] year = {2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020};\n\t\tint[] population = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};\n\t\tint max = 0;\n\t\tint maxYear = 0;\n\t\tfor(int i = 0; i < year.length; i++){\n\t\t\tif(population[i] > max){\n\t\t\t\tmax = population[i];\n\t\t\t\tmaxYear = year[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Maximum Population Year: \" + maxYear);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] year = {2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020};\n\t\tint[] population = {12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33};\n\t\tint max = 0;\n\t\tint maxYear = 0;\n\t\tfor(int i = 0; i < year.length; i++){\n\t\t\tif(population[i] > max){\n\t\t\t\tmax = population[i];\n\t\t\t\tmaxYear = year[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The maximum population year is \" + maxYear + \" with a population of \" + max);\n\t}\n}\n"
        ],
        "results": 6
    },
    {
        "id": "1199",
        "source": "leetcodeTitles",
        "source_id": "2280",
        "url": "https://leetcode.com/problems/minimum-lines-to-represent-a-line-chart/",
        "language": "java",
        "query": "Minimum Lines to Represent a Line Chart",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {1,2,3,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint n = arr.length;\n\t\tint lines = 0;\n\t\tint i = 0;\n\t\twhile(i < n){\n\t\t\tint j = i;\n\t\t\twhile(j < n && arr[j] == arr[i]){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tlines++;\n\t\t\ti = j;\n\t\t}\n\t\tSystem.out.println(lines);\n\t}\n}\n",
            "\tstatic int minLines(int[] a, int[] b){\n\t\tint n = a.length;\n\t\tint m = b.length;\n\t\tint[][] dp = new int[n+1][m+1];\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tfor(int j = 1; j <= m; j++){\n\t\t\t\tif(a[i-1] == b[j-1]){\n\t\t\t\t\tdp[i][j] = dp[i-1][j-1] + 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n][m];\n\t}\n}\n",
            "\tint[] getLineChart(int[] data){\n\t\tint[] result = new int[data.length];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < data.length; i++){\n\t\t\tif(data[i] > max){\n\t\t\t\tmax = data[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < data.length; i++){\n\t\t\tresult[i] = max - data[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int minLines(int[] a){\n\t\tint n = a.length;\n\t\tint[] b = new int[n];\n\t\tb[0] = a[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tb[i] = b[i-1] + a[i];\n\t\t}\n\t\tint min = b[0];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(b[i] < min){\n\t\t\t\tmin = b[i];\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1200",
        "source": "leetcodeTitles",
        "source_id": "1374",
        "url": "https://leetcode.com/problems/generate-a-string-with-characters-that-have-odd-counts/",
        "language": "java",
        "query": "Generate a String With Characters That Have Odd Counts",
        "snippets": [
            "\tstatic String oddCounts(String str){\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.indexOf(str.charAt(i)) % 2 != 0){\n\t\t\t\tresult += str.charAt(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tString oddCounts(String str){\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.indexOf(str.charAt(i)) % 2 != 0){\n\t\t\t\tresult += str.charAt(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tString oddCounts(String str){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint[] count = new int[256];\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tcount[str.charAt(i)]++;\n\t\t}\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(count[str.charAt(i)] % 2 != 0){\n\t\t\t\tsb.append(str.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString oddCounts(String str){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.indexOf(str.charAt(i)) % 2 != 0){\n\t\t\t\tsb.append(str.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString oddCounts(String str){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.indexOf(str.charAt(i)) % 2 == 1){\n\t\t\t\tsb.append(str.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString oddCounts(String str){\n\t\tString result = \"\";\n\t\tint[] count = new int[256];\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tcount[str.charAt(i)]++;\n\t\t}\n\t\tfor(int i = 0; i < 256; i++){\n\t\t\tif(count[i] % 2 == 1){\n\t\t\t\tresult += (char)i;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tString odd(String str){\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.indexOf(str.charAt(i)) % 2 != 0){\n\t\t\t\tresult += str.charAt(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tString generateString(String s){\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.indexOf(s.charAt(i)) % 2 != 0){\n\t\t\t\tresult += s.charAt(i);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tString generateString(String s){\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.substring(i, i+1).equals(\"a\") || s.substring(i, i+1).equals(\"e\") || s.substring(i, i+1).equals(\"i\") || s.substring(i, i+1).equals(\"o\") || s.substring(i, i+1).equals(\"u\")){\n\t\t\t\tif(s.substring(i, i+1).equals(\"a\") || s.substring(i, i+1).equals(\"e\") || s.substring(i, i+1).equals(\"i\") || s.substring(i, i+1).equals(\"o\") || s.substring(i, i+1).equals(\"u\")){\n\t\t\t\t\tresult += s.substring(i, i+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1201",
        "source": "leetcodeTitles",
        "source_id": "894",
        "url": "https://leetcode.com/problems/all-possible-full-binary-trees/",
        "language": "java",
        "query": "All Possible Full Binary Trees",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = i+1;\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = i+1;\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = i+1;\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = i+1;\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = i+1;\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = i+1;\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = i+1;\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = i+1;\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = j+1;\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int k = 0; k < n; k++){\n\t\t\tj[k] = k+1;\n\t\t}\n\t\tint[] k = new int[n];\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = i+1;\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = i+1;\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = i+1;\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = i+1;\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = i+1;\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = i+1;\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = i+1;\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = i+1;\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = i+1;\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = i+1;\n\t\t}\n\t\tint[] k = new int[n];\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tSystem.out.println(count(n));\n\t}\n\tpublic static int count(int n){\n\t\tif(n == 0) return 1;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i <= n; i++){\n\t\t\tsum += count(i-1) * count(n-i);\n\t\t}\n\t\treturn sum;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1202",
        "source": "leetcodeTitles",
        "source_id": "2150",
        "url": "https://leetcode.com/problems/find-all-lonely-numbers-in-the-array/",
        "language": "java",
        "query": "Find All Lonely Number in the Array",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,\n"
        ],
        "results": 10
    },
    {
        "id": "1203",
        "source": "leetcodeTitles",
        "source_id": "722",
        "url": "https://leetcode.com/problems/remove-comments/",
        "language": "java",
        "query": "Remove Comments",
        "snippets": [
            "\tvoid method(){\n\t\t/*\n\t\t * This is a comment\n\t\t */\n\t\tint a = 0;\n\t\tint b = 1;\n\t\tint c = a + b;\n\t}\n}\n",
            "\tvoid method(){\n\t\t/*\n\t\t * This is a comment\n\t\t */\n\t\t// This is a comment\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n",
            "\tvoid method(){\n\t\t/*\n\t\t * This is a comment\n\t\t */\n\t\tint a = 0;\n\t\tint b = 1;\n\t\tint c = a + b;\n\t\tSystem.out.println(c);\n\t}\n}\n",
            "\tvoid method(){\n\t\t/*\n\t\t * This is a comment\n\t\t */\n\t\tint i = 0;\n\t\t// This is a comment\n\t\tint j = 0;\n\t}\n}\n",
            "\tvoid method(){\n\t\t/*\n\t\t * This is a comment\n\t\t *\n\t\t * This is another comment\n\t\t */\n\t\t// This is a comment\n\t\t// This is another comment\n\t}\n}\n"
        ],
        "results": 9
    },
    {
        "id": "1204",
        "source": "leetcodeTitles",
        "source_id": "898",
        "url": "https://leetcode.com/problems/bitwise-ors-of-subarrays/",
        "language": "java",
        "query": "Bitwise ORs of Subarrays",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,2,3,3};\n\t\tint[] arr2 = {1,1,2,2,3,3};\n\t\tint[] arr3 = {1,1,2,2,3,3};\n\t\tint[] arr4 = {1,1,2,2,3,3};\n\t\tint[] arr5 = {1,1,2,2,3,3};\n\t\tint[] arr6 = {1,1,2,2,3,3};\n\t\tint[] arr7 = {1,1,2,2,3,3};\n\t\tint[] arr8 = {1,1,2,2,3,3};\n\t\tint[] arr9 = {1,1,2,2,3,3};\n\t\tint[] arr10 = {1,1,2,2,3,3};\n\t\tint[] arr11 = {1,1,2,2,3,3};\n\t\tint[] arr12 = {1,1,2,2,3,3};\n\t\tint[] arr13 = {1,1,2,2,3,3};\n\t\tint[] arr14 = {1,1,2,2,3,3};\n\t\tint[] arr15 = {1,1,2,2,3,3};\n\t\tint[] arr16 = {1,1,2,2,3,3};\n\t\tint[] arr17 = {1,1,2,2,3,3};\n\t\tint[] arr18 = {1,1,2,2,3,3};\n\t\tint[] arr19 = {1,1,2,2,3,3};\n\t\tint[] arr20 = {1,1,2,2,3,3};\n\t\tint[] arr21 = {1,1,2,2,3,3};\n\t\tint[] arr22 = {1,1,2,2,3,3};\n\t\tint[] arr23 = {1,1,2,2,3,3};\n\t\tint[] arr24 =\n",
            "\tstatic int[] subarrays(int[] arr){\n\t\tint[] result = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i; j < arr.length; j++){\n\t\t\t\tsum |= arr[j];\n\t\t\t\tresult[j] = sum;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] subarray(int[] a, int[] b){\n\t\tint[] c = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tc[i] = a[i] | b[i];\n\t\t}\n\t\treturn c;\n\t}\n}\n",
            "\tstatic int[] subarrayBitwiseORs(int[] A){\n\t\tint n = A.length;\n\t\tint[] res = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint cur = A[i];\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tcur |= A[j];\n\t\t\t\tres[i] = cur;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] subarrayBitwiseORs(int[] A){\n\t\tint n = A.length;\n\t\tint[] res = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tres[i] = A[i];\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tres[i] |= A[j];\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,0,0,1,0};\n\t\tint[] arr2 = {1,1,0,0,1,0};\n\t\tint[] arr3 = {1,1,0,0,1,0};\n\t\tint[] arr4 = {1,1,0,0,1,0};\n\t\tint[] arr5 = {1,1,0,0,1,0};\n\t\tint[] arr6 = {1,1,0,0,1,0};\n\t\tint[] arr7 = {1,1,0,0,1,0};\n\t\tint[] arr8 = {1,1,0,0,1,0};\n\t\tint[] arr9 = {1,1,0,0,1,0};\n\t\tint[] arr10 = {1,1,0,0,1,0};\n\t\tint[] arr11 = {1,1,0,0,1,0};\n\t\tint[] arr12 = {1,1,0,0,1,0};\n\t\tint[] arr13 = {1,1,0,0,1,0};\n\t\tint[] arr14 = {1,1,0,0,1,0};\n\t\tint[] arr15 = {1,1,0,0,1,0};\n\t\tint[] arr16 = {1,1,0,0,1,0};\n\t\tint[] arr17 = {1,1,0,0,1,0};\n\t\tint[] arr18 = {1,1,0,0,1,0};\n\t\tint[] arr19 = {1,1,0,0,1,0};\n\t\tint[] arr20 = {1,1,0,0,1,0};\n\t\tint[] arr21 = {1,1,0,0,1,0};\n\t\tint[] arr22 = {1,1,0,0,1,0};\n\t\tint[] arr23 = {1,1,0,0,1,0};\n\t\tint[] arr24 =\n",
            "\tstatic int[] subarrayBitwiseOrs(int[] a, int[] b){\n\t\tint[] c = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tc[i] = a[i] | b[i];\n\t\t}\n\t\treturn c;\n\t}\n}\n"
        ],
        "results": 9
    },
    {
        "id": "1205",
        "source": "leetcodeTitles",
        "source_id": "227",
        "url": "https://leetcode.com/problems/basic-calculator-ii/",
        "language": "java",
        "query": "Basic Calculator II",
        "snippets": [
            "\tint calculate(String s) {\n\t\tint sum = 0;\n\t\tint num = 0;\n\t\tint sign = 1;\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c == '+') {\n\t\t\t\tsum += num;\n\t\t\t\tnum = 0;\n\t\t\t\tsign = 1;\n\t\t\t} else if (c == '-') {\n\t\t\t\tsum += num;\n\t\t\t\tnum = 0;\n\t\t\t\tsign = -1;\n\t\t\t} else if (c == '*') {\n\t\t\t\tnum *= sign;\n\t\t\t\tsum += num;\n\t\t\t\tnum = 0;\n\t\t\t\tsign = 1;\n\t\t\t} else if (c == '/') {\n\t\t\t\tnum *= sign;\n\t\t\t\tsum += num;\n\t\t\t\tnum = 0;\n\t\t\t\tsign = 1;\n\t\t\t} else {\n\t\t\t\tnum = num * 10 + (c - '0');\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tsum += num;\n\t\treturn sum;\n\t}\n}\n",
            "\tint calculate(String s) {\n\t\tint sum = 0;\n\t\tint num = 0;\n\t\tint sign = 1;\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c == '+') {\n\t\t\t\tsign = 1;\n\t\t\t} else if (c == '-') {\n\t\t\t\tsign = -1;\n\t\t\t} else if (c >= '0' && c <= '9') {\n\t\t\t\tnum = num * 10 + c - '0';\n\t\t\t} else {\n\t\t\t\tsum += num * sign;\n\t\t\t\tnum = 0;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tsum += num * sign;\n\t\treturn sum;\n\t}\n}\n",
            "\tint calculate(String s) {\n\t\tint sum = 0;\n\t\tint num = 0;\n\t\tint sign = 1;\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n\t\t\t\tnum = num * 10 + (s.charAt(i) - '0');\n\t\t\t} else if (s.charAt(i) == '+') {\n\t\t\t\tsum += sign * num;\n\t\t\t\tnum = 0;\n\t\t\t\tsign = 1;\n\t\t\t} else if (s.charAt(i) == '-') {\n\t\t\t\tsum += sign * num;\n\t\t\t\tnum = 0;\n\t\t\t\tsign = -1;\n\t\t\t} else if (s.charAt(i) == '(') {\n\t\t\t\tsum += sign * num;\n\t\t\t\tnum = 0;\n\t\t\t\tsign = 1;\n\t\t\t} else if (s.charAt(i) == ')') {\n\t\t\t\tsum += sign * num;\n\t\t\t\tnum = 0;\n\t\t\t\tsign = 1;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tsum += sign * num;\n\t\treturn sum;\n\t}\n}\n",
            "\tint calculate(String s) {\n\t\tint sum = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s1 = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint a1 = 0;\n\t\tint b = 0;\n\t\tint c = 0;\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tint f = 0;\n\t\tint g = 0;\n\t\tint h = 0;\n\t\tint i1 = 0;\n\t\tint j1 = 0;\n\t\tint k1 = 0;\n\t\tint l1 = 0;\n\t\tint m1 = 0;\n\t\tint n1 = 0;\n\t\tint o1 = 0;\n\t\tint p1 = 0;\n\t\tint q1 = 0;\n\t\tint r1 = 0;\n\t\tint s2 = 0;\n\t\tint t1 = 0;\n\t\tint u1 = 0;\n\t\tint v1 = 0;\n\t\tint w1 = 0;\n\t\tint x1 = 0;\n\t\tint y1 = 0;\n\t\tint z1 = 0;\n\t\tint a2 = 0;\n\t\tint b1 = 0;\n\t\tint c1 = 0;\n\t\tint d1 = 0;\n\t\tint e1 = 0;\n\t\tint f1 = 0;\n\t\tint g1 = 0;\n\t\tint h1 = 0;\n\t\tint i2 = 0;\n\t\tint j2 = 0;\n\t\tint k2 = 0;\n\t\tint l2 = 0;\n",
            "\tint calculate(String s) {\n\t\tint sum = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s1 = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n\t\tint ggg = 0;\n\t\tint hhh = 0;\n\t\tint iii = 0;\n\t\tint jjj =\n",
            "\tint calculate(String s) {\n\t\tint sum = 0;\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c == '+') {\n\t\t\t\tsum += calculate(s.substring(i + 1));\n\t\t\t\ti = s.length();\n\t\t\t} else if (c == '-') {\n\t\t\t\tsum -= calculate(s.substring(i + 1));\n\t\t\t\ti = s.length();\n\t\t\t} else if (c == '*') {\n\t\t\t\tsum *= calculate(s.substring(i + 1));\n\t\t\t\ti = s.length();\n\t\t\t} else if (c == '/') {\n\t\t\t\tsum /= calculate(s.substring(i + 1));\n\t\t\t\ti = s.length();\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tint calculate(String s) {\n\t\tint res = 0;\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) == '+' || s.charAt(i) == '-') {\n\t\t\t\tres += calculate(s.substring(0, i));\n\t\t\t\ts = s.substring(i + 1);\n\t\t\t\ti = 0;\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn res + calculate(s);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1206",
        "source": "leetcodeTitles",
        "source_id": "2160",
        "url": "https://leetcode.com/problems/minimum-sum-of-four-digit-number-after-splitting-digits/",
        "language": "java",
        "query": "Minimum Sum of Four Digit Number After Splitting Digits",
        "snippets": [
            "\tstatic int minSum(int n){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic static void main(String[] args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint sum=minSum(n);\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic int minSum(int n){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic static void main(String[] args){\n\t\tScanner in=new Scanner(System.in);\n\t\tint n=in.nextInt();\n\t\tint sum=minSum(n);\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic int minSum(int n){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=minSum(temp%k);\n\t\t\ttemp/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=minSum(temp%k,m);\n\t\t\ttemp/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=minSum(temp%k,m,l);\n\t\t\ttemp/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l,int o){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=minSum(temp%k,m,l,o);\n\t\t\ttemp/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l,int o,int p){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=minSum(temp%k,m,l,o,p);\n\t\t\ttemp/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n",
            "\tstatic int minSum(int n){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=minSum(temp%k);\n\t\t\ttemp/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=minSum(temp%k,m);\n\t\t\ttemp/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp>0){\n\t\t\tsum+=minSum(temp%k,m,l);\n\t\t\ttemp/=k;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int minSum(int n){\n\t\tint sum=0;\n\t\twhile(n>0){\n\t\t\tsum+=n%10;\n\t\t\tn/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k){\n\t\tint sum=0;\n\t\twhile(n>0){\n\t\t\tsum+=minSum(n%k);\n\t\t\tn/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m){\n\t\tint sum=0;\n\t\twhile(n>0){\n\t\t\tsum+=minSum(n%k,m);\n\t\t\tn/=k;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l){\n\t\tint sum=0;\n\t\twhile(n>0){\n\t\t\tsum+=minSum(n%k,m,l);\n\t\t\tn/=k;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int minSum(int n){\n\t\tint sum = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tsum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n, int k){\n\t\tint sum = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tsum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n, int k, int m){\n\t\tint sum = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tsum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n, int k, int m, int l){\n\t\tint sum = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tsum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n, int k, int m, int l, int o){\n\t\tint sum = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tsum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n, int k, int m, int l, int o, int p){\n\t\tint sum = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tsum += temp % 10;\n\t\t\ttemp /= 10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n, int k, int m, int l, int o, int p, int q){\n\t\tint sum = 0\n",
            "\tstatic int minSum(int n){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tint digit=temp%10;\n\t\t\tsum+=digit;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tint digit=temp%10;\n\t\t\tsum+=digit;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tint digit=temp%10;\n\t\t\tsum+=digit;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tint digit=temp%10;\n\t\t\tsum+=digit;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l,int o){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tint digit=temp%10;\n\t\t\tsum+=digit;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l,int o,int p){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tint digit=temp%10;\n\t\t\tsum+=digit;\n",
            "\tstatic int minSum(int n){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tint digit=temp%10;\n\t\t\tsum+=digit;\n\t\t\ttemp/=10;\n\t\t}\n\t\tint min=sum;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tint temp1=i;\n\t\t\tint sum1=0;\n\t\t\twhile(temp1!=0){\n\t\t\t\tint digit1=temp1%10;\n\t\t\t\tsum1+=digit1;\n\t\t\t\ttemp1/=10;\n\t\t\t}\n\t\t\tif(sum1<min){\n\t\t\t\tmin=sum1;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tstatic int minSum(int n){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum%k;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum%k+m;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum%k+m+l;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l,int o){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum%k+m+l+o;\n\t}\n\tpublic\n\tstatic int minSum(int n,int k,int m,int l,int o,int p){\n\t\tint sum=0;\n\t\tint temp=n;\n\t\twhile(temp!=0){\n\t\t\tsum+=temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum%k+m+l+o+p;\n\t}\n",
            "\tstatic void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint sum = 0;\n\t\t\tint temp = arr[i];\n\t\t\twhile(temp > 0){\n\t\t\t\tsum += temp % 10;\n\t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\tif(sum < min){\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1207",
        "source": "leetcodeTitles",
        "source_id": "1302",
        "url": "https://leetcode.com/problems/deepest-leaves-sum/",
        "language": "java",
        "query": "Deepest Leaves Sum",
        "snippets": [
            "\tint sumOfDeepestLeaves(TreeNode root) {\n\t\tif(root == null) return 0;\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t\treturn res[0];\n\t}\n\tpublic int helper(TreeNode root, int[] res){\n\t\tif(root == null) return 0;\n\t\tif(root.left == null && root.right == null){\n\t\t\tres[0] = Math.max(res[0], root.val);\n\t\t\treturn root.val;\n\t\t}\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tres[0] = Math.max(res[0], left + right);\n\t\treturn left + right + root.val;\n\t}\n}\n",
            "\tint sumOfDeepestLeaves(TreeNode root) {\n\t\tif(root == null) return 0;\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t\treturn res[0];\n\t}\n\tprivate void helper(TreeNode root, int[] res){\n\t\tif(root == null) return;\n\t\tif(root.left == null && root.right == null){\n\t\t\tres[0] = Math.max(res[0], root.val);\n\t\t\treturn;\n\t\t}\n\t\thelper(root.left, res);\n\t\thelper(root.right, res);\n\t}\n}\n",
            "\tint sumOfDeepestLeaves(TreeNode root) {\n\t\tif(root == null) return 0;\n\t\tint left = sumOfDeepestLeaves(root.left);\n\t\tint right = sumOfDeepestLeaves(root.right);\n\t\treturn Math.max(left, right) + root.val;\n\t}\n}\n",
            "\tint sumOfDeepestLeaves(Node root) {\n\t\tif(root == null) return 0;\n\t\tint left = sumOfDeepestLeaves(root.left);\n\t\tint right = sumOfDeepestLeaves(root.right);\n\t\tif(left == 0 && right == 0) return root.val;\n\t\tif(left > right) return left + root.val;\n\t\treturn right + root.val;\n\t}\n}\n",
            "\tint sumOfDeepestLeaves(TreeNode root) {\n\t\tint sum = 0;\n\t\tint max = 0;\n\t\tint maxDepth = 0;\n\t\tint[] depth = new int[1];\n\t\tsum = sumOfDeepestLeaves(root, depth, max, maxDepth);\n\t\treturn sum;\n\t}\n\tpublic int sumOfDeepestLeaves(TreeNode root, int[] depth, int max, int maxDepth) {\n\t\tif (root == null) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (root.left == null && root.right == null) {\n\t\t\tif (depth[0] > maxDepth) {\n\t\t\t\tmaxDepth = depth[0];\n\t\t\t\tmax = root.val;\n\t\t\t} else if (depth[0] == maxDepth) {\n\t\t\t\tmax += root.val;\n\t\t\t}\n\t\t\treturn root.val;\n\t\t}\n\t\tdepth[0]++;\n\t\tint left = sumOfDeepestLeaves(root.left, depth, max, maxDepth);\n\t\tdepth[0]--;\n\t\tint right = sumOfDeepestLeaves(root.right, depth, max, maxDepth);\n\t\tif (depth[0] > maxDepth) {\n\t\t\tmaxDepth = depth[0];\n\t\t\tmax = left + right;\n\t\t} else if (depth[0] == maxDepth) {\n\t\t\tmax += left + right;\n\t\t}\n\t\treturn left + right;\n\t}\n}\n",
            "\tint sumOfDeepestLeaves(TreeNode root) {\n\t\tif(root==null) return 0;\n\t\tint[] res=new int[1];\n\t\thelper(root,res);\n\t\treturn res[0];\n\t}\n\tpublic void helper(TreeNode root,int[] res){\n\t\tif(root==null) return;\n\t\tif(root.left==null&&root.right==null){\n\t\t\tres[0]=Math.max(res[0],root.val);\n\t\t\treturn;\n\t\t}\n\t\thelper(root.left,res);\n\t\thelper(root.right,res);\n\t}\n}\n",
            "\tint sumOfDeepestLeaves(TreeNode root) {\n\t\tint sum = 0;\n\t\tif(root == null) return sum;\n\t\tint maxDepth = getMaxDepth(root);\n\t\tsum = getSum(root, maxDepth);\n\t\treturn sum;\n\t}\n\tprivate int getSum(TreeNode root, int maxDepth){\n\t\tif(root == null) return 0;\n\t\tif(maxDepth == 1) return root.val;\n\t\tint left = getSum(root.left, maxDepth - 1);\n\t\tint right = getSum(root.right, maxDepth - 1);\n\t\treturn left + right;\n\t}\n\tprivate int getMaxDepth(TreeNode root){\n\t\tif(root == null) return 0;\n\t\tint left = getMaxDepth(root.left);\n\t\tint right = getMaxDepth(root.right);\n\t\treturn Math.max(left, right) + 1;\n\t}\n}\n",
            "\tint sumOfDeepestLeaves(TreeNode root) {\n\t\tint sum = 0;\n\t\tint max = 0;\n\t\tint depth = 0;\n\t\tint[] depthAndSum = new int[2];\n\t\tdepthAndSum = getDepthAndSum(root, depth, sum);\n\t\tmax = depthAndSum[0];\n\t\tsum = depthAndSum[1];\n\t\treturn sum;\n\t}\n\tpublic int[] getDepthAndSum(TreeNode root, int depth, int sum){\n\t\tif(root == null){\n\t\t\treturn new int[]{depth, sum};\n\t\t}\n\t\tint[] left = getDepthAndSum(root.left, depth+1, sum);\n\t\tint[] right = getDepthAndSum(root.right, depth+1, sum);\n\t\tif(left[0] > right[0]){\n\t\t\treturn new int[]{left[0], left[1] + root.val};\n\t\t}\n\t\telse{\n\t\t\treturn new int[]{right[0], right[1] + root.val};\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1208",
        "source": "leetcodeTitles",
        "source_id": "1551",
        "url": "https://leetcode.com/problems/minimum-operations-to-make-array-equal/",
        "language": "java",
        "query": "Minimum Operations to Make Array Equal",
        "snippets": [
            "\tstatic int minOperations(int[] arr){\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\tif(sum % 2 != 0){\n\t\t\treturn -1;\n\t\t}\n\t\tint target = sum / 2;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] > target){\n\t\t\t\tcount += arr[i] - target;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minOperations(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 0;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = dp[i-1] + 1;\n\t\t\tif(nums[i] > nums[i-1]){\n\t\t\t\tdp[i] = Math.min(dp[i], dp[i-1]);\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tstatic int minOperations(int[] arr) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\tif(sum % 2 == 1){\n\t\t\treturn -1;\n\t\t}\n\t\tint target = sum / 2;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] > target){\n\t\t\t\tcount += arr[i] - target;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] arr) {\n\t\tint n = arr.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 0;\n\t\tdp[1] = Math.abs(arr[0] - arr[1]);\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tdp[i] = Math.min(dp[i - 1] + Math.abs(arr[i] - arr[i - 1]), dp[i - 2] + Math.abs(arr[i] - arr[i - 2]));\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tstatic int minOperations(int n) {\n\t\tint count = 0;\n\t\twhile(n > 1){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn = n / 2;\n\t\t\t}else{\n\t\t\t\tn = n - 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int n, int[] nums) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t}\n\t\tif(sum % n != 0){\n\t\t\treturn -1;\n\t\t}\n\t\tint target = sum / n;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] > target){\n\t\t\t\tcount += nums[i] - target;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] arr) {\n\t\tint n = arr.length;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\twhile (i < j) {\n\t\t\tif (arr[i] < arr[j]) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1209",
        "source": "leetcodeTitles",
        "source_id": "385",
        "url": "https://leetcode.com/problems/mini-parser/",
        "language": "java",
        "query": "Mini Parser",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n",
            "\tClazz(){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1210",
        "source": "leetcodeTitles",
        "source_id": "1189",
        "url": "https://leetcode.com/problems/maximum-number-of-balloons/",
        "language": "java",
        "query": "Maximum Number of Balloons",
        "snippets": [
            "\tint maxNumberOfBalloons(String text) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < text.length(); i++){\n\t\t\tif(text.charAt(i) == 'b'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count/2;\n\t}\n}\n",
            "\tint maxNumberOfBalloons(String text) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < text.length(); i++){\n\t\t\tif(text.charAt(i) == 'b'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count/3;\n\t}\n}\n",
            "\tint maxNumberOfBalloons(String text) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < text.length(); i++){\n\t\t\tif(text.charAt(i) == 'b'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint maxNumberOfBalloons(String text) {\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < text.length()){\n\t\t\tif(text.charAt(i) == 'b'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint maxNumberOfBalloons(String text) {\n\t\tint count = 0;\n\t\tint[] map = new int[26];\n\t\tfor(int i = 0; i < text.length(); i++){\n\t\t\tmap[text.charAt(i) - 'a']++;\n\t\t}\n\t\tfor(int i = 0; i < map.length; i++){\n\t\t\tcount += map[i] / 3;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int maxNumberOfBalloons(String text) {\n\t\tint count = 0;\n\t\tint[] counts = new int[26];\n\t\tfor (int i = 0; i < text.length(); i++) {\n\t\t\tcounts[text.charAt(i) - 'a']++;\n\t\t}\n\t\tfor (int i = 0; i < counts.length; i++) {\n\t\t\tcount += counts[i] / 3;\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1211",
        "source": "leetcodeTitles",
        "source_id": "518",
        "url": "https://leetcode.com/problems/coin-change-2/",
        "language": "java",
        "query": "Coin Change 2",
        "snippets": [
            "\tstatic int coinChange(int[] coins, int amount) {\n\t\tint[] dp = new int[amount + 1];\n\t\tdp[0] = 1;\n\t\tfor (int i = 0; i < coins.length; i++) {\n\t\t\tfor (int j = coins[i]; j <= amount; j++) {\n\t\t\t\tdp[j] += dp[j - coins[i]];\n\t\t\t}\n\t\t}\n\t\treturn dp[amount];\n\t}\n}\n",
            "\tint change(int amount, int[] coins) {\n\t\tint[] dp = new int[amount + 1];\n\t\tdp[0] = 1;\n\t\tfor (int coin : coins) {\n\t\t\tfor (int i = coin; i <= amount; i++) {\n\t\t\t\tdp[i] += dp[i - coin];\n\t\t\t}\n\t\t}\n\t\treturn dp[amount];\n\t}\n}\n",
            "\tint change(int amount, int[] coins) {\n\t\tint[] dp = new int[amount + 1];\n\t\tdp[0] = 1;\n\t\tfor (int i = 0; i < coins.length; i++) {\n\t\t\tfor (int j = coins[i]; j <= amount; j++) {\n\t\t\t\tdp[j] += dp[j - coins[i]];\n\t\t\t}\n\t\t}\n\t\treturn dp[amount];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1212",
        "source": "leetcodeTitles",
        "source_id": "667",
        "url": "https://leetcode.com/problems/beautiful-arrangement-ii/",
        "language": "java",
        "query": "Beautiful Arrangement II",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = in.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(arr[i] % k == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(!isBeautiful(a)){\n\t\t\tcount++;\n\t\t\tnextPermutation(a);\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n\tpublic static boolean isBeautiful(int[] a){\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] != i+1)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static void nextPermutation(int[] a){\n\t\tint i = a.length-2;\n\t\twhile(i >= 0 && a[i] >= a[i+1])\n\t\t\ti--;\n\t\tif(i >= 0){\n\t\t\tint j = a.length-1;\n\t\t\twhile(a[j] <= a[i])\n\t\t\t\tj--;\n\t\t\tswap(a, i, j);\n\t\t}\n\t\treverse(a, i+1);\n\t}\n\tpublic static void swap(int[] a, int i, int j){\n\t\tint temp = a[i];\n\t\ta[i] = a[j];\n\t\ta[j] = temp;\n\t}\n\tpublic static void reverse(int[] a, int i){\n\t\tint j = a.length-1;\n\t\twhile(i < j){\n\t\t\tswap(a, i, j);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint k = Integer.parseInt(args[1]);\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(count < k){\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tif(arr[i] == i+1){\n\t\t\t\t\tif(i+1 == n){\n\t\t\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t\t\t\t\tarr[i] = arr[i+1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint k = Integer.parseInt(args[1]);\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(count < k){\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tif(arr[i] % 2 == 0){\n\t\t\t\t\tswap(arr, i, i+1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t}\n\t}\n\tpublic static void swap(int[] arr, int i, int j){\n\t\tint temp = arr[i];\n\t\tarr[i] = arr[j];\n\t\tarr[j] = temp;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] nums = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tnums[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(!isBeautiful(nums)){\n\t\t\tcount++;\n\t\t\tnextPermutation(nums);\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n\tpublic static boolean isBeautiful(int[] nums){\n\t\tint[] count = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tcount[nums[i]-1]++;\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(count[i] != 1) return false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static void nextPermutation(int[] nums){\n\t\tint i = nums.length-2;\n\t\twhile(i >= 0 && nums[i] >= nums[i+1]){\n\t\t\ti--;\n\t\t}\n\t\tif(i >= 0){\n\t\t\tint j = nums.length-1;\n\t\t\twhile(nums[j] <= nums[i]){\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tswap(nums, i, j);\n\t\t}\n\t\treverse(nums, i+1);\n\t}\n\tpublic static void swap(int[] nums, int i, int j){\n\t\tint temp = nums[i];\n\t\tnums[i] = nums[j];\n\t\tnums[j] = temp;\n\t}\n\tpublic static void reverse(int[] nums, int start){\n\t\tint i = start, j = nums.length-1;\n\t\twhile(i < j){\n\t\t\tswap\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(!isBeautiful(arr)){\n\t\t\tcount++;\n\t\t\tarr = nextPermutation(arr);\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n\tpublic static boolean isBeautiful(int[] arr){\n\t\tint[] count = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tcount[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tcount[arr[i]-1]++;\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(count[i]%2 != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static int[] nextPermutation(int[] arr){\n\t\tint i = arr.length-1;\n\t\twhile(i > 0 && arr[i-1] >= arr[i]){\n\t\t\ti--;\n\t\t}\n\t\tif(i == 0){\n\t\t\treturn arr;\n\t\t}\n\t\tint j = arr.length-1;\n\t\twhile(arr[j] <= arr[i-1]){\n\t\t\tj--;\n\t\t}\n\t\tint temp = arr[i-1];\n\t\tarr[i-1] = arr[j];\n\t\tarr[j] = temp;\n\t\tfor(int k = i; k < j; k++, j--){\n\t\t\ttemp = arr[k];\n\t\t\tarr[k] = arr[j];\n\t\t\tarr[j] = temp;\n\t\t}\n",
            "\tint countWays(int n) {\n\t\tint[] dp = new int[n+1];\n\t\tdp[1] = 1;\n\t\tdp[2] = 2;\n\t\tfor(int i = 3; i <= n; i++){\n\t\t\tdp[i] = (dp[i-1] + dp[i-2]) % 1000000007;\n\t\t}\n\t\treturn dp[n];\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint k = 2;\n\t\tSystem.out.println(countArrangement(n, k));\n\t}\n\tpublic static int countArrangement(int n, int k){\n\t\tint[] count = new int[n + 1];\n\t\tcount[0] = 1;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tfor(int j = 1; j <= k; j++){\n\t\t\t\tif(i % j == 0){\n\t\t\t\t\tcount[i] += count[i - j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count[n];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1213",
        "source": "leetcodeTitles",
        "source_id": "223",
        "url": "https://leetcode.com/problems/rectangle-area/",
        "language": "java",
        "query": "Rectangle Area",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint a=5;\n\t\tint b=6;\n\t\tint c=a*b;\n\t\tSystem.out.println(c);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a = sc.nextInt();\n\t\tint b = sc.nextInt();\n\t\tint c = sc.nextInt();\n\t\tint d = sc.nextInt();\n\t\tint area = (a+b)*(c+d);\n\t\tSystem.out.println(area);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint length = Integer.parseInt(args[0]);\n\t\tint width = Integer.parseInt(args[1]);\n\t\tint area = length * width;\n\t\tSystem.out.println(\"Area: \" + area);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint length = 5;\n\t\tint width = 6;\n\t\tint area = length * width;\n\t\tSystem.out.println(\"Area of rectangle is \" + area);\n\t}\n}\n",
            "\tstatic int area(int length, int width){\n\t\treturn length*width;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint length = 5;\n\t\tint width = 2;\n\t\tint area = length * width;\n\t\tSystem.out.println(\"Area of Rectangle is \" + area);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a=5,b=6;\n\t\tSystem.out.println(\"Area of rectangle is:\"+(a*b));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1214",
        "source": "leetcodeTitles",
        "source_id": "2028",
        "url": "https://leetcode.com/problems/find-missing-observations/",
        "language": "java",
        "query": "Find Missing Observations",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {1,2,3,\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10,11};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10,11,12};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10,11,12,13};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10,11,12,13,14};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21};\n\t\tint[] m = {1,2,3,4,5,6,7,\n",
            "\tvoid findMissingObservations(int[] arr){\n\t\tint n = arr.length;\n\t\tint[] temp = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ttemp[i] = arr[i];\n\t\t}\n\t\tArrays.sort(temp);\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(temp[i]!=i+1){\n\t\t\t\tSystem.out.println(i+1);\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1215",
        "source": "leetcodeTitles",
        "source_id": "1513",
        "url": "https://leetcode.com/problems/number-of-substrings-with-only-1s/",
        "language": "java",
        "query": "Number of Substrings With Only 1s",
        "snippets": [
            "\tint numSub(String s){\n\t\tint count = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\twhile(end < s.length()){\n\t\t\tif(s.charAt(end) == '1'){\n\t\t\t\tend++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount += (end - start) * (end - start + 1) / 2;\n\t\t\t\twhile(s.charAt(start) != '1'){\n\t\t\t\t\tstart++;\n\t\t\t\t}\n\t\t\t\tend = start + 1;\n\t\t\t}\n\t\t}\n\t\tcount += (end - start) * (end - start + 1) / 2;\n\t\treturn count;\n\t}\n}\n",
            "\tint numSub(String s) {\n\t\tint count = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\twhile(end < s.length()){\n\t\t\tif(s.charAt(end) == '1'){\n\t\t\t\tend++;\n\t\t\t}else{\n\t\t\t\tcount += (end - start);\n\t\t\t\twhile(s.charAt(start) != '1'){\n\t\t\t\t\tstart++;\n\t\t\t\t}\n\t\t\t\tstart++;\n\t\t\t\tend = start;\n\t\t\t}\n\t\t}\n\t\tcount += (end - start);\n\t\treturn count;\n\t}\n}\n",
            "\tint numSub(String s) {\n\t\tint count = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\twhile(end < s.length()){\n\t\t\tif(s.charAt(end) == '1'){\n\t\t\t\tend++;\n\t\t\t}else{\n\t\t\t\tcount += (end - start) * (end - start + 1) / 2;\n\t\t\t\twhile(end < s.length() && s.charAt(end) == '0'){\n\t\t\t\t\tend++;\n\t\t\t\t}\n\t\t\t\tstart = end;\n\t\t\t}\n\t\t}\n\t\tcount += (end - start) * (end - start + 1) / 2;\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int numSub(String s){\n\t\tint count = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\twhile(end < s.length()){\n\t\t\tif(s.charAt(end) == '1'){\n\t\t\t\tend++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount += (end - start) * (end - start + 1) / 2;\n\t\t\t\twhile(s.charAt(start) != '1'){\n\t\t\t\t\tstart++;\n\t\t\t\t}\n\t\t\t\tstart++;\n\t\t\t\tend = start;\n\t\t\t}\n\t\t}\n\t\tcount += (end - start) * (end - start + 1) / 2;\n\t\treturn count;\n\t}\n}\n",
            "\tint numSub(String s) {\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(j < s.length()){\n\t\t\tif(s.charAt(j) == '1'){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti = j;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tcount += j - i;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countSubstrings(String s) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount += check(s, i, i);\n\t\t\tcount += check(s, i, i + 1);\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tpublic static int check(String s, int left, int right){\n\t\tint count = 0;\n\t\twhile(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)){\n\t\t\tcount++;\n\t\t\tleft--;\n\t\t\tright++;\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1216",
        "source": "leetcodeTitles",
        "source_id": "1573",
        "url": "https://leetcode.com/problems/number-of-ways-to-split-a-string/",
        "language": "java",
        "query": "Number of Ways to Split a String",
        "snippets": [
            "\tint numWays(String s) {\n\t\tint n = s.length();\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tdp[1] = s.charAt(0) == s.charAt(1) ? 2 : 1;\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(s.charAt(i) == s.charAt(i-1)){\n\t\t\t\tdp[i] = dp[i-1] + dp[i-2];\n\t\t\t}else{\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tstatic int countWays(String s){\n\t\tint n = s.length();\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][i] = 1;\n\t\t}\n\t\tfor(int i = n - 1; i >= 0; i--){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(s.charAt(i) == s.charAt(j)){\n\t\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = dp[i + 1][j] + dp[i][j - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n\tpublic static void main(String[] args){\n\t\tString s = \"abc\";\n\t\tSystem.out.println(countWays(s));\n\t}\n}\n",
            "\tstatic int countWays(String s){\n\t\tint n = s.length();\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][i] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n-1; i++){\n\t\t\tif(s.charAt(i) == s.charAt(i+1)){\n\t\t\t\tdp[i][i+1] = 2;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tfor(int j = 0; j < n-i; j++){\n\t\t\t\tif(s.charAt(j) == s.charAt(j+i)){\n\t\t\t\t\tdp[j][j+i] = dp[j+1][j+i-1] + dp[j][j+i-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n-1];\n\t}\n\tpublic static void main(String[] args){\n\t\tString s = \"aab\";\n\t\tSystem.out.println(countWays(s));\n\t}\n}\n",
            "\tstatic int countWays(String s){\n\t\tint n = s.length();\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][i] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(s.charAt(i) == s.charAt(j)){\n\t\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = dp[i + 1][j] + dp[i][j - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n\tpublic static void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tSystem.out.println(countWays(s));\n\t}\n}\n",
            "\tstatic int count(String s){\n\t\tint n = s.length();\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][i] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(s.charAt(i) == s.charAt(j)){\n\t\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = dp[i + 1][j] + dp[i][j - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint numWays(String s) {\n\t\tint[] dp = new int[s.length()];\n\t\tdp[0] = s.charAt(0) == '0' ? 0 : 1;\n\t\tdp[1] = s.charAt(1) == '0' ? 0 : 1;\n\t\tfor(int i = 2; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '0'){\n\t\t\t\tdp[i] = 0;\n\t\t\t}else{\n\t\t\t\tdp[i] = dp[i-1] + dp[i-2];\n\t\t\t}\n\t\t}\n\t\treturn dp[s.length()-1];\n\t}\n}\n",
            "\tstatic int numWays(String s){\n\t\tint n = s.length();\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tdp[1] = s.charAt(0) == s.charAt(1) ? 2 : 1;\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(s.charAt(i) == s.charAt(i-1)){\n\t\t\t\tdp[i] = dp[i-1] + dp[i-2];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(numWays(\"aab\"));\n\t}\n}\n",
            "\tstatic int numWays(String s){\n\t\tint n = s.length();\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tdp[1] = s.charAt(0) == s.charAt(1) ? 2 : 1;\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(s.charAt(i) == s.charAt(i-1)){\n\t\t\t\tdp[i] = dp[i-1] + dp[i-2];\n\t\t\t}else{\n\t\t\t\tdp[i] = dp[i-1];\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tint countSplits(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tString left = s.substring(0, i);\n\t\t\tString right = s.substring(i);\n\t\t\tif(left.length() == 1 || right.length() == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(left.substring(1).equals(right.substring(0, right.length() - 1))){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1217",
        "source": "leetcodeTitles",
        "source_id": "11",
        "url": "https://leetcode.com/problems/container-with-most-water/",
        "language": "java",
        "query": "Container With Most Water",
        "snippets": [
            "\tint maxArea(int[] height) {\n\t\tint max = 0;\n\t\tint i = 0;\n\t\tint j = height.length - 1;\n\t\twhile (i < j) {\n\t\t\tmax = Math.max(max, Math.min(height[i], height[j]) * (j - i));\n\t\t\tif (height[i] < height[j]) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxArea(int[] height) {\n\t\tint max = 0;\n\t\tint left = 0;\n\t\tint right = height.length - 1;\n\t\twhile (left < right) {\n\t\t\tint area = Math.min(height[left], height[right]) * (right - left);\n\t\t\tmax = Math.max(max, area);\n\t\t\tif (height[left] < height[right]) {\n\t\t\t\tleft++;\n\t\t\t} else {\n\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1218",
        "source": "leetcodeTitles",
        "source_id": "374",
        "url": "https://leetcode.com/problems/guess-number-higher-or-lower/",
        "language": "java",
        "query": "Guess Number Higher or Lower",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint guess = 0;\n\t\tint number = (int) (Math.random() * 100);\n\t\tint guessCount = 0;\n\t\tint guessLimit = 10;\n\t\tboolean outOfGuesses = false;\n\t\twhile(guess != number && !outOfGuesses){\n\t\t\tif(guessCount < guessLimit){\n\t\t\t\tSystem.out.println(\"Enter your guess:\");\n\t\t\t\tguess = Integer.parseInt(System.console().readLine());\n\t\t\t\tguessCount++;\n\t\t\t\tif(guess > number){\n\t\t\t\t\tSystem.out.println(\"Lower\");\n\t\t\t\t}\n\t\t\t\telse if(guess < number){\n\t\t\t\t\tSystem.out.println(\"Higher\");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tSystem.out.println(\"You guessed it!\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\toutOfGuesses = true;\n\t\t\t}\n\t\t}\n\t\tif(outOfGuesses){\n\t\t\tSystem.out.println(\"You ran out of guesses. The number was \" + number);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint guess = 0;\n\t\tint answer = (int)(Math.random()*100)+1;\n\t\tSystem.out.println(\"Guess a number between 1 and 100\");\n\t\twhile(true){\n\t\t\tguess = Integer.parseInt(System.console().readLine());\n\t\t\tif(guess == answer){\n\t\t\t\tSystem.out.println(\"You got it!\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(guess > answer){\n\t\t\t\tSystem.out.println(\"Too high\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"Too low\");\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint num = (int)(Math.random()*100)+1;\n\t\tint guess = 0;\n\t\tint count = 0;\n\t\twhile(guess != num){\n\t\t\tcount++;\n\t\t\tSystem.out.print(\"Enter a number: \");\n\t\t\tguess = Integer.parseInt(System.console().readLine());\n\t\t\tif(guess > num){\n\t\t\t\tSystem.out.println(\"Lower\");\n\t\t\t}\n\t\t\telse if(guess < num){\n\t\t\t\tSystem.out.println(\"Higher\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"Correct\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"You guessed it in \" + count + \" tries.\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint guess = 0;\n\t\tint number = (int) (Math.random() * 100);\n\t\tint guessCount = 0;\n\t\tint guessLimit = 10;\n\t\twhile(guess != number && guessCount < guessLimit){\n\t\t\tSystem.out.println(\"Guess a number between 0 and 100\");\n\t\t\tguess = Integer.parseInt(System.console().readLine());\n\t\t\tguessCount++;\n\t\t\tif(guess > number){\n\t\t\t\tSystem.out.println(\"Lower\");\n\t\t\t}\n\t\t\telse if(guess < number){\n\t\t\t\tSystem.out.println(\"Higher\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"You got it!\");\n\t\t\t}\n\t\t}\n\t\tif(guess != number){\n\t\t\tSystem.out.println(\"You lose!\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = 10;\n\t\tint guess = 0;\n\t\tint count = 0;\n\t\twhile(guess != n){\n\t\t\tcount++;\n\t\t\tScanner input = new Scanner(System.in);\n\t\t\tSystem.out.println(\"Enter your guess: \");\n\t\t\tguess = input.nextInt();\n\t\t\tif(guess > n){\n\t\t\t\tSystem.out.println(\"Lower\");\n\t\t\t}\n\t\t\telse if(guess < n){\n\t\t\t\tSystem.out.println(\"Higher\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"You got it in \" + count + \" guesses!\");\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint guess = 0;\n\t\tint number = (int)(Math.random()*100);\n\t\tSystem.out.println(\"I'm thinking of a number between 0 and 100.\");\n\t\twhile(guess != number){\n\t\t\tSystem.out.println(\"What is your guess?\");\n\t\t\tguess = Keyboard.readInt();\n\t\t\tif(guess > number){\n\t\t\t\tSystem.out.println(\"Lower.\");\n\t\t\t}\n\t\t\telse if(guess < number){\n\t\t\t\tSystem.out.println(\"Higher.\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"You got it!\");\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint guess = 0;\n\t\tint number = (int)(Math.random()*100)+1;\n\t\tint guesss = 0;\n\t\twhile(guess != number){\n\t\t\tSystem.out.println(\"Guess a number between 1 and 100\");\n\t\t\tguess = Integer.parseInt(System.console().readLine());\n\t\t\tif(guess > number){\n\t\t\t\tSystem.out.println(\"Lower\");\n\t\t\t}\n\t\t\telse if(guess < number){\n\t\t\t\tSystem.out.println(\"Higher\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"You got it!\");\n\t\t\t}\n\t\t\tguesss++;\n\t\t}\n\t\tSystem.out.println(\"It took you \" + guesss + \" guesses\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint guess = 0;\n\t\tint number = (int)(Math.random()*100)+1;\n\t\tint guesss = 0;\n\t\twhile(guess != number){\n\t\t\tSystem.out.println(\"Guess a number between 1 and 100\");\n\t\t\tguess = Integer.parseInt(System.console().readLine());\n\t\t\tif(guess > number){\n\t\t\t\tSystem.out.println(\"Lower\");\n\t\t\t}\n\t\t\telse if(guess < number){\n\t\t\t\tSystem.out.println(\"Higher\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"You got it!\");\n\t\t\t}\n\t\t\tguesss++;\n\t\t}\n\t\tSystem.out.println(\"You took \"+guesss+\" guesses\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint guess = 0;\n\t\tint answer = 0;\n\t\tint guessCount = 0;\n\t\tint guessLimit = 0;\n\t\tint guessNumber = 0;\n\t\tint high = 0;\n\t\tint low = 0;\n\t\tString guessString = \"\";\n\t\tString answerString = \"\";\n\t\tString guessCountString = \"\";\n\t\tString guessLimitString = \"\";\n\t\tString guessNumberString = \"\";\n\t\tString highString = \"\";\n\t\tString lowString = \"\";\n\t\tString guessString2 = \"\";\n\t\tString answerString2 = \"\";\n\t\tString guessCountString2 = \"\";\n\t\tString guessLimitString2 = \"\";\n\t\tString guessNumberString2 = \"\";\n\t\tString highString2 = \"\";\n\t\tString lowString2 = \"\";\n\t\tString guessString3 = \"\";\n\t\tString answerString3 = \"\";\n\t\tString guessCountString3 = \"\";\n\t\tString guessLimitString3 = \"\";\n\t\tString guessNumberString3 = \"\";\n\t\tString highString3 = \"\";\n\t\tString lowString3 = \"\";\n\t\tString guessString4 = \"\";\n\t\tString answerString4 = \"\";\n\t\tString guessCountString4 = \"\";\n\t\tString guessLimitString4 = \"\";\n\t\tString guessNumberString4 = \"\";\n\t\tString highString4 = \"\";\n\t\tString lowString4 = \"\";\n\t\tString guessString5 = \"\";\n\t\tString answerString5 = \"\";\n\t\tString guessCountString5 = \"\";\n\t\tString guessLimitString5 = \"\";\n\t\tString guessNumberString5 = \"\";\n\t\tString highString5 = \"\";\n\t\tString lowString5 = \"\";\n\t\tString guessString6 = \"\";\n\t\tString answerString6 = \"\";\n\t\tString guessCountString6 = \"\";\n\t\tString guessLimitString6 = \"\";\n\t\tString guessNumberString6 = \"\";\n\t\tString highString6 = \"\";\n\t\tString lowString6 = \"\";\n",
            "\tstatic void main(String[] args){\n\t\tint n = 10;\n\t\tint guess = 0;\n\t\tint count = 0;\n\t\tint low = 1;\n\t\tint high = n;\n\t\twhile(guess != n){\n\t\t\tcount++;\n\t\t\tguess = (low + high)/2;\n\t\t\tif(guess == n){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if(guess > n){\n\t\t\t\thigh = guess;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlow = guess;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Guess: \" + guess);\n\t\tSystem.out.println(\"Count: \" + count);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1219",
        "source": "leetcodeTitles",
        "source_id": "345",
        "url": "https://leetcode.com/problems/reverse-vowels-of-a-string/",
        "language": "java",
        "query": "Reverse Vowels of a String",
        "snippets": [
            "\tString reverseVowels(String s) {\n\t\tchar[] ch = s.toCharArray();\n\t\tint i = 0, j = ch.length - 1;\n\t\twhile (i < j) {\n\t\t\twhile (i < j && !isVowel(ch[i]))\n\t\t\t\ti++;\n\t\t\twhile (i < j && !isVowel(ch[j]))\n\t\t\t\tj--;\n\t\t\tif (i < j) {\n\t\t\t\tchar temp = ch[i];\n\t\t\t\tch[i] = ch[j];\n\t\t\t\tch[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn new String(ch);\n\t}\n\tpublic boolean isVowel(char c) {\n\t\treturn c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n\t}\n}\n",
            "\tString reverseVowels(String s) {\n\t\tchar[] ch = s.toCharArray();\n\t\tint i = 0, j = ch.length - 1;\n\t\twhile (i < j) {\n\t\t\tif (!isVowel(ch[i])) {\n\t\t\t\ti++;\n\t\t\t} else if (!isVowel(ch[j])) {\n\t\t\t\tj--;\n\t\t\t} else {\n\t\t\t\tchar temp = ch[i];\n\t\t\t\tch[i] = ch[j];\n\t\t\t\tch[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn new String(ch);\n\t}\n\tpublic boolean isVowel(char c) {\n\t\treturn c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n\t}\n}\n",
            "\tString reverseVowels(String s) {\n\t\tchar[] ch = s.toCharArray();\n\t\tint i = 0, j = ch.length - 1;\n\t\twhile (i < j) {\n\t\t\tif (!isVowel(ch[i])) {\n\t\t\t\ti++;\n\t\t\t} else if (!isVowel(ch[j])) {\n\t\t\t\tj--;\n\t\t\t} else {\n\t\t\t\tchar temp = ch[i];\n\t\t\t\tch[i] = ch[j];\n\t\t\t\tch[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn new String(ch);\n\t}\n\tprivate boolean isVowel(char ch) {\n\t\treturn ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'\n\t\t\t\t|| ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U';\n\t}\n}\n",
            "\tString reverseVowels(String s) {\n\t\tchar[] chs = s.toCharArray();\n\t\tint i = 0, j = chs.length - 1;\n\t\twhile (i < j) {\n\t\t\twhile (i < j && !isVowel(chs[i])) i++;\n\t\t\twhile (i < j && !isVowel(chs[j])) j--;\n\t\t\tif (i < j) {\n\t\t\t\tchar temp = chs[i];\n\t\t\t\tchs[i] = chs[j];\n\t\t\t\tchs[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn new String(chs);\n\t}\n\tpublic boolean isVowel(char ch) {\n\t\treturn ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U';\n\t}\n}\n",
            "\tString reverseVowels(String s) {\n\t\tchar[] arr = s.toCharArray();\n\t\tint i = 0;\n\t\tint j = arr.length - 1;\n\t\twhile (i < j) {\n\t\t\twhile (i < j && !isVowel(arr[i])) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile (i < j && !isVowel(arr[j])) {\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (i < j) {\n\t\t\t\tchar temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn new String(arr);\n\t}\n\n\tpublic boolean isVowel(char c) {\n\t\treturn c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'\n\t\t\t\t|| c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n\t}\n}\n",
            "\tString reverseVowels(String s) {\n\t\tif(s == null || s.length() == 0) return s;\n\t\tchar[] arr = s.toCharArray();\n\t\tint i = 0, j = arr.length - 1;\n\t\twhile(i < j){\n\t\t\twhile(i < j && !isVowel(arr[i])) i++;\n\t\t\twhile(i < j && !isVowel(arr[j])) j--;\n\t\t\tif(i < j){\n\t\t\t\tchar temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn new String(arr);\n\t}\n\tpublic boolean isVowel(char c){\n\t\treturn c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n\t}\n}\n",
            "\tString reverseVowels(String s) {\n\t\tif(s == null || s.length() == 0) return s;\n\t\tint left = 0;\n\t\tint right = s.length() - 1;\n\t\tchar[] chs = s.toCharArray();\n\t\twhile(left < right){\n\t\t\twhile(left < right && !isVowel(chs[left])) left++;\n\t\t\twhile(left < right && !isVowel(chs[right])) right--;\n\t\t\tif(left < right){\n\t\t\t\tchar temp = chs[left];\n\t\t\t\tchs[left] = chs[right];\n\t\t\t\tchs[right] = temp;\n\t\t\t\tleft++;\n\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t\treturn new String(chs);\n\t}\n\tpublic boolean isVowel(char ch){\n\t\treturn ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I' || ch == 'O' || ch == 'U';\n\t}\n}\n",
            "\tString reverseVowels(String s) {\n\t\tif(s == null || s.length() == 0) return s;\n\t\tchar[] chars = s.toCharArray();\n\t\tint i = 0, j = chars.length - 1;\n\t\twhile(i < j){\n\t\t\twhile(i < j && !isVowel(chars[i])) i++;\n\t\t\twhile(i < j && !isVowel(chars[j])) j--;\n\t\t\tif(i < j){\n\t\t\t\tchar temp = chars[i];\n\t\t\t\tchars[i] = chars[j];\n\t\t\t\tchars[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn new String(chars);\n\t}\n\t\n\tpublic boolean isVowel(char c){\n\t\treturn c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U';\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1220",
        "source": "leetcodeTitles",
        "source_id": "1536",
        "url": "https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/",
        "language": "java",
        "query": "Minimum Swaps to Arrange a Binary Grid",
        "snippets": [
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] == 0) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (count[j] > 0) {\n\t\t\t\t\tcount[j]--;\n\t\t\t\t\tgrid[i] = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 == 1) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] > grid[j]) {\n\t\t\t\t\tans += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 != 0) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] > grid[j]) {\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 != 0) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] > grid[j]) {\n\t\t\t\t\tans += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == grid[j]) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 == 1) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] == grid[j]) {\n\t\t\t\t\tres += count[i] / 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 == 1) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] > grid[j]) {\n\t\t\t\t\tres += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[][] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i][j] == 1) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 != 0) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 != 0) {\n\t\t\t\tint j = i;\n\t\t\t\twhile (visited[j] == 0) {\n\t\t\t\t\tvisited[j] = 1;\n\t\t\t\t\tj = count[j] - 1;\n\t\t\t\t}\n\t\t\t\tif (visited[j] == 1) {\n\t\t\t\t\tres += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i][j] == 1) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 == 1) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i][j] == grid[j][i]) {\n\t\t\t\t\tres--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tint[] visited = new int[n];\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (visited[i] == 0) {\n\t\t\t\tint cnt = 0;\n\t\t\t\tdfs(grid, i, visited, cnt);\n\t\t\t\tans += cnt;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\tpublic void dfs(int[] grid, int i, int[] visited, int cnt) {\n\t\tif (visited[i] == 1) {\n\t\t\treturn;\n\t\t}\n\t\tvisited[i] = 1;\n\t\tcnt++;\n\t\tfor (int j = 0; j < grid.length; j++) {\n\t\t\tif (grid[i][j] == 1 && visited[j] == 0) {\n\t\t\t\tdfs(grid, j, visited, cnt);\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1221",
        "source": "leetcodeTitles",
        "source_id": "2101",
        "url": "https://leetcode.com/problems/detonate-the-maximum-bombs/",
        "language": "java",
        "query": "Detonate the Maximum Bombs",
        "snippets": [
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] == 0) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (count[j] > 0) {\n\t\t\t\t\tcount[j]--;\n\t\t\t\t\tgrid[i] = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 == 1) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] > grid[j]) {\n\t\t\t\t\tans += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 != 0) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] > grid[j]) {\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 != 0) {\n\t\t\t\tans++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] > grid[j]) {\n\t\t\t\t\tans += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == grid[j]) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 == 1) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] == grid[j]) {\n\t\t\t\t\tres += count[i] / 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i] == j) {\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 == 1) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i] > grid[j]) {\n\t\t\t\t\tres += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[][] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i][j] == 1) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 != 0) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 != 0) {\n\t\t\t\tint j = i;\n\t\t\t\twhile (visited[j] == 0) {\n\t\t\t\t\tvisited[j] = 1;\n\t\t\t\t\tj = count[j] - 1;\n\t\t\t\t}\n\t\t\t\tif (visited[j] == 1) {\n\t\t\t\t\tres += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (grid[i][j] == 1) {\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (count[i] % 2 == 1) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (grid[i][j] == grid[j][i]) {\n\t\t\t\t\tres--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSwaps(int[] grid) {\n\t\tint n = grid.length;\n\t\tint[] count = new int[n];\n\t\tint[] visited = new int[n];\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (visited[i] == 0) {\n\t\t\t\tint cnt = 0;\n\t\t\t\tdfs(grid, i, visited, cnt);\n\t\t\t\tans += cnt;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\tpublic void dfs(int[] grid, int i, int[] visited, int cnt) {\n\t\tif (visited[i] == 1) {\n\t\t\treturn;\n\t\t}\n\t\tvisited[i] = 1;\n\t\tcnt++;\n\t\tfor (int j = 0; j < grid.length; j++) {\n\t\t\tif (grid[i][j] == 1 && visited[j] == 0) {\n\t\t\t\tdfs(grid, j, visited, cnt);\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1222",
        "source": "leetcodeTitles",
        "source_id": "1290",
        "url": "https://leetcode.com/problems/convert-binary-number-in-a-linked-list-to-integer/",
        "language": "java",
        "query": "Convert Binary Number in a Linked List to Integer",
        "snippets": [
            "\tint getDecimalValue(ListNode head) {\n\t\tint sum = 0;\n\t\twhile(head != null){\n\t\t\tsum = sum * 2 + head.val;\n\t\t\thead = head.next;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tint getDecimalValue(ListNode head) {\n\t\tint sum = 0;\n\t\tint i = 0;\n\t\twhile(head != null){\n\t\t\tsum += head.val * Math.pow(2, i);\n\t\t\thead = head.next;\n\t\t\ti++;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tint getDecimalValue(ListNode head){\n\t\tint sum = 0;\n\t\tint power = 0;\n\t\twhile(head != null){\n\t\t\tsum += head.val * Math.pow(2, power);\n\t\t\tpower++;\n\t\t\thead = head.next;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int getDecimalValue(ListNode head){\n\t\tint sum = 0;\n\t\tint power = 0;\n\t\twhile(head != null){\n\t\t\tsum += head.val * Math.pow(2, power);\n\t\t\tpower++;\n\t\t\thead = head.next;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tint getDecimalValue(ListNode head) {\n\t\tint res = 0;\n\t\twhile(head != null){\n\t\t\tres = res * 2 + head.val;\n\t\t\thead = head.next;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int getDecimalValue(Node head){\n\t\tint sum=0;\n\t\tint power=0;\n\t\tNode temp=head;\n\t\twhile(temp!=null){\n\t\t\tsum+=(temp.data*Math.pow(2,power));\n\t\t\ttemp=temp.next;\n\t\t\tpower++;\n\t\t}\n\t\treturn sum;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1223",
        "source": "leetcodeTitles",
        "source_id": "896",
        "url": "https://leetcode.com/problems/monotonic-array/",
        "language": "java",
        "query": "Monotonic Array",
        "snippets": [
            "\tstatic int[] monotonicArray(int[] array){\n\t\tint[] result = new int[array.length];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\twhile(i < array.length){\n\t\t\tif(array[i] < array[j]){\n\t\t\t\tresult[k] = array[i];\n\t\t\t\ti++;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult[k] = array[j];\n\t\t\t\tj++;\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic boolean isMonotonic(int[] A){\n\t\tif(A.length==0) return true;\n\t\tint i=0;\n\t\twhile(i<A.length-1 && A[i]==A[i+1]) i++;\n\t\tif(i==A.length-1) return true;\n\t\tif(A[i]<A[i+1]){\n\t\t\tfor(int j=i+1;j<A.length;j++){\n\t\t\t\tif(A[j]<A[j-1]) return false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor(int j=i+1;j<A.length;j++){\n\t\t\t\tif(A[j]>A[j-1]) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isMonotonic(int[] A){\n\t\tint n = A.length;\n\t\tif(n == 0) return false;\n\t\tif(n == 1) return true;\n\t\tint i = 0;\n\t\twhile(i < n-1 && A[i] == A[i+1]) i++;\n\t\tif(i == n-1) return true;\n\t\tint j = i+1;\n\t\twhile(j < n-1 && A[j] == A[j+1]) j++;\n\t\tif(j == n-1) return true;\n\t\tif(A[i] > A[j]) return false;\n\t\tint k = j+1;\n\t\twhile(k < n-1 && A[k] == A[k+1]) k++;\n\t\tif(k == n-1) return true;\n\t\tif(A[j] > A[k]) return false;\n\t\tint l = k+1;\n\t\twhile(l < n-1 && A[l] == A[l+1]) l++;\n\t\tif(l == n-1) return true;\n\t\tif(A[k] > A[l]) return false;\n\t\tint m = l+1;\n\t\twhile(m < n-1 && A[m] == A[m+1]) m++;\n\t\tif(m == n-1) return true;\n\t\tif(A[l] > A[m]) return false;\n\t\tint n1 = m+1;\n\t\twhile(n1 < n-1 && A[n1] == A[n1+1]) n1++;\n\t\tif(n1 == n-1) return true;\n\t\tif(A[m] > A[n1]) return false;\n\t\tint n2 = n1+1;\n\t\twhile(n2 < n-1 && A[n2] == A[n2+1]) n2++;\n\t\tif(n2 == n-1) return true;\n\t\tif(A[n1] > A[n2]) return false;\n",
            "\tstatic boolean isMonotonic(int[] A){\n\t\tint n = A.length;\n\t\tif(n == 0) return false;\n\t\tif(n == 1) return true;\n\t\tint i = 0;\n\t\tint j = n-1;\n\t\twhile(i < j){\n\t\t\tif(A[i] > A[j]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isMonotonic(int[] array){\n\t\tif(array.length==0)\n\t\t\treturn false;\n\t\tint i=0;\n\t\twhile(i<array.length-1 && array[i]==array[i+1])\n\t\t\ti++;\n\t\tif(i==array.length-1)\n\t\t\treturn true;\n\t\tif(array[i]>array[i+1])\n\t\t\treturn false;\n\t\tint j=i+1;\n\t\twhile(j<array.length-1 && array[j]>array[j+1])\n\t\t\tj++;\n\t\tif(j==array.length-1)\n\t\t\treturn true;\n\t\tif(array[j]<array[j+1])\n\t\t\treturn false;\n\t\tint k=j+1;\n\t\twhile(k<array.length-1 && array[k]<array[k+1])\n\t\t\tk++;\n\t\tif(k==array.length-1)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean isMonotonic(int[] A){\n\t\tint n = A.length;\n\t\tif(n == 0) return false;\n\t\tif(n == 1) return true;\n\t\tint i = 0;\n\t\twhile(i < n-1 && A[i] == A[i+1]){\n\t\t\ti++;\n\t\t}\n\t\tif(i == n-1) return true;\n\t\tif(A[i] < A[i+1]){\n\t\t\tfor(int j = i+1; j < n; j++){\n\t\t\t\tif(A[j] < A[j-1]) return false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor(int j = i+1; j < n; j++){\n\t\t\t\tif(A[j] > A[j-1]) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isMonotonic(int[] array){\n\t\tint i = 0;\n\t\twhile(i < array.length - 1 && array[i] == array[i+1]){\n\t\t\ti++;\n\t\t}\n\t\tif(i == array.length - 1){\n\t\t\treturn true;\n\t\t}\n\t\tint j = i + 1;\n\t\twhile(j < array.length - 1 && array[j] == array[j+1]){\n\t\t\tj++;\n\t\t}\n\t\tif(j == array.length - 1){\n\t\t\treturn true;\n\t\t}\n\t\tif(array[i] < array[j]){\n\t\t\tfor(int k = i; k < j; k++){\n\t\t\t\tif(array[k] < array[k+1]){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor(int k = i; k < j; k++){\n\t\t\t\tif(array[k] > array[k+1]){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isMonotonic(int[] A){\n\t\tint n = A.length;\n\t\tif(n<=1) return true;\n\t\tint i = 0;\n\t\twhile(i<n-1 && A[i]==A[i+1]) i++;\n\t\tif(i==n-1) return true;\n\t\tif(A[i]<A[i+1]){\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tif(A[j]<A[j-1]) return false;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tif(A[j]>A[j-1]) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isMonotonic(int[] A){\n\t\tint n = A.length;\n\t\tif(n<=1) return true;\n\t\tint i = 0;\n\t\twhile(i<n-1 && A[i]==A[i+1]) i++;\n\t\tif(i==n-1) return true;\n\t\tint j = i+1;\n\t\twhile(j<n-1 && A[j]==A[j+1]) j++;\n\t\tif(j==n-1) return true;\n\t\tif(A[i]>A[j]) return false;\n\t\tint k = j+1;\n\t\twhile(k<n-1 && A[k]==A[k+1]) k++;\n\t\tif(k==n-1) return true;\n\t\tif(A[j]>A[k]) return false;\n\t\tint l = k+1;\n\t\twhile(l<n-1 && A[l]==A[l+1]) l++;\n\t\tif(l==n-1) return true;\n\t\tif(A[k]>A[l]) return false;\n\t\tint m = l+1;\n\t\twhile(m<n-1 && A[m]==A[m+1]) m++;\n\t\tif(m==n-1) return true;\n\t\tif(A[l]>A[m]) return false;\n\t\tint n1 = m+1;\n\t\twhile(n1<n-1 && A[n1]==A[n1+1]) n1++;\n\t\tif(n1==n-1) return true;\n\t\tif(A[m]>A[n1]) return false;\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isMonotonic(int[] A) {\n\t\tint n = A.length;\n\t\tif (n == 0)\n\t\t\treturn true;\n\t\tint i = 0;\n\t\twhile (i < n - 1 && A[i] == A[i + 1])\n\t\t\ti++;\n\t\tif (i == n - 1)\n\t\t\treturn true;\n\t\tif (A[i] < A[i + 1]) {\n\t\t\tfor (int j = i + 1; j < n; j++)\n\t\t\t\tif (A[j] < A[j - 1])\n\t\t\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (int j = i + 1; j < n; j++)\n\t\t\t\tif (A[j] > A[j - 1])\n\t\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1224",
        "source": "leetcodeTitles",
        "source_id": "1791",
        "url": "https://leetcode.com/problems/find-center-of-star-graph/",
        "language": "java",
        "query": "Find Center of Star Graph",
        "snippets": [
            "\tstatic int findCenter(int[][] graph){\n\t\tint n = graph.length;\n\t\tint[] visited = new int[n];\n\t\tint[] parent = new int[n];\n\t\tint[] level = new int[n];\n\t\tint[] center = new int[n];\n\t\tint[] count = new int[n];\n\t\tint[] degree = new int[n];\n\t\tint[] temp = new int[n];\n\t\tint[] temp2 = new int[n];\n\t\tint[] temp3 = new int[n];\n\t\tint[] temp4 = new int[n];\n\t\tint[] temp5 = new int[n];\n\t\tint[] temp6 = new int[n];\n\t\tint[] temp7 = new int[n];\n\t\tint[] temp8 = new int[n];\n\t\tint[] temp9 = new int[n];\n\t\tint[] temp10 = new int[n];\n\t\tint[] temp11 = new int[n];\n\t\tint[] temp12 = new int[n];\n\t\tint[] temp13 = new int[n];\n\t\tint[] temp14 = new int[n];\n\t\tint[] temp15 = new int[n];\n\t\tint[] temp16 = new int[n];\n\t\tint[] temp17 = new int[n];\n\t\tint[] temp18 = new int[n];\n\t\tint[] temp19 = new int[n];\n\t\tint[] temp20 = new int[n];\n\t\tint[] temp21 = new int[n];\n\t\tint[] temp22 = new int[n];\n\t\tint[] temp23 = new int[n];\n\t\tint[] temp24 = new int[n];\n\t\tint[] temp25 = new int[n];\n\t\tint[] temp26 = new int[n];\n\t\tint[] temp27 = new int[n];\n\t\tint[] temp28 = new int[n];\n\t\tint[] temp29 = new int[n];\n\t\tint[] temp30 = new int[n];\n\t\tint[] temp31 = new int[n];\n",
            "\tstatic int findCenter(int[][] graph){\n\t\tint n = graph.length;\n\t\tint[] visited = new int[n];\n\t\tint[] parent = new int[n];\n\t\tint[] distance = new int[n];\n\t\tint[] level = new int[n];\n\t\tint[] center = new int[n];\n\t\tint[] centerLevel = new int[n];\n\t\tint[] centerDistance = new int[n];\n\t\tint[] centerParent = new int[n];\n\t\tint[] centerVisited = new int[n];\n\t\tint[] centerCenter = new int[n];\n\t\tint[] centerCenterLevel = new int[n];\n\t\tint[] centerCenterDistance = new int[n];\n\t\tint[] centerCenterParent = new int[n];\n\t\tint[] centerCenterVisited = new int[n];\n\t\tint[] centerCenterCenter = new int[n];\n\t\tint[] centerCenterCenterLevel = new int[n];\n\t\tint[] centerCenterCenterDistance = new int[n];\n\t\tint[] centerCenterCenterParent = new int[n];\n\t\tint[] centerCenterCenterVisited = new int[n];\n\t\tint[] centerCenterCenterCenter = new int[n];\n\t\tint[] centerCenterCenterCenterLevel = new int[n];\n\t\tint[] centerCenterCenterCenterDistance = new int[n];\n\t\tint[] centerCenterCenterCenterParent = new int[n];\n\t\tint[] centerCenterCenterCenterVisited = new int[n];\n\t\tint[] centerCenterCenterCenterCenter = new int[n];\n\t\tint[] centerCenterCenterCenterCenterLevel = new int[n];\n\t\tint[] centerCenterCenterCenterCenterDistance = new int[n];\n\t\tint[] centerCenterCenterCenterCenterParent = new int[n];\n\t\tint[] centerCenterCenterCenterCenterVisited = new int[n];\n\t\tint[] centerCenterCenterCenterCenterCenter = new int[n];\n\t\tint[] centerCenterCenterCenterCenterCenterLevel = new int[n];\n\t\tint[] centerCenterCenterCenterCenterCenterDistance = new int[n];\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == j){\n\t\t\t\t\tgraph[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tgraph[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tSystem.out.print(graph[i][j] + \" \");\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tSystem.out.print(\"  \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tint[] center = new int[n];\n\t\tint[] distance = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tvisited[i] = 0;\n\t\t\tcenter[i] = 0;\n\t\t\tdistance[i] = 0;\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tcount++;\n\t\t\t\tDFS(graph, visited, center, distance, i, count);\n\t\t\t}\n\t\t}\n\t\tint max\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == j){\n\t\t\t\t\tgraph[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tgraph[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tSystem.out.print(graph[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tint[] center = findCenter(graph);\n\t\tSystem.out.println(\"Center: \" + center[0] + \" \" + center[1]);\n\t}\n\tpublic static int[] findCenter(int[][] graph){\n\t\tint n = graph.length;\n\t\tint[] center = new int[2];\n\t\tint[] visited = new int[n];\n\t\tint[] parent = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tvisited[i] = 0;\n\t\t\tparent[i] = -1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tDFS(graph, visited, parent, i);\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == j){\n\t\t\t\t\tgraph[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tgraph[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\t\tif(graph[j][k] == 1){\n\t\t\t\t\t\t\tgraph[i][k] = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tSystem.out.print(i + \" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tvisited[i] = 0;\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == j){\n\t\t\t\t\tgraph[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tgraph[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tSystem.out.print(graph[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tint[] center = findCenter(graph);\n\t\tSystem.out.println(\"Center of Star Graph: \" + center[0] + \" \" + center[1]);\n\t}\n\tpublic static int[] findCenter(int[][] graph){\n\t\tint n = graph.length;\n\t\tint[] center = new int[2];\n\t\tint[] visited = new int[n];\n\t\tint[] distance = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tvisited[i] = 0;\n\t\t\tdistance[i] = 0;\n\t\t}\n\t\tint[] queue = new int[n];\n\t\tint front = 0;\n\t\tint rear = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tqueue[\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == j){\n\t\t\t\t\tgraph[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tgraph[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint[] center = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcenter[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tcenter[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(center[i] > max){\n\t\t\t\tmax = center[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(maxIndex);\n\t}\n}\n",
            "\tstatic int findCenter(int[][] graph){\n\t\tint n = graph.length;\n\t\tint[] parent = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tparent[i] = i;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tint p = find(parent, i);\n\t\t\t\t\tint q = find(parent, j);\n\t\t\t\t\tif(p != q){\n\t\t\t\t\t\tparent[p] = q;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(parent[i] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1){\n\t\t\treturn -1;\n\t\t}\n\t\telse{\n\t\t\treturn parent[0];\n\t\t}\n\t}\n\tpublic\n\tstatic int find(int[] parent, int i){\n\t\twhile(parent[i] != i){\n\t\t\ti = parent[i];\n\t\t}\n\t\treturn i;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[] center = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcenter[i] = i;\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tint[] distance = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tvisited[i] = 0;\n\t\t\tdistance[i] = 0;\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tcount++;\n\t\t\t\tdfs(graph, i, visited, distance, center);\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint index = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(distance[i] > max){\n\t\t\t\tmax = distance[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(center[index]);\n\t}\n\tpublic\n\tstatic void dfs(int[][] graph, int i, int[] visited, int[] distance, int[] center){\n\t\tvisited[i] = 1;\n\t\tfor(int j = 0; j < graph.length; j++){\n\t\t\tif(graph[i][j] == 1 && visited[j] == 0){\n\t\t\t\tdistance[j] = distance[i] + 1;\n\t\t\t\tcenter[j] = i\n",
            "\tstatic int findCenter(int[][] graph){\n\t\tint n = graph.length;\n\t\tint[] parent = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tparent[i] = i;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(graph[i][j] == 1){\n\t\t\t\t\tint x = find(i, parent);\n\t\t\t\t\tint y = find(j, parent);\n\t\t\t\t\tif(x != y){\n\t\t\t\t\t\tparent[x] = y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(parent[i] == i){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1){\n\t\t\treturn -1;\n\t\t}\n\t\telse{\n\t\t\treturn parent[0];\n\t\t}\n\t}\n\tpublic\n\tstatic int find(int i, int[] parent){\n\t\tif(parent[i] == i){\n\t\t\treturn i;\n\t\t}\n\t\telse{\n\t\t\treturn find(parent[i], parent);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1225",
        "source": "leetcodeTitles",
        "source_id": "929",
        "url": "https://leetcode.com/problems/unique-email-addresses/",
        "language": "java",
        "query": "Unique Email Addresses",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString[] emails = {\"\n"
        ],
        "results": 10
    },
    {
        "id": "1226",
        "source": "leetcodeTitles",
        "source_id": "1942",
        "url": "https://leetcode.com/problems/the-number-of-the-smallest-unoccupied-chair/",
        "language": "java",
        "query": "The Number of the Smallest Unoccupied Chair",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] chairs = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchairs[i] = i;\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(chairs[i] == -1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tint[] result = new int[count];\n\t\tint index = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(chairs[i] == -1){\n\t\t\t\tresult[index] = i;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < count; i++){\n\t\t\tSystem.out.println(result[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] chairs = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchairs[i] = i + 1;\n\t\t}\n\t\tint count = 0;\n\t\tint min = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(chairs[i] == 0){\n\t\t\t\tcount++;\n\t\t\t\tmin = i;\n\t\t\t}\n\t\t}\n\t\tif(count == 0){\n\t\t\tSystem.out.println(\"No empty chairs\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"The smallest unoccupied chair is \" + (min + 1));\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] chairs = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchairs[i] = i + 1;\n\t\t}\n\t\tint min = 0;\n\t\tint max = n - 1;\n\t\twhile(min <= max){\n\t\t\tint mid = (min + max) / 2;\n\t\t\tif(chairs[mid] == 0){\n\t\t\t\tif(mid == 0 || chairs[mid - 1] != 0){\n\t\t\t\t\tSystem.out.println(mid + 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tmax = mid - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmin = mid + 1;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"No free chairs\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] chairs = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchairs[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\tint min = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(chairs[i] == 0){\n\t\t\t\tcount++;\n\t\t\t\tmin = i+1;\n\t\t\t}\n\t\t}\n\t\tif(count == 0){\n\t\t\tSystem.out.println(\"No Unoccupied Chair\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"The Number of the Smallest Unoccupied Chair is \" + min);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] chairs = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchairs[i] = i;\n\t\t}\n\t\tint count = 0;\n\t\tint index = 0;\n\t\twhile(count < n){\n\t\t\tif(chairs[index] == -1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tindex++;\n\t\t\tif(index == n){\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(index);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] chairs = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchairs[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\tint min = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(chairs[i] == 0){\n\t\t\t\tcount++;\n\t\t\t\tmin = i+1;\n\t\t\t}\n\t\t}\n\t\tif(count == 0){\n\t\t\tSystem.out.println(\"No unoccupied chairs\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"The number of the smallest unoccupied chair is \" + min);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] chairs = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchairs[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\tint index = 0;\n\t\twhile(count < n){\n\t\t\tif(chairs[index] != 0){\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount++;\n\t\t\t\tindex = (index + 1) % n;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(index + 1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] chairs = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchairs[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\tint min = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(chairs[i] == 0){\n\t\t\t\tcount++;\n\t\t\t\tmin = i+1;\n\t\t\t}\n\t\t}\n\t\tif(count == 0){\n\t\t\tSystem.out.println(\"No free chairs\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(min);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1227",
        "source": "leetcodeTitles",
        "source_id": "1706",
        "url": "https://leetcode.com/problems/where-will-the-ball-fall/",
        "language": "java",
        "query": "Where Will the Ball Fall",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[k];\n\t\tfor(int j = 0; j < k; j++){\n\t\t\ti[j] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf[i][j] = sc.nextInt();\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf[i][j] = in.nextInt();\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = a[i];\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = b[i];\n\t\t}\n\t\tint[] f = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tf[i] = c[i];\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = d[i];\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = e[i];\n\t\t}\n\t\tint[] i = new int[k];\n\t\tfor(int j = 0; j < k; j++){\n\t\t\ti[j] = f[j];\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = a[i];\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = b[i];\n\t\t}\n\t\tint[] f = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tf[i] = c[i];\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = d[i];\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = e[i];\n\t\t}\n\t\tint[] i = new int[k];\n\t\tfor(int j = 0; j < k; j++){\n\t\t\ti[j] = f[j];\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int l = 0; l < n\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = in.next\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = sc.next\n"
        ],
        "results": 10
    },
    {
        "id": "1228",
        "source": "leetcodeTitles",
        "source_id": "324",
        "url": "https://leetcode.com/problems/wiggle-sort-ii/",
        "language": "java",
        "query": "Wiggle Sort II",
        "snippets": [
            "\tvoid wiggleSort(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcopy[i] = nums[i];\n\t\t}\n\t\tint i = 0, j = 0, k = n - 1;\n\t\twhile (j < n / 2 && k >= n / 2) {\n\t\t\tnums[i++] = copy[j++];\n\t\t\tnums[i++] = copy[k--];\n\t\t}\n\t\twhile (j < n / 2) {\n\t\t\tnums[i++] = copy[j++];\n\t\t}\n\t\twhile (k >= n / 2) {\n\t\t\tnums[i++] = copy[k--];\n\t\t}\n\t}\n}\n",
            "\tvoid wiggleSort(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcopy[i] = nums[i];\n\t\t}\n\t\tint i = 0, j = n - 1;\n\t\tfor (int k = 0; k < n; k++) {\n\t\t\tif ((k & 1) == 0) {\n\t\t\t\tnums[k] = copy[i++];\n\t\t\t} else {\n\t\t\t\tnums[k] = copy[j--];\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid wiggleSort(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcopy[i] = nums[i];\n\t\t}\n\t\tint i = 0, j = 0, k = n - 1;\n\t\twhile (j <= k) {\n\t\t\tif (i % 2 == 0) {\n\t\t\t\tnums[j++] = copy[i++];\n\t\t\t} else {\n\t\t\t\tnums[k--] = copy[i++];\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid wiggleSort(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcopy[i] = nums[i];\n\t\t}\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\tint k = 0;\n\t\twhile (k < n) {\n\t\t\tnums[k++] = copy[i] < copy[j] ? copy[i++] : copy[j--];\n\t\t\tif (i == j) {\n\t\t\t\tnums[k++] = copy[i];\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid wiggleSort(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tSystem.arraycopy(nums, 0, copy, 0, n);\n\t\tArrays.sort(copy);\n\t\tint i = 0, j = n - 1;\n\t\tfor (int k = 0; k < n; k++) {\n\t\t\tif (k % 2 == 0) {\n\t\t\t\tnums[k] = copy[i++];\n\t\t\t} else {\n\t\t\t\tnums[k] = copy[j--];\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid wiggleSort(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcopy[i] = nums[i];\n\t\t}\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\tint k = 0;\n\t\twhile(k < n){\n\t\t\tnums[k] = copy[i];\n\t\t\tk++;\n\t\t\tif(k < n){\n\t\t\t\tnums[k] = copy[j];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n}\n",
            "\tvoid wiggleSort(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tcopy[i] = nums[i];\n\t\tArrays.sort(copy);\n\t\tint i = 0, j = n - 1;\n\t\tfor(int k = 0; k < n; k++)\n\t\t\tif(k % 2 == 0)\n\t\t\t\tnums[k] = copy[i++];\n\t\t\telse\n\t\t\t\tnums[k] = copy[j--];\n\t}\n}\n",
            "\tvoid wiggleSort(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] temp = new int[n];\n\t\tint i = 0, j = 0, k = n - 1;\n\t\twhile (i < n / 2) {\n\t\t\ttemp[i] = nums[i];\n\t\t\ttemp[n - 1 - i] = nums[k];\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t\tif (n % 2 == 1)\n\t\t\ttemp[n / 2] = nums[n / 2];\n\t\tfor (i = 0; i < n; i++)\n\t\t\tnums[i] = temp[i];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1229",
        "source": "leetcodeTitles",
        "source_id": "2016",
        "url": "https://leetcode.com/problems/maximum-difference-between-increasing-elements/",
        "language": "java",
        "query": "Maximum Difference Between Increasing Elements",
        "snippets": [
            "\tstatic int maxDiff(int[] a){\n\t\tint max=0;\n\t\tint min=0;\n\t\tint diff=0;\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tif(i==0){\n\t\t\t\tmin=a[i];\n\t\t\t\tmax=a[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a[i]<min){\n\t\t\t\t\tmin=a[i];\n\t\t\t\t}\n\t\t\t\telse if(a[i]>max){\n\t\t\t\t\tmax=a[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdiff=max-min;\n\t\treturn diff;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] a={1,2,3,4,5,6,7,8,9,10};\n\t\tSystem.out.println(maxDiff(a));\n\t}\n}\n",
            "\tstatic int maxDiff(int[] a){\n\t\tint max=0;\n\t\tint min=0;\n\t\tint diff=0;\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tif(i==0){\n\t\t\t\tmin=a[i];\n\t\t\t\tmax=a[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a[i]>max){\n\t\t\t\t\tmax=a[i];\n\t\t\t\t}\n\t\t\t\telse if(a[i]<min){\n\t\t\t\t\tmin=a[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(max-min>diff){\n\t\t\t\tdiff=max-min;\n\t\t\t}\n\t\t}\n\t\treturn diff;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] a={1,2,3,4,5,6,7,8,9,10};\n\t\tSystem.out.println(maxDiff(a));\n\t}\n}\n",
            "\tstatic int maxDiff(int[] arr){\n\t\tint maxDiff = 0;\n\t\tint prev = arr[0];\n\t\tfor(int i = 1; i < arr.length; i++){\n\t\t\tif(arr[i] > prev){\n\t\t\t\tmaxDiff = Math.max(maxDiff, arr[i] - prev);\n\t\t\t}\n\t\t\tprev = arr[i];\n\t\t}\n\t\treturn maxDiff;\n\t}\n}\n",
            "\tstatic int maxDiff(int[] a){\n\t\tint max=0;\n\t\tint min=0;\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tif(i==0){\n\t\t\t\tmin=a[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a[i]<min){\n\t\t\t\t\tmin=a[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(i==0){\n\t\t\t\tmax=a[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(a[i]>max){\n\t\t\t\t\tmax=a[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max-min;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] a={1,2,3,4,5,6,7,8,9,10};\n\t\tSystem.out.println(maxDiff(a));\n\t}\n}\n",
            "\tint maxDiff(int[] a){\n\t\tint max = 0;\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t\tif(a[i] - min > max){\n\t\t\t\tmax = a[i] - min;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxDiff(int[] a){\n\t\tint max = 0;\n\t\tint min = a[0];\n\t\tfor(int i = 1; i < a.length; i++){\n\t\t\tif(a[i] > min){\n\t\t\t\tmax = Math.max(max, a[i] - min);\n\t\t\t}\n\t\t\tmin = Math.min(min, a[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxDiff(int[] arr){\n\t\tint max = 0;\n\t\tint min = arr[0];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] < min){\n\t\t\t\tmin = arr[i];\n\t\t\t}\n\t\t\tif(arr[i] - min > max){\n\t\t\t\tmax = arr[i] - min;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxDiff(int[] arr){\n\t\tint maxDiff = 0;\n\t\tint n = arr.length;\n\t\tint i = 0;\n\t\tint j = n-1;\n\t\twhile(i<j){\n\t\t\tif(arr[i]<arr[j]){\n\t\t\t\tmaxDiff = Math.max(maxDiff, arr[j]-arr[i]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmaxDiff = Math.max(maxDiff, arr[i]-arr[j]);\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn maxDiff;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tSystem.out.println(maxDiff(arr));\n\t}\n}\n",
            "\tint maxDiff(int[] a){\n\t\tint max=0;\n\t\tint min=a[0];\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tif(a[i]<min){\n\t\t\t\tmin=a[i];\n\t\t\t}\n\t\t\tif(a[i]-min>max){\n\t\t\t\tmax=a[i]-min;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxDiff(int[] arr){\n\t\tint maxDiff = 0;\n\t\tint n = arr.length;\n\t\tint i = 0;\n\t\tint j = n-1;\n\t\twhile(i<j){\n\t\t\tif(arr[i]<arr[j]){\n\t\t\t\tmaxDiff = Math.max(maxDiff, arr[j]-arr[i]);\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmaxDiff = Math.max(maxDiff, arr[i]-arr[j]);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn maxDiff;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5};\n\t\tSystem.out.println(maxDiff(arr));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1230",
        "source": "leetcodeTitles",
        "source_id": "1317",
        "url": "https://leetcode.com/problems/convert-integer-to-the-sum-of-two-no-zero-integers/",
        "language": "java",
        "query": "Convert Integer to the Sum of Two No-Zero Integers",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(i % 2 == 0){\n\t\t\t\ta += i;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tb += i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(a + \" \" + b);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = 0;\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tint f = 0;\n\t\tint g = 0;\n\t\tint h = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n1 = 0;\n\t\tint n2 = 0;\n\t\tint n3 = 0;\n\t\tint n4 = 0;\n\t\tint n5 = 0;\n\t\tint n6 = 0;\n\t\tint n7 = 0;\n\t\tint n8 = 0;\n\t\tint n9 = 0;\n\t\tint n10 = 0;\n\t\tint n11 = 0;\n\t\tint n12 = 0;\n\t\tint n13 = 0;\n\t\tint n14 = 0;\n\t\tint n15 = 0;\n\t\tint n16 = 0;\n\t\tint n17 = 0;\n\t\tint n18 = 0;\n\t\tint n19 = 0;\n\t\tint n20 = 0;\n\t\tint n21 = 0;\n\t\tint n22 = 0;\n\t\tint n23 = 0;\n\t\tint n24 = 0;\n\t\tint n25 = 0;\n\t\tint n26 = 0;\n\t\tint n27 = 0;\n\t\tint n28 = 0;\n\t\tint n29 = 0;\n\t\tint n30 = 0;\n\t\tint n31 = 0;\n\t\tint n32 = 0;\n\t\tint n33 = 0;\n\t\tint n34 = 0;\n\t\tint n35 = 0;\n\t\tint n36 = 0;\n\t\tint n37 = 0;\n\t\tint n38 = 0;\n\t\tint n39 = 0;\n\t\tint n40 = 0;\n\t\tint n41 = 0;\n",
            "\tstatic int[] sumZero(int n) {\n\t\tint[] result = new int[n];\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\twhile (i < j) {\n\t\t\tresult[i] = i + 1;\n\t\t\tresult[j] = j - 1;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tif (i == j) {\n\t\t\tresult[i] = 0;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] getSum(int n){\n\t\tint[] res = new int[2];\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = n;\n\t\twhile(c > 0){\n\t\t\ta = c % 10;\n\t\t\tb = c / 10;\n\t\t\tc = c / 10;\n\t\t}\n\t\tres[0] = a;\n\t\tres[1] = b;\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] getSum(int a){\n\t\tint[] res = new int[2];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(a > 0){\n\t\t\tif(a % 2 == 1){\n\t\t\t\tres[i] = a % 10;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\ta /= 10;\n\t\t}\n\t\tres[1] = res[0];\n\t\tres[0] = 0;\n\t\treturn res;\n\t}\n}\n",
            "\tint[] findIntegers(int num) {\n\t\tint[] res = new int[2];\n\t\tres[0] = res[1] = -1;\n\t\tif(num <= 1) return res;\n\t\tint i = 1;\n\t\twhile(i <= num){\n\t\t\tif(num - i == i - 1){\n\t\t\t\tres[0] = i;\n\t\t\t\tres[1] = num - i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] getSum(int n){\n\t\tint[] res = new int[2];\n\t\tint a = 0, b = 0;\n\t\twhile(n > 0){\n\t\t\tint tmp = n % 10;\n\t\t\tif(tmp == 0){\n\t\t\t\ta += 1;\n\t\t\t}else{\n\t\t\t\tb += 1;\n\t\t\t}\n\t\t\tn /= 10;\n\t\t}\n\t\tres[0] = a;\n\t\tres[1] = b;\n\t\treturn res;\n\t}\n}\n",
            "\tint[] getSum(int a){\n\t\tint[] result = new int[2];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(a > 0){\n\t\t\tif(a % 2 == 1){\n\t\t\t\tresult[i] = 1;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\ta = a / 2;\n\t\t}\n\t\twhile(j < result.length){\n\t\t\tif(result[j] == 0){\n\t\t\t\tresult[j] = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] getSum(int a){\n\t\tint[] res = new int[2];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n\t\tint ggg = 0;\n\t\tint hhh = 0;\n\t\tint iii = 0;\n\t\tint jjj = 0;\n",
            "\tstatic int[] sumZero(int n) {\n\t\tint[] res = new int[n];\n\t\tint i = 0;\n\t\twhile(n > 0){\n\t\t\tif(n % 2 == 1){\n\t\t\t\tres[i] = n;\n\t\t\t\tn--;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres[i] = n;\n\t\t\t\tres[i+1] = -n;\n\t\t\t\tn -= 2;\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1231",
        "source": "leetcodeTitles",
        "source_id": "1582",
        "url": "https://leetcode.com/problems/special-positions-in-a-binary-matrix/",
        "language": "java",
        "query": "Special Positions in a Binary Matrix",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,0,0},{1,0,0},{1,0,0}};\n\t\tSystem.out.println(countSpecial(matrix));\n\t}\n\tpublic static int countSpecial(int[][] matrix){\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(matrix[i][j] == 1){\n\t\t\t\t\tif(i == 0 || j == 0 || i == m-1 || j == n-1){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(matrix[i-1][j] == 0 || matrix[i][j-1] == 0 || matrix[i+1][j] == 0 || matrix[i][j+1] == 0){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,0,0},{1,0,0},{1,0,0}};\n\t\tSystem.out.println(new Solution().numSpecial(matrix));\n\t}\n}\n",
            "\tstatic int[][] updateMatrix(int[][] matrix) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] res = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(matrix[i][j] == 0){\n\t\t\t\t\tres[i][j] = 0;\n\t\t\t\t}else{\n\t\t\t\t\tres[i][j] = Integer.MAX_VALUE;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i - 1 >= 0){\n\t\t\t\t\tres[i][j] = Math.min(res[i][j], res[i - 1][j] + 1);\n\t\t\t\t}\n\t\t\t\tif(j - 1 >= 0){\n\t\t\t\t\tres[i][j] = Math.min(res[i][j], res[i][j - 1] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = m - 1; i >= 0; i--){\n\t\t\tfor(int j = n - 1; j >= 0; j--){\n\t\t\t\tif(i + 1 < m){\n\t\t\t\t\tres[i][j] = Math.min(res[i][j], res[i + 1][j] + 1);\n\t\t\t\t}\n\t\t\t\tif(j + 1 < n){\n\t\t\t\t\tres[i][j] = Math.min(res[i][j], res[i][j + 1] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint countSpecial(int[][] mat){\n\t\tint n = mat.length;\n\t\tint m = mat[0].length;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(mat[i][j] == 1){\n\t\t\t\t\tif(i == 0 || j == 0 || i == n - 1 || j == m - 1){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tif(mat[i - 1][j] == 0 || mat[i][j - 1] == 0 || mat[i + 1][j] == 0 || mat[i][j + 1] == 0){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tvoid solve(int testNumber, InputReader in, OutputWriter out) {\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (i == 0 && j == 0) {\n\t\t\t\t\tdp[i][j] = a[i][j];\n\t\t\t\t} else if (i == 0) {\n\t\t\t\t\tdp[i][j] = dp[i][j - 1] + a[i][j];\n\t\t\t\t} else if (j == 0) {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j] + a[i][j];\n\t\t\t\t} else {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + a[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tout.printLine(dp[n - 1][m - 1]);\n\t}\n}\n",
            "\tint countSpecial(int[][] mat){\n\t\tint m = mat.length;\n\t\tint n = mat[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint[][] dp2 = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = mat[i][j] == 1 ? 1 : 0;\n\t\t\t\t\tdp2[i][j] = mat[i][j] == 1 ? 1 : 0;\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = mat[i][j] == 1 ? 1 : 0;\n\t\t\t\t\tdp2[i][j] = mat[i][j] == 1 ? dp2[i][j-1] + 1 : 0;\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = mat[i][j] == 1 ? 1 : 0;\n\t\t\t\t\tdp2[i][j] = mat[i][j] == 1 ? dp2[i-1][j] + 1 : 0;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = mat[i][j] == 1 ? dp[i-1][j] + dp[i][j-1] : 0;\n\t\t\t\t\tdp2[i][j] = mat[i][j] == 1 ? dp2[i-1][j] + dp2[i][j-1] : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n",
            "\tint count;\n\tpublic\n\tint[][] updateMatrix(int[][] matrix) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] res = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tres[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(res[i][j] == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t\tdfs(matrix, res, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tpublic\n\tvoid dfs(int[][] matrix, int[][] res, int i, int j){\n\t\tif(i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length || res[i][j] == 1){\n\t\t\treturn;\n\t\t}\n\t\tres[i][j] = 1;\n\t\tdfs(matrix, res, i - 1, j);\n\t\tdfs(matrix, res, i + 1, j);\n\t\tdfs(matrix, res, i, j - 1);\n\t\tdfs(matrix, res, i, j + 1);\n\t}\n}\n",
            "\tint count(int[][] matrix, int k){\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + matrix[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(dp[i][j] <= k){\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[][] find(int[][] matrix, int m, int n, int k){\n\t\tint[][] res = new int[k][2];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint count = 0;\n\t\twhile(count < k){\n\t\t\tif(i == 0){\n\t\t\t\tres[count][0] = i;\n\t\t\t\tres[count][1] = j;\n\t\t\t\tcount++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(j == n){\n\t\t\t\tres[count][0] = i;\n\t\t\t\tres[count][1] = j;\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres[count][0] = i;\n\t\t\t\tres[count][1] = j;\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[][] matrix;\n\tpublic\n\tstatic int[][] result;\n\tpublic\n\tstatic int row;\n\tpublic\n\tstatic int col;\n\tpublic\n\tstatic int[][] getSpecialPositions(int[][] matrix){\n\t\tClazz.matrix = matrix;\n\t\tClazz.row = matrix.length;\n\t\tClazz.col = matrix[0].length;\n\t\tClazz.result = new int[row][col];\n\t\tfor(int i = 0; i < row; i++){\n\t\t\tfor(int j = 0; j < col; j++){\n\t\t\t\tif(matrix[i][j] == 1){\n\t\t\t\t\tClazz.result[i][j] = getSpecialPosition(i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Clazz.result;\n\t}\n\tpublic\n\tstatic int getSpecialPosition(int i, int j){\n\t\tint count = 0;\n\t\tfor(int k = 0; k < row; k++){\n\t\t\tif(matrix[k][j] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tfor(int k = 0; k < col; k++){\n\t\t\tif(matrix[i][k] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1232",
        "source": "leetcodeTitles",
        "source_id": "2164",
        "url": "https://leetcode.com/problems/sort-even-and-odd-indices-independently/",
        "language": "java",
        "query": "Sort Even and Odd Indices Independently",
        "snippets": [
            "\tstatic void sort(int[] arr){\n\t\tint[] even = new int[arr.length/2];\n\t\tint[] odd = new int[arr.length/2];\n\t\tfor(int i=0;i<arr.length;i++){\n\t\t\tif(i%2==0){\n\t\t\t\teven[i/2] = arr[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\todd[i/2] = arr[i];\n\t\t\t}\n\t\t}\n\t\tArrays.sort(even);\n\t\tArrays.sort(odd);\n\t\tfor(int i=0;i<arr.length;i++){\n\t\t\tif(i%2==0){\n\t\t\t\tarr[i] = even[i/2];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarr[i] = odd[i/2];\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void sort(int[] a){\n\t\tint[] even = new int[a.length/2];\n\t\tint[] odd = new int[a.length/2];\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tif(i%2==0){\n\t\t\t\teven[i/2] = a[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\todd[i/2] = a[i];\n\t\t\t}\n\t\t}\n\t\tArrays.sort(even);\n\t\tArrays.sort(odd);\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tif(i%2==0){\n\t\t\t\ta[i] = even[i/2];\n\t\t\t}\n\t\t\telse{\n\t\t\t\ta[i] = odd[i/2];\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid sort(int[] arr){\n\t\tint i=0,j=arr.length-1;\n\t\twhile(i<j){\n\t\t\twhile(arr[i]%2==0 && i<j){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(arr[j]%2!=0 && i<j){\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif(i<j){\n\t\t\t\tint temp=arr[i];\n\t\t\t\tarr[i]=arr[j];\n\t\t\t\tarr[j]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid sort(int[] a){\n\t\tint i=0,j=a.length-1;\n\t\twhile(i<j){\n\t\t\twhile(i<j&&a[i]%2==0)\n\t\t\t\ti++;\n\t\t\twhile(i<j&&a[j]%2!=0)\n\t\t\t\tj--;\n\t\t\tif(i<j){\n\t\t\t\tint temp=a[i];\n\t\t\t\ta[i]=a[j];\n\t\t\t\ta[j]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void sort(int[] a){\n\t\tint i=0,j=a.length-1;\n\t\twhile(i<j){\n\t\t\twhile(i<j&&a[i]%2==0)i++;\n\t\t\twhile(i<j&&a[j]%2!=0)j--;\n\t\t\tif(i<j){\n\t\t\t\tint temp=a[i];\n\t\t\t\ta[i]=a[j];\n\t\t\t\ta[j]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void sort(int[] a){\n\t\tint i=0,j=a.length-1;\n\t\twhile(i<j){\n\t\t\twhile(a[i]%2==0&&i<j) i++;\n\t\t\twhile(a[j]%2!=0&&i<j) j--;\n\t\t\tif(i<j){\n\t\t\t\tint temp=a[i];\n\t\t\t\ta[i]=a[j];\n\t\t\t\ta[j]=temp;\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1233",
        "source": "leetcodeTitles",
        "source_id": "2224",
        "url": "https://leetcode.com/problems/minimum-number-of-operations-to-convert-time/",
        "language": "java",
        "query": "Minimum Number of Operations to Convert Time",
        "snippets": [
            "\tint minOperations(int A, int B){\n\t\tint count = 0;\n\t\twhile(A != B){\n\t\t\tif(A > B){\n\t\t\t\tA = A - B;\n\t\t\t}else{\n\t\t\t\tB = B - A;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int n) {\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn = n / 2;\n\t\t\t}else{\n\t\t\t\tn = n - 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minOperations(int[] time) {\n\t\tint n = time.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 0;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = dp[i - 1] + 1;\n\t\t\tif(time[i] - time[i - 1] == 1){\n\t\t\t\tdp[i] = Math.min(dp[i], dp[i - 1]);\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tint minTime(int time) {\n\t\tint ans = 0;\n\t\twhile(time > 0){\n\t\t\tans++;\n\t\t\ttime /= 2;\n\t\t}\n\t\treturn ans;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1234",
        "source": "leetcodeTitles",
        "source_id": "837",
        "url": "https://leetcode.com/problems/new-21-game/",
        "language": "java",
        "query": "New 21 Game",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint k = Integer.parseInt(args[2]);\n\t\tint[][] board = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tboard[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tint[][] moves = new int[k][3];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tmoves[i][0] = Integer.parseInt(args[3 + i * 3]);\n\t\t\tmoves[i][1] = Integer.parseInt(args[4 + i * 3]);\n\t\t\tmoves[i][2] = Integer.parseInt(args[5 + i * 3]);\n\t\t}\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tint x = moves[i][0];\n\t\t\tint y = moves[i][1];\n\t\t\tint d = moves[i][2];\n\t\t\tif(d == 0){\n\t\t\t\tboard[x][y] = 1;\n\t\t\t}\n\t\t\telse if(d == 1){\n\t\t\t\tboard[x][y] = -1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tboard[x][y] = 0;\n\t\t\t}\n\t\t}\n\t\tint[][] newBoard = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tnewBoard[i][j] = board[i][j];\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j =\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = new int[21];\n\t\tint[] b = new int[21];\n\t\tint[] c = new int[21];\n\t\tint[] d = new int[21];\n\t\tint[] e = new int[21];\n\t\tint[] f = new int[21];\n\t\tint[] g = new int[21];\n\t\tint[] h = new int[21];\n\t\tint[] i = new int[21];\n\t\tint[] j = new int[21];\n\t\tint[] k = new int[21];\n\t\tint[] l = new int[21];\n\t\tint[] m = new int[21];\n\t\tint[] n = new int[21];\n\t\tint[] o = new int[21];\n\t\tint[] p = new int[21];\n\t\tint[] q = new int[21];\n\t\tint[] r = new int[21];\n\t\tint[] s = new int[21];\n\t\tint[] t = new int[21];\n\t\tint[] u = new int[21];\n\t\tint[] v = new int[21];\n\t\tint[] w = new int[21];\n\t\tint[] x = new int[21];\n\t\tint[] y = new int[21];\n\t\tint[] z = new int[21];\n\t\tint[] aa = new int[21];\n\t\tint[] bb = new int[21];\n\t\tint[] cc = new int[21];\n\t\tint[] dd = new int[21];\n\t\tint[] ee = new int[21];\n\t\tint[] ff = new int[21];\n\t\tint[] gg = new int[21];\n\t\tint[] hh = new int[21];\n\t\tint[] ii = new int[21];\n\t\tint[] jj = new int[21];\n\t\tint[] kk = new int[21];\n\t\tint[] ll = new int[21];\n\t\tint[] mm = new int[21];\n\t\tint[] nn = new int[21];\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = new int[10];\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\ta[i] = i;\n\t\t}\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tSystem.out.println(a[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] board = new int[n][n];\n\t\tint[][] moves = new int[n][n];\n\t\tint[][] moves2 = new int[n][n];\n\t\tint[][] moves3 = new int[n][n];\n\t\tint[][] moves4 = new int[n][n];\n\t\tint[][] moves5 = new int[n][n];\n\t\tint[][] moves6 = new int[n][n];\n\t\tint[][] moves7 = new int[n][n];\n\t\tint[][] moves8 = new int[n][n];\n\t\tint[][] moves9 = new int[n][n];\n\t\tint[][] moves10 = new int[n][n];\n\t\tint[][] moves11 = new int[n][n];\n\t\tint[][] moves12 = new int[n][n];\n\t\tint[][] moves13 = new int[n][n];\n\t\tint[][] moves14 = new int[n][n];\n\t\tint[][] moves15 = new int[n][n];\n\t\tint[][] moves16 = new int[n][n];\n\t\tint[][] moves17 = new int[n][n];\n\t\tint[][] moves18 = new int[n][n];\n\t\tint[][] moves19 = new int[n][n];\n\t\tint[][] moves20 = new int[n][n];\n\t\tint[][] moves21 = new int[n][n];\n\t\tint[][] moves22 = new int[n][n];\n\t\tint[][] moves23 = new int[n][n];\n\t\tint[][] moves24 = new int[n][n];\n\t\tint[][] moves25 = new int[n][n];\n\t\tint[][] moves26 = new int[n][n];\n\t\tint[][] moves27 = new int[n][n];\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] board = new int[n][n];\n\t\tint[][] board2 = new int[n][n];\n\t\tint[][] board3 = new int[n][n];\n\t\tint[][] board4 = new int[n][n];\n\t\tint[][] board5 = new int[n][n];\n\t\tint[][] board6 = new int[n][n];\n\t\tint[][] board7 = new int[n][n];\n\t\tint[][] board8 = new int[n][n];\n\t\tint[][] board9 = new int[n][n];\n\t\tint[][] board10 = new int[n][n];\n\t\tint[][] board11 = new int[n][n];\n\t\tint[][] board12 = new int[n][n];\n\t\tint[][] board13 = new int[n][n];\n\t\tint[][] board14 = new int[n][n];\n\t\tint[][] board15 = new int[n][n];\n\t\tint[][] board16 = new int[n][n];\n\t\tint[][] board17 = new int[n][n];\n\t\tint[][] board18 = new int[n][n];\n\t\tint[][] board19 = new int[n][n];\n\t\tint[][] board20 = new int[n][n];\n\t\tint[][] board21 = new int[n][n];\n\t\tint[][] board22 = new int[n][n];\n\t\tint[][] board23 = new int[n][n];\n\t\tint[][] board24 = new int[n][n];\n\t\tint[][] board25 = new int[n][n];\n\t\tint[][] board26 = new int[n][n];\n\t\tint[][] board27 = new int[n][n];\n\t\tint[][] board28 = new int[n][n];\n"
        ],
        "results": 10
    },
    {
        "id": "1235",
        "source": "leetcodeTitles",
        "source_id": "1447",
        "url": "https://leetcode.com/problems/simplified-fractions/",
        "language": "java",
        "query": "Simplified Fractions",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i] / b[i];\n\t\t\td[i] = a[i] % b[i];\n\t\t}\n\t\tint[] e = new int[n];\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = c[i] / d[i];\n\t\t\tf[i] = c[i] % d[i];\n\t\t}\n\t\tint[] g = new int[n];\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = e[i] / f[i];\n\t\t\th[i] = e[i] % f[i];\n\t\t}\n\t\tint[] i = new int[n];\n\t\tint[] j = new int[n];\n\t\tfor(int k = 0; k < n; k++){\n\t\t\ti[k] = g[k] / h[k];\n\t\t\tj[k] = g[k] % h[k];\n\t\t}\n\t\tint[] k = new int[n];\n\t\tint[] l = new int[n];\n\t\tfor(int m = 0; m < n; m++){\n\t\t\tk[m] = i[m] / j[m];\n\t\t\tl[m]\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tint[] j = new int[n];\n\t\tfor(int k = 0; k < n; k++){\n\t\t\ti[k] = sc.nextInt();\n\t\t\tj[k] = sc.nextInt();\n\t\t}\n\t\tint[] k = new int[n];\n\t\tint[] l = new int[n];\n\t\tfor(int m = 0; m < n; m++){\n\t\t\tk[m] = sc.nextInt();\n\t\t\tl[m] = sc.nextInt();\n\t\t}\n\t\tint[] m = new int[n];\n\t\tint[] n1 = new int[n];\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i] * b[i];\n\t\t\td[i] = a[i] * b[i];\n\t\t}\n\t\tint[] e = new int[n];\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = c[i] / d[i];\n\t\t\tf[i] = c[i] / d[i];\n\t\t}\n\t\tint[] g = new int[n];\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = e[i] * f[i];\n\t\t\th[i] = e[i] * f[i];\n\t\t}\n\t\tint[] i = new int[n];\n\t\tint[] j = new int[n];\n\t\tfor(int k = 0; k < n; k++){\n\t\t\ti[k] = g[k] / h[k];\n\t\t\tj[k] = g[k] / h[k];\n\t\t}\n\t\tint[] l = new int[n];\n\t\tint[] m = new int[n];\n\t\tfor(int k = 0; k < n; k++){\n\t\t\tl[k] = i[k] * j[k];\n\t\t\tm[k]\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i]*b[i];\n\t\t\td[i] = a[i]+b[i];\n\t\t}\n\t\tint[] e = new int[n];\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = c[i]/d[i];\n\t\t\tf[i] = c[i]%d[i];\n\t\t}\n\t\tint[] g = new int[n];\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = e[i]*f[i];\n\t\t\th[i] = e[i]+f[i];\n\t\t}\n\t\tint[] i = new int[n];\n\t\tint[] j = new int[n];\n\t\tfor(int k = 0; k < n; k++){\n\t\t\ti[k] = g[k]/h[k];\n\t\t\tj[k] = g[k]%h[k];\n\t\t}\n\t\tint[] k = new int[n];\n\t\tint[] l = new int[n];\n\t\tfor(int m = 0; m < n; m++){\n\t\t\tk[m] = i[m]*j[m];\n\t\t\tl[m] = i\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint gcd = gcd(n,m);\n\t\tSystem.out.println(n/gcd + \"/\" + m/gcd);\n\t}\n\tpublic static int gcd(int a, int b){\n\t\tif(b == 0) return a;\n\t\treturn gcd(b, a%b);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i] * b[i];\n\t\t\td[i] = a[i] + b[i];\n\t\t}\n\t\tint[] e = new int[n];\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = c[i] / d[i];\n\t\t\tf[i] = c[i] % d[i];\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.println(e[i] + \" \" + f[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tint t=sc.nextInt();\n\t\twhile(t-->0){\n\t\t\tint n=sc.nextInt();\n\t\t\tint m=sc.nextInt();\n\t\t\tint gcd=gcd(n,m);\n\t\t\tSystem.out.println(n/gcd+\"/\"+m/gcd);\n\t\t}\n\t}\n\tstatic int gcd(int a,int b){\n\t\tif(b==0)\n\t\t\treturn a;\n\t\treturn gcd(b,a%b);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1236",
        "source": "leetcodeTitles",
        "source_id": "1122",
        "url": "https://leetcode.com/problems/relative-sort-array/",
        "language": "java",
        "query": "Relative Sort Array",
        "snippets": [
            "\tstatic void relativeSortArray(int[] arr1, int[] arr2, int[] arr3){\n\t\tint[] arr4 = new int[arr1.length];\n\t\tint[] arr5 = new int[arr1.length];\n\t\tint[] arr6 = new int[arr1.length];\n\t\tint[] arr7 = new int[arr1.length];\n\t\tint[] arr8 = new int[arr1.length];\n\t\tint[] arr9 = new int[arr1.length];\n\t\tint[] arr10 = new int[arr1.length];\n\t\tint[] arr11 = new int[arr1.length];\n\t\tint[] arr12 = new int[arr1.length];\n\t\tint[] arr13 = new int[arr1.length];\n\t\tint[] arr14 = new int[arr1.length];\n\t\tint[] arr15 = new int[arr1.length];\n\t\tint[] arr16 = new int[arr1.length];\n\t\tint[] arr17 = new int[arr1.length];\n\t\tint[] arr18 = new int[arr1.length];\n\t\tint[] arr19 = new int[arr1.length];\n\t\tint[] arr20 = new int[arr1.length];\n\t\tint[] arr21 = new int[arr1.length];\n\t\tint[] arr22 = new int[arr1.length];\n\t\tint[] arr23 = new int[arr1.length];\n\t\tint[] arr24 = new int[arr1.length];\n\t\tint[] arr25 = new int[arr1.length];\n\t\tint[] arr26 = new int[arr1.length];\n\t\tint[] arr27 = new int[arr1.length];\n\t\tint[] arr28 = new int[arr1.length];\n\t\tint[] arr29 = new int[arr1.length];\n\t\tint[] arr30 = new int[arr1.length];\n\t\tint[] arr31 = new int[arr1.length];\n\t\tint[] arr32 = new int[arr1.length];\n\t\tint[] arr33 = new int[arr1\n",
            "\tint[] relativeSortArray(int[] arr1, int[] arr2) {\n\t\tint[] arr = new int[arr1.length];\n\t\tint index = 0;\n\t\tfor(int i = 0; i < arr2.length; i++){\n\t\t\tfor(int j = 0; j < arr1.length; j++){\n\t\t\t\tif(arr2[i] == arr1[j]){\n\t\t\t\t\tarr[index] = arr1[j];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr1.length; i++){\n\t\t\tif(!contains(arr, arr1[i])){\n\t\t\t\tarr[index] = arr1[i];\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tint[] res = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tres[i] = arr[i];\n\t\t}\n\t\treturn res;\n\t}\n\tpublic boolean contains(int[] arr, int num){\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == num){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tvoid relativeSortArray(int[] arr1, int[] arr2, int[] arr3) {\n\t\tint[] arr = new int[arr1.length + arr2.length + arr3.length];\n\t\tint index = 0;\n\t\tfor (int i = 0; i < arr2.length; i++) {\n\t\t\tfor (int j = 0; j < arr1.length; j++) {\n\t\t\t\tif (arr1[j] == arr2[i]) {\n\t\t\t\t\tarr[index] = arr1[j];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < arr3.length; i++) {\n\t\t\tfor (int j = 0; j < arr1.length; j++) {\n\t\t\t\tif (arr1[j] == arr3[i]) {\n\t\t\t\t\tarr[index] = arr1[j];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < arr1.length; i++) {\n\t\t\tfor (int j = 0; j < arr2.length; j++) {\n\t\t\t\tif (arr2[j] == arr1[i]) {\n\t\t\t\t\tarr[index] = arr2[j];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < arr3.length; i++) {\n\t\t\tfor (int j = 0; j < arr2.length; j++) {\n\t\t\t\tif (arr2[j] == arr3[i]) {\n\t\t\t\t\tarr[index] = arr2[j];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < arr1.length; i++) {\n\t\t\tfor (int j = 0; j < arr3.length; j++) {\n\t\t\t\tif (\n",
            "\tvoid relativeSortArray(int[] arr1, int[] arr2, int[] arr3){\n\t\tint[] arr1_copy = arr1.clone();\n\t\tint[] arr2_copy = arr2.clone();\n\t\tint[] arr3_copy = arr3.clone();\n\t\tArrays.sort(arr1_copy);\n\t\tArrays.sort(arr2_copy);\n\t\tArrays.sort(arr3_copy);\n\t\tint[] arr1_sorted = new int[arr1.length];\n\t\tint[] arr2_sorted = new int[arr2.length];\n\t\tint[] arr3_sorted = new int[arr3.length];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\twhile(i < arr1.length){\n\t\t\tif(arr1_copy[i] == arr2_copy[j]){\n\t\t\t\tarr2_sorted[j] = arr2_copy[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(arr1_copy[i] == arr3_copy[k]){\n\t\t\t\tarr3_sorted[k] = arr3_copy[k];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarr1_sorted[i] = arr1_copy[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tint[] result = new int[arr1.length];\n\t\tint result_index = 0;\n\t\tfor(int l = 0; l < arr2.length; l++){\n\t\t\tresult[result_index] = arr2_sorted[l];\n\t\t\tresult_index++;\n\t\t}\n\t\tfor(int l = 0; l < arr3.length; l++){\n\t\t\tresult[result_index] = arr3_sorted[l];\n\t\t\tresult_index++;\n\t\t}\n\t\tfor(int l = 0; l < arr1.length; l++){\n",
            "\tstatic void relativeSortArray(int[] arr1, int[] arr2, int[] arr3){\n\t\tint[] arr1_copy = arr1.clone();\n\t\tint[] arr2_copy = arr2.clone();\n\t\tint[] arr3_copy = arr3.clone();\n\t\tArrays.sort(arr1_copy);\n\t\tArrays.sort(arr2_copy);\n\t\tArrays.sort(arr3_copy);\n\t\tint[] arr1_copy_index = new int[arr1_copy.length];\n\t\tint[] arr2_copy_index = new int[arr2_copy.length];\n\t\tint[] arr3_copy_index = new int[arr3_copy.length];\n\t\tfor(int i = 0; i < arr1_copy.length; i++){\n\t\t\tarr1_copy_index[i] = Arrays.binarySearch(arr1_copy, arr1[i]);\n\t\t}\n\t\tfor(int i = 0; i < arr2_copy.length; i++){\n\t\t\tarr2_copy_index[i] = Arrays.binarySearch(arr2_copy, arr2[i]);\n\t\t}\n\t\tfor(int i = 0; i < arr3_copy.length; i++){\n\t\t\tarr3_copy_index[i] = Arrays.binarySearch(arr3_copy, arr3[i]);\n\t\t}\n\t\tfor(int i = 0; i < arr1.length; i++){\n\t\t\tint index = Arrays.binarySearch(arr2_copy, arr1[i]);\n\t\t\tif(index >= 0){\n\t\t\t\tarr2_copy_index[index] = -1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr1.length; i++){\n\t\t\tint index = Arrays.binarySearch(arr3_copy, arr1[i]);\n\t\t\tif(index >= 0){\n\t\t\t\tarr3_copy_index[index] = -1;\n\t\t\t}\n",
            "\tstatic void relativeSortArray(int[] arr1, int[] arr2, int[] arr3){\n\t\tint[] arr1_copy = arr1.clone();\n\t\tint[] arr2_copy = arr2.clone();\n\t\tint[] arr3_copy = arr3.clone();\n\t\tArrays.sort(arr1_copy);\n\t\tArrays.sort(arr2_copy);\n\t\tArrays.sort(arr3_copy);\n\t\tint[] arr1_sorted = new int[arr1.length];\n\t\tint[] arr2_sorted = new int[arr2.length];\n\t\tint[] arr3_sorted = new int[arr3.length];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\twhile(i < arr1.length){\n\t\t\tif(arr1_copy[i] == arr2_copy[j]){\n\t\t\t\tarr2_sorted[j] = arr2_copy[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(arr1_copy[i] == arr3_copy[k]){\n\t\t\t\tarr3_sorted[k] = arr3_copy[k];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarr1_sorted[i] = arr1_copy[i];\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tint[] arr = new int[arr1.length];\n\t\tint index = 0;\n\t\tfor(int l = 0; l < arr2_sorted.length; l++){\n\t\t\tif(arr2_sorted[l] != 0){\n\t\t\t\tarr[index] = arr2_sorted[l];\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tfor(int l = 0; l < arr3_sorted.length; l++){\n\t\t\tif(arr3_sorted[l] != 0){\n\t\t\t\tarr[index] =\n",
            "\tstatic void relativeSortArray(int[] arr1, int[] arr2, int[] arr3){\n\t\tint[] arr1Copy = arr1.clone();\n\t\tint[] arr2Copy = arr2.clone();\n\t\tint[] arr3Copy = arr3.clone();\n\t\tArrays.sort(arr1Copy);\n\t\tArrays.sort(arr2Copy);\n\t\tArrays.sort(arr3Copy);\n\t\tint[] arr1Copy2 = arr1Copy.clone();\n\t\tint[] arr2Copy2 = arr2Copy.clone();\n\t\tint[] arr3Copy2 = arr3Copy.clone();\n\t\tfor(int i = 0; i < arr1Copy.length; i++){\n\t\t\tfor(int j = 0; j < arr2Copy.length; j++){\n\t\t\t\tif(arr1Copy[i] == arr2Copy[j]){\n\t\t\t\t\tarr2Copy2[j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr1Copy.length; i++){\n\t\t\tfor(int j = 0; j < arr3Copy.length; j++){\n\t\t\t\tif(arr1Copy[i] == arr3Copy[j]){\n\t\t\t\t\tarr3Copy2[j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr1Copy.length; i++){\n\t\t\tfor(int j = 0; j < arr1Copy2.length; j++){\n\t\t\t\tif(arr1Copy[i] == arr1Copy2[j]){\n\t\t\t\t\tarr1Copy2[j] = -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr2Copy.length; i++){\n\t\t\tfor(int j = 0; j < arr2Copy2.length; j++){\n\t\t\t\tif(arr2Copy[i] == arr2Copy\n",
            "\tstatic int[] relativeSortArray(int[] arr1, int[] arr2) {\n\t\tint[] arr = new int[arr1.length];\n\t\tint[] arr2_ = new int[arr2.length];\n\t\tint[] arr1_ = new int[arr1.length];\n\t\tint[] arr_ = new int[arr1.length];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tfor (i = 0; i < arr1.length; i++) {\n\t\t\tfor (j = 0; j < arr2.length; j++) {\n\t\t\t\tif (arr1[i] == arr2[j]) {\n\t\t\t\t\tarr2_[j] = arr1[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < arr1.length; i++) {\n\t\t\tfor (j = 0; j < arr2.length; j++) {\n\t\t\t\tif (arr1[i] != arr2[j]) {\n\t\t\t\t\tarr1_[m] = arr1[i];\n\t\t\t\t\tm++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < arr2_.length; i++) {\n\t\t\tarr[k] = arr2_[i];\n\t\t\tk++;\n\t\t}\n\t\tfor (i = 0; i < arr1_.length; i++) {\n\t\t\tarr[k] = arr1_[i];\n\t\t\tk++;\n\t\t}\n\t\tfor (i = 0; i < arr.length; i++) {\n\t\t\tfor (j = 0; j < arr.length - 1; j++) {\n\t\t\t\tif (arr[j] > arr[j + 1]) {\n\t\t\t\t\tl = arr[j];\n\t\t\t\t\tarr[j] = arr[j + 1];\n"
        ],
        "results": 10
    },
    {
        "id": "1237",
        "source": "leetcodeTitles",
        "source_id": "429",
        "url": "https://leetcode.com/problems/n-ary-tree-level-order-traversal/",
        "language": "java",
        "query": "N-ary Tree Level Order Traversal",
        "snippets": [
            "\tvoid levelOrder(Node root){\n\t\tif(root == null) return;\n\t\tQueue<Node> q = new LinkedList<Node>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tNode temp = q.remove();\n\t\t\tSystem.out.print(temp.data + \" \");\n\t\t\tfor(Node child : temp.children){\n\t\t\t\tq.add(child);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> levelOrder(Node root) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(root == null) return result;\n\t\tQueue<Node> queue = new LinkedList<Node>();\n\t\tqueue.offer(root);\n\t\twhile(!queue.isEmpty()){\n\t\t\tint size = queue.size();\n\t\t\tList<Integer> level = new ArrayList<Integer>();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tNode cur = queue.poll();\n\t\t\t\tlevel.add(cur.val);\n\t\t\t\tfor(Node child : cur.children){\n\t\t\t\t\tqueue.offer(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(level);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tvoid levelOrder(Node root){\n\t\tif(root == null) return;\n\t\tQueue<Node> q = new LinkedList<Node>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tNode node = q.poll();\n\t\t\tSystem.out.print(node.val + \" \");\n\t\t\tfor(Node child : node.children){\n\t\t\t\tq.add(child);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> levelOrder(Node root) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(root == null) return result;\n\t\tQueue<Node> q = new LinkedList<Node>();\n\t\tq.offer(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tint size = q.size();\n\t\t\tList<Integer> level = new ArrayList<Integer>();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tNode cur = q.poll();\n\t\t\t\tlevel.add(cur.val);\n\t\t\t\tfor(Node child : cur.children){\n\t\t\t\t\tq.offer(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(level);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tvoid levelOrder(Node root){\n\t\tif(root == null) return;\n\t\tQueue<Node> q = new LinkedList<Node>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tNode cur = q.remove();\n\t\t\tSystem.out.print(cur.val + \" \");\n\t\t\tfor(Node child : cur.children){\n\t\t\t\tq.add(child);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid levelOrder(Node root){\n\t\tif(root == null) return;\n\t\tQueue<Node> q = new LinkedList<Node>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tNode cur = q.poll();\n\t\t\tSystem.out.print(cur.val + \" \");\n\t\t\tfor(Node n : cur.children){\n\t\t\t\tq.add(n);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> levelOrder(Node root) {\n\t\tList<List<Integer>> res = new ArrayList<List<Integer>>();\n\t\tif(root == null) return res;\n\t\tQueue<Node> q = new LinkedList<Node>();\n\t\tq.offer(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tint size = q.size();\n\t\t\tList<Integer> level = new ArrayList<Integer>();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tNode cur = q.poll();\n\t\t\t\tlevel.add(cur.val);\n\t\t\t\tfor(Node child : cur.children){\n\t\t\t\t\tq.offer(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\tres.add(level);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tvoid levelOrder(Node root){\n\t\tif(root==null) return;\n\t\tQueue<Node> q=new LinkedList<Node>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tNode cur=q.remove();\n\t\t\tSystem.out.print(cur.val+\" \");\n\t\t\tfor(Node n:cur.children){\n\t\t\t\tq.add(n);\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1238",
        "source": "leetcodeTitles",
        "source_id": "481",
        "url": "https://leetcode.com/problems/magical-string/",
        "language": "java",
        "query": "Magical String",
        "snippets": [
            "\tstatic String magicalString(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile(n > 0){\n\t\t\tif(i == 0 || i == 1){\n\t\t\t\tsb.append(\"1\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(\"2\");\n\t\t\t}\n\t\t\ti = (i + 1) % 3;\n\t\t\tn--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString magicalString(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile(n > 0){\n\t\t\tif(i == 0 || i == 1 || i == 2){\n\t\t\t\tsb.append(\"1\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(\"2\");\n\t\t\t}\n\t\t\ti++;\n\t\t\tn--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.substring(0,5));\n\t\tSystem.out.println(s.substring(6));\n\t\tSystem.out.println(s.substring(6,11));\n\t\tSystem.out.println(s.substring(11));\n\t\tSystem.out.println(s.substring(11,16));\n\t\tSystem.out.println(s.substring(16));\n\t\tSystem.out.println(s.substring(16,21));\n\t\tSystem.out.println(s.substring(21));\n\t\tSystem.out.println(s.substring(21,26));\n\t\tSystem.out.println(s.substring(26));\n\t\tSystem.out.println(s.substring(26,31));\n\t\tSystem.out.println(s.substring(31));\n\t\tSystem.out.println(s.substring(31,36));\n\t\tSystem.out.println(s.substring(36));\n\t\tSystem.out.println(s.substring(36,41));\n\t\tSystem.out.println(s.substring(41));\n\t\tSystem.out.println(s.substring(41,46));\n\t\tSystem.out.println(s.substring(46));\n\t\tSystem.out.println(s.substring(46,51));\n\t\tSystem.out.println(s.substring(51));\n\t\tSystem.out.println(s.substring(51,56));\n\t\tSystem.out.println(s.substring(56));\n\t\tSystem.out.println(s.substring(56,61));\n\t\tSystem.out.println(s.substring(61));\n\t\tSystem.out.println(s.substring(61,66));\n\t\tSystem.out.println(s.substring(66));\n\t\tSystem.out.println(s.substring(66,71));\n\t\tSystem.out.println(s.substring(71));\n\t\tSystem\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.substring(0,5));\n\t\tSystem.out.println(s.substring(6));\n\t}\n}\n",
            "\tstatic String magicalString(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (n > 0) {\n\t\t\tif (i == 0 || i == 1 || i == 2) {\n\t\t\t\tsb.append(\"1\");\n\t\t\t} else {\n\t\t\t\tsb.append(\"2\");\n\t\t\t}\n\t\t\ti = (i + 1) % 3;\n\t\t\tn--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.substring(0,5));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"1a2b3c4d5e6f7g8h9i\";\n\t\tString[] arr = s.split(\"\");\n\t\tint[] num = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tnum[i] = Integer.parseInt(arr[i]);\n\t\t}\n\t\tint[] num2 = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tnum2[i] = num[i] * num[i];\n\t\t}\n\t\tString[] arr2 = new String[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tarr2[i] = Integer.toString(num2[i]);\n\t\t}\n\t\tString s2 = String.join(\"\", arr2);\n\t\tSystem.out.println(s2);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"1a2b3c4d5e6f7g8h9i0j\";\n\t\tSystem.out.println(s.substring(0, s.length() - 1));\n\t}\n}\n"
        ],
        "results": 9
    },
    {
        "id": "1239",
        "source": "leetcodeTitles",
        "source_id": "686",
        "url": "https://leetcode.com/problems/repeated-string-match/",
        "language": "java",
        "query": "Repeated String Match",
        "snippets": [
            "\tstatic String magicalString(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile(n > 0){\n\t\t\tif(i == 0 || i == 1){\n\t\t\t\tsb.append(\"1\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(\"2\");\n\t\t\t}\n\t\t\ti = (i + 1) % 3;\n\t\t\tn--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString magicalString(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile(n > 0){\n\t\t\tif(i == 0 || i == 1 || i == 2){\n\t\t\t\tsb.append(\"1\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(\"2\");\n\t\t\t}\n\t\t\ti++;\n\t\t\tn--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.substring(0,5));\n\t\tSystem.out.println(s.substring(6));\n\t\tSystem.out.println(s.substring(6,11));\n\t\tSystem.out.println(s.substring(11));\n\t\tSystem.out.println(s.substring(11,16));\n\t\tSystem.out.println(s.substring(16));\n\t\tSystem.out.println(s.substring(16,21));\n\t\tSystem.out.println(s.substring(21));\n\t\tSystem.out.println(s.substring(21,26));\n\t\tSystem.out.println(s.substring(26));\n\t\tSystem.out.println(s.substring(26,31));\n\t\tSystem.out.println(s.substring(31));\n\t\tSystem.out.println(s.substring(31,36));\n\t\tSystem.out.println(s.substring(36));\n\t\tSystem.out.println(s.substring(36,41));\n\t\tSystem.out.println(s.substring(41));\n\t\tSystem.out.println(s.substring(41,46));\n\t\tSystem.out.println(s.substring(46));\n\t\tSystem.out.println(s.substring(46,51));\n\t\tSystem.out.println(s.substring(51));\n\t\tSystem.out.println(s.substring(51,56));\n\t\tSystem.out.println(s.substring(56));\n\t\tSystem.out.println(s.substring(56,61));\n\t\tSystem.out.println(s.substring(61));\n\t\tSystem.out.println(s.substring(61,66));\n\t\tSystem.out.println(s.substring(66));\n\t\tSystem.out.println(s.substring(66,71));\n\t\tSystem.out.println(s.substring(71));\n\t\tSystem\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.substring(0,5));\n\t\tSystem.out.println(s.substring(6));\n\t}\n}\n",
            "\tstatic String magicalString(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (n > 0) {\n\t\t\tif (i == 0 || i == 1 || i == 2) {\n\t\t\t\tsb.append(\"1\");\n\t\t\t} else {\n\t\t\t\tsb.append(\"2\");\n\t\t\t}\n\t\t\ti = (i + 1) % 3;\n\t\t\tn--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.substring(0,5));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"1a2b3c4d5e6f7g8h9i\";\n\t\tString[] arr = s.split(\"\");\n\t\tint[] num = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tnum[i] = Integer.parseInt(arr[i]);\n\t\t}\n\t\tint[] num2 = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tnum2[i] = num[i] * num[i];\n\t\t}\n\t\tString[] arr2 = new String[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tarr2[i] = Integer.toString(num2[i]);\n\t\t}\n\t\tString s2 = String.join(\"\", arr2);\n\t\tSystem.out.println(s2);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"1a2b3c4d5e6f7g8h9i0j\";\n\t\tSystem.out.println(s.substring(0, s.length() - 1));\n\t}\n}\n"
        ],
        "results": 9
    },
    {
        "id": "1240",
        "source": "leetcodeTitles",
        "source_id": "1550",
        "url": "https://leetcode.com/problems/three-consecutive-odds/",
        "language": "java",
        "query": "Three Consecutive Odds",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] % 2 == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count == 3){\n\t\t\t\tSystem.out.println(\"True\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(count != 3){\n\t\t\tSystem.out.println(\"False\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length-2; i++){\n\t\t\tif(arr[i]%2==1 && arr[i+1]%2==1 && arr[i+2]%2==1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] % 2 == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count == 3){\n\t\t\t\tSystem.out.println(\"Three consecutive odds\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(count != 3){\n\t\t\tSystem.out.println(\"Not three consecutive odds\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] % 2 == 1){\n\t\t\t\tcount++;\n\t\t\t\tif(count == 3){\n\t\t\t\t\tSystem.out.println(\"Three consecutive odds\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] % 2 == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count == 3){\n\t\t\t\tSystem.out.println(\"Three consecutive odds\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(count < 3){\n\t\t\tSystem.out.println(\"Not three consecutive odds\");\n\t\t}\n\t}\n}\n",
            "\tstatic boolean threeConsecutiveOdds(int[] array){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < array.length; i++){\n\t\t\tif(array[i] % 2 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count == 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean threeConsecutiveOdds(int[] a){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] % 2 == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count == 3){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] % 2 == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count == 3){\n\t\t\t\tSystem.out.println(\"Three consecutive odds\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] % 2 == 1){\n\t\t\t\tcount++;\n\t\t\t\tif(count == 3){\n\t\t\t\t\tSystem.out.println(\"Three consecutive odds\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1241",
        "source": "leetcodeTitles",
        "source_id": "923",
        "url": "https://leetcode.com/problems/3sum-with-multiplicity/",
        "language": "java",
        "query": "3Sum With Multiplicity",
        "snippets": [
            "\tint threeSumMulti(int[] A, int target) {\n\t\tint res = 0;\n\t\tArrays.sort(A);\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tint left = i + 1, right = A.length - 1;\n\t\t\twhile (left < right) {\n\t\t\t\tint sum = A[i] + A[left] + A[right];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tres += right - left + 1;\n\t\t\t\t\tleft++;\n\t\t\t\t\tright--;\n\t\t\t\t} else if (sum < target) {\n\t\t\t\t\tleft++;\n\t\t\t\t} else {\n\t\t\t\t\tright--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int threeSum(int[] nums, int target) {\n\t\tint count = 0;\n\t\tArrays.sort(nums);\n\t\tfor (int i = 0; i < nums.length - 2; i++) {\n\t\t\tint j = i + 1;\n\t\t\tint k = nums.length - 1;\n\t\t\twhile (j < k) {\n\t\t\t\tint sum = nums[i] + nums[j] + nums[k];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tj++;\n\t\t\t\t\tk--;\n\t\t\t\t} else if (sum < target) {\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int threeSum(int[] nums, int target) {\n\t\tint count = 0;\n\t\tArrays.sort(nums);\n\t\tfor (int i = 0; i < nums.length - 2; i++) {\n\t\t\tif (i > 0 && nums[i] == nums[i - 1])\n\t\t\t\tcontinue;\n\t\t\tint left = i + 1;\n\t\t\tint right = nums.length - 1;\n\t\t\twhile (left < right) {\n\t\t\t\tint sum = nums[i] + nums[left] + nums[right];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tleft++;\n\t\t\t\t\tright--;\n\t\t\t\t\twhile (left < right && nums[left] == nums[left - 1])\n\t\t\t\t\t\tleft++;\n\t\t\t\t\twhile (left < right && nums[right] == nums[right + 1])\n\t\t\t\t\t\tright--;\n\t\t\t\t} else if (sum < target)\n\t\t\t\t\tleft++;\n\t\t\t\telse\n\t\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int threeSum(int[] nums, int target) {\n\t\tint count = 0;\n\t\tArrays.sort(nums);\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tint left = i + 1;\n\t\t\tint right = nums.length - 1;\n\t\t\twhile (left < right) {\n\t\t\t\tint sum = nums[i] + nums[left] + nums[right];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tleft++;\n\t\t\t\t\tright--;\n\t\t\t\t} else if (sum < target) {\n\t\t\t\t\tleft++;\n\t\t\t\t} else {\n\t\t\t\t\tright--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tList<List<Integer>> threeSum(int[] nums) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (nums == null || nums.length < 3) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(nums);\n\t\tfor (int i = 0; i < nums.length - 2; i++) {\n\t\t\tif (i == 0 || (i > 0 && nums[i] != nums[i - 1])) {\n\t\t\t\tint left = i + 1;\n\t\t\t\tint right = nums.length - 1;\n\t\t\t\twhile (left < right) {\n\t\t\t\t\tint sum = nums[i] + nums[left] + nums[right];\n\t\t\t\t\tif (sum == 0) {\n\t\t\t\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\t\t\t\tlist.add(nums[i]);\n\t\t\t\t\t\tlist.add(nums[left]);\n\t\t\t\t\t\tlist.add(nums[right]);\n\t\t\t\t\t\tresult.add(list);\n\t\t\t\t\t\twhile (left < right && nums[left] == nums[left + 1]) {\n\t\t\t\t\t\t\tleft++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (left < right && nums[right] == nums[right - 1]) {\n\t\t\t\t\t\t\tright--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t\tright--;\n\t\t\t\t\t} else if (sum < 0) {\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tright--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int threeSumMulti(int[] A, int target) {\n\t\tint count = 0;\n\t\tArrays.sort(A);\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tint left = i + 1;\n\t\t\tint right = A.length - 1;\n\t\t\twhile (left < right) {\n\t\t\t\tint sum = A[i] + A[left] + A[right];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tcount += right - left + 1;\n\t\t\t\t\tleft++;\n\t\t\t\t\tright--;\n\t\t\t\t} else if (sum < target) {\n\t\t\t\t\tleft++;\n\t\t\t\t} else {\n\t\t\t\t\tright--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int threeSumMulti(int[] A, int target) {\n\t\tint count = 0;\n\t\tArrays.sort(A);\n\t\tfor (int i = 0; i < A.length - 2; i++) {\n\t\t\tint j = i + 1;\n\t\t\tint k = A.length - 1;\n\t\t\twhile (j < k) {\n\t\t\t\tint sum = A[i] + A[j] + A[k];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tcount += k - j + 1;\n\t\t\t\t\tj++;\n\t\t\t\t\tk--;\n\t\t\t\t} else if (sum < target) {\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int threeSum(int[] A, int target) {\n\t\tint count = 0;\n\t\tArrays.sort(A);\n\t\tfor (int i = 0; i < A.length - 2; i++) {\n\t\t\tint left = i + 1;\n\t\t\tint right = A.length - 1;\n\t\t\twhile (left < right) {\n\t\t\t\tint sum = A[i] + A[left] + A[right];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tcount++;\n\t\t\t\t\tleft++;\n\t\t\t\t\tright--;\n\t\t\t\t} else if (sum < target) {\n\t\t\t\t\tleft++;\n\t\t\t\t} else {\n\t\t\t\t\tright--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint threeSumMulti(int[] A, int target) {\n\t\tint n = A.length;\n\t\tArrays.sort(A);\n\t\tint count = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint j = i + 1;\n\t\t\tint k = n - 1;\n\t\t\twhile (j < k) {\n\t\t\t\tint sum = A[i] + A[j] + A[k];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tcount += k - j + 1;\n\t\t\t\t\tj++;\n\t\t\t\t\tk--;\n\t\t\t\t} else if (sum < target) {\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int threeSumMulti(int[] A, int target) {\n\t\tint n = A.length;\n\t\tint count = 0;\n\t\tArrays.sort(A);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint j = i + 1;\n\t\t\tint k = n - 1;\n\t\t\twhile (j < k) {\n\t\t\t\tint sum = A[i] + A[j] + A[k];\n\t\t\t\tif (sum == target) {\n\t\t\t\t\tcount += k - j + 1;\n\t\t\t\t\tj++;\n\t\t\t\t\tk--;\n\t\t\t\t} else if (sum < target) {\n\t\t\t\t\tj++;\n\t\t\t\t} else {\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1242",
        "source": "leetcodeTitles",
        "source_id": "1652",
        "url": "https://leetcode.com/problems/defuse-the-bomb/",
        "language": "java",
        "query": "Defuse the Bomb",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = new int[5];\n\t\tarr[0] = 1;\n\t\tarr[1] = 2;\n\t\tarr[2] = 3;\n\t\tarr[3] = 4;\n\t\tarr[4] = 5;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] bomb = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = new int[5];\n\t\tarr[0] = 1;\n\t\tarr[1] = 2;\n\t\tarr[2] = 3;\n\t\tarr[3] = 4;\n\t\tarr[4] = 5;\n\t\tint[] arr2 = new int[5];\n\t\tarr2[0] = 1;\n\t\tarr2[1] = 2;\n\t\tarr2[2] = 3;\n\t\tarr2[3] = 4;\n\t\tarr2[4] = 5;\n\t\tint[] arr3 = new int[5];\n\t\tarr3[0] = 1;\n\t\tarr3[1] = 2;\n\t\tarr3[2] = 3;\n\t\tarr3[3] = 4;\n\t\tarr3[4] = 5;\n\t\tint[] arr4 = new int[5];\n\t\tarr4[0] = 1;\n\t\tarr4[1] = 2;\n\t\tarr4[2] = 3;\n\t\tarr4[3] = 4;\n\t\tarr4[4] = 5;\n\t\tint[] arr5 = new int[5];\n\t\tarr5[0] = 1;\n\t\tarr5[1] = 2;\n\t\tarr5[2] = 3;\n\t\tarr5[3] = 4;\n\t\tarr5[4] = 5;\n\t\tint[] arr6 = new int[5];\n\t\tarr6[0] = 1;\n\t\tarr6[1] = 2;\n\t\tarr6[2] = 3;\n\t\tarr6[3] = 4;\n\t\tarr6[4] = 5;\n\t\tint[] arr7 = new int[5];\n\t\tarr7[0] = 1;\n\t\tarr7[1] = 2;\n\t\tarr7[2] = 3;\n\t\tarr7[3] = 4;\n\t\tarr7[4] = 5;\n\t\tint[] arr8 = new int[5];\n\t\tarr8[0\n"
        ],
        "results": 10
    },
    {
        "id": "1243",
        "source": "leetcodeTitles",
        "source_id": "1668",
        "url": "https://leetcode.com/problems/maximum-repeating-substring/",
        "language": "java",
        "query": "Maximum Repeating Substring",
        "snippets": [
            "\tstatic String maxRepeatingSubstring(String str){\n\t\tint n = str.length();\n\t\tint maxLen = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(str.charAt(i) == str.charAt(j)){\n\t\t\t\t\tcount[i]++;\n\t\t\t\t\tif(count[i] > count[j]){\n\t\t\t\t\t\tcount[j] = count[i];\n\t\t\t\t\t\tstart = j;\n\t\t\t\t\t\tend = i;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count[i] > maxLen){\n\t\t\t\tmaxLen = count[i];\n\t\t\t\tstart = i;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(start, end+1);\n\t}\n\tpublic static void main(String[] args){\n\t\tString str = \"abababab\";\n\t\tSystem.out.println(maxRepeatingSubstring(str));\n\t}\n}\n",
            "\tstatic String maxRepeatingSubstring(String s){\n\t\tint n = s.length();\n\t\tint max = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(s.charAt(i) == s.charAt(j)){\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count[i] > max){\n\t\t\t\tmax = count[i];\n\t\t\t\tstart = i;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t}\n\t\treturn s.substring(start, end + 1);\n\t}\n}\n",
            "\tString maxRepeatingSubstring(String str){\n\t\tint n = str.length();\n\t\tint[] lps = new int[n];\n\t\tint i = 1, j = 0;\n\t\tint maxLen = 0;\n\t\tint start = 0;\n\t\twhile(i < n){\n\t\t\tif(str.charAt(i) == str.charAt(j)){\n\t\t\t\tlps[i] = j + 1;\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(j == 0){\n\t\t\t\tlps[i] = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t}\n\t\ti = 0;\n\t\tj = 0;\n\t\twhile(i < n){\n\t\t\tif(str.charAt(i) == str.charAt(j)){\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(j == 0){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj = lps[j - 1];\n\t\t\t}\n\t\t\tif(maxLen < j - i + 1){\n\t\t\t\tmaxLen = j - i + 1;\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(start, start + maxLen);\n\t}\n}\n"
        ],
        "results": 3
    },
    {
        "id": "1244",
        "source": "leetcodeTitles",
        "source_id": "33",
        "url": "https://leetcode.com/problems/search-in-rotated-sorted-array/",
        "language": "java",
        "query": "Search in Rotated Sorted Array",
        "snippets": [
            "\tint search(int[] A, int target) {\n\t\tint start = 0;\n\t\tint end = A.length - 1;\n\t\twhile (start <= end) {\n\t\t\tint mid = (start + end) / 2;\n\t\t\tif (A[mid] == target) {\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tif (A[start] <= A[mid]) {\n\t\t\t\tif (A[start] <= target && target < A[mid]) {\n\t\t\t\t\tend = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstart = mid + 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (A[mid] < target && target <= A[end]) {\n\t\t\t\t\tstart = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tend = mid - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint search(int[] A, int target) {\n\t\tint start = 0;\n\t\tint end = A.length - 1;\n\t\twhile (start <= end) {\n\t\t\tint mid = start + (end - start) / 2;\n\t\t\tif (A[mid] == target) {\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tif (A[start] <= A[mid]) {\n\t\t\t\tif (A[start] <= target && target < A[mid]) {\n\t\t\t\t\tend = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tstart = mid + 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (A[mid] < target && target <= A[end]) {\n\t\t\t\t\tstart = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tend = mid - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint search(int[] nums, int target) {\n\t\tint left = 0;\n\t\tint right = nums.length - 1;\n\t\twhile (left <= right) {\n\t\t\tint mid = left + (right - left) / 2;\n\t\t\tif (nums[mid] == target) {\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tif (nums[left] <= nums[mid]) {\n\t\t\t\tif (nums[left] <= target && target < nums[mid]) {\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (nums[mid] < target && target <= nums[right]) {\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint search(int[] nums, int target) {\n\t\tint left = 0;\n\t\tint right = nums.length - 1;\n\t\twhile (left <= right) {\n\t\t\tint mid = (left + right) / 2;\n\t\t\tif (nums[mid] == target) {\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\tif (nums[left] <= nums[mid]) {\n\t\t\t\tif (nums[left] <= target && target < nums[mid]) {\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t} else {\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (nums[mid] < target && target <= nums[right]) {\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t} else {\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1245",
        "source": "leetcodeTitles",
        "source_id": "833",
        "url": "https://leetcode.com/problems/find-and-replace-in-string/",
        "language": "java",
        "query": "Find And Replace in String",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tString str1 = str.replace(\"World\", \"Java\");\n\t\tSystem.out.println(str1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tSystem.out.println(str.replace(\"World\", \"Java\"));\n\t}\n}\n",
            "\tString findAndReplace(String str, String find, String replace){\n\t\tString result = \"\";\n\t\tint index = str.indexOf(find);\n\t\twhile(index != -1){\n\t\t\tresult += str.substring(0, index) + replace;\n\t\t\tstr = str.substring(index + find.length());\n\t\t\tindex = str.indexOf(find);\n\t\t}\n\t\tresult += str;\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1246",
        "source": "leetcodeTitles",
        "source_id": "962",
        "url": "https://leetcode.com/problems/maximum-width-ramp/",
        "language": "java",
        "query": "Maximum Width Ramp",
        "snippets": [
            "\tstatic int maxWidthRamp(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = dp[i - 1];\n\t\t\tfor(int j = i - 1; j >= 0; j--){\n\t\t\t\tif(A[i] > A[j]){\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tstatic int maxWidthRamp(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = dp[i-1];\n\t\t\tfor(int j = i-1; j >= 0; j--){\n\t\t\t\tif(A[i] > A[j]){\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j]+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] A = {6,0,8,2,1,5};\n\t\tint K = 2;\n\t\tSystem.out.println(maxWidthRamp(A, K));\n\t}\n}\n",
            "\tstatic int maxWidthRamp(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(A[j] < A[i] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxWidthRamp(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = A[i];\n\t\t\tif(i >= K){\n\t\t\t\tdp[i] = Math.max(dp[i], dp[i - K] + A[i]);\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxWidthRamp(int[] A){\n\t\tint n = A.length;\n\t\tint[] left = new int[n];\n\t\tint[] right = new int[n];\n\t\tleft[0] = A[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tleft[i] = Math.max(left[i-1], A[i]);\n\t\t}\n\t\tright[n-1] = A[n-1];\n\t\tfor(int i = n-2; i >= 0; i--){\n\t\t\tright[i] = Math.max(right[i+1], A[i]);\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmax = Math.max(max, Math.min(left[i], right[i]) - A[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxWidthRamp(int[] A){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tint max = 0;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(A[j] < A[i]){\n\t\t\t\t\tmax = Math.max(max, dp[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp[i] = max + 1;\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] A = {6,0,8,2,1,5};\n\t\tSystem.out.println(maxWidthRamp(A));\n\t}\n}\n",
            "\tstatic int maxWidthRamp(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(A[i] > A[j] && dp[i] < dp[j] + 1){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxWidthRamp(int[] A, int K){\n\t\tint max = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint count = 0;\n\t\twhile(j < A.length){\n\t\t\tcount++;\n\t\t\tif(count > K){\n\t\t\t\tcount = 0;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tj++;\n\t\t\tif(j - i > max){\n\t\t\t\tmax = j - i;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1247",
        "source": "leetcodeTitles",
        "source_id": "2243",
        "url": "https://leetcode.com/problems/calculate-digit-sum-of-a-string/",
        "language": "java",
        "query": "Calculate Digit Sum of a String",
        "snippets": [
            "\tstatic int sum(String s){\n\t\tint sum=0;\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tsum+=s.charAt(i)-'0';\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int sum(String str){\n\t\tint sum=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tsum+=str.charAt(i)-'0';\n\t\t}\n\t\treturn sum;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1248",
        "source": "leetcodeTitles",
        "source_id": "1401",
        "url": "https://leetcode.com/problems/circle-and-rectangle-overlapping/",
        "language": "java",
        "query": "Circle and Rectangle Overlapping",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tCircle c1 = new Circle(1,1,1);\n\t\tCircle c2 = new Circle(2,2,2);\n\t\tRectangle r1 = new Rectangle(1,1,1,1);\n\t\tRectangle r2 = new Rectangle(2,2,2,2);\n\t\tif(c1.overlaps(c2)){\n\t\t\tSystem.out.println(\"Circle 1 and Circle 2 overlap\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Circle 1 and Circle 2 do not overlap\");\n\t\t}\n\t\tif(r1.overlaps(r2)){\n\t\t\tSystem.out.println(\"Rectangle 1 and Rectangle 2 overlap\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Rectangle 1 and Rectangle 2 do not overlap\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tCircle c1 = new Circle(1,1,1);\n\t\tCircle c2 = new Circle(2,2,2);\n\t\tRectangle r1 = new Rectangle(1,1,1,1);\n\t\tRectangle r2 = new Rectangle(2,2,2,2);\n\t\tif(c1.overlaps(c2)){\n\t\t\tSystem.out.println(\"Circle 1 and Circle 2 overlap\");\n\t\t}\n\t\tif(r1.overlaps(r2)){\n\t\t\tSystem.out.println(\"Rectangle 1 and Rectangle 2 overlap\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tCircle c1 = new Circle(1,1,1);\n\t\tCircle c2 = new Circle(2,2,2);\n\t\tRectangle r1 = new Rectangle(1,1,1,1);\n\t\tRectangle r2 = new Rectangle(2,2,2,2);\n\t\tSystem.out.println(c1.overlaps(c2));\n\t\tSystem.out.println(r1.overlaps(r2));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tCircle c1 = new Circle(1,1,1);\n\t\tCircle c2 = new Circle(2,2,2);\n\t\tRectangle r1 = new Rectangle(1,1,1,1);\n\t\tRectangle r2 = new Rectangle(2,2,2,2);\n\t\tif(c1.overlaps(c2)){\n\t\t\tSystem.out.println(\"Circle 1 overlaps Circle 2\");\n\t\t}\n\t\tif(r1.overlaps(r2)){\n\t\t\tSystem.out.println(\"Rectangle 1 overlaps Rectangle 2\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tCircle c1 = new Circle(1,1,1);\n\t\tCircle c2 = new Circle(2,2,2);\n\t\tRectangle r1 = new Rectangle(1,1,1,1);\n\t\tRectangle r2 = new Rectangle(2,2,2,2);\n\t\tif(c1.overlaps(c2)){\n\t\t\tSystem.out.println(\"circles overlap\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"circles do not overlap\");\n\t\t}\n\t\tif(r1.overlaps(r2)){\n\t\t\tSystem.out.println(\"rectangles overlap\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"rectangles do not overlap\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tCircle c1 = new Circle(5);\n\t\tCircle c2 = new Circle(5);\n\t\tRectangle r1 = new Rectangle(5,5);\n\t\tRectangle r2 = new Rectangle(5,5);\n\t\tSystem.out.println(c1.overlaps(c2));\n\t\tSystem.out.println(r1.overlaps(r2));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1249",
        "source": "leetcodeTitles",
        "source_id": "2068",
        "url": "https://leetcode.com/problems/check-whether-two-strings-are-almost-equivalent/",
        "language": "java",
        "query": "Check Wheter Two Strings are Almost Equivalent",
        "snippets": [
            "\tstatic boolean isAlmostEquivalent(String s1, String s2){\n\t\tif(s1.length()!=s2.length())\n\t\t\treturn false;\n\t\tint[] count = new int[26];\n\t\tfor(int i=0;i<s1.length();i++){\n\t\t\tcount[s1.charAt(i)-'a']++;\n\t\t\tcount[s2.charAt(i)-'a']--;\n\t\t}\n\t\tfor(int i=0;i<26;i++){\n\t\t\tif(count[i]!=0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areAlmostEquivalent(String s1, String s2){\n\t\tif(s1.length() != s2.length())\n\t\t\treturn false;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s1.length(); i++){\n\t\t\tcount[s1.charAt(i) - 'a']++;\n\t\t\tcount[s2.charAt(i) - 'a']--;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] != 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areAlmostEquivalent(String s1, String s2){\n\t\tif(s1.length()!=s2.length())\n\t\t\treturn false;\n\t\tint[] count = new int[26];\n\t\tfor(int i=0;i<s1.length();i++){\n\t\t\tcount[s1.charAt(i)-'a']++;\n\t\t\tcount[s2.charAt(i)-'a']--;\n\t\t}\n\t\tfor(int i=0;i<26;i++)\n\t\t\tif(count[i]!=0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isEquivalent(String s1, String s2){\n\t\tif(s1.length()!=s2.length())\n\t\t\treturn false;\n\t\tint[] count = new int[26];\n\t\tfor(int i=0;i<s1.length();i++){\n\t\t\tcount[s1.charAt(i)-'a']++;\n\t\t\tcount[s2.charAt(i)-'a']--;\n\t\t}\n\t\tfor(int i=0;i<26;i++)\n\t\t\tif(count[i]!=0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n\tpublic static void main(String[] args){\n\t\tString s1 = \"abc\";\n\t\tString s2 = \"cab\";\n\t\tSystem.out.println(isEquivalent(s1,s2));\n\t}\n}\n",
            "\tstatic boolean almostEquivalent(String s1, String s2){\n\t\tif(s1.length() != s2.length())\n\t\t\treturn false;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s1.length(); i++){\n\t\t\tcount[s1.charAt(i)-'a']++;\n\t\t\tcount[s2.charAt(i)-'a']--;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++)\n\t\t\tif(count[i] != 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n",
            "\tboolean checkEquivalence(String s1, String s2){\n\t\tif(s1.length()!=s2.length())\n\t\t\treturn false;\n\t\tint[] count = new int[26];\n\t\tfor(int i=0;i<s1.length();i++){\n\t\t\tcount[s1.charAt(i)-'a']++;\n\t\t\tcount[s2.charAt(i)-'a']--;\n\t\t}\n\t\tfor(int i=0;i<26;i++){\n\t\t\tif(count[i]!=0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 8
    },
    {
        "id": "1250",
        "source": "leetcodeTitles",
        "source_id": "258",
        "url": "https://leetcode.com/problems/add-digits/",
        "language": "java",
        "query": "Add Digits",
        "snippets": [
            "\tint addDigits(int num) {\n\t\tif(num<10) return num;\n\t\tint sum = 0;\n\t\twhile(num>0){\n\t\t\tsum += num%10;\n\t\t\tnum /= 10;\n\t\t}\n\t\treturn addDigits(sum);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1251",
        "source": "leetcodeTitles",
        "source_id": "2104",
        "url": "https://leetcode.com/problems/sum-of-subarray-ranges/",
        "language": "java",
        "query": "Sum of Subarray Ranges",
        "snippets": [
            "\tstatic int[] sumOfSubarrayRanges(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tsum += nums[i];\n\t\t\tres[i] = sum;\n\t\t}\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tres[i] = res[i] - (i > 0 ? res[i - 1] : 0);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] sumOfSubarrayRanges(int[] nums){\n\t\tint[] res = new int[nums.length];\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tres[i] = sum;\n\t\t}\n\t\tfor(int i = nums.length - 1; i >= 0; i--){\n\t\t\tres[i] -= sum - nums[i];\n\t\t\tsum -= nums[i];\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int sumOfSubarrayRanges(int[] nums) {\n\t\tint sum = 0;\n\t\tint[] sums = new int[nums.length];\n\t\tsums[0] = nums[0];\n\t\tfor (int i = 1; i < nums.length; i++) {\n\t\t\tsums[i] = sums[i - 1] + nums[i];\n\t\t}\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tfor (int j = i + 1; j < nums.length; j++) {\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum += sums[j] - nums[j];\n\t\t\t\t} else {\n\t\t\t\t\tsum += sums[j] - sums[i - 1] - nums[j] + nums[i - 1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int[] sumOfSubarrayRanges(int[] nums){\n\t\tint[] sums = new int[nums.length];\n\t\tsums[0] = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tsums[i] = sums[i-1] + nums[i];\n\t\t}\n\t\tint[] ans = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tint left = i;\n\t\t\tint right = i;\n\t\t\twhile(left >= 0 && right < nums.length && sums[left] <= sums[right]){\n\t\t\t\tans[left] += sums[right] - sums[left];\n\t\t\t\tleft--;\n\t\t\t\tright++;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int sumOfSubarrayRanges(int[] arr){\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == 0){\n\t\t\t\tstart = i;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsum += (i - start + 1) * (end - start + 1);\n\t\t\t\tend = i;\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int sumOfSubarrayRanges(int[] a) {\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor (int i = 0; i < a.length; i++) {\n\t\t\tsum += a[i];\n\t\t\tif (a[i] == 0) {\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t\tif (i == a.length - 1) {\n\t\t\t\tend = i;\n\t\t\t}\n\t\t}\n\t\tint result = sum;\n\t\tfor (int i = start; i <= end; i++) {\n\t\t\tsum -= a[i];\n\t\t\tresult += sum;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int sumOfSubarrayRanges(int[] a){\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tsum += a[i];\n\t\t\tif(a[i] == 0){\n\t\t\t\tstart = i;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(sum == 0){\n\t\t\t\t\tstart = i;\n\t\t\t\t\tend = i;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsum += a[i];\n\t\t\t\t\tif(sum == 0){\n\t\t\t\t\t\tsum = 0;\n\t\t\t\t\t\tend = i;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tsum += a[i];\n\t\t\t\t\t\tif(sum == 0){\n\t\t\t\t\t\t\tsum = 0;\n\t\t\t\t\t\t\tend = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tsum += a[i];\n\t\t\t\t\t\t\tif(sum == 0){\n\t\t\t\t\t\t\t\tsum = 0;\n\t\t\t\t\t\t\t\tend = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\tsum += a[i];\n\t\t\t\t\t\t\t\tif(sum == 0){\n\t\t\t\t\t\t\t\t\tsum = 0;\n\t\t\t\t\t\t\t\t\tend = i;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\tsum += a[i];\n\t\t\t\t\t\t\t\t\tif(sum == 0){\n\t\t\t\t\t\t\t\t\t\tsum = 0;\n\t\t\t\t\t\t\t\t\t\tend = i;\n",
            "\tstatic int sumOfSubarrayRanges(int[] A){\n\t\tint sum = 0;\n\t\tint[] left = new int[A.length];\n\t\tint[] right = new int[A.length];\n\t\tleft[0] = A[0];\n\t\tfor(int i = 1; i < A.length; i++){\n\t\t\tleft[i] = left[i-1] + A[i];\n\t\t}\n\t\tright[A.length-1] = A[A.length-1];\n\t\tfor(int i = A.length-2; i >= 0; i--){\n\t\t\tright[i] = right[i+1] + A[i];\n\t\t}\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tsum += (left[i] * right[i]);\n\t\t}\n\t\treturn sum;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1252",
        "source": "leetcodeTitles",
        "source_id": "1071",
        "url": "https://leetcode.com/problems/greatest-common-divisor-of-strings/",
        "language": "java",
        "query": "Greatest Common Divisor of Strings",
        "snippets": [
            "\tstatic int gcd(int a, int b){\n\t\tif(b==0) return a;\n\t\treturn gcd(b, a%b);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b){\n\t\tif(b.length()==0) return a.length();\n\t\treturn gcd(b.length(), a.length()%b.length());\n\t}\n}\n",
            "\tstatic int gcd(int a, int b){\n\t\tif(b==0) return a;\n\t\treturn gcd(b, a%b);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b){\n\t\tint n = Math.min(a.length(), b.length());\n\t\tint gcd = 0;\n\t\tfor(int i=0; i<n; i++){\n\t\t\tgcd = gcd(a.charAt(i), b.charAt(i));\n\t\t}\n\t\treturn gcd;\n\t}\n}\n",
            "\tstatic int gcd(int a, int b){\n\t\tif(b==0) return a;\n\t\treturn gcd(b, a%b);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b){\n\t\tif(b.length()==0) return a.length();\n\t\treturn gcd(b.length(), a.length()%b.length());\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c){\n\t\treturn gcd(gcd(a, b), c);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d){\n\t\treturn gcd(gcd(a, b), gcd(c, d));\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e){\n\t\treturn gcd(gcd(a, b), gcd(c, d, e));\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e, String f){\n\t\treturn gcd(gcd(a, b), gcd(c, d, e, f));\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e, String f, String g){\n\t\treturn gcd(gcd(a, b), gcd(c, d, e, f, g));\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e, String f, String g, String h){\n\t\treturn gcd(gcd(a, b), gcd(c, d, e, f, g, h));\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e, String f, String g, String h, String i){\n\t\treturn gcd(gcd(a, b), gcd(c, d, e, f, g, h, i));\n\t}\n\tpublic\n\tstatic int gcd(String a, String\n",
            "\tstatic String gcd(String a, String b){\n\t\tif(a.length() == 0 || b.length() == 0)\n\t\t\treturn \"\";\n\t\tif(a.length() == 1 && b.length() == 1)\n\t\t\treturn a.charAt(0) == b.charAt(0) ? a : \"\";\n\t\tif(a.charAt(0) == b.charAt(0))\n\t\t\treturn a.charAt(0) + gcd(a.substring(1), b.substring(1));\n\t\telse\n\t\t\treturn gcd(a.substring(1), b);\n\t}\n}\n",
            "\tstatic int gcd(int a, int b){\n\t\tif(b==0)\n\t\t\treturn a;\n\t\treturn gcd(b,a%b);\n\t}\n\tpublic\n\tstatic String gcdOfStrings(String str1, String str2){\n\t\tif(str1.length()==0||str2.length()==0)\n\t\t\treturn \"\";\n\t\tif(str1.length()<str2.length())\n\t\t\treturn gcdOfStrings(str2,str1);\n\t\tif(str2.length()==0)\n\t\t\treturn str1;\n\t\tint gcd=gcd(str1.length(),str2.length());\n\t\tString str1_=str1.substring(0,gcd);\n\t\tString str2_=str2.substring(0,gcd);\n\t\tif(str1_.equals(str2_))\n\t\t\treturn str1_;\n\t\treturn gcdOfStrings(str1_.substring(1),str2_.substring(1));\n\t}\n}\n",
            "\tstatic int gcd(int a, int b){\n\t\tif(b==0)\n\t\t\treturn a;\n\t\treturn gcd(b,a%b);\n\t}\n\tpublic\n\tstatic String gcdOfStrings(String str1, String str2){\n\t\tint l1=str1.length();\n\t\tint l2=str2.length();\n\t\tint gcd=gcd(l1,l2);\n\t\tif(l1%gcd!=0||l2%gcd!=0)\n\t\t\treturn \"\";\n\t\tint i=0;\n\t\twhile(i<gcd){\n\t\t\tif(str1.charAt(i)!=str2.charAt(i))\n\t\t\t\tbreak;\n\t\t\ti++;\n\t\t}\n\t\treturn str1.substring(0,i);\n\t}\n}\n",
            "\tstatic int gcd(int a, int b){\n\t\tif(b==0) return a;\n\t\treturn gcd(b, a%b);\n\t}\n\tpublic\n\tstatic String gcdOfStrings(String str1, String str2){\n\t\tint lcm = str1.length()*str2.length()/gcd(str1.length(), str2.length());\n\t\treturn str1.substring(0, lcm/str1.length())+str2.substring(0, lcm/str2.length());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s1 = \"ABC\";\n\t\tString s2 = \"ABC\";\n\t\tSystem.out.println(gcd(s1,s2));\n\t}\n\tpublic static String gcd(String s1, String s2){\n\t\tif(s1.length() == 0 || s2.length() == 0){\n\t\t\treturn \"\";\n\t\t}\n\t\tif(s1.length() == 1 && s2.length() == 1){\n\t\t\treturn s1.charAt(0) == s2.charAt(0) ? s1 : \"\";\n\t\t}\n\t\tString s3 = s1.substring(0,s1.length()/2);\n\t\tString s4 = s2.substring(0,s2.length()/2);\n\t\tString s5 = s1.substring(s1.length()/2);\n\t\tString s6 = s2.substring(s2.length()/2);\n\t\tString s7 = gcd(s3,s4);\n\t\tString s8 = gcd(s5,s6);\n\t\tif(s7.length() == 0){\n\t\t\treturn s8;\n\t\t}\n\t\tif(s8.length() == 0){\n\t\t\treturn s7;\n\t\t}\n\t\treturn gcd(s7,s8);\n\t}\n}\n",
            "\tstatic int gcd(String a, String b){\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint gcd = 0;\n\t\twhile(i < a.length() && j < b.length()){\n\t\t\tif(a.charAt(i) == b.charAt(j)){\n\t\t\t\tgcd++;\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(a.charAt(i) > b.charAt(j)){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn gcd;\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c){\n\t\tint gcd = gcd(a, b);\n\t\treturn gcd(gcd, c);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d){\n\t\tint gcd = gcd(a, b, c);\n\t\treturn gcd(gcd, d);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e){\n\t\tint gcd = gcd(a, b, c, d);\n\t\treturn gcd(gcd, e);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e, String f){\n\t\tint gcd = gcd(a, b, c, d, e);\n\t\treturn gcd(gcd, f);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e, String f, String g){\n\t\tint gcd = gcd(a, b, c, d, e, f);\n\t\treturn gcd(gcd, g);\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d, String e, String f, String g, String h){\n",
            "\tstatic int gcd(String a, String b){\n\t\tint len1 = a.length();\n\t\tint len2 = b.length();\n\t\tint len = len1 > len2 ? len1 : len2;\n\t\tint i = 0;\n\t\twhile(i < len){\n\t\t\tif(a.charAt(i) != b.charAt(i)){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn i;\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c){\n\t\tint len1 = a.length();\n\t\tint len2 = b.length();\n\t\tint len3 = c.length();\n\t\tint len = len1 > len2 ? len1 : len2;\n\t\tlen = len > len3 ? len : len3;\n\t\tint i = 0;\n\t\twhile(i < len){\n\t\t\tif(a.charAt(i) != b.charAt(i) || a.charAt(i) != c.charAt(i)){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn i;\n\t}\n\tpublic\n\tstatic int gcd(String a, String b, String c, String d){\n\t\tint len1 = a.length();\n\t\tint len2 = b.length();\n\t\tint len3 = c.length();\n\t\tint len4 = d.length();\n\t\tint len = len1 > len2 ? len1 : len2;\n\t\tlen = len > len3 ? len : len3;\n\t\tlen = len > len4 ? len : len4;\n\t\tint i = 0;\n\t\twhile(i < len){\n\t\t\tif(a.charAt(i) != b.charAt(i) || a.charAt(i) != c.charAt(i) || a.charAt(i) != d.charAt(i)){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n"
        ],
        "results": 10
    },
    {
        "id": "1253",
        "source": "leetcodeTitles",
        "source_id": "136",
        "url": "https://leetcode.com/problems/single-number/",
        "language": "java",
        "query": "Single Number",
        "snippets": [
            "\tint singleNumber(int[] nums) {\n\t\tint result = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tresult ^= nums[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint singleNumber(int[] nums) {\n\t\tint res = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tres ^= nums[i];\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1254",
        "source": "leetcodeTitles",
        "source_id": "1773",
        "url": "https://leetcode.com/problems/count-items-matching-a-rule/",
        "language": "java",
        "query": "Count Items Matching a Rule",
        "snippets": [
            "\tint countItemsMatching(List<Item> items, ItemRule rule){\n\t\tint count = 0;\n\t\tfor(Item item : items){\n\t\t\tif(rule.matches(item)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countItems(String[] items, String rule){\n\t\tint count = 0;\n\t\tfor(String item : items){\n\t\t\tif(item.matches(rule)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countItemsMatching(String rule, String[] items){\n\t\tint count = 0;\n\t\tfor(String item : items){\n\t\t\tif(item.matches(rule)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countItemsMatchingRule(String[] items, String rule){\n\t\tint count = 0;\n\t\tfor(String item : items){\n\t\t\tif(item.matches(rule)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countItemsMatching(List<Item> items, ItemRule rule){\n\t\tint count = 0;\n\t\tfor(Item item : items){\n\t\t\tif(rule.matches(item)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int count(String[] items, String rule){\n\t\tint count = 0;\n\t\tfor(String item : items){\n\t\t\tif(item.matches(rule)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1255",
        "source": "leetcodeTitles",
        "source_id": "532",
        "url": "https://leetcode.com/problems/k-diff-pairs-in-an-array/",
        "language": "java",
        "query": "K-diff Pairs in an Array",
        "snippets": [
            "\tint findPairs(int[] nums, int k) {\n\t\tint count = 0;\n\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tmap.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\n\t\t}\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (map.get(nums[i] + k) != null) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (map.get(nums[i] - k) != null) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint findPairs(int[] nums, int k) {\n\t\tint count = 0;\n\t\tif(k < 0) return count;\n\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(map.containsKey(nums[i])){\n\t\t\t\tmap.put(nums[i], map.get(nums[i]) + 1);\n\t\t\t}else{\n\t\t\t\tmap.put(nums[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(map.containsKey(nums[i] + k)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint findPairs(int[] nums, int k) {\n\t\tint count = 0;\n\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\tfor (int num : nums) {\n\t\t\tmap.put(num, map.getOrDefault(num, 0) + 1);\n\t\t}\n\t\tfor (int num : nums) {\n\t\t\tif (map.containsKey(num + k)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int findPairs(int[] arr, int k){\n\t\tint count = 0;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(set.contains(arr[i] + k)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(set.contains(arr[i] - k)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tset.add(arr[i]);\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int findPairs(int[] nums, int k) {\n\t\tint count = 0;\n\t\tif (k < 0) {\n\t\t\treturn count;\n\t\t}\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (set.contains(nums[i])) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tset.add(nums[i] + k);\n\t\t\tset.add(nums[i] - k);\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int findPairs(int[] nums, int k) {\n\t\tint count = 0;\n\t\tif(k < 0) return count;\n\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(map.containsKey(nums[i])){\n\t\t\t\tmap.put(nums[i], map.get(nums[i]) + 1);\n\t\t\t}else{\n\t\t\t\tmap.put(nums[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(map.containsKey(nums[i] + k)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int findPairs(int[] nums, int k) {\n\t\tif(nums == null || nums.length == 0) return 0;\n\t\tint count = 0;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(set.contains(nums[i])){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tset.add(nums[i] + k);\n\t\t\tset.add(nums[i] - k);\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int findPairs(int[] nums, int k) {\n\t\tif(k<0) return 0;\n\t\tint count=0;\n\t\tSet<Integer> set=new HashSet<Integer>();\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(set.contains(nums[i]+k)) count++;\n\t\t\tset.add(nums[i]);\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1256",
        "source": "leetcodeTitles",
        "source_id": "790",
        "url": "https://leetcode.com/problems/domino-and-tromino-tiling/",
        "language": "java",
        "query": "Domino and Tromino Tiling",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf[i][j] = in.nextInt();\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] g = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf\n",
            "\tstatic int domino(int n){\n\t\tif(n==1) return 1;\n\t\tif(n==2) return 2;\n\t\treturn domino(n-1)+domino(n-2);\n\t}\n\tpublic\n\tstatic int tromino(int n){\n\t\tif(n==1) return 1;\n\t\tif(n==2) return 2;\n\t\treturn tromino(n-1)+tromino(n-2)+tromino(n-3);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1257",
        "source": "leetcodeTitles",
        "source_id": "1792",
        "url": "https://leetcode.com/problems/maximum-average-pass-ratio/",
        "language": "java",
        "query": "Maximum Average Pass Ratio",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int j = 0; j < m; j++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tsc.close();\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i] - b[i];\n\t\t}\n\t\tint max = 0;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsum += c[i];\n\t\t\tif(sum < 0){\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tsc.close();\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i] + b[i];\n\t\t}\n\t\tint max = c[0];\n\t\tint min = c[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(c[i] > max){\n\t\t\t\tmax = c[i];\n\t\t\t}\n\t\t\tif(c[i] < min){\n\t\t\t\tmin = c[i];\n\t\t\t}\n\t\t}\n\t\tdouble avg = (double)max / (double)min;\n\t\tSystem.out.println(avg);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tsc.close();\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i] + b[i];\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(c[i] > max){\n\t\t\t\tmax = c[i];\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(c[i] == max){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tdouble avg = (double)max / (double)count;\n\t\tSystem.out.println(avg);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tsc.close();\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i];\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = b[i];\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = a[i];\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = b[i];\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = a[i];\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = b[i];\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = a[j];\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int k = 0; k < m; k++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i=0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int b_i=0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tint result = solve(a, b);\n\t\tSystem.out.println(result);\n\t}\n\tpublic static int solve(int[] a, int[] b){\n\t\tint n = a.length;\n\t\tint m = b.length;\n\t\tint[][] dp = new int[n+1][m+1];\n\t\tfor(int i=1; i<=n; i++){\n\t\t\tfor(int j=1; j<=m; j++){\n\t\t\t\tdp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n\t\t\t\tif(a[i-1] == b[j-1]){\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[i-1][j-1]+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n][m];\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i=0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int b_i=0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tdouble result = getmaxAverage(a, b);\n\t\tSystem.out.printf(\"%.2f\", result);\n\t}\n\tpublic static double getmaxAverage(int[] a, int[] b){\n\t\tint n = a.length;\n\t\tint m = b.length;\n\t\tdouble[] dp = new double[n+1];\n\t\tfor(int i=1; i<=n; i++){\n\t\t\tdp[i] = dp[i-1] + a[i-1];\n\t\t}\n\t\tdouble[] dp2 = new double[m+1];\n\t\tfor(int i=1; i<=m; i++){\n\t\t\tdp2[i] = dp2[i-1] + b[i-1];\n\t\t}\n\t\tdouble[] dp3 = new double[n+1];\n\t\tfor(int i=1; i<=n; i++){\n\t\t\tdp3[i] = dp3[i-1] + dp[i];\n\t\t}\n\t\tdouble[] dp4 = new double[m+1];\n\t\tfor(int i=1; i<=m; i++){\n\t\t\tdp4[i] = dp4[i-1] + dp2[i];\n\t\t}\n\t\tdouble[] dp5 = new double[n+1];\n\t\tfor(int i=1;\n"
        ],
        "results": 10
    },
    {
        "id": "1258",
        "source": "leetcodeTitles",
        "source_id": "1909",
        "url": "https://leetcode.com/problems/remove-one-element-to-make-the-array-strictly-increasing/",
        "language": "java",
        "query": "Remove One Element to Make the Array Strictly Increasing",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9,\n",
            "\tvoid removeOneElement(int[] nums){\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < nums.length && j < nums.length){\n\t\t\tif(nums[i] < nums[j]){\n\t\t\t\ti++;\n\t\t\t}else{\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tif(i == nums.length){\n\t\t\treturn;\n\t\t}\n\t\tint k = i;\n\t\twhile(k < nums.length){\n\t\t\tnums[k] = nums[k+1];\n\t\t\tk++;\n\t\t}\n\t}\n}\n",
            "\tvoid removeOneElement(int[] A){\n\t\tint i = 0;\n\t\twhile(i < A.length){\n\t\t\tif(A[i] > A[i+1]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif(i == A.length){\n\t\t\treturn;\n\t\t}\n\t\tint j = i+1;\n\t\twhile(j < A.length){\n\t\t\tif(A[j] > A[i]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tint temp = A[i];\n\t\tA[i] = A[j];\n\t\tA[j] = temp;\n\t}\n}\n",
            "\tvoid remove(int[] nums){\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(j < nums.length){\n\t\t\tif(nums[j] > nums[i]){\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnums[i] = nums[j];\n\t\t\t\tj++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tfor(int k = i; k < nums.length; k++){\n\t\t\tnums[k] = 0;\n\t\t}\n\t}\n}\n",
            "\tint[] remove(int[] arr){\n\t\tint[] res = new int[arr.length-1];\n\t\tint i = 0;\n\t\tfor(int j = 0; j < arr.length; j++){\n\t\t\tif(arr[j] > arr[j+1]){\n\t\t\t\tres[i] = arr[j+1];\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] remove(int[] A, int elem){\n\t\tint[] B = new int[A.length - 1];\n\t\tint j = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tif(A[i] != elem){\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tstatic int[] removeOneElement(int[] arr){\n\t\tint[] result = new int[arr.length-1];\n\t\tint index = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] > arr[i+1]){\n\t\t\t\tresult[index] = arr[i+1];\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tvoid remove(int[] A, int element){\n\t\tint i = 0;\n\t\twhile(i < A.length){\n\t\t\tif(A[i] == element){\n\t\t\t\tA[i] = A[i+1];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1259",
        "source": "leetcodeTitles",
        "source_id": "621",
        "url": "https://leetcode.com/problems/task-scheduler/",
        "language": "java",
        "query": "Task Scheduler",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {2,4,6,8,10};\n\t\tint[] c = {1,3,5,7,9};\n\t\tint[] d = {1,3,5,7,9};\n\t\tint[] e = {1,3,5,7,9};\n\t\tint[] f = {1,3,5,7,9};\n\t\tint[] g = {1,3,5,7,9};\n\t\tint[] h = {1,3,5,7,9};\n\t\tint[] i = {1,3,5,7,9};\n\t\tint[] j = {1,3,5,7,9};\n\t\tint[] k = {1,3,5,7,9};\n\t\tint[] l = {1,3,5,7,9};\n\t\tint[] m = {1,3,5,7,9};\n\t\tint[] n = {1,3,5,7,9};\n\t\tint[] o = {1,3,5,7,9};\n\t\tint[] p = {1,3,5,7,9};\n\t\tint[] q = {1,3,5,7,9};\n\t\tint[] r = {1,3,5,7,9};\n\t\tint[] s = {1,3,5,7,9};\n\t\tint[] t = {1,3,5,7,9};\n\t\tint[] u = {1,3,5,7,9};\n\t\tint[] v = {1,3,5,7,9};\n\t\tint[] w = {1,3,5,7,9};\n\t\tint[] x = {1,3,5,7,9};\n\t\tint[] y = {1,3,5,7,9};\n\t\tint[] z = {1,3,5,7,9};\n\t\tint[] aa = {1,3\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {1,2,3,\n",
            "\tvoid schedule(int[] a, int[] b){\n\t\tint[] c = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tc[i] = a[i] + b[i];\n\t\t}\n\t\tfor(int i = 0; i < c.length; i++){\n\t\t\tSystem.out.println(c[i]);\n\t\t}\n\t}\n}\n",
            "\tvoid schedule(int[] a, int[] b){\n\t\tint[] c = new int[a.length];\n\t\tint[] d = new int[b.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tc[i] = a[i];\n\t\t}\n\t\tfor(int i = 0; i < b.length; i++){\n\t\t\td[i] = b[i];\n\t\t}\n\t\tint[] e = new int[c.length + d.length];\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tfor(int i = 0; i < e.length; i++){\n\t\t\tif(c[j] < d[k]){\n\t\t\t\te[i] = c[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\te[i] = d[k];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < e.length; i++){\n\t\t\tSystem.out.print(e[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tvoid schedule(int n, int[] a, int[] b){\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[a[i]]++;\n\t\t\tcount[b[i]]--;\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmax = Math.max(max, count[i]);\n\t\t}\n\t\tint[] ans = new int[max];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tans[count[i]]++;\n\t\t}\n\t\tfor(int i = 0; i < max; i++){\n\t\t\tfor(int j = 0; j < ans[i]; j++){\n\t\t\t\tSystem.out.print(i + \" \");\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tint getNext(int n, int k){\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < n){\n\t\t\tif(i % k == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tvoid method(){\n\t\tSystem.out.println(\"Hello\");\n\t}\n}\n",
            "\tvoid schedule(int n, int[] p, int[] c){\n\t\tint[] time = new int[n];\n\t\tint[] class = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ttime[i] = p[i];\n\t\t\tclass[i] = c[i];\n\t\t}\n\t\tArrays.sort(time);\n\t\tArrays.sort(class);\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(count < n){\n\t\t\tif(time[i] == class[j]){\n\t\t\t\tSystem.out.println(time[i] + \" \" + class[j]);\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(time[i] < class[j]){\n\t\t\t\tSystem.out.println(time[i] + \" \" + class[j]);\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(time[i] + \" \" + class[j]);\n\t\t\t\tcount++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1260",
        "source": "leetcodeTitles",
        "source_id": "1446",
        "url": "https://leetcode.com/problems/consecutive-characters/",
        "language": "java",
        "query": "Consecutive Characters",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString str = \"abcdefghijklmnopqrstuvwxyz\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == str.charAt(i+1)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\";\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < s.length()){\n\t\t\tchar c = s.charAt(i);\n\t\t\tint j = i + 1;\n\t\t\twhile(j < s.length() && s.charAt(j) == c){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tcount += j - i;\n\t\t\ti = j;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == str.charAt(i+1)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\";\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < str.length()){\n\t\t\tchar c = str.charAt(i);\n\t\t\tint j = i + 1;\n\t\t\twhile(j < str.length() && str.charAt(j) == c){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j - i > 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti = j;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabbccddeefghi\";\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == s.charAt(i+1)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabbccddeefghi\";\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < s.length()){\n\t\t\tchar c = s.charAt(i);\n\t\t\tint j = i + 1;\n\t\t\twhile(j < s.length() && s.charAt(j) == c){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tcount += j - i;\n\t\t\ti = j;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"aabbccddeefghi\";\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < str.length()){\n\t\t\tchar ch = str.charAt(i);\n\t\t\tint j = i + 1;\n\t\t\twhile(j < str.length() && str.charAt(j) == ch){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tcount += j - i;\n\t\t\ti = j;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabbccddeefghi\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length()-1; i++){\n\t\t\tif(s.charAt(i) == s.charAt(i+1)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1261",
        "source": "leetcodeTitles",
        "source_id": "1267",
        "url": "https://leetcode.com/problems/count-servers-that-communicate/",
        "language": "java",
        "query": "Count Servers that Communicate",
        "snippets": [
            "\tint countServers(int[] servers){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < servers.length; i++){\n\t\t\tif(servers[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countServers(int[][] grid){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < grid.length; i++){\n\t\t\tfor(int j = 0; j < grid[0].length; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1262",
        "source": "leetcodeTitles",
        "source_id": "1578",
        "url": "https://leetcode.com/problems/minimum-time-to-make-rope-colorful/",
        "language": "java",
        "query": "Minimum Time to Make Rope Colorful",
        "snippets": [
            "\tint minTime(int[] A, int[] B, int[] C) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = A[i] + B[i] + C[i];\n\t\t}\n\t\tfor (int len = 2; len <= n; len++) {\n\t\t\tfor (int i = 0; i + len - 1 < n; i++) {\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint minTime(int[] A, int[] B, int[] C){\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][i] = A[i] + B[i] + C[i];\n\t\t}\n\t\tfor(int len = 2; len <= n; len++){\n\t\t\tfor(int i = 0; i + len - 1 < n; i++){\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor(int k = i; k <= j; k++){\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j]);\n\t\t\t\t}\n\t\t\t\tdp[i][j] += A[j] + B[j] + C[j];\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint minTime(int[] A, int[] B, int[] C){\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + A[j] + B[j] + C[j]);\n\t\t\t\tdp[j][i] = Math.min(dp[j][i], dp[j - 1][i] + A[j] + B[j] + C[j]);\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1][n - 1];\n\t}\n}\n",
            "\tstatic int minTime(int[] A, int[] B, int[] C){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = A[0] + B[0] + C[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = Math.min(dp[i-1] + A[i], dp[i-1] + B[i]);\n\t\t\tdp[i] = Math.min(dp[i], dp[i-1] + C[i]);\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tint minTime(int[] A, int[] B, int[] C){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = A[0] + B[0] + C[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = Math.min(dp[i-1] + A[i], dp[i-1] + B[i]);\n\t\t\tdp[i] = Math.min(dp[i], dp[i-1] + C[i]);\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tint minTime(int[] A, int[] B, int[] C, int K){\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][i] + dp[i + 1][j] + A[i] * B[i] * C[i]);\n\t\t\t\tdp[j][i] = Math.min(dp[j][i], dp[j][j] + dp[i][j] + A[j] * B[j] * C[j]);\n\t\t\t\tfor(int k = i + 1; k < j; k++){\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][i] + dp[i + 1][k] + dp[k][j] + A[i] * B[i] * C[i] + A[j] * B[j] * C[j]);\n\t\t\t\t\tdp[j][i] = Math.min(dp[j][i], dp[j][j] + dp[i][j] + dp[i][k] + dp[k][j] + A[j] * B[j] * C[j] + A[i] * B[i] * C[i]);\n\t\t\t\t\tfor(int l = i + 1; l < k; l++){\n\t\t\t\t\t\tdp\n",
            "\tint minTime(int[] A, int[] B, int[] C){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\n\t\tdp[0] = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(A[i] == A[j] && B[i] == B[j] && C[i] == C[j]){\n\t\t\t\t\tdp[i] = Math.min(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tres = Math.max(res, dp[i]);\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1263",
        "source": "leetcodeTitles",
        "source_id": "393",
        "url": "https://leetcode.com/problems/utf-8-validation/",
        "language": "java",
        "query": "UTF-8 Validation",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abc\";\n\t\tSystem.out.println(s.length());\n\t\tSystem.out.println(s.charAt(0));\n\t\tSystem.out.println(s.charAt(1));\n\t\tSystem.out.println(s.charAt(2));\n\t\tSystem.out.println(s.charAt(3));\n\t\tSystem.out.println(s.charAt(4));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abc\";\n\t\tSystem.out.println(s.length());\n\t}\n}\n",
            "\tvoid method(){\n\t\tString s = \"abc\";\n\t\ts.getBytes();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1264",
        "source": "leetcodeTitles",
        "source_id": "1662",
        "url": "https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/",
        "language": "java",
        "query": "Check If Two String Arrays are Equivalent",
        "snippets": [
            "\tstatic boolean areEquivalent(String[] a, String[] b){\n\t\tif(a.length != b.length){\n\t\t\treturn false;\n\t\t}\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(map.containsKey(a[i])){\n\t\t\t\tmap.put(a[i], map.get(a[i]) + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(a[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < b.length; i++){\n\t\t\tif(map.containsKey(b[i])){\n\t\t\t\tmap.put(b[i], map.get(b[i]) - 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < map.size(); i++){\n\t\t\tif(map.get(i) != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areEquivalent(String[] a, String[] b){\n\t\tif(a.length != b.length) return false;\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(map.containsKey(a[i])){\n\t\t\t\tmap.put(a[i], map.get(a[i]) + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(a[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < b.length; i++){\n\t\t\tif(map.containsKey(b[i])){\n\t\t\t\tmap.put(b[i], map.get(b[i]) - 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor(String key : map.keySet()){\n\t\t\tif(map.get(key) != 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areEquivalent(String[] a, String[] b){\n\t\tif(a.length != b.length){\n\t\t\treturn false;\n\t\t}\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(map.containsKey(a[i])){\n\t\t\t\tmap.put(a[i], map.get(a[i]) + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(a[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < b.length; i++){\n\t\t\tif(map.containsKey(b[i])){\n\t\t\t\tmap.put(b[i], map.get(b[i]) - 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(map.get(a[i]) != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areEquivalent(String[] a, String[] b){\n\t\tif(a.length != b.length){\n\t\t\treturn false;\n\t\t}\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(map.containsKey(a[i])){\n\t\t\t\tmap.put(a[i], map.get(a[i]) + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(a[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < b.length; i++){\n\t\t\tif(map.containsKey(b[i])){\n\t\t\t\tmap.put(b[i], map.get(b[i]) - 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor(String key : map.keySet()){\n\t\t\tif(map.get(key) != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areEquivalent(String[] a, String[] b){\n\t\tif(a.length != b.length) return false;\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(map.containsKey(a[i])){\n\t\t\t\tmap.put(a[i], map.get(a[i]) + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(a[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < b.length; i++){\n\t\t\tif(map.containsKey(b[i])){\n\t\t\t\tmap.put(b[i], map.get(b[i]) - 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < map.size(); i++){\n\t\t\tif(map.get(i) != 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areEquivalent(String[] a, String[] b){\n\t\tif(a.length != b.length){\n\t\t\treturn false;\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(!a[i].equals(b[i])){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areEquivalent(String[] a, String[] b){\n\t\tif(a.length != b.length)\n\t\t\treturn false;\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(map.containsKey(a[i]))\n\t\t\t\tmap.put(a[i], map.get(a[i]) + 1);\n\t\t\telse\n\t\t\t\tmap.put(a[i], 1);\n\t\t}\n\t\tfor(int i = 0; i < b.length; i++){\n\t\t\tif(map.containsKey(b[i]))\n\t\t\t\tmap.put(b[i], map.get(b[i]) - 1);\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\tfor(String key : map.keySet()){\n\t\t\tif(map.get(key) != 0)\n\t\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean areEquivalent(String[] arr1, String[] arr2){\n\t\tif(arr1.length != arr2.length){\n\t\t\treturn false;\n\t\t}\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < arr1.length; i++){\n\t\t\tif(map.containsKey(arr1[i])){\n\t\t\t\tmap.put(arr1[i], map.get(arr1[i]) + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(arr1[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr2.length; i++){\n\t\t\tif(map.containsKey(arr2[i])){\n\t\t\t\tmap.put(arr2[i], map.get(arr2[i]) - 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor(String key : map.keySet()){\n\t\t\tif(map.get(key) != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isEquivalent(String[] arr1, String[] arr2){\n\t\tif(arr1.length != arr2.length){\n\t\t\treturn false;\n\t\t}\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < arr1.length; i++){\n\t\t\tif(map.containsKey(arr1[i])){\n\t\t\t\tmap.put(arr1[i], map.get(arr1[i]) + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(arr1[i], 1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr2.length; i++){\n\t\t\tif(map.containsKey(arr2[i])){\n\t\t\t\tmap.put(arr2[i], map.get(arr2[i]) - 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor(String key : map.keySet()){\n\t\t\tif(map.get(key) != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1265",
        "source": "leetcodeTitles",
        "source_id": "1980",
        "url": "https://leetcode.com/problems/find-unique-binary-string/",
        "language": "java",
        "query": "Find Unique Binary String",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint[] count = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tcount[arr[i]]++;\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(count[i]==1){\n\t\t\t\tSystem.out.println(i);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tString s = sc.next();\n\t\tString[] arr = new String[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i] = sc.next();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(s.equals(arr[i])){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count==1){\n\t\t\tSystem.out.println(\"YES\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n"
        ],
        "results": 2
    },
    {
        "id": "1266",
        "source": "leetcodeTitles",
        "source_id": "375",
        "url": "https://leetcode.com/problems/guess-number-higher-or-lower-ii/",
        "language": "java",
        "query": "Guess Number Higher or Lower II",
        "snippets": [
            "\tint guessNumber(int n) {\n\t\tint low = 1;\n\t\tint high = n;\n\t\twhile(low < high){\n\t\t\tint mid = low + (high - low) / 2;\n\t\t\tif(guess(mid) == 0){\n\t\t\t\treturn mid;\n\t\t\t}else if(guess(mid) == -1){\n\t\t\t\thigh = mid - 1;\n\t\t\t}else{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\treturn low;\n\t}\n\tpublic int guess(int num){\n\t\treturn 0;\n\t}\n}\n",
            "\tint guessNumber(int n) {\n\t\tint low = 1;\n\t\tint high = n;\n\t\twhile(low < high){\n\t\t\tint mid = low + (high - low) / 2;\n\t\t\tif(guess(mid) == 1){\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\t\treturn low;\n\t}\n\tpublic int guess(int num){\n\t\treturn 0;\n\t}\n}\n",
            "\tint guessNumber(int n) {\n\t\tint low = 1;\n\t\tint high = n;\n\t\twhile(low <= high){\n\t\t\tint mid = low + (high - low) / 2;\n\t\t\tif(guess(mid) == 0){\n\t\t\t\treturn mid;\n\t\t\t}\n\t\t\telse if(guess(mid) == -1){\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\tpublic int guess(int num){\n\t\treturn 0;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1267",
        "source": "leetcodeTitles",
        "source_id": "102",
        "url": "https://leetcode.com/problems/binary-tree-level-order-traversal/",
        "language": "java",
        "query": "Binary Tree Level Order Traversal",
        "snippets": [
            "\tList<List<Integer>> levelOrder(TreeNode root) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(root == null) return result;\n\t\tQueue<TreeNode> queue = new LinkedList<TreeNode>();\n\t\tqueue.offer(root);\n\t\twhile(!queue.isEmpty()){\n\t\t\tint size = queue.size();\n\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tTreeNode node = queue.poll();\n\t\t\t\tlist.add(node.val);\n\t\t\t\tif(node.left != null) queue.offer(node.left);\n\t\t\t\tif(node.right != null) queue.offer(node.right);\n\t\t\t}\n\t\t\tresult.add(list);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tvoid levelOrder(TreeNode root){\n\t\tif(root == null) return;\n\t\tQueue<TreeNode> queue = new LinkedList<TreeNode>();\n\t\tqueue.offer(root);\n\t\twhile(!queue.isEmpty()){\n\t\t\tTreeNode node = queue.poll();\n\t\t\tSystem.out.print(node.val + \" \");\n\t\t\tif(node.left != null) queue.offer(node.left);\n\t\t\tif(node.right != null) queue.offer(node.right);\n\t\t}\n\t}\n}\n",
            "\tvoid levelOrder(TreeNode root){\n\t\tif(root==null) return;\n\t\tQueue<TreeNode> queue=new LinkedList<TreeNode>();\n\t\tqueue.add(root);\n\t\twhile(!queue.isEmpty()){\n\t\t\tTreeNode node=queue.remove();\n\t\t\tSystem.out.print(node.val+\" \");\n\t\t\tif(node.left!=null) queue.add(node.left);\n\t\t\tif(node.right!=null) queue.add(node.right);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1268",
        "source": "leetcodeTitles",
        "source_id": "227",
        "url": "https://leetcode.com/problems/jump-game-ii/",
        "language": "java",
        "query": "Jump Game II",
        "snippets": [
            "\tint jump(int[] A) {\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint max = 0;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (j + A[j] >= i) {\n\t\t\t\t\tmax = Math.max(max, dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp[i] = max;\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tint jump(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint max = 0;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (j + nums[j] >= i) {\n\t\t\t\t\tmax = Math.max(max, dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp[i] = max;\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tint jump(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 0;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (j + nums[j] >= i) {\n\t\t\t\t\tdp[i] = Math.min(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tint jump(int[] A) {\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 0;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tint max = 0;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(A[j] + j >= i){\n\t\t\t\t\tmax = Math.max(max, dp[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp[i] = max + 1;\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tint jump(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] dp = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[0] = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j <= Math.min(i + nums[i], n - 1); j++) {\n\t\t\t\tdp[j] = Math.min(dp[j], dp[i] + 1);\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tint jump(int[] nums) {\n\t\tint n = nums.length;\n\t\tif(n == 1) return 0;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 0;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tint max = 0;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(j + nums[j] >= i){\n\t\t\t\t\tmax = Math.max(max, dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp[i] = max;\n\t\t}\n\t\treturn dp[n - 1];\n\t}\n}\n",
            "\tint jump(int[] nums) {\n\t\tint max = 0;\n\t\tint end = 0;\n\t\tint count = 0;\n\t\tfor (int i = 0; i < nums.length - 1; i++) {\n\t\t\tmax = Math.max(max, nums[i] + i);\n\t\t\tif (i == end) {\n\t\t\t\tcount++;\n\t\t\t\tend = max;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1269",
        "source": "leetcodeTitles",
        "source_id": "2022",
        "url": "https://leetcode.com/problems/convert-1d-array-into-2d-array/",
        "language": "java",
        "query": "Convert 1D Array Into 2D Array",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] arr2 = new int[3][3];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tfor(int k = 0; k < arr.length; k++){\n\t\t\tarr2[i][j] = arr[k];\n\t\t\tj++;\n\t\t\tif(j == 3){\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int k = 0; k < arr2.length; k++){\n\t\t\tfor(int l = 0; l < arr2[k].length; l++){\n\t\t\t\tSystem.out.print(arr2[k][l] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] arr2 = new int[3][3];\n\t\tint i = 0, j = 0;\n\t\tfor(int x = 0; x < arr.length; x++){\n\t\t\tarr2[i][j] = arr[x];\n\t\t\tj++;\n\t\t\tif(j == 3){\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int x = 0; x < arr2.length; x++){\n\t\t\tfor(int y = 0; y < arr2[x].length; y++){\n\t\t\t\tSystem.out.print(arr2[x][y] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] arr2 = new int[3][3];\n\t\tint i = 0, j = 0;\n\t\tfor(int k = 0; k < arr.length; k++){\n\t\t\tif(i == 3){\n\t\t\t\ti = 0;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tarr2[i][j] = arr[k];\n\t\t\ti++;\n\t\t}\n\t\tfor(int l = 0; l < arr2.length; l++){\n\t\t\tfor(int m = 0; m < arr2[l].length; m++){\n\t\t\t\tSystem.out.print(arr2[l][m] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] arr2 = new int[3][3];\n\t\tint i = 0, j = 0;\n\t\tfor(int k = 0; k < arr.length; k++){\n\t\t\tif(i == 3){\n\t\t\t\ti = 0;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tarr2[i][j] = arr[k];\n\t\t\ti++;\n\t\t}\n\t\tfor(int x = 0; x < arr2.length; x++){\n\t\t\tfor(int y = 0; y < arr2[x].length; y++){\n\t\t\t\tSystem.out.print(arr2[x][y] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] arr2 = new int[3][3];\n\t\tint i = 0, j = 0;\n\t\tfor(int k = 0; k < arr.length; k++){\n\t\t\tarr2[i][j] = arr[k];\n\t\t\tj++;\n\t\t\tif(j == 3){\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int k = 0; k < arr2.length; k++){\n\t\t\tfor(int l = 0; l < arr2[k].length; l++){\n\t\t\t\tSystem.out.print(arr2[k][l] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] arr2 = new int[3][3];\n\t\tint i = 0, j = 0;\n\t\tfor(int k = 0; k < arr.length; k++){\n\t\t\tarr2[i][j] = arr[k];\n\t\t\tj++;\n\t\t\tif(j == 3){\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int x = 0; x < arr2.length; x++){\n\t\t\tfor(int y = 0; y < arr2[x].length; y++){\n\t\t\t\tSystem.out.print(arr2[x][y] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] arr2 = new int[3][3];\n\t\tint i = 0, j = 0;\n\t\tfor(int k = 0; k < arr.length; k++){\n\t\t\tarr2[i][j] = arr[k];\n\t\t\tj++;\n\t\t\tif(j == 3){\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int k = 0; k < arr2.length; k++){\n\t\t\tfor(int l = 0; l < arr2[0].length; l++){\n\t\t\t\tSystem.out.print(arr2[k][l] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] b = new int[3][3];\n\t\tint i = 0, j = 0;\n\t\tfor(int k = 0; k < a.length; k++){\n\t\t\tb[i][j] = a[k];\n\t\t\tj++;\n\t\t\tif(j == 3){\n\t\t\t\ti++;\n\t\t\t\tj = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int x = 0; x < b.length; x++){\n\t\t\tfor(int y = 0; y < b[x].length; y++){\n\t\t\t\tSystem.out.print(b[x][y] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[][] b = new int[2][5];\n\t\tfor(int i=0;i<2;i++){\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tb[i][j] = a[i*5+j];\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<2;i++){\n\t\t\tfor(int j=0;j<5;j++){\n\t\t\t\tSystem.out.print(b[i][j]+\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1270",
        "source": "leetcodeTitles",
        "source_id": "892",
        "url": "https://leetcode.com/problems/surface-area-of-3d-shapes/",
        "language": "java",
        "query": "Surface Area of 3D Shapes",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint a=Integer.parseInt(args[0]);\n\t\tint b=Integer.parseInt(args[1]);\n\t\tint c=Integer.parseInt(args[2]);\n\t\tint s=a+b+c;\n\t\tSystem.out.println(s);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a=Integer.parseInt(args[0]);\n\t\tint b=Integer.parseInt(args[1]);\n\t\tint c=Integer.parseInt(args[2]);\n\t\tint d=Integer.parseInt(args[3]);\n\t\tint e=Integer.parseInt(args[4]);\n\t\tint f=Integer.parseInt(args[5]);\n\t\tint g=Integer.parseInt(args[6]);\n\t\tint h=Integer.parseInt(args[7]);\n\t\tint i=Integer.parseInt(args[8]);\n\t\tint j=Integer.parseInt(args[9]);\n\t\tint k=Integer.parseInt(args[10]);\n\t\tint l=Integer.parseInt(args[11]);\n\t\tint m=Integer.parseInt(args[12]);\n\t\tint n=Integer.parseInt(args[13]);\n\t\tint o=Integer.parseInt(args[14]);\n\t\tint p=Integer.parseInt(args[15]);\n\t\tint q=Integer.parseInt(args[16]);\n\t\tint r=Integer.parseInt(args[17]);\n\t\tint s=Integer.parseInt(args[18]);\n\t\tint t=Integer.parseInt(args[19]);\n\t\tint u=Integer.parseInt(args[20]);\n\t\tint v=Integer.parseInt(args[21]);\n\t\tint w=Integer.parseInt(args[22]);\n\t\tint x=Integer.parseInt(args[23]);\n\t\tint y=Integer.parseInt(args[24]);\n\t\tint z=Integer.parseInt(args[25]);\n\t\tint aa=Integer.parseInt(args[26]);\n\t\tint bb=Integer.parseInt(args[27]);\n\t\tint cc=Integer.parseInt(args[28]);\n\t\tint dd=Integer.parseInt(args[29]);\n\t\tint ee=Integer.parseInt(args[30]);\n\t\tint ff=Integer.parseInt(args[31]);\n\t\tint gg=\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\tint s = a + b + c;\n\t\t\tdouble area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n\t\t\tSystem.out.println(area);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a=Integer.parseInt(args[0]);\n\t\tint b=Integer.parseInt(args[1]);\n\t\tint c=Integer.parseInt(args[2]);\n\t\tint s=a+b+c;\n\t\tint area=s*(s-a)*(s-b)*(s-c);\n\t\tSystem.out.println(area);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a=Integer.parseInt(args[0]);\n\t\tint b=Integer.parseInt(args[1]);\n\t\tint c=Integer.parseInt(args[2]);\n\t\tint s=a+b+c;\n\t\tSystem.out.println(\"Surface Area of a triangle with sides \"+a+\" \"+b+\" \"+c+\" is \"+s);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a=Integer.parseInt(args[0]);\n\t\tint b=Integer.parseInt(args[1]);\n\t\tint c=Integer.parseInt(args[2]);\n\t\tint s=a+b+c;\n\t\tSystem.out.println(\"Surface Area of 3D Shapes\");\n\t\tSystem.out.println(\"Triangle: \"+s*s);\n\t\tSystem.out.println(\"Rectangle: \"+a*b);\n\t\tSystem.out.println(\"Cube: \"+a*a*6);\n\t\tSystem.out.println(\"Sphere: \"+a*a*a*4*3.14);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\tSystem.out.println(a*b*c);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tint c = sc.nextInt();\n\t\t\tint s = (a+b+c)/2;\n\t\t\tdouble area = Math.sqrt(s*(s-a)*(s-b)*(s-c));\n\t\t\tSystem.out.println(area);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1271",
        "source": "leetcodeTitles",
        "source_id": "1026",
        "url": "https://leetcode.com/problems/maximum-difference-between-node-and-ancestor/",
        "language": "java",
        "query": "Maximum Difference Between Node and Ancestor",
        "snippets": [
            "\tint maxDiff(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint max=0;\n\t\tint left=maxDiff(root.left);\n\t\tint right=maxDiff(root.right);\n\t\tint diff=Math.abs(root.val-root.left.val)+Math.abs(root.val-root.right.val);\n\t\tmax=Math.max(max,diff);\n\t\treturn Math.max(max,Math.max(left,right));\n\t}\n}\n",
            "\tint maxDiff(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint max=0;\n\t\tint left=maxDiff(root.left);\n\t\tint right=maxDiff(root.right);\n\t\tmax=Math.max(max,Math.max(left,right));\n\t\treturn Math.max(max,Math.abs(root.val-root.val));\n\t}\n}\n",
            "\tint maxAncestorDiff(TreeNode root) {\n\t\tif(root == null) return 0;\n\t\tint max = 0;\n\t\tint min = Integer.MAX_VALUE;\n\t\tmaxAncestorDiff(root, max, min);\n\t\treturn max;\n\t}\n\tpublic void maxAncestorDiff(TreeNode root, int max, int min){\n\t\tif(root == null) return;\n\t\tmax = Math.max(max, root.val - min);\n\t\tmin = Math.min(min, root.val);\n\t\tmaxAncestorDiff(root.left, max, min);\n\t\tmaxAncestorDiff(root.right, max, min);\n\t}\n}\n",
            "\tint maxAncestorDiff(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint maxDiff = 0;\n\t\tint maxDiffLeft = maxAncestorDiff(root.left);\n\t\tint maxDiffRight = maxAncestorDiff(root.right);\n\t\tmaxDiff = Math.max(maxDiffLeft, maxDiffRight);\n\t\tmaxDiff = Math.max(maxDiff, Math.abs(root.val-root.left.val));\n\t\tmaxDiff = Math.max(maxDiff, Math.abs(root.val-root.right.val));\n\t\treturn maxDiff;\n\t}\n}\n",
            "\tint maxAncestorDiff(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint max=0;\n\t\tint[] arr=new int[2];\n\t\tarr[0]=root.val;\n\t\tarr[1]=root.val;\n\t\tmax=maxAncestorDiff(root.left,arr);\n\t\tmax=Math.max(max,maxAncestorDiff(root.right,arr));\n\t\treturn max;\n\t}\n\tpublic\n\tint maxAncestorDiff(TreeNode root,int[] arr){\n\t\tif(root==null) return 0;\n\t\tint max=0;\n\t\tint[] arr1=new int[2];\n\t\tarr1[0]=Math.min(arr[0],root.val);\n\t\tarr1[1]=Math.max(arr[1],root.val);\n\t\tmax=Math.max(max,maxAncestorDiff(root.left,arr1));\n\t\tmax=Math.max(max,maxAncestorDiff(root.right,arr1));\n\t\treturn max;\n\t}\n}\n",
            "\tint maxAncestorDiff(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint max=0;\n\t\tint min=0;\n\t\tint maxAncestorDiff=0;\n\t\tmax=maxAncestorDiff(root.left);\n\t\tmin=maxAncestorDiff(root.right);\n\t\tmaxAncestorDiff=Math.max(max,min);\n\t\treturn maxAncestorDiff;\n\t}\n}\n",
            "\tint maxAncestorDiff(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint max=0;\n\t\tint[] res=maxAncestorDiff(root.left,root.val,root.val);\n\t\tmax=Math.max(max,res[0]);\n\t\tres=maxAncestorDiff(root.right,root.val,root.val);\n\t\tmax=Math.max(max,res[0]);\n\t\treturn max;\n\t}\n\tpublic int[] maxAncestorDiff(TreeNode root,int max,int min){\n\t\tif(root==null) return new int[]{max-min,min};\n\t\tint[] res=maxAncestorDiff(root.left,max,min);\n\t\tmax=Math.max(max,res[0]);\n\t\tmin=Math.min(min,res[1]);\n\t\tres=maxAncestorDiff(root.right,max,min);\n\t\tmax=Math.max(max,res[0]);\n\t\tmin=Math.min(min,res[1]);\n\t\treturn new int[]{max-min,min};\n\t}\n}\n",
            "\tint maxAncestorDiff(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint max=0;\n\t\tint min=0;\n\t\tint maxAncestor=0;\n\t\tint minAncestor=0;\n\t\tmax=maxAncestorDiff(root.left);\n\t\tmin=maxAncestorDiff(root.right);\n\t\tmaxAncestor=Math.max(root.val,Math.max(maxAncestor,max));\n\t\tminAncestor=Math.min(root.val,Math.min(minAncestor,min));\n\t\treturn Math.max(maxAncestor-minAncestor,Math.max(max,min));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1272",
        "source": "leetcodeTitles",
        "source_id": "914",
        "url": "https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/",
        "language": "java",
        "query": "X of a Kind in a Deck of Cards",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] deck = new int[52];\n\t\tint[] hand = new int[5];\n\t\tint[] hand2 = new int[5];\n\t\tint[] hand3 = new int[5];\n\t\tint[] hand4 = new int[5];\n\t\tint[] hand5 = new int[5];\n\t\tint[] hand6 = new int[5];\n\t\tint[] hand7 = new int[5];\n\t\tint[] hand8 = new int[5];\n\t\tint[] hand9 = new int[5];\n\t\tint[] hand10 = new int[5];\n\t\tint[] hand11 = new int[5];\n\t\tint[] hand12 = new int[5];\n\t\tint[] hand13 = new int[5];\n\t\tint[] hand14 = new int[5];\n\t\tint[] hand15 = new int[5];\n\t\tint[] hand16 = new int[5];\n\t\tint[] hand17 = new int[5];\n\t\tint[] hand18 = new int[5];\n\t\tint[] hand19 = new int[5];\n\t\tint[] hand20 = new int[5];\n\t\tint[] hand21 = new int[5];\n\t\tint[] hand22 = new int[5];\n\t\tint[] hand23 = new int[5];\n\t\tint[] hand24 = new int[5];\n\t\tint[] hand25 = new int[5];\n\t\tint[] hand26 = new int[5];\n\t\tint[] hand27 = new int[5];\n\t\tint[] hand28 = new int[5];\n\t\tint[] hand29 = new int[5];\n\t\tint[] hand30 = new int[5];\n\t\tint[] hand31 = new int[5];\n\t\tint[] hand32 = new int[5];\n\t\tint[] hand33 = new int[5];\n\t\tint[] hand34 = new int[5];\n\t\tint[] hand35 = new int[5];\n\t\tint[] hand36 = new int[5];\n\t\tint[] hand37 = new int[\n",
            "\tstatic void main(String[] args){\n\t\tint[] deck = new int[52];\n\t\tfor(int i = 0; i < 52; i++){\n\t\t\tdeck[i] = i;\n\t\t}\n\t\tint[] hand = new int[5];\n\t\tfor(int i = 0; i < 5; i++){\n\t\t\thand[i] = deck[i];\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < 5; i++){\n\t\t\tfor(int j = 0; j < 5; j++){\n\t\t\t\tif(hand[i] == hand[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(count == 5){\n\t\t\tSystem.out.println(\"You have a hand of X of a Kind\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"You do not have a hand of X of a Kind\");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1273",
        "source": "leetcodeTitles",
        "source_id": "1688",
        "url": "https://leetcode.com/problems/count-of-matches-in-tournament/",
        "language": "java",
        "query": "Count of Matches in Tournament",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tfor(int l = 0; l < k; l++){\n\t\t\t\t\tif(a[i] == b[j] && a[i] == c[l]){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i=0;i<m;i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i=0;i<m;i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tif(a[i]==b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(count>=k){\n\t\t\tSystem.out.println(\"YES\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1274",
        "source": "leetcodeTitles",
        "source_id": "1624",
        "url": "https://leetcode.com/problems/largest-substring-between-two-equal-characters/",
        "language": "java",
        "query": "Largest Substring Between Two Equal Characteres",
        "snippets": [
            "\tstatic String largestSubstring(String s){\n\t\tint max=0;\n\t\tint start=0;\n\t\tint end=0;\n\t\tfor(int i=0;i<s.length();i++){\n\t\t\tint count=0;\n\t\t\tfor(int j=i;j<s.length();j++){\n\t\t\t\tif(s.charAt(i)==s.charAt(j)){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count>max){\n\t\t\t\tmax=count;\n\t\t\t\tstart=i;\n\t\t\t\tend=i+count;\n\t\t\t}\n\t\t}\n\t\treturn s.substring(start,end);\n\t}\n\tpublic static void main(String[] args){\n\t\tString s=\"abcd\";\n\t\tSystem.out.println(largestSubstring(s));\n\t}\n}\n",
            "\tstatic String largestSubstring(String str){\n\t\tint max=0;\n\t\tint start=0;\n\t\tint end=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tint count=0;\n\t\t\tfor(int j=i;j<str.length();j++){\n\t\t\t\tif(str.charAt(i)==str.charAt(j)){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count>max){\n\t\t\t\tmax=count;\n\t\t\t\tstart=i;\n\t\t\t\tend=i+count;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(start,end);\n\t}\n\tpublic static void main(String[] args){\n\t\tString str=\"abcd\";\n\t\tSystem.out.println(largestSubstring(str));\n\t}\n}\n",
            "\tstatic String largestSubstring(String str){\n\t\tint n = str.length();\n\t\tint max = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tif(str.charAt(i) == str.charAt(j)){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t\tstart = i;\n\t\t\t\tend = i + count;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(start, end);\n\t}\n\tpublic static void main(String[] args){\n\t\tString str = \"abcd\";\n\t\tSystem.out.println(largestSubstring(str));\n\t}\n}\n",
            "\tstatic String largestSubstring(String s){\n\t\tint n = s.length();\n\t\tint[] count = new int[26];\n\t\tint start = 0, end = 0;\n\t\tint maxLen = 0;\n\t\twhile(end < n){\n\t\t\tchar c = s.charAt(end);\n\t\t\tcount[c - 'a']++;\n\t\t\tif(count[c - 'a'] == 1)\n\t\t\t\tmaxLen++;\n\t\t\tend++;\n\t\t\twhile(maxLen > 2){\n\t\t\t\tchar c1 = s.charAt(start);\n\t\t\t\tcount[c1 - 'a']--;\n\t\t\t\tif(count[c1 - 'a'] == 0)\n\t\t\t\t\tmaxLen--;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\tif(maxLen == 2)\n\t\t\t\tmaxLen = end - start;\n\t\t}\n\t\treturn s.substring(start, start + maxLen);\n\t}\n}\n",
            "\tstatic String largestSubstring(String s){\n\t\tint n = s.length();\n\t\tint[] count = new int[26];\n\t\tint start = 0, end = 0;\n\t\tint maxLen = 0;\n\t\twhile(end < n){\n\t\t\tif(count[s.charAt(end) - 'a'] == 0)\n\t\t\t\tcount[s.charAt(end) - 'a']++;\n\t\t\telse\n\t\t\t\tcount[s.charAt(end) - 'a']--;\n\t\t\tend++;\n\t\t\twhile(end - start > maxLen){\n\t\t\t\tif(isValid(count))\n\t\t\t\t\tmaxLen = end - start;\n\t\t\t\telse\n\t\t\t\t\tcount[s.charAt(start) - 'a']++;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t}\n\t\treturn s.substring(start, start + maxLen);\n\t}\n\tpublic static boolean isValid(int[] count){\n\t\tfor(int i = 0; i < count.length; i++)\n\t\t\tif(count[i] != 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n",
            "\tstatic String largestSubstring(String s){\n\t\tint n = s.length();\n\t\tint[] count = new int[26];\n\t\tint start = 0, end = 0;\n\t\tint maxLen = 0;\n\t\twhile(end < n){\n\t\t\tcount[s.charAt(end) - 'a']++;\n\t\t\twhile(count[s.charAt(end) - 'a'] > 1){\n\t\t\t\tcount[s.charAt(start) - 'a']--;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\tmaxLen = Math.max(maxLen, end - start + 1);\n\t\t\tend++;\n\t\t}\n\t\treturn s.substring(start, start + maxLen);\n\t}\n}\n",
            "\tstatic String findLargestSubstring(String str){\n\t\tint maxLen = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tint len = str.length();\n\t\tfor(int i = 0; i < len; i++){\n\t\t\tint j = i + 1;\n\t\t\twhile(j < len){\n\t\t\t\tif(str.charAt(i) == str.charAt(j)){\n\t\t\t\t\tif(j - i + 1 > maxLen){\n\t\t\t\t\t\tmaxLen = j - i + 1;\n\t\t\t\t\t\tstart = i;\n\t\t\t\t\t\tend = j;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn str.substring(start, end + 1);\n\t}\n}\n",
            "\tstatic String largestSubstring(String s){\n\t\tint n = s.length();\n\t\tint[] count = new int[26];\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tint maxLen = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t\twhile(count[s.charAt(i) - 'a'] > 1){\n\t\t\t\tcount[s.charAt(start) - 'a']--;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\tif(i - start + 1 > maxLen){\n\t\t\t\tmaxLen = i - start + 1;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t}\n\t\treturn s.substring(start, end + 1);\n\t}\n}\n",
            "\tstatic String largestSubstring(String str){\n\t\tint n = str.length();\n\t\tint[] count = new int[26];\n\t\tint start = 0, end = 0;\n\t\tint maxLen = 0;\n\t\twhile(end < n){\n\t\t\tif(count[str.charAt(end) - 'a'] == 0){\n\t\t\t\tcount[str.charAt(end) - 'a']++;\n\t\t\t\tend++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(end - start > maxLen){\n\t\t\t\t\tmaxLen = end - start;\n\t\t\t\t}\n\t\t\t\tcount[str.charAt(start) - 'a']--;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t}\n\t\tif(end - start > maxLen){\n\t\t\tmaxLen = end - start;\n\t\t}\n\t\treturn str.substring(start, start + maxLen);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tSystem.out.println(s.substring(s.indexOf(\"b\")+1,s.indexOf(\"b\")+2));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1275",
        "source": "leetcodeTitles",
        "source_id": "402",
        "url": "https://leetcode.com/problems/remove-k-digits/",
        "language": "java",
        "query": "Remove K Digits",
        "snippets": [
            "\tString removeKdigits(String num, int k) {\n\t\tif(num.length() == k) return \"0\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile(i < num.length() && k > 0){\n\t\t\tif(sb.length() == 0){\n\t\t\t\tsb.append(num.charAt(i));\n\t\t\t}else{\n\t\t\t\tif(sb.charAt(sb.length() - 1) > num.charAt(i)){\n\t\t\t\t\tsb.append(num.charAt(i));\n\t\t\t\t}else{\n\t\t\t\t\tsb.deleteCharAt(sb.length() - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t\twhile(i < num.length()){\n\t\t\tsb.append(num.charAt(i));\n\t\t\ti++;\n\t\t}\n\t\twhile(sb.length() > 0 && sb.charAt(0) == '0'){\n\t\t\tsb.deleteCharAt(0);\n\t\t}\n\t\tif(sb.length() == 0) return \"0\";\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeKdigits(String num, int k) {\n\t\tif(num.length() == k) return \"0\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile(i < num.length() && k > 0){\n\t\t\tif(num.charAt(i) != '0'){\n\t\t\t\tsb.append(num.charAt(i));\n\t\t\t\ti++;\n\t\t\t}else{\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tk--;\n\t\t}\n\t\twhile(i < num.length()){\n\t\t\tif(num.charAt(i) != '0'){\n\t\t\t\tsb.append(num.charAt(i));\n\t\t\t\ti++;\n\t\t\t}else{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tif(sb.length() == 0) return \"0\";\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeKdigits(String num, int k) {\n\t\tif(num.length()==k) return \"0\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i=0;\n\t\twhile(i<num.length()&&k>0){\n\t\t\tif(num.charAt(i)>num.charAt(i+1)){\n\t\t\t\tsb.append(num.charAt(i+1));\n\t\t\t\ti++;\n\t\t\t\tk--;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(num.charAt(i));\n\t\t\t}\n\t\t}\n\t\twhile(i<num.length()){\n\t\t\tsb.append(num.charAt(i));\n\t\t\ti++;\n\t\t}\n\t\twhile(sb.length()>1&&sb.charAt(0)=='0'){\n\t\t\tsb.deleteCharAt(0);\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeKdigits(String num, int k) {\n\t\tif(num.length()==k) return \"0\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i=0;\n\t\twhile(i<num.length()&&k>0){\n\t\t\tif(num.charAt(i)>num.charAt(i+1)){\n\t\t\t\tsb.append(num.charAt(i+1));\n\t\t\t\ti++;\n\t\t\t\tk--;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(num.charAt(i));\n\t\t\t}\n\t\t}\n\t\twhile(i<num.length()){\n\t\t\tsb.append(num.charAt(i));\n\t\t\ti++;\n\t\t}\n\t\twhile(sb.length()>0&&sb.charAt(0)=='0'){\n\t\t\tsb.deleteCharAt(0);\n\t\t}\n\t\tif(sb.length()==0) return \"0\";\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeKdigits(String num, int k) {\n\t\tif(num.length()==k) return \"0\";\n\t\tint i=0;\n\t\twhile(i<num.length()&&k>0){\n\t\t\tif(num.charAt(i)=='0'){\n\t\t\t\tnum=num.substring(0,i)+num.substring(i+1);\n\t\t\t\tk--;\n\t\t\t}\n\t\t\telse i++;\n\t\t}\n\t\tif(k==0) return num;\n\t\telse{\n\t\t\tint j=i;\n\t\t\twhile(j<num.length()&&k>0){\n\t\t\t\tif(num.charAt(j)=='0'){\n\t\t\t\t\tnum=num.substring(0,j)+num.substring(j+1);\n\t\t\t\t\tk--;\n\t\t\t\t}\n\t\t\t\telse j++;\n\t\t\t}\n\t\t\tif(k==0) return num;\n\t\t\telse{\n\t\t\t\tint l=j;\n\t\t\t\twhile(l<num.length()&&k>0){\n\t\t\t\t\tif(num.charAt(l)=='0'){\n\t\t\t\t\t\tnum=num.substring(0,l)+num.substring(l+1);\n\t\t\t\t\t\tk--;\n\t\t\t\t\t}\n\t\t\t\t\telse l++;\n\t\t\t\t}\n\t\t\t\tif(k==0) return num;\n\t\t\t\telse{\n\t\t\t\t\tint m=l;\n\t\t\t\t\twhile(m<num.length()&&k>0){\n\t\t\t\t\t\tif(num.charAt(m)=='0'){\n\t\t\t\t\t\t\tnum=num.substring(0,m)+num.substring(m+1);\n\t\t\t\t\t\t\tk--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse m++;\n\t\t\t\t\t}\n",
            "\tString removeKdigits(String num, int k) {\n\t\tif (num.length() == k)\n\t\t\treturn \"0\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (k > 0) {\n\t\t\twhile (i < num.length() && num.charAt(i) == '0')\n\t\t\t\ti++;\n\t\t\tif (i == num.length())\n\t\t\t\tbreak;\n\t\t\tsb.append(num.charAt(i++));\n\t\t\tk--;\n\t\t}\n\t\twhile (i < num.length())\n\t\t\tsb.append(num.charAt(i++));\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeKdigits(String num, int k) {\n\t\tif (num == null || num.length() == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tint len = num.length();\n\t\tif (k >= len) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tchar[] nums = num.toCharArray();\n\t\tint i = 0;\n\t\twhile (i < k) {\n\t\t\tint j = i + 1;\n\t\t\twhile (j < len && nums[j] == nums[i]) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == len) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ti = j;\n\t\t}\n\t\tif (i == k) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tint j = i + 1;\n\t\twhile (j < len && nums[j] == nums[i]) {\n\t\t\tj++;\n\t\t}\n\t\tif (j == len) {\n\t\t\treturn String.valueOf(nums, 0, i);\n\t\t}\n\t\tint kk = k - i;\n\t\tint jj = j + 1;\n\t\twhile (kk > 0 && jj < len) {\n\t\t\tif (nums[jj] < nums[jj - 1]) {\n\t\t\t\tjj++;\n\t\t\t} else {\n\t\t\t\tkk--;\n\t\t\t\tjj++;\n\t\t\t}\n\t\t}\n\t\tif (kk > 0) {\n\t\t\treturn String.valueOf(nums, 0, i);\n\t\t}\n\t\treturn String.valueOf(nums, 0, i) + String.valueOf(nums, jj, len - jj);\n\t}\n}\n",
            "\tString removeKdigits(String num, int k) {\n\t\tif (num == null || num.length() == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tif (k == num.length()) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (i < num.length() && k > 0) {\n\t\t\tif (num.charAt(i) != '0') {\n\t\t\t\tsb.append(num.charAt(i));\n\t\t\t\tk--;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\twhile (i < num.length()) {\n\t\t\tif (num.charAt(i) != '0') {\n\t\t\t\tsb.append(num.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (sb.length() == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeKdigits(String num, int k) {\n\t\tif(num.length()==k) return \"0\";\n\t\tif(num.length()==0) return \"0\";\n\t\tif(k==0) return num;\n\t\tint i=0;\n\t\twhile(i<num.length()&&num.charAt(i)=='0') i++;\n\t\tif(i==num.length()) return \"0\";\n\t\tStringBuilder sb=new StringBuilder();\n\t\tint j=i;\n\t\twhile(j<num.length()){\n\t\t\tif(num.charAt(j)>num.charAt(i)){\n\t\t\t\tsb.append(num.charAt(j));\n\t\t\t\ti=j;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\tif(sb.length()==0) return \"0\";\n\t\tif(sb.length()==1) return sb.toString();\n\t\tif(k>sb.length()) return \"0\";\n\t\tint count=0;\n\t\twhile(count<k){\n\t\t\tsb.deleteCharAt(0);\n\t\t\tcount++;\n\t\t}\n\t\tif(sb.length()==0) return \"0\";\n\t\tif(sb.length()==1) return sb.toString();\n\t\treturn sb.toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1276",
        "source": "leetcodeTitles",
        "source_id": "1039",
        "url": "https://leetcode.com/problems/minimum-score-triangulation-of-polygon/",
        "language": "java",
        "query": "Minimum Score Triangulation of Polygon",
        "snippets": [
            "\tstatic int minScoreTriangulation(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor (int l = 2; l < n; l++) {\n\t\t\tfor (int i = 0; i < n - l; i++) {\n\t\t\t\tint j = i + l;\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i + 1; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tstatic int minScoreTriangulation(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor (int len = 2; len <= n; len++) {\n\t\t\tfor (int i = 0; i < n - len + 1; i++) {\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j] + A[i] * A[k + 1] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tstatic int minScoreTriangulation(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i + 1; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tstatic int minScoreTriangulation(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor (int l = 2; l < n; l++) {\n\t\t\tfor (int i = 0; i + l < n; i++) {\n\t\t\t\tint j = i + l;\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j] + A[i] * A[k + 1] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tstatic int minScoreTriangulation(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor (int len = 2; len < n; len++) {\n\t\t\tfor (int i = 0; i < n - len; i++) {\n\t\t\t\tint j = i + len;\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i + 1; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint minScoreTriangulation(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i + 1; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint minScoreTriangulation(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor (int len = 2; len <= n; len++) {\n\t\t\tfor (int i = 0; i < n - len + 1; i++) {\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j] + A[i] * A[k + 1] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint minScoreTriangulation(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor (int len = 2; len < n; len++) {\n\t\t\tfor (int i = 0; i < n - len; i++) {\n\t\t\t\tint j = i + len;\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = i + 1; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j] + A[i] * A[k] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1277",
        "source": "leetcodeTitles",
        "source_id": "1254",
        "url": "https://leetcode.com/problems/number-of-closed-islands/",
        "language": "java",
        "query": "Number of Closed Islands",
        "snippets": [
            "\tint closedIslands(int[][] grid) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < grid.length; i++){\n\t\t\tfor(int j = 0; j < grid[0].length; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(int[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0)\n\t\t\treturn;\n\t\tgrid[i][j] = 0;\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n",
            "\tint closedIslands(int[][] grid) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < grid.length; i++){\n\t\t\tfor(int j = 0; j < grid[0].length; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(int[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0)\n\t\t\treturn;\n\t\tgrid[i][j] = 0;\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i, j - 1);\n\t\tdfs(grid, i, j + 1);\n\t}\n}\n",
            "\tint closedIsland(int[][] grid){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < grid.length; i++){\n\t\t\tfor(int j = 0; j < grid[0].length; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(int[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0) return;\n\t\tgrid[i][j] = 0;\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n",
            "\tstatic int closedIsland(int[][] grid){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < grid.length; i++){\n\t\t\tfor(int j = 0; j < grid[0].length; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic static void dfs(int[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0)\n\t\t\treturn;\n\t\tgrid[i][j] = 0;\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n",
            "\tint closedIsland(int[][] grid) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < grid.length; i++){\n\t\t\tfor(int j = 0; j < grid[0].length; j++){\n\t\t\t\tif(grid[i][j] == 1){\n\t\t\t\t\tcount++;\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(int[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0)\n\t\t\treturn;\n\t\tgrid[i][j] = 0;\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n",
            "\tint closedIsland(int[][] grid) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < grid.length; i++) {\n\t\t\tfor (int j = 0; j < grid[0].length; j++) {\n\t\t\t\tif (grid[i][j] == 1) {\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(int[][] grid, int i, int j) {\n\t\tif (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == 0) {\n\t\t\treturn;\n\t\t}\n\t\tgrid[i][j] = 0;\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1278",
        "source": "leetcodeTitles",
        "source_id": "1546",
        "url": "https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/",
        "language": "java",
        "query": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "snippets": [
            "\tint maxNonOverlapping(int[] nums, int target) {\n\t\tint max = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tsum += nums[i];\n\t\t\twhile (sum > target) {\n\t\t\t\tsum -= nums[start];\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\tif (sum == target) {\n\t\t\t\tmax = Math.max(max, i - start + 1);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint numSubarraySumTarget(int[] nums, int target) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (j < nums.length) {\n\t\t\tsum += nums[j];\n\t\t\twhile (sum > target && i < j) {\n\t\t\t\tsum -= nums[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (sum == target) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint numSubarrayProductLessThanK(int[] nums, int k) {\n\t\tint count = 0;\n\t\tint product = 1;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (j < nums.length) {\n\t\t\tproduct *= nums[j];\n\t\t\twhile (i <= j && product >= k) {\n\t\t\t\tproduct /= nums[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tcount += j - i + 1;\n\t\t\tj++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint numSubarrayBoundedMax(int[] A, int L, int R) {\n\t\tint count = 0;\n\t\tint left = 0;\n\t\tint right = 0;\n\t\tint sum = 0;\n\t\twhile (right < A.length) {\n\t\t\tif (A[right] <= R) {\n\t\t\t\tsum += A[right];\n\t\t\t\tright++;\n\t\t\t} else {\n\t\t\t\tcount += (right - left);\n\t\t\t\twhile (left < right && A[left] <= L) {\n\t\t\t\t\tsum -= A[left];\n\t\t\t\t\tleft++;\n\t\t\t\t}\n\t\t\t\tcount += (right - left);\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint numSubarrayBoundedMax(int[] A, int L, int R) {\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint sum = 0;\n\t\twhile (j < A.length) {\n\t\t\twhile (j < A.length && A[j] <= R) {\n\t\t\t\tsum += A[j];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\twhile (i < j && sum >= L) {\n\t\t\t\tcount++;\n\t\t\t\tsum -= A[i];\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint numSubarrayProductLessThanK(int[] nums, int k) {\n\t\tint count = 0;\n\t\tint product = 1;\n\t\tint left = 0;\n\t\tint right = 0;\n\t\twhile (right < nums.length) {\n\t\t\tproduct *= nums[right];\n\t\t\twhile (product >= k) {\n\t\t\t\tproduct /= nums[left];\n\t\t\t\tleft++;\n\t\t\t}\n\t\t\tcount += right - left + 1;\n\t\t\tright++;\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1279",
        "source": "leetcodeTitles",
        "source_id": "1080",
        "url": "https://leetcode.com/problems/insufficient-nodes-in-root-to-leaf-paths/",
        "language": "java",
        "query": "Insufficient Nodes in Root to Leaf Paths",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(28);\n\t\troot.right.right\n",
            "\tvoid func(){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(28);\n\t\troot.right.right.left.right =\n",
            "\tList<List<Integer>> pathSum(TreeNode root, int sum) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(root == null) return result;\n\t\tList<Integer> path = new ArrayList<Integer>();\n\t\tpath.add(root.val);\n\t\thelper(root, sum, path, result);\n\t\treturn result;\n\t}\n\tpublic void helper(TreeNode root, int sum, List<Integer> path, List<List<Integer>> result){\n\t\tif(root.left == null && root.right == null){\n\t\t\tif(sum == root.val){\n\t\t\t\tresult.add(new ArrayList<Integer>(path));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tif(root.left != null){\n\t\t\tpath.add(root.left.val);\n\t\t\thelper(root.left, sum - root.val, path, result);\n\t\t\tpath.remove(path.size() - 1);\n\t\t}\n\t\tif(root.right != null){\n\t\t\tpath.add(root.right.val);\n\t\t\thelper(root.right, sum - root.val, path, result);\n\t\t\tpath.remove(path.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tvoid\n\tmethod(){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(28);\n\t\troot.right.right.left.\n",
            "\tvoid test(){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(28);\n\t\troot.right.right.left.right =\n",
            "\tvoid printPaths(Node root){\n\t\tif(root == null)\n\t\t\treturn;\n\t\tArrayList<Node> path = new ArrayList<Node>();\n\t\tprintPathsUtil(root, path);\n\t}\n\tpublic\n\tvoid printPathsUtil(Node root, ArrayList<Node> path){\n\t\tif(root == null)\n\t\t\treturn;\n\t\tpath.add(root);\n\t\tif(root.left == null && root.right == null){\n\t\t\tprintPath(path);\n\t\t\tpath.remove(path.size() - 1);\n\t\t\treturn;\n\t\t}\n\t\tprintPathsUtil(root.left, path);\n\t\tprintPathsUtil(root.right, path);\n\t\tpath.remove(path.size() - 1);\n\t}\n\tpublic\n\tvoid printPath(ArrayList<Node> path){\n\t\tfor(Node node : path){\n\t\t\tSystem.out.print(node.data + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n}\n",
            "\tvoid function(Node root){\n\t\tif(root==null)\n\t\t\treturn;\n\t\tif(root.left==null && root.right==null)\n\t\t\treturn;\n\t\tif(root.left==null)\n\t\t\tfunction(root.right);\n\t\telse if(root.right==null)\n\t\t\tfunction(root.left);\n\t\telse{\n\t\t\tfunction(root.left);\n\t\t\tfunction(root.right);\n\t\t}\n\t}\n}\n",
            "\tvoid function(TreeNode root){\n\t\tif(root==null)\n\t\t\treturn;\n\t\tif(root.left==null&&root.right==null)\n\t\t\treturn;\n\t\tif(root.left==null)\n\t\t\tfunction(root.right);\n\t\telse if(root.right==null)\n\t\t\tfunction(root.left);\n\t\telse{\n\t\t\tfunction(root.left);\n\t\t\tfunction(root.right);\n\t\t}\n\t}\n}\n",
            "\tvoid printPath(Node root){\n\t\tif(root == null)\n\t\t\treturn;\n\t\tStack<Node> s = new Stack<Node>();\n\t\ts.push(root);\n\t\twhile(!s.isEmpty()){\n\t\t\tNode curr = s.pop();\n\t\t\tSystem.out.print(curr.data + \" \");\n\t\t\tif(curr.left == null && curr.right == null)\n\t\t\t\tSystem.out.println();\n\t\t\tif(curr.right != null)\n\t\t\t\ts.push(curr.right);\n\t\t\tif(curr.left != null)\n\t\t\t\ts.push(curr.left);\n\t\t}\n\t}\n\tpublic\n\tvoid printPaths(Node root){\n\t\tif(root == null)\n\t\t\treturn;\n\t\tprintPath(root);\n\t\tprintPaths(root.left);\n\t\tprintPaths(root.right);\n\t}\n\tpublic\n\tvoid printPaths(Node root, int[] path, int pathLen){\n\t\tif(root == null)\n\t\t\treturn;\n\t\tpath[pathLen] = root.data;\n\t\tpathLen++;\n\t\tif(root.left == null && root.right == null){\n\t\t\tprintArray(path, pathLen);\n\t\t}\n\t\tprintPaths(root.left, path, pathLen);\n\t\tprintPaths(root.right, path, pathLen);\n\t}\n\tpublic\n\tvoid printArray(int[] path, int pathLen){\n\t\tfor(int i = 0; i < pathLen; i++){\n\t\t\tSystem.out.print(path[i] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n\tpublic\n\tvoid printPaths(Node root){\n\t\tint[] path = new int[100];\n\t\tprintPaths(root, path, 0);\n\t}\n}\n",
            "\tvoid method(){\n\t\tTreeNode root = new TreeNode(1);\n\t\tTreeNode node2 = new TreeNode(2);\n\t\tTreeNode node3 = new TreeNode(3);\n\t\tTreeNode node4 = new TreeNode(4);\n\t\tTreeNode node5 = new TreeNode(5);\n\t\tTreeNode node6 = new TreeNode(6);\n\t\tTreeNode node7 = new TreeNode(7);\n\t\tTreeNode node8 = new TreeNode(8);\n\t\tTreeNode node9 = new TreeNode(9);\n\t\tTreeNode node10 = new TreeNode(10);\n\t\tTreeNode node11 = new TreeNode(11);\n\t\tTreeNode node12 = new TreeNode(12);\n\t\tTreeNode node13 = new TreeNode(13);\n\t\tTreeNode node14 = new TreeNode(14);\n\t\tTreeNode node15 = new TreeNode(15);\n\t\tTreeNode node16 = new TreeNode(16);\n\t\tTreeNode node17 = new TreeNode(17);\n\t\tTreeNode node18 = new TreeNode(18);\n\t\tTreeNode node19 = new TreeNode(19);\n\t\tTreeNode node20 = new TreeNode(20);\n\t\tTreeNode node21 = new TreeNode(21);\n\t\tTreeNode node22 = new TreeNode(22);\n\t\tTreeNode node23 = new TreeNode(23);\n\t\tTreeNode node24 = new TreeNode(24);\n\t\tTreeNode node25 = new TreeNode(25);\n\t\tTreeNode node26 = new TreeNode(26);\n\t\tTreeNode node27 = new TreeNode(27);\n\t\tTreeNode node28 = new TreeNode(28);\n\t\tTreeNode node29 = new TreeNode(29);\n\t\tTreeNode node30 = new TreeNode(30);\n\t\tTreeNode node31 = new TreeNode(31);\n\t\tTreeNode node32 = new TreeNode(32);\n\t\tTreeNode node33 = new TreeNode(33);\n\t\tTreeNode node34 = new TreeNode(34);\n\t\tTreeNode node35 = new TreeNode(35);\n\t\tTree\n"
        ],
        "results": 10
    },
    {
        "id": "1280",
        "source": "leetcodeTitles",
        "source_id": "1017",
        "url": "https://leetcode.com/problems/convert-to-base-2/",
        "language": "java",
        "query": "Convert to Base -2",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint base = Integer.parseInt(args[1]);\n\t\tint result = 0;\n\t\tint power = 0;\n\t\twhile(n > 0){\n\t\t\tint digit = n % base;\n\t\t\tresult += digit * Math.pow(base, power);\n\t\t\tn /= base;\n\t\t\tpower++;\n\t\t}\n\t\tSystem.out.println(result);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint base = Integer.parseInt(args[1]);\n\t\tint result = 0;\n\t\tint power = 0;\n\t\twhile(n > 0){\n\t\t\tint digit = n % base;\n\t\t\tn = n / base;\n\t\t\tresult += digit * Math.pow(base, power);\n\t\t\tpower++;\n\t\t}\n\t\tSystem.out.println(result);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint base = Integer.parseInt(args[1]);\n\t\tint result = 0;\n\t\tint power = 0;\n\t\twhile(n > 0){\n\t\t\tresult += (n % base) * Math.pow(base, power);\n\t\t\tn /= base;\n\t\t\tpower++;\n\t\t}\n\t\tSystem.out.println(result);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1281",
        "source": "leetcodeTitles",
        "source_id": "2148",
        "url": "https://leetcode.com/problems/count-elements-with-strictly-smaller-and-greater-elements/",
        "language": "java",
        "query": "Count Elements With Strictly Smaller and Greater Elements",
        "snippets": [
            "\tint[] countSmaller(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tif(nums.length == 0) return res;\n\t\tTreeMap<Integer, Integer> map = new TreeMap<>();\n\t\tfor(int i = nums.length - 1; i >= 0; i--){\n\t\t\tMap.Entry<Integer, Integer> entry = map.floorEntry(nums[i]);\n\t\t\tif(entry == null) res[i] = 0;\n\t\t\telse res[i] = entry.getValue();\n\t\t\tmap.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] countSmaller(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tif(nums.length == 0) return res;\n\t\tTreeMap<Integer, Integer> map = new TreeMap<>();\n\t\tfor(int i = nums.length - 1; i >= 0; i--){\n\t\t\tMap.Entry<Integer, Integer> entry = map.floorEntry(nums[i]);\n\t\t\tif(entry == null){\n\t\t\t\tres[i] = 0;\n\t\t\t}else{\n\t\t\t\tres[i] = entry.getValue();\n\t\t\t}\n\t\t\tmap.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] countSmaller(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tif(nums.length == 0) return res;\n\t\tTreeMap<Integer, Integer> map = new TreeMap<>();\n\t\tmap.put(nums[nums.length-1], nums.length);\n\t\tfor(int i = nums.length-2; i >= 0; i--){\n\t\t\tMap.Entry<Integer, Integer> entry = map.floorEntry(nums[i]);\n\t\t\tif(entry != null){\n\t\t\t\tres[i] = entry.getValue();\n\t\t\t}\n\t\t\tmap.put(nums[i], i);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] countElements(int[] arr) {\n\t\tint[] res = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < arr.length; j++){\n\t\t\t\tif(arr[j] > arr[i]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres[i] = count;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] countElements(int[] arr){\n\t\tint[] result = new int[2];\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tfor(int j = i + 1; j < arr.length; j++){\n\t\t\t\tif(arr[i] < arr[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[0] += count;\n\t\t\tcount = 0;\n\t\t}\n\t\tcount = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tfor(int j = i + 1; j < arr.length; j++){\n\t\t\t\tif(arr[i] > arr[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[1] += count;\n\t\t\tcount = 0;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint[] countSmaller(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tif (nums == null || nums.length == 0) {\n\t\t\treturn res;\n\t\t}\n\t\tTreeMap<Integer, Integer> map = new TreeMap<>();\n\t\tfor (int i = nums.length - 1; i >= 0; i--) {\n\t\t\tMap.Entry<Integer, Integer> entry = map.floorEntry(nums[i]);\n\t\t\tif (entry == null) {\n\t\t\t\tres[i] = 0;\n\t\t\t} else {\n\t\t\t\tres[i] = entry.getValue();\n\t\t\t}\n\t\t\tmap.put(nums[i], map.getOrDefault(nums[i], 0) + 1);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] countElements(int[] arr) {\n\t\tint[] result = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < arr.length; j++){\n\t\t\t\tif(arr[j] < arr[i]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[i] = count;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint[] countElements(int[] arr) {\n\t\tint[] result = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < arr.length; j++){\n\t\t\t\tif(arr[j] > arr[i]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[i] = count;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] countElements(int[] arr) {\n\t\tint[] result = new int[arr.length];\n\t\tint[] temp = new int[arr.length];\n\t\tint[] temp2 = new int[arr.length];\n\t\tint[] temp3 = new int[arr.length];\n\t\tint[] temp4 = new int[arr.length];\n\t\tint[] temp5 = new int[arr.length];\n\t\tint[] temp6 = new int[arr.length];\n\t\tint[] temp7 = new int[arr.length];\n\t\tint[] temp8 = new int[arr.length];\n\t\tint[] temp9 = new int[arr.length];\n\t\tint[] temp10 = new int[arr.length];\n\t\tint[] temp11 = new int[arr.length];\n\t\tint[] temp12 = new int[arr.length];\n\t\tint[] temp13 = new int[arr.length];\n\t\tint[] temp14 = new int[arr.length];\n\t\tint[] temp15 = new int[arr.length];\n\t\tint[] temp16 = new int[arr.length];\n\t\tint[] temp17 = new int[arr.length];\n\t\tint[] temp18 = new int[arr.length];\n\t\tint[] temp19 = new int[arr.length];\n\t\tint[] temp20 = new int[arr.length];\n\t\tint[] temp21 = new int[arr.length];\n\t\tint[] temp22 = new int[arr.length];\n\t\tint[] temp23 = new int[arr.length];\n\t\tint[] temp24 = new int[arr.length];\n\t\tint[] temp25 = new int[arr.length];\n\t\tint[] temp26 = new int[arr.length];\n\t\tint[] temp27 = new int[arr.length];\n\t\tint[] temp28 = new int[arr.length];\n\t\tint[] temp29 = new int[arr.length];\n\t\tint[] temp30 = new int[arr.length];\n\t\tint[] temp31 = new int[arr.length];\n\t\tint[] temp32 =\n"
        ],
        "results": 10
    },
    {
        "id": "1282",
        "source": "leetcodeTitles",
        "source_id": "1043",
        "url": "https://docs.google.com/spreadsheets/d/1MUtHfwbkWO4W69NaNiwv_hgABNfXZu2M69PNgL8PBXs/edit#gid=0",
        "language": "java",
        "query": "Partition Array for Maximum Sum",
        "snippets": [
            "\tstatic int partition(int[] arr, int low, int high){\n\t\tint pivot = arr[high];\n\t\tint i = low - 1;\n\t\tfor(int j = low; j < high; j++){\n\t\t\tif(arr[j] <= pivot){\n\t\t\t\ti++;\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\tint temp = arr[i+1];\n\t\tarr[i+1] = arr[high];\n\t\tarr[high] = temp;\n\t\treturn i+1;\n\t}\n\tpublic\n\tstatic int findMaxSum(int[] arr, int low, int high){\n\t\tif(low == high){\n\t\t\treturn arr[low];\n\t\t}\n\t\tint mid = partition(arr, low, high);\n\t\tint leftMaxSum = findMaxSum(arr, low, mid-1);\n\t\tint rightMaxSum = findMaxSum(arr, mid+1, high);\n\t\tint maxSum = Math.max(leftMaxSum, rightMaxSum);\n\t\treturn maxSum;\n\t}\n\tpublic\n\tstatic int findMaxSum(int[] arr){\n\t\treturn findMaxSum(arr, 0, arr.length-1);\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tSystem.out.println(findMaxSum(arr));\n\t}\n}\n",
            "\tstatic int partition(int[] arr, int low, int high){\n\t\tint pivot = arr[high];\n\t\tint i = low - 1;\n\t\tfor(int j = low; j < high; j++){\n\t\t\tif(arr[j] <= pivot){\n\t\t\t\ti++;\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\tint temp = arr[i+1];\n\t\tarr[i+1] = arr[high];\n\t\tarr[high] = temp;\n\t\treturn i+1;\n\t}\n\tpublic\n\tstatic int findMaxSum(int[] arr, int low, int high){\n\t\tif(low == high){\n\t\t\treturn arr[low];\n\t\t}\n\t\tint mid = partition(arr, low, high);\n\t\tint leftMaxSum = findMaxSum(arr, low, mid-1);\n\t\tint rightMaxSum = findMaxSum(arr, mid+1, high);\n\t\tint maxSum = Math.max(leftMaxSum, rightMaxSum);\n\t\treturn maxSum;\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] arr = {-2, -3, 4, -1, -2, 1, 5, -3};\n\t\tint maxSum = findMaxSum(arr, 0, arr.length-1);\n\t\tSystem.out.println(maxSum);\n\t}\n}\n",
            "\tstatic int partition(int[] arr, int low, int high){\n\t\tint pivot = arr[high];\n\t\tint i = low - 1;\n\t\tfor(int j = low; j < high; j++){\n\t\t\tif(arr[j] <= pivot){\n\t\t\t\ti++;\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\tint temp = arr[i+1];\n\t\tarr[i+1] = arr[high];\n\t\tarr[high] = temp;\n\t\treturn i+1;\n\t}\n\tpublic\n\tstatic int findMaxSum(int[] arr, int low, int high){\n\t\tif(low == high){\n\t\t\treturn arr[low];\n\t\t}\n\t\tint mid = partition(arr, low, high);\n\t\tint leftMaxSum = findMaxSum(arr, low, mid-1);\n\t\tint rightMaxSum = findMaxSum(arr, mid+1, high);\n\t\tint maxSum = Math.max(leftMaxSum, rightMaxSum);\n\t\treturn maxSum;\n\t}\n\tpublic\n\tstatic int findMaxSum(int[] arr){\n\t\treturn findMaxSum(arr, 0, arr.length-1);\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n\t\tSystem.out.println(findMaxSum(arr));\n\t}\n}\n",
            "\tstatic int partition(int[] arr, int low, int high){\n\t\tint pivot = arr[high];\n\t\tint i = low - 1;\n\t\tfor(int j = low; j < high; j++){\n\t\t\tif(arr[j] <= pivot){\n\t\t\t\ti++;\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\tint temp = arr[i+1];\n\t\tarr[i+1] = arr[high];\n\t\tarr[high] = temp;\n\t\treturn i+1;\n\t}\n\tpublic\n\tstatic void printArray(int[] arr, int n){\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n\tpublic\n\tstatic int maxSum(int[] arr, int n){\n\t\tint max_sum = 0;\n\t\tint curr_sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcurr_sum += arr[i];\n\t\t\tif(curr_sum > max_sum){\n\t\t\t\tmax_sum = curr_sum;\n\t\t\t}\n\t\t\tif(curr_sum < 0){\n\t\t\t\tcurr_sum = 0;\n\t\t\t}\n\t\t}\n\t\treturn max_sum;\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20};\n\t\tint n = arr.length;\n\t\tint low = 0;\n\t\tint high = n-1;\n\t\tint index = partition(arr, low, high);\n\t\tprintArray(arr, n);\n\t\tSystem.\n",
            "\tint partitionArray(int[] arr, int k){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\tint maxSum = sum;\n\t\tfor(int i = k; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t\tsum -= arr[i-k];\n\t\t\tmaxSum = Math.max(maxSum, sum);\n\t\t}\n\t\treturn maxSum;\n\t}\n}\n",
            "\tint partitionArray(int[] arr, int k){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\tint target = sum/k;\n\t\tint[] dp = new int[arr.length];\n\t\tdp[0] = arr[0];\n\t\tfor(int i = 1; i < arr.length; i++){\n\t\t\tdp[i] = dp[i-1] + arr[i];\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tint curr = dp[i];\n\t\t\tfor(int j = i+1; j < arr.length; j++){\n\t\t\t\tcurr += dp[j];\n\t\t\t\tif(curr == target){\n\t\t\t\t\tmax = Math.max(max, j-i+1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int partition(int[] arr, int low, int high){\n\t\tint pivot = arr[high];\n\t\tint i = low-1;\n\t\tfor(int j = low; j<high; j++){\n\t\t\tif(arr[j]<=pivot){\n\t\t\t\ti++;\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\tint temp = arr[i+1];\n\t\tarr[i+1] = arr[high];\n\t\tarr[high] = temp;\n\t\treturn i+1;\n\t}\n\tpublic\n\tstatic int findMaxSum(int[] arr, int low, int high){\n\t\tif(low==high){\n\t\t\treturn arr[low];\n\t\t}\n\t\tint mid = partition(arr, low, high);\n\t\tint leftMax = findMaxSum(arr, low, mid-1);\n\t\tint rightMax = findMaxSum(arr, mid+1, high);\n\t\tint crossMax = arr[mid];\n\t\tint max = Math.max(Math.max(leftMax, rightMax), crossMax);\n\t\treturn max;\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint max = findMaxSum(arr, 0, arr.length-1);\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic int partitionArray(int[] arr, int low, int high){\n\t\tint pivot = arr[high];\n\t\tint i = low - 1;\n\t\tfor(int j = low; j < high; j++){\n\t\t\tif(arr[j] <= pivot){\n\t\t\t\ti++;\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\tint temp = arr[i+1];\n\t\tarr[i+1] = arr[high];\n\t\tarr[high] = temp;\n\t\treturn i+1;\n\t}\n\tpublic\n\tstatic int findMaxSum(int[] arr, int low, int high){\n\t\tif(low == high){\n\t\t\treturn arr[low];\n\t\t}\n\t\tint mid = partitionArray(arr, low, high);\n\t\tint leftMaxSum = findMaxSum(arr, low, mid-1);\n\t\tint rightMaxSum = findMaxSum(arr, mid+1, high);\n\t\tint maxSum = Math.max(leftMaxSum, rightMaxSum);\n\t\treturn maxSum;\n\t}\n\tpublic\n\tstatic int findMaxSum(int[] arr){\n\t\treturn findMaxSum(arr, 0, arr.length-1);\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tSystem.out.println(findMaxSum(arr));\n\t}\n}\n",
            "\tstatic int partition(int[] arr, int low, int high){\n\t\tint pivot = arr[high];\n\t\tint i = low-1;\n\t\tfor(int j = low; j<=high-1; j++){\n\t\t\tif(arr[j]<=pivot){\n\t\t\t\ti++;\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\tint temp = arr[i+1];\n\t\tarr[i+1] = arr[high];\n\t\tarr[high] = temp;\n\t\treturn i+1;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint low = 0;\n\t\tint high = arr.length-1;\n\t\tint index = partition(arr, low, high);\n\t\tSystem.out.println(index);\n\t\tfor(int i = 0; i<arr.length; i++){\n\t\t\tSystem.out.print(arr[i]+\" \");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1283",
        "source": "leetcodeTitles",
        "source_id": "2310",
        "url": "https://leetcode.com/problems/sum-of-numbers-with-units-digit-k/",
        "language": "java",
        "query": "Sum of Numbers With Units Digit K",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint num = in.nextInt();\n\t\t\tif(num % k == 0){\n\t\t\t\tsum += num;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(a[i] % k == 0){\n\t\t\t\tsum += a[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint[] count = new int[10];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint num = arr[i];\n\t\t\twhile(num > 0){\n\t\t\t\tcount[num % 10]++;\n\t\t\t\tnum /= 10;\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tif(count[i] == k){\n\t\t\t\tsum += i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint num = sc.nextInt();\n\t\t\tif(num % k == 0){\n\t\t\t\tsum += num;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic int sum(int[] a, int k){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] % 10 == k){\n\t\t\t\tsum += a[i];\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1284",
        "source": "leetcodeTitles",
        "source_id": "217",
        "url": "https://leetcode.com/problems/contains-duplicate/",
        "language": "java",
        "query": "Contains Duplicate",
        "snippets": [
            "\tboolean containsDuplicate(int[] nums) {\n\t\tif(nums.length<=1) return false;\n\t\tArrays.sort(nums);\n\t\tfor(int i=0;i<nums.length-1;i++){\n\t\t\tif(nums[i]==nums[i+1]) return true;\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsDuplicate(int[] nums) {\n\t\tif(nums.length<=1) return false;\n\t\tHashMap<Integer,Integer> map = new HashMap<Integer,Integer>();\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(map.containsKey(nums[i])){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tmap.put(nums[i],1);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsDuplicate(int[] nums) {\n\t\tif(nums == null || nums.length == 0)\n\t\t\treturn false;\n\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(map.containsKey(nums[i]))\n\t\t\t\treturn true;\n\t\t\tmap.put(nums[i], 1);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsDuplicate(int[] nums) {\n\t\tif(nums.length<=1) return false;\n\t\tHashMap<Integer,Integer> map = new HashMap<Integer,Integer>();\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(map.containsKey(nums[i])){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tmap.put(nums[i],i);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsDuplicate(int[] nums) {\n\t\tif(nums.length<=1) return false;\n\t\tHashSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(set.contains(nums[i])) return true;\n\t\t\telse set.add(nums[i]);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsDuplicate(int[] nums) {\n\t\tif(nums.length<2) return false;\n\t\tHashSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(set.contains(nums[i])) return true;\n\t\t\tset.add(nums[i]);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsDuplicate(int[] nums) {\n\t\tif(nums.length<2) return false;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(set.contains(nums[i])) return true;\n\t\t\tset.add(nums[i]);\n\t\t}\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1285",
        "source": "leetcodeTitles",
        "source_id": "1482",
        "url": "https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/",
        "language": "java",
        "query": "Minimum Number of Days to Make m Bouquets",
        "snippets": [
            "\tint minDays(int[] bloomDay, int m, int k){\n\t\tint n = bloomDay.length;\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[0] = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(bloomDay[i] > bloomDay[j]){\n\t\t\t\t\tdp[i] = Math.min(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(dp[i] == m){\n\t\t\t\tres = Math.min(res, bloomDay[i]);\n\t\t\t}\n\t\t}\n\t\tif(res == Integer.MAX_VALUE){\n\t\t\treturn -1;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minDays(int[] bloomDay, int m, int k){\n\t\tint n = bloomDay.length;\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[0] = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(bloomDay[j] - bloomDay[i] >= k){\n\t\t\t\t\tdp[j] = Math.min(dp[j], dp[i] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(dp[i] == m){\n\t\t\t\tres = Math.min(res, bloomDay[i]);\n\t\t\t}\n\t\t}\n\t\treturn res == Integer.MAX_VALUE ? -1 : res;\n\t}\n}\n",
            "\tint minDays(int[] bloomDay, int m, int k){\n\t\tint n = bloomDay.length;\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[0] = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(bloomDay[i] > bloomDay[j]){\n\t\t\t\t\tdp[i] = Math.min(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(dp[i] >= m){\n\t\t\t\tres = Math.min(res, dp[i]);\n\t\t\t}\n\t\t}\n\t\treturn res == Integer.MAX_VALUE ? -1 : res;\n\t}\n}\n",
            "\tint minDays(int[] bloomDay, int m, int k){\n\t\tint n = bloomDay.length;\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[i] = 1;\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(bloomDay[j] - bloomDay[i] <= k){\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(count[i] >= m){\n\t\t\t\tmax = Math.max(max, bloomDay[i]);\n\t\t\t}\n\t\t}\n\t\treturn max == 0 ? -1 : max;\n\t}\n}\n",
            "\tint minDays(int[] bloomDay, int m, int k) {\n\t\tint n = bloomDay.length;\n\t\tint[] days = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdays[i] = bloomDay[i] - i;\n\t\t}\n\t\tArrays.sort(days);\n\t\tint res = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint j = i;\n\t\t\tint count = 0;\n\t\t\twhile (j < n && count < k) {\n\t\t\t\tcount++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (count >= k) {\n\t\t\t\tres = Math.min(res, days[i]);\n\t\t\t}\n\t\t}\n\t\treturn res == Integer.MAX_VALUE ? -1 : res + m;\n\t}\n}\n",
            "\tint minDays(int[] bloomDay, int m, int k){\n\t\tint n = bloomDay.length;\n\t\tint[] count = new int[n];\n\t\tint[] count2 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[i] = 1;\n\t\t\tcount2[i] = 1;\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == j) continue;\n\t\t\t\tif(bloomDay[i] > bloomDay[j]){\n\t\t\t\t\tcount[i]++;\n\t\t\t\t\tcount2[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(count[i] >= k) ans++;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(count2[i] >= k) ans++;\n\t\t}\n\t\tif(ans >= m) return 0;\n\t\treturn m - ans;\n\t}\n}\n",
            "\tint minDays(int[] bloomDay, int m, int k){\n\t\tint n = bloomDay.length;\n\t\tint[] count = new int[n];\n\t\tint[] count2 = new int[n];\n\t\tint[] count3 = new int[n];\n\t\tint[] count4 = new int[n];\n\t\tint[] count5 = new int[n];\n\t\tint[] count6 = new int[n];\n\t\tint[] count7 = new int[n];\n\t\tint[] count8 = new int[n];\n\t\tint[] count9 = new int[n];\n\t\tint[] count10 = new int[n];\n\t\tint[] count11 = new int[n];\n\t\tint[] count12 = new int[n];\n\t\tint[] count13 = new int[n];\n\t\tint[] count14 = new int[n];\n\t\tint[] count15 = new int[n];\n\t\tint[] count16 = new int[n];\n\t\tint[] count17 = new int[n];\n\t\tint[] count18 = new int[n];\n\t\tint[] count19 = new int[n];\n\t\tint[] count20 = new int[n];\n\t\tint[] count21 = new int[n];\n\t\tint[] count22 = new int[n];\n\t\tint[] count23 = new int[n];\n\t\tint[] count24 = new int[n];\n\t\tint[] count25 = new int[n];\n\t\tint[] count26 = new int[n];\n\t\tint[] count27 = new int[n];\n\t\tint[] count28 = new int[n];\n\t\tint[] count29 = new int[n];\n\t\tint[] count30 = new int[n];\n\t\tint[] count31 = new int[n];\n\t\tint[] count32 = new int[n];\n\t\tint[] count33 = new int[n];\n\t\tint[] count34 = new int[n];\n\t\tint[] count35 = new int[n];\n\t\tint[] count36 = new int[n];\n\t\tint[]\n",
            "\tint minDays(int[] bloomDay, int m, int k) {\n\t\tint n = bloomDay.length;\n\t\tint[] count = new int[n];\n\t\tint[] count2 = new int[n];\n\t\tint[] count3 = new int[n];\n\t\tint[] count4 = new int[n];\n\t\tint[] count5 = new int[n];\n\t\tint[] count6 = new int[n];\n\t\tint[] count7 = new int[n];\n\t\tint[] count8 = new int[n];\n\t\tint[] count9 = new int[n];\n\t\tint[] count10 = new int[n];\n\t\tint[] count11 = new int[n];\n\t\tint[] count12 = new int[n];\n\t\tint[] count13 = new int[n];\n\t\tint[] count14 = new int[n];\n\t\tint[] count15 = new int[n];\n\t\tint[] count16 = new int[n];\n\t\tint[] count17 = new int[n];\n\t\tint[] count18 = new int[n];\n\t\tint[] count19 = new int[n];\n\t\tint[] count20 = new int[n];\n\t\tint[] count21 = new int[n];\n\t\tint[] count22 = new int[n];\n\t\tint[] count23 = new int[n];\n\t\tint[] count24 = new int[n];\n\t\tint[] count25 = new int[n];\n\t\tint[] count26 = new int[n];\n\t\tint[] count27 = new int[n];\n\t\tint[] count28 = new int[n];\n\t\tint[] count29 = new int[n];\n\t\tint[] count30 = new int[n];\n\t\tint[] count31 = new int[n];\n\t\tint[] count32 = new int[n];\n\t\tint[] count33 = new int[n];\n\t\tint[] count34 = new int[n];\n\t\tint[] count35 = new int[n];\n\t\tint[] count36 = new int[n];\n\t\tint\n"
        ],
        "results": 10
    },
    {
        "id": "1286",
        "source": "leetcodeTitles",
        "source_id": "806",
        "url": "https://leetcode.com/problems/number-of-lines-to-write-string/",
        "language": "java",
        "query": "Number of Lines To Write String",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.length());\n\t}\n}\n",
            "\tvoid method(){\n\t\tString s = \"\";\n\t\tfor(int i = 0; i < 100; i++){\n\t\t\ts += \"a\";\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tSystem.out.println(str.length());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s);\n\t}\n}\n",
            "\tvoid m1(){\n\t\tString s = \"\";\n\t\tfor(int i = 0; i < 100; i++){\n\t\t\ts += \"a\";\n\t\t}\n\t}\n}\n",
            "\tvoid method(){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.length());\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1287",
        "source": "leetcodeTitles",
        "source_id": "645",
        "url": "https://leetcode.com/problems/set-mismatch/",
        "language": "java",
        "query": "Set Mismatch",
        "snippets": [
            "\tvoid m1(){\n\t\tSystem.out.println(\"m1\");\n\t}\n\tpublic\n\tvoid m2(){\n\t\tSystem.out.println(\"m2\");\n\t}\n\tpublic\n\tvoid m3(){\n\t\tSystem.out.println(\"m3\");\n\t}\n\tpublic\n\tvoid m4(){\n\t\tSystem.out.println(\"m4\");\n\t}\n\tpublic\n\tvoid m5(){\n\t\tSystem.out.println(\"m5\");\n\t}\n\tpublic\n\tvoid m6(){\n\t\tSystem.out.println(\"m6\");\n\t}\n\tpublic\n\tvoid m7(){\n\t\tSystem.out.println(\"m7\");\n\t}\n\tpublic\n\tvoid m8(){\n\t\tSystem.out.println(\"m8\");\n\t}\n\tpublic\n\tvoid m9(){\n\t\tSystem.out.println(\"m9\");\n\t}\n\tpublic\n\tvoid m10(){\n\t\tSystem.out.println(\"m10\");\n\t}\n\tpublic\n\tvoid m11(){\n\t\tSystem.out.println(\"m11\");\n\t}\n\tpublic\n\tvoid m12(){\n\t\tSystem.out.println(\"m12\");\n\t}\n\tpublic\n\tvoid m13(){\n\t\tSystem.out.println(\"m13\");\n\t}\n\tpublic\n\tvoid m14(){\n\t\tSystem.out.println(\"m14\");\n\t}\n\tpublic\n\tvoid m15(){\n\t\tSystem.out.println(\"m15\");\n\t}\n\tpublic\n\tvoid m16(){\n\t\tSystem.out.println(\"m16\");\n\t}\n\tpublic\n\tvoid m17(){\n\t\tSystem.out.println(\"m17\");\n\t}\n\tpublic\n\tvoid m18(){\n\t\tSystem.out.println(\"m18\");\n\t}\n\tpublic\n\tvoid m19(){\n\t\tSystem.out.println(\"m19\");\n\t}\n\tpublic\n\tvoid m20(){\n\t\tSystem.out.println(\"m20\");\n\t}\n\tpublic\n\tvoid m21(){\n\t\tSystem.out.println(\"m21\");\n",
            "\tvoid m1(){\n\t\tSystem.out.println(\"m1\");\n\t}\n\tpublic\n\tvoid m2(){\n\t\tSystem.out.println(\"m2\");\n\t}\n\tpublic\n\tvoid m3(){\n\t\tSystem.out.println(\"m3\");\n\t}\n}\n",
            "\tvoid m1(){\n\t\tSystem.out.println(\"m1\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = 1;\n\t\tint b = 2;\n\t\tint c = 3;\n\t\tint d = 4;\n\t\tint e = 5;\n\t\tint f = 6;\n\t\tint g = 7;\n\t\tint h = 8;\n\t\tint i = 9;\n\t\tint j = 10;\n\t\tint k = 11;\n\t\tint l = 12;\n\t\tint m = 13;\n\t\tint n = 14;\n\t\tint o = 15;\n\t\tint p = 16;\n\t\tint q = 17;\n\t\tint r = 18;\n\t\tint s = 19;\n\t\tint t = 20;\n\t\tint u = 21;\n\t\tint v = 22;\n\t\tint w = 23;\n\t\tint x = 24;\n\t\tint y = 25;\n\t\tint z = 26;\n\t\tint aa = 27;\n\t\tint bb = 28;\n\t\tint cc = 29;\n\t\tint dd = 30;\n\t\tint ee = 31;\n\t\tint ff = 32;\n\t\tint gg = 33;\n\t\tint hh = 34;\n\t\tint ii = 35;\n\t\tint jj = 36;\n\t\tint kk = 37;\n\t\tint ll = 38;\n\t\tint mm = 39;\n\t\tint nn = 40;\n\t\tint oo = 41;\n\t\tint pp = 42;\n\t\tint qq = 43;\n\t\tint rr = 44;\n\t\tint ss = 45;\n\t\tint tt = 46;\n\t\tint uu = 47;\n\t\tint vv = 48;\n\t\tint ww = 49;\n\t\tint xx = 50;\n\t\tint yy = 51;\n\t\tint zz = 52;\n\t\tint aaa = 53;\n\t\tint bbb = 54;\n\t\tint ccc = 55;\n\t\tint ddd = 56;\n\t\tint eee = 57;\n\t\tint fff = 58;\n",
            "\tvoid method(){\n\t\tSystem.out.println(\"Hello\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1288",
        "source": "leetcodeTitles",
        "source_id": "492",
        "url": "https://leetcode.com/problems/construct-the-rectangle/",
        "language": "java",
        "query": "Construct the Rectangle",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tRectangle r = new Rectangle(10,20);\n\t\tSystem.out.println(r.getArea());\n\t\tSystem.out.println(r.getPerimeter());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tRectangle r = new Rectangle(10,20);\n\t\tSystem.out.println(r.area());\n\t}\n}\n",
            "\tClazz(int x, int y, int width, int height){\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\tpublic int x;\n\tpublic int y;\n\tpublic int width;\n\tpublic int height;\n}\n",
            "\tstatic void main(String[] args){\n\t\tRectangle r = new Rectangle(10,20);\n\t\tSystem.out.println(r.getWidth());\n\t\tSystem.out.println(r.getHeight());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tRectangle r = new Rectangle(10,20);\n\t\tSystem.out.println(\"Area of Rectangle is: \" + r.area());\n\t\tSystem.out.println(\"Perimeter of Rectangle is: \" + r.perimeter());\n\t}\n}\n",
            "\tvoid method(){\n\t\tRectangle r = new Rectangle(10, 20);\n\t\tSystem.out.println(r.getArea());\n\t}\n}\n",
            "\tClazz(){\n\t\tSystem.out.println(\"Rectangle\");\n\t}\n}\n",
            "\tClazz(){\n\t\tSystem.out.println(\"Clazz\");\n\t}\n}\n",
            "\tClazz(){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1289",
        "source": "leetcodeTitles",
        "source_id": "787",
        "url": "https://leetcode.com/problems/cheapest-flights-within-k-stops/",
        "language": "java",
        "query": "Cheapest Flights Within K Stops",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[][] flights = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tflights[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint src = in.nextInt();\n\t\tint dst = in.nextInt();\n\t\tint ans = findCheapestPrice(n, flights, src, dst, k);\n\t\tSystem.out.println(ans);\n\t}\n\tpublic static int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[src] = 0;\n\t\tfor(int i = 0; i < k + 1; i++){\n\t\t\tint[] temp = dp.clone();\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tfor(int[] f : flights){\n\t\t\t\t\tint u = f[0];\n\t\t\t\t\tint v = f[1];\n\t\t\t\t\tint w = f[2];\n\t\t\t\t\tif(dp[u] != Integer.MAX_VALUE){\n\t\t\t\t\t\ttemp[v] = Math.min(temp[v], dp[u] + w);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp = temp;\n\t\t}\n\t\treturn dp[dst] == Integer.MAX_VALUE ? -1 : dp[dst];\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[][] flights = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tflights[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint src = in.nextInt();\n\t\tint dst = in.nextInt();\n\t\tint ans = findCheapestPrice(n, flights, src, dst, k);\n\t\tSystem.out.println(ans);\n\t}\n\tpublic static int findCheapestPrice(int n, int[][] flights, int src, int dst, int k){\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[src] = 0;\n\t\tfor(int i = 0; i < k + 1; i++){\n\t\t\tint[] temp = dp.clone();\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tfor(int[] flight : flights){\n\t\t\t\t\tint u = flight[0];\n\t\t\t\t\tint v = flight[1];\n\t\t\t\t\tint cost = flight[2];\n\t\t\t\t\tif(dp[u] != Integer.MAX_VALUE){\n\t\t\t\t\t\ttemp[v] = Math.min(temp[v], dp[u] + cost);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp = temp;\n\t\t}\n\t\treturn dp[dst] == Integer.MAX_VALUE ? -1 : dp[dst];\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[][] flights = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tflights[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint src = in.nextInt();\n\t\tint dst = in.nextInt();\n\t\tint ans = ksp(flights, src, dst, k);\n\t\tSystem.out.println(ans);\n\t}\n\tpublic static int ksp(int[][] flights, int src, int dst, int k){\n\t\tint[][] dp = new int[flights.length][k + 1];\n\t\tfor(int i = 0; i < flights.length; i++){\n\t\t\tdp[i][0] = flights[src][i];\n\t\t}\n\t\tfor(int j = 1; j <= k; j++){\n\t\t\tfor(int i = 0; i < flights.length; i++){\n\t\t\t\tfor(int m = 0; m < flights.length; m++){\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[m][j - 1] + flights[m][i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[dst][k];\n\t}\n}\n",
            "\tint findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\n\t\tint[] dp = new int[n];\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\n\t\tdp[src] = 0;\n\t\tfor (int i = 0; i <= K; i++) {\n\t\t\tint[] next = new int[n];\n\t\t\tArrays.fill(next, Integer.MAX_VALUE);\n\t\t\tfor (int[] f : flights) {\n\t\t\t\tint u = f[0], v = f[1], w = f[2];\n\t\t\t\tif (dp[u] != Integer.MAX_VALUE)\n\t\t\t\t\tnext[v] = Math.min(next[v], dp[u] + w);\n\t\t\t}\n\t\t\tdp = next;\n\t\t}\n\t\treturn dp[dst] == Integer.MAX_VALUE ? -1 : dp[dst];\n\t}\n}\n",
            "\tint findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\n\t\tint[] dp = new int[n];\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\n\t\tdp[src] = 0;\n\t\tfor (int i = 0; i <= K; i++) {\n\t\t\tint[] next = new int[n];\n\t\t\tArrays.fill(next, Integer.MAX_VALUE);\n\t\t\tfor (int[] f : flights) {\n\t\t\t\tint u = f[0], v = f[1], w = f[2];\n\t\t\t\tif (dp[u] != Integer.MAX_VALUE) {\n\t\t\t\t\tnext[v] = Math.min(next[v], dp[u] + w);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp = next;\n\t\t}\n\t\treturn dp[dst] == Integer.MAX_VALUE ? -1 : dp[dst];\n\t}\n}\n",
            "\tstatic int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\n\t\tint[] dp = new int[n];\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\n\t\tdp[src] = 0;\n\t\tfor (int i = 0; i <= K; i++) {\n\t\t\tint[] next = new int[n];\n\t\t\tArrays.fill(next, Integer.MAX_VALUE);\n\t\t\tfor (int[] f : flights) {\n\t\t\t\tint u = f[0], v = f[1], w = f[2];\n\t\t\t\tif (dp[u] != Integer.MAX_VALUE) {\n\t\t\t\t\tnext[v] = Math.min(next[v], dp[u] + w);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp = next;\n\t\t}\n\t\treturn dp[dst] == Integer.MAX_VALUE ? -1 : dp[dst];\n\t}\n}\n",
            "\tstatic int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {\n\t\tint[] dp = new int[n];\n\t\tArrays.fill(dp, Integer.MAX_VALUE);\n\t\tdp[src] = 0;\n\t\tfor (int i = 0; i <= K; i++) {\n\t\t\tint[] next = new int[n];\n\t\t\tArrays.fill(next, Integer.MAX_VALUE);\n\t\t\tfor (int[] f : flights) {\n\t\t\t\tint u = f[0], v = f[1], w = f[2];\n\t\t\t\tif (dp[u] != Integer.MAX_VALUE)\n\t\t\t\t\tnext[v] = Math.min(next[v], dp[u] + w);\n\t\t\t}\n\t\t\tdp = next;\n\t\t}\n\t\treturn dp[dst] == Integer.MAX_VALUE ? -1 : dp[dst];\n\t}\n}\n",
            "\tint findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n\t\tint[] dist = new int[n];\n\t\tArrays.fill(dist, Integer.MAX_VALUE);\n\t\tdist[src] = 0;\n\t\tPriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n\t\tpq.offer(new int[]{0, src});\n\t\twhile (!pq.isEmpty()) {\n\t\t\tint[] cur = pq.poll();\n\t\t\tint cost = cur[0];\n\t\t\tint u = cur[1];\n\t\t\tif (u == dst) return cost;\n\t\t\tif (cost > dist[u]) continue;\n\t\t\tfor (int[] edge : flights) {\n\t\t\t\tint v = edge[1];\n\t\t\t\tint price = edge[2];\n\t\t\t\tif (u == edge[0] && cost + price < dist[v]) {\n\t\t\t\t\tdist[v] = cost + price;\n\t\t\t\t\tpq.offer(new int[]{dist[v], v});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {\n\t\tint[] dp = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i] = Integer.MAX_VALUE;\n\t\t}\n\t\tdp[src] = 0;\n\t\tfor (int i = 0; i < k + 1; i++) {\n\t\t\tint[] temp = dp.clone();\n\t\t\tfor (int[] flight : flights) {\n\t\t\t\tint u = flight[0];\n\t\t\t\tint v = flight[1];\n\t\t\t\tint w = flight[2];\n\t\t\t\tif (dp[u] != Integer.MAX_VALUE) {\n\t\t\t\t\ttemp[v] = Math.min(temp[v], dp[u] + w);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdp = temp;\n\t\t}\n\t\treturn dp[dst] == Integer.MAX_VALUE ? -1 : dp[dst];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1290",
        "source": "leetcodeTitles",
        "source_id": "49",
        "url": "https://leetcode.com/problems/group-anagrams/",
        "language": "java",
        "query": "Group Anagrams",
        "snippets": [
            "\tList<List<String>> groupAnagrams(String[] strs) {\n\t\tList<List<String>> result = new ArrayList<List<String>>();\n\t\tif (strs == null || strs.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t\tfor (String str : strs) {\n\t\t\tchar[] chars = str.toCharArray();\n\t\t\tArrays.sort(chars);\n\t\t\tString key = new String(chars);\n\t\t\tif (!map.containsKey(key)) {\n\t\t\t\tmap.put(key, new ArrayList<String>());\n\t\t\t}\n\t\t\tmap.get(key).add(str);\n\t\t}\n\t\tfor (String key : map.keySet()) {\n\t\t\tresult.add(map.get(key));\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<String>> groupAnagrams(String[] strs) {\n\t\tList<List<String>> result = new ArrayList<List<String>>();\n\t\tif (strs == null || strs.length == 0)\n\t\t\treturn result;\n\t\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t\tfor (String str : strs) {\n\t\t\tchar[] chs = str.toCharArray();\n\t\t\tArrays.sort(chs);\n\t\t\tString key = new String(chs);\n\t\t\tif (!map.containsKey(key))\n\t\t\t\tmap.put(key, new ArrayList<String>());\n\t\t\tmap.get(key).add(str);\n\t\t}\n\t\tfor (String key : map.keySet())\n\t\t\tresult.add(map.get(key));\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<String>> groupAnagrams(String[] strs) {\n\t\tList<List<String>> result = new ArrayList<List<String>>();\n\t\tif (strs == null || strs.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t\tfor (String str : strs) {\n\t\t\tchar[] chars = str.toCharArray();\n\t\t\tArrays.sort(chars);\n\t\t\tString key = String.valueOf(chars);\n\t\t\tif (!map.containsKey(key)) {\n\t\t\t\tmap.put(key, new ArrayList<String>());\n\t\t\t}\n\t\t\tmap.get(key).add(str);\n\t\t}\n\t\tfor (String key : map.keySet()) {\n\t\t\tresult.add(map.get(key));\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<String>> groupAnagrams(String[] strs) {\n\t\tList<List<String>> result = new ArrayList<List<String>>();\n\t\tif (strs == null || strs.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t\tfor (String str : strs) {\n\t\t\tchar[] arr = str.toCharArray();\n\t\t\tArrays.sort(arr);\n\t\t\tString key = String.valueOf(arr);\n\t\t\tif (!map.containsKey(key)) {\n\t\t\t\tmap.put(key, new ArrayList<String>());\n\t\t\t}\n\t\t\tmap.get(key).add(str);\n\t\t}\n\t\tfor (List<String> list : map.values()) {\n\t\t\tresult.add(list);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<String>> groupAnagrams(String[] strs) {\n\t\tList<List<String>> result = new ArrayList<List<String>>();\n\t\tif(strs == null || strs.length == 0) return result;\n\t\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t\tfor(String str : strs){\n\t\t\tchar[] ch = str.toCharArray();\n\t\t\tArrays.sort(ch);\n\t\t\tString key = new String(ch);\n\t\t\tif(!map.containsKey(key)){\n\t\t\t\tList<String> list = new ArrayList<String>();\n\t\t\t\tlist.add(str);\n\t\t\t\tmap.put(key, list);\n\t\t\t}else{\n\t\t\t\tmap.get(key).add(str);\n\t\t\t}\n\t\t}\n\t\tfor(List<String> list : map.values()){\n\t\t\tresult.add(list);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<String>> groupAnagrams(String[] strs) {\n\t\tList<List<String>> result = new ArrayList<List<String>>();\n\t\tif(strs == null || strs.length == 0)\n\t\t\treturn result;\n\t\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t\tfor(String str : strs){\n\t\t\tchar[] chars = str.toCharArray();\n\t\t\tArrays.sort(chars);\n\t\t\tString key = new String(chars);\n\t\t\tif(map.containsKey(key)){\n\t\t\t\tmap.get(key).add(str);\n\t\t\t}else{\n\t\t\t\tList<String> list = new ArrayList<String>();\n\t\t\t\tlist.add(str);\n\t\t\t\tmap.put(key, list);\n\t\t\t}\n\t\t}\n\t\tfor(List<String> list : map.values()){\n\t\t\tresult.add(list);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] strs = {\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"};\n\t\tList<List<String>> list = groupAnagrams(strs);\n\t\tfor(List<String> l : list){\n\t\t\tfor(String s : l){\n\t\t\t\tSystem.out.print(s + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\tpublic static List<List<String>> groupAnagrams(String[] strs){\n\t\tList<List<String>> list = new ArrayList<List<String>>();\n\t\tif(strs == null || strs.length == 0){\n\t\t\treturn list;\n\t\t}\n\t\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t\tfor(String str : strs){\n\t\t\tchar[] ch = str.toCharArray();\n\t\t\tArrays.sort(ch);\n\t\t\tString key = new String(ch);\n\t\t\tif(map.containsKey(key)){\n\t\t\t\tmap.get(key).add(str);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tList<String> l = new ArrayList<String>();\n\t\t\t\tl.add(str);\n\t\t\t\tmap.put(key, l);\n\t\t\t}\n\t\t}\n\t\tfor(String key : map.keySet()){\n\t\t\tlist.add(map.get(key));\n\t\t}\n\t\treturn list;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1291",
        "source": "leetcodeTitles",
        "source_id": "540",
        "url": "https://leetcode.com/problems/single-element-in-a-sorted-array/",
        "language": "java",
        "query": "Single Element in a Sorted Array",
        "snippets": [
            "\tint singleNonDuplicate(int[] nums) {\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile (i < j) {\n\t\t\tint mid = (i + j) / 2;\n\t\t\tif (nums[mid] != nums[mid + 1] && nums[mid] != nums[mid - 1]) {\n\t\t\t\treturn nums[mid];\n\t\t\t} else if (nums[mid] == nums[mid + 1]) {\n\t\t\t\ti = mid + 1;\n\t\t\t} else {\n\t\t\t\tj = mid - 1;\n\t\t\t}\n\t\t}\n\t\treturn nums[i];\n\t}\n}\n",
            "\tstatic int singleNonDuplicate(int[] nums) {\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile (i < j) {\n\t\t\tint mid = (i + j) / 2;\n\t\t\tif (nums[mid] != nums[mid + 1] && nums[mid] != nums[mid - 1]) {\n\t\t\t\treturn nums[mid];\n\t\t\t} else if (nums[mid] == nums[mid + 1]) {\n\t\t\t\ti = mid + 1;\n\t\t\t} else {\n\t\t\t\tj = mid - 1;\n\t\t\t}\n\t\t}\n\t\treturn nums[i];\n\t}\n}\n",
            "\tstatic int singleNonDuplicate(int[] nums) {\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile (i < j) {\n\t\t\tint mid = i + (j - i) / 2;\n\t\t\tif (nums[mid] != nums[mid + 1] && nums[mid] != nums[mid - 1]) {\n\t\t\t\treturn nums[mid];\n\t\t\t} else if (nums[mid] == nums[mid + 1]) {\n\t\t\t\ti = mid + 1;\n\t\t\t} else {\n\t\t\t\tj = mid - 1;\n\t\t\t}\n\t\t}\n\t\treturn nums[i];\n\t}\n}\n",
            "\tstatic int singleNonDuplicate(int[] nums) {\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile (i < j) {\n\t\t\tint mid = (i + j) / 2;\n\t\t\tif (mid % 2 == 1) {\n\t\t\t\tmid--;\n\t\t\t}\n\t\t\tif (nums[mid] != nums[mid + 1]) {\n\t\t\t\tj = mid;\n\t\t\t} else {\n\t\t\t\ti = mid + 2;\n\t\t\t}\n\t\t}\n\t\treturn nums[i];\n\t}\n}\n",
            "\tstatic int singleNonDuplicate(int[] nums){\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile(i < j){\n\t\t\tint mid = (i + j) / 2;\n\t\t\tif(nums[mid] != nums[mid + 1] && nums[mid] != nums[mid - 1]){\n\t\t\t\treturn nums[mid];\n\t\t\t}\n\t\t\tif(nums[mid] == nums[mid + 1]){\n\t\t\t\ti = mid + 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj = mid - 1;\n\t\t\t}\n\t\t}\n\t\treturn nums[i];\n\t}\n}\n",
            "\tstatic int singleNonDuplicate(int[] nums){\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile(i < j){\n\t\t\tint mid = i + (j - i) / 2;\n\t\t\tif(nums[mid] != nums[mid - 1] && nums[mid] != nums[mid + 1]){\n\t\t\t\treturn nums[mid];\n\t\t\t}\n\t\t\tif(nums[mid] == nums[mid - 1]){\n\t\t\t\ti = mid + 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj = mid - 1;\n\t\t\t}\n\t\t}\n\t\treturn nums[i];\n\t}\n}\n",
            "\tstatic int singleNonDuplicate(int[] nums){\n\t\tint l = 0;\n\t\tint r = nums.length - 1;\n\t\twhile(l < r){\n\t\t\tint m = l + (r - l) / 2;\n\t\t\tif(m % 2 == 0){\n\t\t\t\tif(nums[m] == nums[m + 1]){\n\t\t\t\t\tl = m + 2;\n\t\t\t\t}else{\n\t\t\t\t\tr = m;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(nums[m] == nums[m - 1]){\n\t\t\t\t\tl = m + 1;\n\t\t\t\t}else{\n\t\t\t\t\tr = m - 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nums[l];\n\t}\n}\n",
            "\tstatic int find(int[] A, int target){\n\t\tint left = 0;\n\t\tint right = A.length - 1;\n\t\twhile(left <= right){\n\t\t\tint mid = (left + right) / 2;\n\t\t\tif(A[mid] == target) return mid;\n\t\t\tif(A[mid] < A[right]){\n\t\t\t\tif(A[mid] < target && target <= A[right]){\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t}else{\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tif(A[left] <= target && target < A[mid]){\n\t\t\t\t\tright = mid - 1;\n\t\t\t\t}else{\n\t\t\t\t\tleft = mid + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1292",
        "source": "leetcodeTitles",
        "source_id": "1560",
        "url": "https://leetcode.com/problems/most-visited-sector-in-a-circular-track/",
        "language": "java",
        "query": "Most Visited Sector in a Circular Track",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = a[(i + maxIndex) % n];\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = b[(i + maxIndex) % n];\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = c[(i + maxIndex) % n];\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = d[(i + maxIndex) % n];\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = e[(i + maxIndex) % n];\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = f[(i + maxIndex) % n];\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0;\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tint maxi = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(a[i]>max){\n\t\t\t\tmax = a[i];\n\t\t\t\tmaxi = i;\n\t\t\t}\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tb[i] = a[(i+maxi)%n];\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tc[i] = b[(i+maxi)%n];\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\td[i] = c[(i+maxi)%n];\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\te[i] = d[(i+maxi)%n];\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tf[i] = e[(i+maxi)%n];\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tg[i] = f[(i+maxi)%n];\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i=0;\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tint sum = 0;\n\t\t\t\tint k = i;\n\t\t\t\tint l = j;\n\t\t\t\twhile(k < n && l < m){\n\t\t\t\t\tsum += a[k] * b[l];\n\t\t\t\t\tk++;\n\t\t\t\t\tl++;\n\t\t\t\t}\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tint max_index = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(arr[i]>max){\n\t\t\t\tmax = arr[i];\n\t\t\t\tmax_index = i;\n\t\t\t}\n\t\t}\n\t\tint[] arr_new = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr_new[i] = arr[(i+max_index)%n];\n\t\t}\n\t\tint max_new = 0;\n\t\tint max_index_new = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(arr_new[i]>max_new){\n\t\t\t\tmax_new = arr_new[i];\n\t\t\t\tmax_index_new = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max_index_new+1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(arr[i]>max){\n\t\t\t\tmax = arr[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(i==maxIndex){\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(arr[i]>arr[maxIndex]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tfor(int i = 0; i < n; i++) {\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < n; j++) {\n\t\t\t\tif(i != j) {\n\t\t\t\t\tif(arr[i] == arr[j]) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max) {\n\t\t\t\tmax = count;\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(maxIndex);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1293",
        "source": "leetcodeTitles",
        "source_id": "415",
        "url": "https://leetcode.com/problems/add-strings/",
        "language": "java",
        "query": "Add Strings",
        "snippets": [
            "\tString addStrings(String num1, String num2){\n\t\tint len1 = num1.length();\n\t\tint len2 = num2.length();\n\t\tint len = Math.max(len1, len2);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < len; i++){\n\t\t\tint a = i < len1 ? num1.charAt(len1 - i - 1) - '0' : 0;\n\t\t\tint b = i < len2 ? num2.charAt(len2 - i - 1) - '0' : 0;\n\t\t\tint sum = a + b + carry;\n\t\t\tcarry = sum / 10;\n\t\t\tsb.append(sum % 10);\n\t\t}\n\t\tif(carry > 0) sb.append(carry);\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addStrings(String num1, String num2){\n\t\tint len1 = num1.length();\n\t\tint len2 = num2.length();\n\t\tint len = Math.max(len1, len2);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < len; i++){\n\t\t\tint a = i < len1 ? num1.charAt(len1 - i - 1) - '0' : 0;\n\t\t\tint b = i < len2 ? num2.charAt(len2 - i - 1) - '0' : 0;\n\t\t\tint sum = a + b + carry;\n\t\t\tsb.append(sum % 10);\n\t\t\tcarry = sum / 10;\n\t\t}\n\t\tif(carry > 0){\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addStrings(String num1, String num2) {\n\t\tint len1 = num1.length();\n\t\tint len2 = num2.length();\n\t\tint len = Math.max(len1, len2);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tint a = i < len1 ? num1.charAt(len1 - i - 1) - '0' : 0;\n\t\t\tint b = i < len2 ? num2.charAt(len2 - i - 1) - '0' : 0;\n\t\t\tint sum = a + b + carry;\n\t\t\tcarry = sum / 10;\n\t\t\tsb.append(sum % 10);\n\t\t}\n\t\tif (carry > 0) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addStrings(String num1, String num2) {\n\t\tint len1 = num1.length();\n\t\tint len2 = num2.length();\n\t\tint len = Math.max(len1, len2);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tint a = i < len1 ? num1.charAt(len1 - 1 - i) - '0' : 0;\n\t\t\tint b = i < len2 ? num2.charAt(len2 - 1 - i) - '0' : 0;\n\t\t\tint sum = a + b + carry;\n\t\t\tsb.append(sum % 10);\n\t\t\tcarry = sum / 10;\n\t\t}\n\t\tif (carry > 0) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addStrings(String num1, String num2) {\n\t\tint len1 = num1.length();\n\t\tint len2 = num2.length();\n\t\tint len = Math.max(len1, len2);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint carry = 0;\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tint a = i < len1 ? num1.charAt(len1 - 1 - i) - '0' : 0;\n\t\t\tint b = i < len2 ? num2.charAt(len2 - 1 - i) - '0' : 0;\n\t\t\tint sum = a + b + carry;\n\t\t\tsb.append(sum % 10);\n\t\t\tcarry = sum / 10;\n\t\t}\n\t\tif (carry > 0) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tstatic String addStrings(String num1, String num2) {\n\t\tint len1 = num1.length();\n\t\tint len2 = num2.length();\n\t\tint len = Math.max(len1, len2);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tint a = i < len1 ? num1.charAt(len1 - i - 1) - '0' : 0;\n\t\t\tint b = i < len2 ? num2.charAt(len2 - i - 1) - '0' : 0;\n\t\t\tint sum = a + b + carry;\n\t\t\tcarry = sum / 10;\n\t\t\tsb.append(sum % 10);\n\t\t}\n\t\tif (carry > 0) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tstatic String addStrings(String num1, String num2) {\n\t\tint len1 = num1.length();\n\t\tint len2 = num2.length();\n\t\tint len = Math.max(len1, len2);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tint a = i < len1 ? num1.charAt(len1 - 1 - i) - '0' : 0;\n\t\t\tint b = i < len2 ? num2.charAt(len2 - 1 - i) - '0' : 0;\n\t\t\tint sum = a + b + carry;\n\t\t\tcarry = sum / 10;\n\t\t\tsb.append(sum % 10);\n\t\t}\n\t\tif (carry > 0) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tstatic String addStrings(String a, String b){\n\t\tint aLen = a.length();\n\t\tint bLen = b.length();\n\t\tint maxLen = Math.max(aLen, bLen);\n\t\tint minLen = Math.min(aLen, bLen);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < maxLen; i++){\n\t\t\tint ai = i < aLen ? a.charAt(aLen - 1 - i) - '0' : 0;\n\t\t\tint bi = i < bLen ? b.charAt(bLen - 1 - i) - '0' : 0;\n\t\t\tint sum = ai + bi + carry;\n\t\t\tsb.append(sum % 10);\n\t\t\tcarry = sum / 10;\n\t\t}\n\t\tif(carry > 0){\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1294",
        "source": "leetcodeTitles",
        "source_id": "2166",
        "url": "https://leetcode.com/problems/design-bitset/",
        "language": "java",
        "query": "Design Bitset",
        "snippets": [
            "\tvoid method(){\n\t\tBitSet bs = new BitSet();\n\t\tbs.set(0);\n\t\tbs.set(1);\n\t\tbs.set(2);\n\t\tbs.set(3);\n\t\tbs.set(4);\n\t\tbs.set(5);\n\t\tbs.set(6);\n\t\tbs.set(7);\n\t\tbs.set(8);\n\t\tbs.set(9);\n\t\tbs.set(10);\n\t\tbs.set(11);\n\t\tbs.set(12);\n\t\tbs.set(13);\n\t\tbs.set(14);\n\t\tbs.set(15);\n\t\tbs.set(16);\n\t\tbs.set(17);\n\t\tbs.set(18);\n\t\tbs.set(19);\n\t\tbs.set(20);\n\t\tbs.set(21);\n\t\tbs.set(22);\n\t\tbs.set(23);\n\t\tbs.set(24);\n\t\tbs.set(25);\n\t\tbs.set(26);\n\t\tbs.set(27);\n\t\tbs.set(28);\n\t\tbs.set(29);\n\t\tbs.set(30);\n\t\tbs.set(31);\n\t\tbs.set(32);\n\t\tbs.set(33);\n\t\tbs.set(34);\n\t\tbs.set(35);\n\t\tbs.set(36);\n\t\tbs.set(37);\n\t\tbs.set(38);\n\t\tbs.set(39);\n\t\tbs.set(40);\n\t\tbs.set(41);\n\t\tbs.set(42);\n\t\tbs.set(43);\n\t\tbs.set(44);\n\t\tbs.set(45);\n\t\tbs.set(46);\n\t\tbs.set(47);\n\t\tbs.set(48);\n\t\tbs.set(49);\n\t\tbs.set(50);\n\t\tbs.set(51);\n\t\tbs.set(52);\n\t\tbs.set\n",
            "\tstatic void main(String[] args){\n\t\tBitSet bs = new BitSet(10);\n\t\tbs.set(0);\n\t\tbs.set(1);\n\t\tbs.set(2);\n\t\tbs.set(3);\n\t\tbs.set(4);\n\t\tbs.set(5);\n\t\tbs.set(6);\n\t\tbs.set(7);\n\t\tbs.set(8);\n\t\tbs.set(9);\n\t\tSystem.out.println(bs);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tBitSet bs = new BitSet();\n\t\tbs.set(0);\n\t\tbs.set(1);\n\t\tbs.set(2);\n\t\tbs.set(3);\n\t\tbs.set(4);\n\t\tbs.set(5);\n\t\tbs.set(6);\n\t\tbs.set(7);\n\t\tbs.set(8);\n\t\tbs.set(9);\n\t\tbs.set(10);\n\t\tbs.set(11);\n\t\tbs.set(12);\n\t\tbs.set(13);\n\t\tbs.set(14);\n\t\tbs.set(15);\n\t\tbs.set(16);\n\t\tbs.set(17);\n\t\tbs.set(18);\n\t\tbs.set(19);\n\t\tbs.set(20);\n\t\tbs.set(21);\n\t\tbs.set(22);\n\t\tbs.set(23);\n\t\tbs.set(24);\n\t\tbs.set(25);\n\t\tbs.set(26);\n\t\tbs.set(27);\n\t\tbs.set(28);\n\t\tbs.set(29);\n\t\tbs.set(30);\n\t\tbs.set(31);\n\t\tbs.set(32);\n\t\tbs.set(33);\n\t\tbs.set(34);\n\t\tbs.set(35);\n\t\tbs.set(36);\n\t\tbs.set(37);\n\t\tbs.set(38);\n\t\tbs.set(39);\n\t\tbs.set(40);\n\t\tbs.set(41);\n\t\tbs.set(42);\n\t\tbs.set(43);\n\t\tbs.set(44);\n\t\tbs.set(45);\n\t\tbs.set(46);\n\t\tbs.set(47);\n\t\tbs.set(48);\n\t\tbs.set(49);\n\t\tbs.set(50);\n\t\tbs.set(51);\n\t\tbs.set(52);\n",
            "\tvoid method(){\n\t\tBitSet bitset = new BitSet();\n\t\tbitset.set(0);\n\t\tbitset.set(1);\n\t\tbitset.set(2);\n\t\tbitset.set(3);\n\t\tbitset.set(4);\n\t\tbitset.set(5);\n\t\tbitset.set(6);\n\t\tbitset.set(7);\n\t\tbitset.set(8);\n\t\tbitset.set(9);\n\t\tbitset.set(10);\n\t\tbitset.set(11);\n\t\tbitset.set(12);\n\t\tbitset.set(13);\n\t\tbitset.set(14);\n\t\tbitset.set(15);\n\t\tbitset.set(16);\n\t\tbitset.set(17);\n\t\tbitset.set(18);\n\t\tbitset.set(19);\n\t\tbitset.set(20);\n\t\tbitset.set(21);\n\t\tbitset.set(22);\n\t\tbitset.set(23);\n\t\tbitset.set(24);\n\t\tbitset.set(25);\n\t\tbitset.set(26);\n\t\tbitset.set(27);\n\t\tbitset.set(28);\n\t\tbitset.set(29);\n\t\tbitset.set(30);\n\t\tbitset.set(31);\n\t\tbitset.set(32);\n\t\tbitset.set(33);\n\t\tbitset.set(34);\n\t\tbitset.set(35);\n\t\tbitset.set(36);\n\t\tbitset.set(37);\n\t\tbitset.set(38);\n\t\tbitset.set(39);\n\t\tbitset.set(40);\n\t\tbitset.set(41);\n\t\tbitset.set(42);\n\t\tbitset.set(43);\n\t\tbitset.set(44);\n\t\tbitset.set(45);\n\t\tbitset.set(46);\n\t\tbitset.set(47);\n",
            "\tint a;\n\tint b;\n\tint c;\n\tint d;\n\tint e;\n\tint f;\n\tint g;\n\tint h;\n\tint i;\n\tint j;\n\tint k;\n\tint l;\n\tint m;\n\tint n;\n\tint o;\n\tint p;\n\tint q;\n\tint r;\n\tint s;\n\tint t;\n\tint u;\n\tint v;\n\tint w;\n\tint x;\n\tint y;\n\tint z;\n\tint aa;\n\tint bb;\n\tint cc;\n\tint dd;\n\tint ee;\n\tint ff;\n\tint gg;\n\tint hh;\n\tint ii;\n\tint jj;\n\tint kk;\n\tint ll;\n\tint mm;\n\tint nn;\n\tint oo;\n\tint pp;\n\tint qq;\n\tint rr;\n\tint ss;\n\tint tt;\n\tint uu;\n\tint vv;\n\tint ww;\n\tint xx;\n\tint yy;\n\tint zz;\n\tint aaa;\n\tint bbb;\n\tint ccc;\n\tint ddd;\n\tint eee;\n\tint fff;\n\tint ggg;\n\tint hhh;\n\tint iii;\n"
        ],
        "results": 10
    },
    {
        "id": "1295",
        "source": "leetcodeTitles",
        "source_id": "576",
        "url": "https://leetcode.com/problems/out-of-boundary-paths/",
        "language": "java",
        "query": "Out of Boundary Paths",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[][] grid = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tSystem.out.println(findPaths(grid,1,1,1));\n\t}\n\tpublic static int findPaths(int[][] grid, int row, int col, int path){\n\t\tif(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length){\n\t\t\treturn 0;\n\t\t}\n\t\tif(grid[row][col] == 0){\n\t\t\treturn 0;\n\t\t}\n\t\tif(row == grid.length - 1 && col == grid[0].length - 1){\n\t\t\treturn 1;\n\t\t}\n\t\tint paths = 0;\n\t\tgrid[row][col] = 0;\n\t\tpaths += findPaths(grid,row + 1,col,path + 1);\n\t\tpaths += findPaths(grid,row,col + 1,path + 1);\n\t\tgrid[row][col] = path;\n\t\treturn paths;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] grid = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tSystem.out.println(outOfBoundaryPaths(grid,0,0,0));\n\t}\n\tpublic static int outOfBoundaryPaths(int[][] grid, int i, int j, int count){\n\t\tif(i == grid.length-1 && j == grid[0].length-1){\n\t\t\treturn count;\n\t\t}\n\t\tif(i < grid.length-1){\n\t\t\tcount = outOfBoundaryPaths(grid,i+1,j,count);\n\t\t}\n\t\tif(j < grid[0].length-1){\n\t\t\tcount = outOfBoundaryPaths(grid,i,j+1,count);\n\t\t}\n\t\tif(i > 0){\n\t\t\tcount = outOfBoundaryPaths(grid,i-1,j,count);\n\t\t}\n\t\tif(j > 0){\n\t\t\tcount = outOfBoundaryPaths(grid,i,j-1,count);\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] grid = {{1,2},{3,4}};\n\t\tSystem.out.println(countPaths(grid));\n\t}\n\tpublic static int countPaths(int[][] grid){\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tdp[0][0] = 1;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(grid[i][j] == 0){\n\t\t\t\t\tdp[i][j] = 0;\n\t\t\t\t}\n\t\t\t\telse if(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] grid = {{1,2},{3,4}};\n\t\tSystem.out.println(findPaths(grid,0,0,0));\n\t}\n\tpublic static int findPaths(int[][] grid, int i, int j, int path){\n\t\tif(i<0 || i>=grid.length || j<0 || j>=grid[0].length) return 0;\n\t\tif(grid[i][j]==1) return 0;\n\t\tif(i==grid.length-1 && j==grid[0].length-1) return 1;\n\t\tgrid[i][j] = 1;\n\t\tint paths = findPaths(grid,i+1,j,path+1) + findPaths(grid,i,j+1,path+1);\n\t\tgrid[i][j] = 0;\n\t\treturn paths;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] grid = {{1,2},{3,4}};\n\t\tSystem.out.println(new Clazz().findPaths(grid,0,0,0));\n\t}\n\tpublic int findPaths(int[][] grid, int i, int j, int path){\n\t\tif(i<0 || i>=grid.length || j<0 || j>=grid[0].length) return 0;\n\t\tif(grid[i][j]==1) return 0;\n\t\tif(i==grid.length-1 && j==grid[0].length-1) return 1;\n\t\tint res = 0;\n\t\tgrid[i][j] = 1;\n\t\tres += findPaths(grid,i+1,j,path+1);\n\t\tres += findPaths(grid,i-1,j,path+1);\n\t\tres += findPaths(grid,i,j+1,path+1);\n\t\tres += findPaths(grid,i,j-1,path+1);\n\t\tgrid[i][j] = 0;\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static void main(String[] args){\n\t\tint[][] grid = {{1,0,0,0},{1,1,0,0},{0,1,0,0}};\n\t\tint[][] grid2 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid3 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid4 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid5 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid6 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid7 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid8 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid9 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid10 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid11 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid12 = {{1,0,0,0},{1,1,0,0},{1,1,0,0}};\n\t\tint[][] grid13 = {{1,0,0,0},{1,1,0,\n",
            "\tstatic void main(String[] args){\n\t\tint[][] arr = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tSystem.out.println(arr[2][2]);\n\t}\n}\n",
            "\tint get(int[] A, int i, int j){\n\t\tif(i<0||j<0||i>=A.length||j>=A[0].length) return 0;\n\t\treturn A[i][j];\n\t}\n\tpublic\n\tint countPaths(int[] A, int i, int j){\n\t\tif(i==A.length-1&&j==A[0].length-1) return 1;\n\t\tint count=0;\n\t\tcount+=countPaths(A,i+1,j);\n\t\tcount+=countPaths(A,i,j+1);\n\t\treturn count;\n\t}\n}\n",
            "\tint get(int[] a, int x, int y){\n\t\tif(x<0||y<0||x>=a.length||y>=a[0].length) return 0;\n\t\treturn a[x][y];\n\t}\n\tpublic\n\tint countPaths(int[] a, int x, int y){\n\t\tif(x<0||y<0||x>=a.length||y>=a[0].length) return 0;\n\t\tif(x==a.length-1&&y==a[0].length-1) return 1;\n\t\treturn countPaths(a,x+1,y)+countPaths(a,x,y+1);\n\t}\n}\n",
            "\tint get(int[] arr, int n, int k){\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(arr[i] > arr[j]){\n\t\t\t\t\tdp[i] += dp[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1296",
        "source": "leetcodeTitles",
        "source_id": "1346",
        "url": "https://leetcode.com/problems/check-if-n-and-its-double-exist/",
        "language": "java",
        "query": "Check if N and Its Double Exist",
        "snippets": [
            "\tstatic boolean isDouble(int n){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*2==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static void main(String[] args){\n\t\tint n=Integer.parseInt(args[0]);\n\t\tif(isDouble(n))\n\t\t\tSystem.out.println(\"Yes\");\n\t\telse\n\t\t\tSystem.out.println(\"No\");\n\t}\n}\n",
            "\tstatic boolean isDouble(int n){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*2==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isN(int n){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*i==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isNAndDouble(int n){\n\t\treturn isN(n)&&isDouble(n);\n\t}\n}\n",
            "\tstatic boolean isDouble(int n){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*2==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isN(int n){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*i==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isN(int n,int d){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*d==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isN(int n,int d,int e){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*d==n&&i*e==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isN(int n,int d,int e,int f){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*d==n&&i*e==n&&i*f==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isN(int n,int d,int e,int f,int g){\n\t\tint i=1;\n\t\twhile(i<n){\n\t\t\tif(i*d==n&&i*e==n&&i*f==n&&i*g==n)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isN(int n,int d,int e,int f,int\n",
            "\tstatic boolean isDouble(int n){\n\t\tif(n==0)\n\t\t\treturn false;\n\t\tif(n==1)\n\t\t\treturn true;\n\t\tif(n==2)\n\t\t\treturn true;\n\t\tif(n==3)\n\t\t\treturn true;\n\t\tif(n==4)\n\t\t\treturn true;\n\t\tif(n==5)\n\t\t\treturn true;\n\t\tif(n==6)\n\t\t\treturn true;\n\t\tif(n==7)\n\t\t\treturn true;\n\t\tif(n==8)\n\t\t\treturn true;\n\t\tif(n==9)\n\t\t\treturn true;\n\t\tif(n==10)\n\t\t\treturn true;\n\t\tif(n==11)\n\t\t\treturn true;\n\t\tif(n==12)\n\t\t\treturn true;\n\t\tif(n==13)\n\t\t\treturn true;\n\t\tif(n==14)\n\t\t\treturn true;\n\t\tif(n==15)\n\t\t\treturn true;\n\t\tif(n==16)\n\t\t\treturn true;\n\t\tif(n==17)\n\t\t\treturn true;\n\t\tif(n==18)\n\t\t\treturn true;\n\t\tif(n==19)\n\t\t\treturn true;\n\t\tif(n==20)\n\t\t\treturn true;\n\t\tif(n==21)\n\t\t\treturn true;\n\t\tif(n==22)\n\t\t\treturn true;\n\t\tif(n==23)\n\t\t\treturn true;\n\t\tif(n==24)\n\t\t\treturn true;\n\t\tif(n==25)\n\t\t\treturn true;\n\t\tif(n==26)\n\t\t\treturn true;\n\t\tif(n==27)\n\t\t\treturn true;\n\t\tif(n==28)\n\t\t\treturn true;\n\t\tif(n==29)\n\t\t\treturn true;\n\t\tif(n==30)\n",
            "\tstatic boolean isDouble(int n){\n\t\tint m = n*2;\n\t\tif(m==n)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean check(int n){\n\t\tint i=1;\n\t\twhile(i*2<=n){\n\t\t\tif(n==i*2)\n\t\t\t\treturn true;\n\t\t\ti++;\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean check(int n){\n\t\tint m=n*2;\n\t\tif(m==n)\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean check(int n){\n\t\tint m = n*2;\n\t\tif(m<=0)\n\t\t\treturn false;\n\t\tif(m==n)\n\t\t\treturn false;\n\t\tif(m==1)\n\t\t\treturn false;\n\t\tif(m==2)\n\t\t\treturn false;\n\t\tif(m==3)\n\t\t\treturn false;\n\t\tif(m==4)\n\t\t\treturn false;\n\t\tif(m==5)\n\t\t\treturn false;\n\t\tif(m==6)\n\t\t\treturn false;\n\t\tif(m==7)\n\t\t\treturn false;\n\t\tif(m==8)\n\t\t\treturn false;\n\t\tif(m==9)\n\t\t\treturn false;\n\t\tif(m==10)\n\t\t\treturn false;\n\t\tif(m==11)\n\t\t\treturn false;\n\t\tif(m==12)\n\t\t\treturn false;\n\t\tif(m==13)\n\t\t\treturn false;\n\t\tif(m==14)\n\t\t\treturn false;\n\t\tif(m==15)\n\t\t\treturn false;\n\t\tif(m==16)\n\t\t\treturn false;\n\t\tif(m==17)\n\t\t\treturn false;\n\t\tif(m==18)\n\t\t\treturn false;\n\t\tif(m==19)\n\t\t\treturn false;\n\t\tif(m==20)\n\t\t\treturn false;\n\t\tif(m==21)\n\t\t\treturn false;\n\t\tif(m==22)\n\t\t\treturn false;\n\t\tif(m==23)\n\t\t\treturn false;\n\t\tif(m==24)\n\t\t\treturn false;\n\t\tif(m==25)\n\t\t\treturn false;\n\t\tif(m==26)\n\t\t\treturn false;\n\t\tif(m==27)\n\t\t\treturn false;\n\t\tif(m==28)\n\t\t\treturn false;\n"
        ],
        "results": 10
    },
    {
        "id": "1297",
        "source": "leetcodeTitles",
        "source_id": "1208",
        "url": "https://leetcode.com/problems/get-equal-substrings-within-budget/",
        "language": "java",
        "query": "Get Equal Substrings Within Budget",
        "snippets": [
            "\tint equalSubstring(String s, String t, int maxCost) {\n\t\tint n = s.length();\n\t\tint m = t.length();\n\t\tint[][] dp = new int[n+1][m+1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(s.charAt(i) == t.charAt(j)){\n\t\t\t\t\tdp[i+1][j+1] = dp[i][j] + 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i+1][j+1] = Math.max(dp[i+1][j], dp[i][j+1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i <= n; i++){\n\t\t\tfor(int j = 0; j <= m; j++){\n\t\t\t\tif(dp[i][j] > ans && dp[i][j] <= maxCost){\n\t\t\t\t\tans = dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int equalSubstring(String s, String t, int maxCost) {\n\t\tint n = s.length();\n\t\tint m = t.length();\n\t\tint[][] dp = new int[n+1][m+1];\n\t\tfor(int i = 0; i <= n; i++){\n\t\t\tfor(int j = 0; j <= m; j++){\n\t\t\t\tif(i == 0 || j == 0) dp[i][j] = 0;\n\t\t\t\telse{\n\t\t\t\t\tif(s.charAt(i-1) == t.charAt(j-1)) dp[i][j] = dp[i-1][j-1] + 1;\n\t\t\t\t\telse dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i <= n; i++){\n\t\t\tfor(int j = 0; j <= m; j++){\n\t\t\t\tif(dp[i][j] > res && dp[i][j] <= maxCost) res = dp[i][j];\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int equalSubstring(String s, String t, int maxCost) {\n\t\tint n = s.length();\n\t\tint m = t.length();\n\t\tint[][] dp = new int[n + 1][m + 1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= m; j++) {\n\t\t\t\tif (s.charAt(i - 1) == t.charAt(j - 1)) {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j - 1] + 1;\n\t\t\t\t} else {\n\t\t\t\t\tdp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tfor (int j = 0; j <= m; j++) {\n\t\t\t\tif (dp[i][j] <= maxCost) {\n\t\t\t\t\tres = Math.max(res, dp[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint equalSubstring(String s, String t, int maxCost) {\n\t\tint n = s.length();\n\t\tint[][] dp = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tdp[i][j] = maxCost + 1;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][i] = 0;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tdp[i][j] = Math.abs(s.charAt(i) - t.charAt(j)) + dp[i + 1][j - 1];\n\t\t\t\tfor (int k = i; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k + 1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint equalSubstring(String s, String t, int maxCost) {\n\t\tint n = s.length();\n\t\tint[] dp = new int[n];\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i] = Math.abs(s.charAt(i) - t.charAt(i));\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint cost = 0;\n\t\t\tfor (int j = i; j < n; j++) {\n\t\t\t\tcost += dp[j];\n\t\t\t\tif (cost > maxCost) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tans = Math.max(ans, j - i + 1);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint equalSubstring(String s, String t, int maxCost) {\n\t\tint n = s.length();\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tdp[i][j] = i == j ? 0 : Math.abs(s.charAt(i) - s.charAt(j));\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tint cost = 0;\n\t\t\t\tfor(int k = i; k <= j; k++){\n\t\t\t\t\tcost += dp[i][k];\n\t\t\t\t}\n\t\t\t\tif(cost <= maxCost){\n\t\t\t\t\tans = Math.max(ans, j - i + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint equalSubstring(String s, String t, int maxCost) {\n\t\tint len = s.length();\n\t\tint[] dp = new int[len];\n\t\tint res = 0;\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tdp[i] = Math.abs(s.charAt(i) - t.charAt(i));\n\t\t}\n\t\tfor (int i = 0; i < len; i++) {\n\t\t\tint sum = 0;\n\t\t\tfor (int j = i; j < len; j++) {\n\t\t\t\tsum += dp[j];\n\t\t\t\tif (sum > maxCost) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tres = Math.max(res, j - i + 1);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int equalSubstring(String s, String t, int maxCost) {\n\t\tint len = s.length();\n\t\tint[] dp = new int[len];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < len; i++){\n\t\t\tdp[i] = Math.abs(s.charAt(i) - t.charAt(i));\n\t\t\tif(dp[i] > max) max = dp[i];\n\t\t}\n\t\tif(max <= maxCost) return len;\n\t\tint[] dp2 = new int[len];\n\t\tdp2[0] = dp[0];\n\t\tfor(int i = 1; i < len; i++){\n\t\t\tdp2[i] = dp2[i - 1] + dp[i];\n\t\t}\n\t\tint[] dp3 = new int[len];\n\t\tdp3[len - 1] = dp[len - 1];\n\t\tfor(int i = len - 2; i >= 0; i--){\n\t\t\tdp3[i] = dp3[i + 1] + dp[i];\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < len; i++){\n\t\t\tint left = i;\n\t\t\tint right = i;\n\t\t\tint sum = dp[i];\n\t\t\twhile(left >= 0 && right < len && sum <= maxCost){\n\t\t\t\tsum += dp[right];\n\t\t\t\tsum -= dp[left];\n\t\t\t\tans = Math.max(ans, right - left + 1);\n\t\t\t\tleft--;\n\t\t\t\tright++;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int equalSubstring(String s, String t, int maxCost) {\n\t\tint res = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint cost = 0;\n\t\twhile (i < s.length() && j < t.length()) {\n\t\t\tif (s.charAt(i) == t.charAt(j)) {\n\t\t\t\tcost++;\n\t\t\t\tif (cost > maxCost) {\n\t\t\t\t\tcost = 0;\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcost = 0;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minSubstringLen(String s, int k) {\n\t\tint n = s.length();\n\t\tint ans = n;\n\t\tint[] cnt = new int[26];\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tfor (int j = 0; j < 26; ++j)\n\t\t\t\tcnt[j] = 0;\n\t\t\tfor (int j = i; j < n; ++j) {\n\t\t\t\tcnt[s.charAt(j) - 'a']++;\n\t\t\t\tif (j - i + 1 > k)\n\t\t\t\t\tcnt[s.charAt(i) - 'a']--;\n\t\t\t\tif (j - i + 1 == k) {\n\t\t\t\t\tint sum = 0;\n\t\t\t\t\tfor (int jj = 0; jj < 26; ++jj)\n\t\t\t\t\t\tsum += cnt[jj] * cnt[jj];\n\t\t\t\t\tans = Math.min(ans, sum);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans == n ? -1 : ans;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1298",
        "source": "leetcodeTitles",
        "source_id": "1786",
        "url": "https://leetcode.com/problems/number-of-restricted-paths-from-first-to-last-node/",
        "language": "java",
        "query": "Number of Restricted Paths From First to Last Node",
        "snippets": [
            "\tint numRestrictedPaths(int[] graph, int start, int end){\n\t\tint n = graph.length;\n\t\tint[] dp = new int[n];\n\t\tArrays.fill(dp, 1);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(i == start) continue;\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(j == i) continue;\n\t\t\t\tif(graph[i] == graph[j]){\n\t\t\t\t\tdp[i] += dp[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[end];\n\t}\n}\n",
            "\tint numRestrictedPaths(int[] graph, int start, int end){\n\t\tint n = graph.length;\n\t\tint[] dp = new int[n];\n\t\tArrays.fill(dp, -1);\n\t\treturn dfs(graph, start, end, dp);\n\t}\n\tpublic int dfs(int[] graph, int start, int end, int[] dp){\n\t\tif(start == end) return 1;\n\t\tif(dp[start] != -1) return dp[start];\n\t\tint count = 0;\n\t\tfor(int i = 0; i < graph.length; i++){\n\t\t\tif(graph[start] == graph[i]){\n\t\t\t\tcount += dfs(graph, i, end, dp);\n\t\t\t}\n\t\t}\n\t\tdp[start] = count;\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countPaths(int[][] graph, int start, int end){\n\t\tint[] visited = new int[graph.length];\n\t\treturn countPaths(graph, start, end, visited, 0);\n\t}\n\tpublic\n\tstatic int countPaths(int[][] graph, int start, int end, int[] visited, int count){\n\t\tif(start == end){\n\t\t\treturn 1;\n\t\t}\n\t\tvisited[start] = 1;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < graph[start].length; i++){\n\t\t\tif(graph[start][i] == 1 && visited[i] == 0){\n\t\t\t\tsum += countPaths(graph, i, end, visited, count + 1);\n\t\t\t}\n\t\t}\n\t\tvisited[start] = 0;\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static void main(String[] args){\n\t\tint[][] graph = {{0,1,1,0},\n\t\t\t\t\t\t {1,0,1,0},\n\t\t\t\t\t\t {1,1,0,1},\n\t\t\t\t\t\t {0,0,1,0}};\n\t\tint n = graph.length;\n\t\tint[] visited = new int[n];\n\t\tint[] path = new int[n];\n\t\tint[] path_count = new int[n];\n\t\tint[] path_count_final = new int[n];\n\t\tint[] path_count_final_final = new int[n];\n\t\tint[] path_count_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final_final_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final_final_final_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final_final_final_final_final_final_final_final = new int[n];\n\t\tint[] path_count_final_final_final_final_final_final_final_final_final_final_final_final_final = new int[n];\n",
            "\tstatic int count = 0;\n\tpublic static void main(String[] args){\n\t\tint[][] graph = {{0,1,0,0,0},\n\t\t\t\t\t\t {1,0,1,0,0},\n\t\t\t\t\t\t {0,1,0,1,0},\n\t\t\t\t\t\t {0,0,1,0,1},\n\t\t\t\t\t\t {0,0,0,1,0}};\n\t\tint[] visited = new int[graph.length];\n\t\tint[] path = new int[graph.length];\n\t\tint[] path_length = new int[graph.length];\n\t\tint[] path_count = new int[graph.length];\n\t\tint[] path_count_final = new int[graph.length];\n\t\tint[] path_count_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final_final_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final_final_final_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final_final_final_final_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final_final_final_final_final_final_final_final = new int[graph.length];\n\t\tint[] path_count_final_final_final_final_final_final\n",
            "\tint numOfPaths(int[][] graph, int start, int end){\n\t\tint[] visited = new int[graph.length];\n\t\treturn numOfPaths(graph, start, end, visited);\n\t}\n\tpublic int numOfPaths(int[][] graph, int start, int end, int[] visited){\n\t\tif(start == end){\n\t\t\treturn 1;\n\t\t}\n\t\tvisited[start] = 1;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < graph[start].length; i++){\n\t\t\tif(graph[start][i] == 1 && visited[i] == 0){\n\t\t\t\tcount += numOfPaths(graph, i, end, visited);\n\t\t\t}\n\t\t}\n\t\tvisited[start] = 0;\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static void main(String[] args){\n\t\tint[][] graph = {{0,1,0,0},{1,0,1,0},{0,1,0,1},{0,0,1,0}};\n\t\tint start = 0;\n\t\tint end = 3;\n\t\tint[] visited = new int[graph.length];\n\t\tint[] path = new int[graph.length];\n\t\tint[] path_length = new int[graph.length];\n\t\tfor(int i = 0; i < graph.length; i++){\n\t\t\tpath_length[i] = -1;\n\t\t}\n\t\tpath_length[start] = 0;\n\t\tpath[start] = start;\n\t\tvisited[start] = 1;\n\t\tdfs(graph,start,end,visited,path,path_length);\n\t\tSystem.out.println(count);\n\t}\n\tpublic static void dfs(int[][] graph, int start, int end, int[] visited, int[] path, int[] path_length){\n\t\tif(start == end){\n\t\t\tcount++;\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = 0; i < graph.length; i++){\n\t\t\tif(graph[start][i] == 1 && visited[i] == 0){\n\t\t\t\tpath_length[i] = path_length[start] + 1;\n\t\t\t\tpath[i] = start;\n\t\t\t\tvisited[i] = 1;\n\t\t\t\tdfs(graph,i,end,visited,path,path_length);\n\t\t\t\tvisited[i] = 0;\n\t\t\t\tpath_length[i] = -1;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic int countPaths(int[][] graph, int src, int dest){\n\t\tint n = graph.length;\n\t\tint[] dp = new int[n];\n\t\tdp[src] = 1;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tdp[j] += dp[i] * graph[i][j];\n\t\t\t}\n\t\t}\n\t\treturn dp[dest];\n\t}\n}\n",
            "\tstatic int numRestrictedPaths(int[][] graph, int start, int end){\n\t\tint n = graph.length;\n\t\tint[] dist = new int[n];\n\t\tint[] prev = new int[n];\n\t\tint[] q = new int[n];\n\t\tint qh = 0, qt = 0;\n\t\tq[qt++] = start;\n\t\tdist[start] = 0;\n\t\tprev[start] = -1;\n\t\twhile(qh < qt){\n\t\t\tint cur = q[qh++];\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tif(graph[cur][i] == 1 && dist[i] == 0){\n\t\t\t\t\tdist[i] = dist[cur] + 1;\n\t\t\t\t\tprev[i] = cur;\n\t\t\t\t\tq[qt++] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(dist[i] == 0) continue;\n\t\t\tif(i == end) ans++;\n\t\t\telse{\n\t\t\t\tint j = i;\n\t\t\t\twhile(prev[j] != -1){\n\t\t\t\t\tj = prev[j];\n\t\t\t\t\tif(j == start) ans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int count=0;\n\tpublic static void main(String[] args) {\n\t\tint[][] graph = {{0,1,0,1},{1,0,1,1},{0,1,0,1},{1,1,1,0}};\n\t\tint[] visited = new int[graph.length];\n\t\tint[] path = new int[graph.length];\n\t\tint start = 0;\n\t\tint end = 3;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n"
        ],
        "results": 10
    },
    {
        "id": "1299",
        "source": "leetcodeTitles",
        "source_id": "62",
        "url": "https://leetcode.com/problems/unique-paths/",
        "language": "java",
        "query": "Unique Paths",
        "snippets": [
            "\tint uniquePaths(int m, int n) {\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[0][i] = 1;\n\t\t}\n\t\tfor(int i = 1; i < m; i++){\n\t\t\tfor(int j = 1; j < n; j++){\n\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1];\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n}\n",
            "\tstatic int uniquePaths(int m, int n) {\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[0][i] = 1;\n\t\t}\n\t\tfor(int i = 1; i < m; i++){\n\t\t\tfor(int j = 1; j < n; j++){\n\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1];\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1300",
        "source": "leetcodeTitles",
        "source_id": "40",
        "url": "https://leetcode.com/problems/combination-sum-ii/",
        "language": "java",
        "query": "Combination Sum II",
        "snippets": [
            "\tList<List<Integer>> combinationSum2(int[] candidates, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (candidates == null || candidates.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(candidates);\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\thelper(candidates, target, 0, list, result);\n\t\treturn result;\n\t}\n\tprivate void helper(int[] candidates, int target, int start, List<Integer> list, List<List<Integer>> result) {\n\t\tif (target == 0) {\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = start; i < candidates.length; i++) {\n\t\t\tif (i > start && candidates[i] == candidates[i - 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidates[i] <= target) {\n\t\t\t\tlist.add(candidates[i]);\n\t\t\t\thelper(candidates, target - candidates[i], i + 1, list, result);\n\t\t\t\tlist.remove(list.size() - 1);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> combinationSum2(int[] candidates, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (candidates == null || candidates.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(candidates);\n\t\thelper(candidates, target, 0, new ArrayList<Integer>(), result);\n\t\treturn result;\n\t}\n\tpublic void helper(int[] candidates, int target, int start, List<Integer> list, List<List<Integer>> result) {\n\t\tif (target == 0) {\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = start; i < candidates.length; i++) {\n\t\t\tif (i > start && candidates[i] == candidates[i - 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidates[i] > target) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlist.add(candidates[i]);\n\t\t\thelper(candidates, target - candidates[i], i + 1, list, result);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> combinationSum2(int[] candidates, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (candidates == null || candidates.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(candidates);\n\t\thelper(candidates, target, 0, new ArrayList<Integer>(), result);\n\t\treturn result;\n\t}\n\tprivate void helper(int[] candidates, int target, int start, List<Integer> list, List<List<Integer>> result) {\n\t\tif (target == 0) {\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor (int i = start; i < candidates.length; i++) {\n\t\t\tif (i > start && candidates[i] == candidates[i - 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (candidates[i] > target) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlist.add(candidates[i]);\n\t\t\thelper(candidates, target - candidates[i], i + 1, list, result);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> combinationSum2(int[] candidates, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(candidates == null || candidates.length == 0) return result;\n\t\tArrays.sort(candidates);\n\t\thelper(candidates, target, 0, new ArrayList<Integer>(), result);\n\t\treturn result;\n\t}\n\tpublic void helper(int[] candidates, int target, int start, List<Integer> list, List<List<Integer>> result){\n\t\tif(target == 0){\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = start; i < candidates.length; i++){\n\t\t\tif(i > start && candidates[i] == candidates[i-1]) continue;\n\t\t\tif(candidates[i] > target) break;\n\t\t\tlist.add(candidates[i]);\n\t\t\thelper(candidates, target - candidates[i], i + 1, list, result);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> combinationSum2(int[] candidates, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(candidates == null || candidates.length == 0)\n\t\t\treturn result;\n\t\tArrays.sort(candidates);\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\thelper(candidates, target, 0, list, result);\n\t\treturn result;\n\t}\n\tpublic void helper(int[] candidates, int target, int start, List<Integer> list, List<List<Integer>> result){\n\t\tif(target == 0){\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = start; i < candidates.length; i++){\n\t\t\tif(i > start && candidates[i] == candidates[i-1])\n\t\t\t\tcontinue;\n\t\t\tif(candidates[i] > target)\n\t\t\t\tbreak;\n\t\t\tlist.add(candidates[i]);\n\t\t\thelper(candidates, target - candidates[i], i + 1, list, result);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> combinationSum2(int[] candidates, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(candidates == null || candidates.length == 0) return result;\n\t\tArrays.sort(candidates);\n\t\thelper(result, new ArrayList<Integer>(), candidates, target, 0);\n\t\treturn result;\n\t}\n\tpublic void helper(List<List<Integer>> result, List<Integer> list, int[] candidates, int target, int start){\n\t\tif(target == 0){\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = start; i < candidates.length; i++){\n\t\t\tif(i > start && candidates[i] == candidates[i-1]) continue;\n\t\t\tif(candidates[i] > target) break;\n\t\t\tlist.add(candidates[i]);\n\t\t\thelper(result, list, candidates, target - candidates[i], i + 1);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> combinationSum2(int[] candidates, int target) {\n\t\tList<List<Integer>> res = new ArrayList<List<Integer>>();\n\t\tif(candidates == null || candidates.length == 0) return res;\n\t\tArrays.sort(candidates);\n\t\thelper(candidates, target, 0, new ArrayList<Integer>(), res);\n\t\treturn res;\n\t}\n\tpublic void helper(int[] candidates, int target, int index, List<Integer> list, List<List<Integer>> res){\n\t\tif(target == 0){\n\t\t\tres.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = index; i < candidates.length; i++){\n\t\t\tif(i > index && candidates[i] == candidates[i - 1]) continue;\n\t\t\tif(candidates[i] > target) break;\n\t\t\tlist.add(candidates[i]);\n\t\t\thelper(candidates, target - candidates[i], i + 1, list, res);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1301",
        "source": "leetcodeTitles",
        "source_id": "2089",
        "url": "https://leetcode.com/problems/find-target-indices-after-sorting-array/",
        "language": "java",
        "query": "Find Target Indices After Sorting Array",
        "snippets": [
            "\tstatic int[] findTargetIndices(int[] nums, int target) {\n\t\tint[] result = new int[2];\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile (i < j) {\n\t\t\tint sum = nums[i] + nums[j];\n\t\t\tif (sum == target) {\n\t\t\t\tresult[0] = i;\n\t\t\t\tresult[1] = j;\n\t\t\t\tbreak;\n\t\t\t} else if (sum < target) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] findTargetIndices(int[] nums, int target) {\n\t\tint[] result = new int[2];\n\t\tint left = 0;\n\t\tint right = nums.length - 1;\n\t\twhile (left < right) {\n\t\t\tint sum = nums[left] + nums[right];\n\t\t\tif (sum == target) {\n\t\t\t\tresult[0] = left;\n\t\t\t\tresult[1] = right;\n\t\t\t\treturn result;\n\t\t\t} else if (sum < target) {\n\t\t\t\tleft++;\n\t\t\t} else {\n\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] findTargetIndices(int[] nums, int target) {\n\t\tint[] result = new int[2];\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile (i < j) {\n\t\t\tint sum = nums[i] + nums[j];\n\t\t\tif (sum == target) {\n\t\t\t\tresult[0] = i;\n\t\t\t\tresult[1] = j;\n\t\t\t\treturn result;\n\t\t\t} else if (sum < target) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint[] findTargetIndices(int[] nums, int target) {\n\t\tint[] result = new int[2];\n\t\tint i = 0;\n\t\tint j = nums.length - 1;\n\t\twhile (i < j) {\n\t\t\tif (nums[i] + nums[j] == target) {\n\t\t\t\tresult[0] = i;\n\t\t\t\tresult[1] = j;\n\t\t\t\treturn result;\n\t\t\t} else if (nums[i] + nums[j] < target) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] findTargetIndices(int[] arr, int target){\n\t\tint[] result = new int[2];\n\t\tint left = 0;\n\t\tint right = arr.length - 1;\n\t\twhile(left < right){\n\t\t\tint sum = arr[left] + arr[right];\n\t\t\tif(sum == target){\n\t\t\t\tresult[0] = left;\n\t\t\t\tresult[1] = right;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\telse if(sum < target){\n\t\t\t\tleft++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n}\n",
            "\tint[] findTargetIndices(int[] nums, int target) {\n\t\tint[] result = new int[2];\n\t\tint left = 0;\n\t\tint right = nums.length - 1;\n\t\twhile (left < right) {\n\t\t\tint sum = nums[left] + nums[right];\n\t\t\tif (sum == target) {\n\t\t\t\tresult[0] = left;\n\t\t\t\tresult[1] = right;\n\t\t\t\treturn result;\n\t\t\t} else if (sum < target) {\n\t\t\t\tleft++;\n\t\t\t} else {\n\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tvoid findTargetIndices(int[] arr, int target){\n\t\tint left = 0;\n\t\tint right = arr.length - 1;\n\t\twhile(left < right){\n\t\t\tint sum = arr[left] + arr[right];\n\t\t\tif(sum == target){\n\t\t\t\tSystem.out.println(left + \" \" + right);\n\t\t\t\tleft++;\n\t\t\t\tright--;\n\t\t\t}\n\t\t\telse if(sum < target){\n\t\t\t\tleft++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tright--;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void findTargetIndices(int[] arr, int target){\n\t\tint start = 0;\n\t\tint end = arr.length - 1;\n\t\twhile(start < end){\n\t\t\tint sum = arr[start] + arr[end];\n\t\t\tif(sum == target){\n\t\t\t\tSystem.out.println(start + \" \" + end);\n\t\t\t\tstart++;\n\t\t\t\tend--;\n\t\t\t}\n\t\t\telse if(sum < target){\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tend--;\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint target = 15;\n\t\tfindTargetIndices(arr, target);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1302",
        "source": "leetcodeTitles",
        "source_id": "67",
        "url": "https://leetcode.com/problems/add-binary/",
        "language": "java",
        "query": "Add Binary",
        "snippets": [
            "\tString addBinary(String a, String b) {\n\t\tint aLen = a.length();\n\t\tint bLen = b.length();\n\t\tint maxLen = Math.max(aLen, bLen);\n\t\tint minLen = Math.min(aLen, bLen);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < maxLen - minLen; i++) {\n\t\t\tsb.append(\"0\");\n\t\t}\n\t\tif (aLen > bLen) {\n\t\t\tb = sb.toString() + b;\n\t\t} else {\n\t\t\ta = sb.toString() + a;\n\t\t}\n\t\tfor (int i = maxLen - 1; i >= 0; i--) {\n\t\t\tint ai = a.charAt(i) - '0';\n\t\t\tint bi = b.charAt(i) - '0';\n\t\t\tint sum = ai + bi + carry;\n\t\t\tif (sum >= 2) {\n\t\t\t\tcarry = 1;\n\t\t\t\tsum -= 2;\n\t\t\t} else {\n\t\t\t\tcarry = 0;\n\t\t\t}\n\t\t\tsb.append(sum);\n\t\t}\n\t\tif (carry == 1) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addBinary(String a, String b) {\n\t\tint aLen = a.length();\n\t\tint bLen = b.length();\n\t\tint maxLen = Math.max(aLen, bLen);\n\t\tint minLen = Math.min(aLen, bLen);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < maxLen - minLen; i++) {\n\t\t\tsb.append(\"0\");\n\t\t}\n\t\tif (aLen > bLen) {\n\t\t\tb = sb.toString() + b;\n\t\t} else {\n\t\t\ta = sb.toString() + a;\n\t\t}\n\t\tfor (int i = maxLen - 1; i >= 0; i--) {\n\t\t\tint ai = a.charAt(i) - '0';\n\t\t\tint bi = b.charAt(i) - '0';\n\t\t\tint sum = ai + bi + carry;\n\t\t\tif (sum >= 2) {\n\t\t\t\tcarry = 1;\n\t\t\t\tsum -= 2;\n\t\t\t} else {\n\t\t\t\tcarry = 0;\n\t\t\t}\n\t\t\tsb.append(sum);\n\t\t}\n\t\tif (carry == 1) {\n\t\t\tsb.append(\"1\");\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addBinary(String a, String b) {\n\t\tint aLen = a.length();\n\t\tint bLen = b.length();\n\t\tint maxLen = Math.max(aLen, bLen);\n\t\tint minLen = Math.min(aLen, bLen);\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < maxLen - minLen; i++) {\n\t\t\tsb.append(\"0\");\n\t\t}\n\t\tif (aLen > bLen) {\n\t\t\tb = sb.toString() + b;\n\t\t} else {\n\t\t\ta = sb.toString() + a;\n\t\t}\n\t\tfor (int i = maxLen - 1; i >= 0; i--) {\n\t\t\tint ai = a.charAt(i) - '0';\n\t\t\tint bi = b.charAt(i) - '0';\n\t\t\tint sum = ai + bi + carry;\n\t\t\tif (sum >= 2) {\n\t\t\t\tcarry = 1;\n\t\t\t\tsum -= 2;\n\t\t\t} else {\n\t\t\t\tcarry = 0;\n\t\t\t}\n\t\t\tsb.append(sum);\n\t\t}\n\t\tif (carry == 1) {\n\t\t\tsb.append(1);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addBinary(String a, String b) {\n\t\tint aLen = a.length();\n\t\tint bLen = b.length();\n\t\tint maxLen = Math.max(aLen, bLen);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint carry = 0;\n\t\tfor (int i = 0; i < maxLen; i++) {\n\t\t\tint ai = i < aLen ? a.charAt(aLen - 1 - i) - '0' : 0;\n\t\t\tint bi = i < bLen ? b.charAt(bLen - 1 - i) - '0' : 0;\n\t\t\tint sum = ai + bi + carry;\n\t\t\tsb.append(sum % 2);\n\t\t\tcarry = sum / 2;\n\t\t}\n\t\tif (carry > 0) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addBinary(String a, String b) {\n\t\tint i = a.length() - 1, j = b.length() - 1, carry = 0, sum = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile (i >= 0 || j >= 0) {\n\t\t\tsum = carry;\n\t\t\tif (i >= 0) {\n\t\t\t\tsum += a.charAt(i--) - '0';\n\t\t\t}\n\t\t\tif (j >= 0) {\n\t\t\t\tsum += b.charAt(j--) - '0';\n\t\t\t}\n\t\t\tcarry = sum / 2;\n\t\t\tsb.append(sum % 2);\n\t\t}\n\t\tif (carry > 0) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString addBinary(String a, String b) {\n\t\tint carry = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = a.length() - 1;\n\t\tint j = b.length() - 1;\n\t\twhile (i >= 0 || j >= 0) {\n\t\t\tint sum = carry;\n\t\t\tif (i >= 0) {\n\t\t\t\tsum += a.charAt(i--) - '0';\n\t\t\t}\n\t\t\tif (j >= 0) {\n\t\t\t\tsum += b.charAt(j--) - '0';\n\t\t\t}\n\t\t\tsb.append(sum % 2);\n\t\t\tcarry = sum / 2;\n\t\t}\n\t\tif (carry != 0) {\n\t\t\tsb.append(carry);\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1303",
        "source": "leetcodeTitles",
        "source_id": "46",
        "url": "https://leetcode.com/problems/permutations/",
        "language": "java",
        "query": "Permutations",
        "snippets": [
            "\tstatic void permute(int[] nums, int start, int end){\n\t\tif(start == end){\n\t\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\t\tSystem.out.print(nums[i] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\telse{\n\t\t\tfor(int i = start; i <= end; i++){\n\t\t\t\tswap(nums, start, i);\n\t\t\t\tpermute(nums, start + 1, end);\n\t\t\t\tswap(nums, start, i);\n\t\t\t}\n\t\t}\n\t}\n\tpublic\n\tstatic void swap(int[] nums, int i, int j){\n\t\tint temp = nums[i];\n\t\tnums[i] = nums[j];\n\t\tnums[j] = temp;\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] nums = {1, 2, 3};\n\t\tpermute(nums, 0, nums.length - 1);\n\t}\n}\n",
            "\tstatic void permute(int[] nums, int start, int end){\n\t\tif(start == end){\n\t\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\t\tSystem.out.print(nums[i]);\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\telse{\n\t\t\tfor(int i = start; i <= end; i++){\n\t\t\t\tswap(nums, start, i);\n\t\t\t\tpermute(nums, start + 1, end);\n\t\t\t\tswap(nums, start, i);\n\t\t\t}\n\t\t}\n\t}\n\tpublic\n\tstatic void swap(int[] nums, int i, int j){\n\t\tint temp = nums[i];\n\t\tnums[i] = nums[j];\n\t\tnums[j] = temp;\n\t}\n}\n",
            "\tstatic void permute(int[] a, int k, int n){\n\t\tif(k == n){\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tSystem.out.print(a[i] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\telse{\n\t\t\tfor(int i = k; i < n; i++){\n\t\t\t\tswap(a, k, i);\n\t\t\t\tpermute(a, k + 1, n);\n\t\t\t\tswap(a, k, i);\n\t\t\t}\n\t\t}\n\t}\n\tpublic\n\tstatic void swap(int[] a, int i, int j){\n\t\tint temp = a[i];\n\t\ta[i] = a[j];\n\t\ta[j] = temp;\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] a = {1, 2, 3, 4, 5};\n\t\tint n = a.length;\n\t\tpermute(a, 0, n);\n\t}\n}\n",
            "\tstatic void permute(int[] a, int k, int n){\n\t\tif(k == n){\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tSystem.out.print(a[i] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\telse{\n\t\t\tfor(int i = k; i <= n; i++){\n\t\t\t\tswap(a, k, i);\n\t\t\t\tpermute(a, k + 1, n);\n\t\t\t\tswap(a, k, i);\n\t\t\t}\n\t\t}\n\t}\n\tpublic\n\tstatic void swap(int[] a, int i, int j){\n\t\tint temp = a[i];\n\t\ta[i] = a[j];\n\t\ta[j] = temp;\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] a = {1, 2, 3, 4, 5};\n\t\tint n = a.length;\n\t\tpermute(a, 0, n - 1);\n\t}\n}\n",
            "\tstatic void permute(int[] a, int k, int n){\n\t\tif(k == n){\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tSystem.out.print(a[i] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\telse{\n\t\t\tfor(int i = k; i <= n; i++){\n\t\t\t\tswap(a, k, i);\n\t\t\t\tpermute(a, k + 1, n);\n\t\t\t\tswap(a, k, i);\n\t\t\t}\n\t\t}\n\t}\n\tpublic\n\tstatic void swap(int[] a, int i, int j){\n\t\tint temp = a[i];\n\t\ta[i] = a[j];\n\t\ta[j] = temp;\n\t}\n}\n",
            "\tstatic void permute(int[] nums, int start, int end){\n\t\tif(start == end){\n\t\t\tSystem.out.println(Arrays.toString(nums));\n\t\t}\n\t\telse{\n\t\t\tfor(int i = start; i <= end; i++){\n\t\t\t\tswap(nums, start, i);\n\t\t\t\tpermute(nums, start+1, end);\n\t\t\t\tswap(nums, start, i);\n\t\t\t}\n\t\t}\n\t}\n\tpublic\n\tstatic void swap(int[] nums, int i, int j){\n\t\tint temp = nums[i];\n\t\tnums[i] = nums[j];\n\t\tnums[j] = temp;\n\t}\n}\n",
            "\tstatic void permute(int[] nums, int start, int end){\n\t\tif(start == end){\n\t\t\tprint(nums);\n\t\t}\n\t\telse{\n\t\t\tfor(int i = start; i <= end; i++){\n\t\t\t\tswap(nums, start, i);\n\t\t\t\tpermute(nums, start+1, end);\n\t\t\t\tswap(nums, start, i);\n\t\t\t}\n\t\t}\n\t}\n\tpublic\n\tstatic void swap(int[] nums, int i, int j){\n\t\tint temp = nums[i];\n\t\tnums[i] = nums[j];\n\t\tnums[j] = temp;\n\t}\n\tpublic\n\tstatic void print(int[] nums){\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tSystem.out.print(nums[i] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tint[] nums = {1,2,3};\n\t\tpermute(nums, 0, nums.length-1);\n\t}\n}\n",
            "\tvoid permute(int[] nums){\n\t\tif(nums == null || nums.length == 0) return;\n\t\thelper(nums, 0);\n\t}\n\tpublic\n\tvoid helper(int[] nums, int start){\n\t\tif(start == nums.length - 1){\n\t\t\tprint(nums);\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = start; i < nums.length; i++){\n\t\t\tswap(nums, start, i);\n\t\t\thelper(nums, start + 1);\n\t\t\tswap(nums, start, i);\n\t\t}\n\t}\n\tpublic\n\tvoid swap(int[] nums, int i, int j){\n\t\tint temp = nums[i];\n\t\tnums[i] = nums[j];\n\t\tnums[j] = temp;\n\t}\n\tpublic\n\tvoid print(int[] nums){\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tSystem.out.print(nums[i] + \" \");\n\t\t}\n\t\tSystem.out.println();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1304",
        "source": "leetcodeTitles",
        "source_id": "1609",
        "url": "https://leetcode.com/problems/even-odd-tree/",
        "language": "java",
        "query": "Even Odd Tree",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(28);\n\t\troot.right.right\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(arr[i] % 2 == 0 && arr[j] % 2 == 0){\n\t\t\t\t\tcount[i]++;\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t\telse if(arr[i] % 2 == 1 && arr[j] % 2 == 1){\n\t\t\t\t\tcount[i]++;\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint odd = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(count[i] % 2 == 1){\n\t\t\t\todd++;\n\t\t\t}\n\t\t}\n\t\tif(odd == 0){\n\t\t\tSystem.out.println(\"YES\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint[] ans = new int[n];\n\t\tans[0] = 1;\n\t\tfor(int i=1;i<n;i++){\n\t\t\tans[i] = ans[i-1] + arr[i-1];\n\t\t}\n\t\tint[] ans2 = new int[n];\n\t\tans2[n-1] = 1;\n\t\tfor(int i=n-2;i>=0;i--){\n\t\t\tans2[i] = ans2[i+1] + arr[i+1];\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(ans[i] != ans2[i]){\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"YES\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint[] ans = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tans[i] = 0;\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint num = arr[i];\n\t\t\tint count = 0;\n\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\tif(num%2==0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tnum = num/2;\n\t\t\t}\n\t\t\tans[i] = count;\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tSystem.out.print(ans[i]+\" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = sc.next\n",
            "\tstatic boolean isEven(int n){\n\t\treturn n%2==0;\n\t}\n\tpublic\n\tstatic boolean isOdd(int n){\n\t\treturn !isEven(n);\n\t}\n\tpublic\n\tstatic boolean isEvenOddTree(TreeNode root){\n\t\tif(root==null)\n\t\t\treturn true;\n\t\tif(isEven(root.val)){\n\t\t\tif(isEven(root.left.val)&&isEven(root.right.val))\n\t\t\t\treturn isEvenOddTree(root.left)&&isEvenOddTree(root.right);\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t\telse{\n\t\t\tif(isOdd(root.left.val)&&isOdd(root.right.val))\n\t\t\t\treturn isEvenOddTree(root.left)&&isEvenOddTree(root.right);\n\t\t\telse\n\t\t\t\treturn false;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = in.next\n"
        ],
        "results": 10
    },
    {
        "id": "1305",
        "source": "leetcodeTitles",
        "source_id": "991",
        "url": "https://leetcode.com/problems/broken-calculator/",
        "language": "java",
        "query": "Broken Calculator",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint a = Integer.parseInt(args[0]);\n\t\tint b = Integer.parseInt(args[1]);\n\t\tint c = Integer.parseInt(args[2]);\n\t\tint d = Integer.parseInt(args[3]);\n\t\tint e = Integer.parseInt(args[4]);\n\t\tint f = Integer.parseInt(args[5]);\n\t\tint g = Integer.parseInt(args[6]);\n\t\tint h = Integer.parseInt(args[7]);\n\t\tint i = Integer.parseInt(args[8]);\n\t\tint j = Integer.parseInt(args[9]);\n\t\tint k = Integer.parseInt(args[10]);\n\t\tint l = Integer.parseInt(args[11]);\n\t\tint m = Integer.parseInt(args[12]);\n\t\tint n = Integer.parseInt(args[13]);\n\t\tint o = Integer.parseInt(args[14]);\n\t\tint p = Integer.parseInt(args[15]);\n\t\tint q = Integer.parseInt(args[16]);\n\t\tint r = Integer.parseInt(args[17]);\n\t\tint s = Integer.parseInt(args[18]);\n\t\tint t = Integer.parseInt(args[19]);\n\t\tint u = Integer.parseInt(args[20]);\n\t\tint v = Integer.parseInt(args[21]);\n\t\tint w = Integer.parseInt(args[22]);\n\t\tint x = Integer.parseInt(args[23]);\n\t\tint y = Integer.parseInt(args[24]);\n\t\tint z = Integer.parseInt(args[25]);\n\t\tint aa = Integer.parseInt(args[26]);\n\t\tint bb = Integer.parseInt(args[27]);\n\t\tint cc = Integer.parseInt(args[28]);\n\t\tint dd = Integer.parseInt(args[29]);\n\t\tint ee = Integer.parseInt(args[30]);\n\t\tint ff = Integer.parseInt(args[31]);\n\t\tint gg =\n",
            "\tstatic void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter a number: \");\n\t\tint num1 = input.nextInt();\n\t\tSystem.out.println(\"Enter another number: \");\n\t\tint num2 = input.nextInt();\n\t\tSystem.out.println(\"Enter an operator: \");\n\t\tString operator = input.next();\n\t\tint result = 0;\n\t\tif(operator.equals(\"+\")){\n\t\t\tresult = num1 + num2;\n\t\t}\n\t\telse if(operator.equals(\"-\")){\n\t\t\tresult = num1 - num2;\n\t\t}\n\t\telse if(operator.equals(\"*\")){\n\t\t\tresult = num1 * num2;\n\t\t}\n\t\telse if(operator.equals(\"/\")){\n\t\t\tresult = num1 / num2;\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Invalid operator\");\n\t\t}\n\t\tSystem.out.println(\"The result is \" + result);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter a number: \");\n\t\tint num1 = input.nextInt();\n\t\tSystem.out.println(\"Enter another number: \");\n\t\tint num2 = input.nextInt();\n\t\tSystem.out.println(\"Enter an operator: \");\n\t\tString operator = input.next();\n\t\tint result = 0;\n\t\tif(operator.equals(\"+\")){\n\t\t\tresult = num1 + num2;\n\t\t}\n\t\telse if(operator.equals(\"-\")){\n\t\t\tresult = num1 - num2;\n\t\t}\n\t\telse if(operator.equals(\"*\")){\n\t\t\tresult = num1 * num2;\n\t\t}\n\t\telse if(operator.equals(\"/\")){\n\t\t\tresult = num1 / num2;\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Invalid operator\");\n\t\t}\n\t\tSystem.out.println(\"The result is: \" + result);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter a number: \");\n\t\tint num1 = input.nextInt();\n\t\tSystem.out.println(\"Enter another number: \");\n\t\tint num2 = input.nextInt();\n\t\tSystem.out.println(\"Enter an operator: \");\n\t\tString operator = input.next();\n\t\tif(operator.equals(\"+\")){\n\t\t\tSystem.out.println(num1 + num2);\n\t\t}\n\t\telse if(operator.equals(\"-\")){\n\t\t\tSystem.out.println(num1 - num2);\n\t\t}\n\t\telse if(operator.equals(\"*\")){\n\t\t\tSystem.out.println(num1 * num2);\n\t\t}\n\t\telse if(operator.equals(\"/\")){\n\t\t\tSystem.out.println(num1 / num2);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Invalid operator\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the first number: \");\n\t\tint num1 = input.nextInt();\n\t\tSystem.out.println(\"Enter the second number: \");\n\t\tint num2 = input.nextInt();\n\t\tSystem.out.println(\"Enter the operation: \");\n\t\tString op = input.next();\n\t\tif(op.equals(\"+\")){\n\t\t\tSystem.out.println(num1 + num2);\n\t\t}\n\t\telse if(op.equals(\"-\")){\n\t\t\tSystem.out.println(num1 - num2);\n\t\t}\n\t\telse if(op.equals(\"*\")){\n\t\t\tSystem.out.println(num1 * num2);\n\t\t}\n\t\telse if(op.equals(\"/\")){\n\t\t\tSystem.out.println(num1 / num2);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Invalid operator\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter a number: \");\n\t\tint num1 = input.nextInt();\n\t\tSystem.out.println(\"Enter another number: \");\n\t\tint num2 = input.nextInt();\n\t\tSystem.out.println(\"Enter an operator: \");\n\t\tString operator = input.next();\n\t\tif(operator.equals(\"+\")){\n\t\t\tSystem.out.println(num1 + num2);\n\t\t}\n\t\telse if(operator.equals(\"-\")){\n\t\t\tSystem.out.println(num1 - num2);\n\t\t}\n\t\telse if(operator.equals(\"*\")){\n\t\t\tSystem.out.println(num1 * num2);\n\t\t}\n\t\telse if(operator.equals(\"/\")){\n\t\t\tSystem.out.println(num1 / num2);\n\t\t}\n\t\telse if(operator.equals(\"%\")){\n\t\t\tSystem.out.println(num1 % num2);\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Invalid operator\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter a number: \");\n\t\tint num1 = input.nextInt();\n\t\tSystem.out.println(\"Enter another number: \");\n\t\tint num2 = input.nextInt();\n\t\tSystem.out.println(\"Enter an operator: \");\n\t\tString operator = input.next();\n\t\tint result = 0;\n\t\tif(operator.equals(\"+\")){\n\t\t\tresult = num1 + num2;\n\t\t}\n\t\telse if(operator.equals(\"-\")){\n\t\t\tresult = num1 - num2;\n\t\t}\n\t\telse if(operator.equals(\"*\")){\n\t\t\tresult = num1 * num2;\n\t\t}\n\t\telse if(operator.equals(\"/\")){\n\t\t\tresult = num1 / num2;\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Invalid operator\");\n\t\t}\n\t\tSystem.out.println(\"Result: \" + result);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter first number: \");\n\t\tint num1 = input.nextInt();\n\t\tSystem.out.println(\"Enter second number: \");\n\t\tint num2 = input.nextInt();\n\t\tSystem.out.println(\"Enter operation: \");\n\t\tString op = input.next();\n\t\tint result = 0;\n\t\tif(op.equals(\"+\")){\n\t\t\tresult = num1 + num2;\n\t\t}\n\t\telse if(op.equals(\"-\")){\n\t\t\tresult = num1 - num2;\n\t\t}\n\t\telse if(op.equals(\"*\")){\n\t\t\tresult = num1 * num2;\n\t\t}\n\t\telse if(op.equals(\"/\")){\n\t\t\tresult = num1 / num2;\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Invalid operation\");\n\t\t}\n\t\tSystem.out.println(\"Result: \" + result);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the first number\");\n\t\tint num1 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the second number\");\n\t\tint num2 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the third number\");\n\t\tint num3 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the fourth number\");\n\t\tint num4 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the fifth number\");\n\t\tint num5 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the sixth number\");\n\t\tint num6 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the seventh number\");\n\t\tint num7 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the eighth number\");\n\t\tint num8 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the ninth number\");\n\t\tint num9 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the tenth number\");\n\t\tint num10 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the eleventh number\");\n\t\tint num11 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the twelfth number\");\n\t\tint num12 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the thirteenth number\");\n\t\tint num13 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the fourteenth number\");\n\t\tint num14 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the fifteenth number\");\n\t\tint num15 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the sixteenth number\");\n\t\tint num16 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the seventeenth number\");\n\t\tint num17 = sc.nextInt();\n\t\tSystem.out.println(\"Enter the eighteenth number\");\n\t\tint num18 = sc.nextInt\n"
        ],
        "results": 10
    },
    {
        "id": "1306",
        "source": "leetcodeTitles",
        "source_id": "2053",
        "url": "https://leetcode.com/problems/kth-distinct-string-in-an-array/",
        "language": "java",
        "query": "Kth Distinct String in an Array",
        "snippets": [
            "\tint kthDistinct(String[] A, int k){\n\t\tint n = A.length;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < A[i].length(); j++){\n\t\t\t\tcount[A[i].charAt(j) - 'a']++;\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] >= k) res++;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint kthDistinct(String[] A, int k) {\n\t\tint n = A.length;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < A[i].length(); j++){\n\t\t\t\tcount[A[i].charAt(j) - 'a']++;\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] >= k){\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint kthDistinct(String[] a, int k) {\n\t\tint n = a.length;\n\t\tint[] cnt = new int[26];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < a[i].length(); j++) {\n\t\t\t\tcnt[a[i].charAt(j) - 'a']++;\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < 26; i++) {\n\t\t\tif (cnt[i] >= k) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint kthDistinct(String[] A, int k) {\n\t\tint n = A.length;\n\t\tint[] cnt = new int[26];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < A[i].length(); j++) {\n\t\t\t\tcnt[A[i].charAt(j) - 'a']++;\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < 26; i++) {\n\t\t\tif (cnt[i] >= k) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1307",
        "source": "leetcodeTitles",
        "source_id": "1971",
        "url": "https://leetcode.com/problems/find-if-path-exists-in-graph/",
        "language": "java",
        "query": "Find if Path Exists in Graph",
        "snippets": [
            "\tboolean isPathExists(Graph g, int src, int dest){\n\t\tif(src == dest){\n\t\t\treturn true;\n\t\t}\n\t\tboolean[] visited = new boolean[g.V];\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tq.add(src);\n\t\tvisited[src] = true;\n\t\twhile(!q.isEmpty()){\n\t\t\tint curr = q.poll();\n\t\t\tfor(int i = 0; i < g.V; i++){\n\t\t\t\tif(g.adj[curr][i] && !visited[i]){\n\t\t\t\t\tq.add(i);\n\t\t\t\t\tvisited[i] = true;\n\t\t\t\t\tif(i == dest){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean isPathExists(Graph g, int src, int dest){\n\t\tif(src == dest){\n\t\t\treturn true;\n\t\t}\n\t\tboolean[] visited = new boolean[g.V];\n\t\tQueue<Integer> q = new Queue<Integer>();\n\t\tq.enqueue(src);\n\t\tvisited[src] = true;\n\t\twhile(!q.isEmpty()){\n\t\t\tint u = q.dequeue();\n\t\t\tfor(int v : g.adj[u]){\n\t\t\t\tif(!visited[v]){\n\t\t\t\t\tq.enqueue(v);\n\t\t\t\t\tvisited[v] = true;\n\t\t\t\t\tif(v == dest){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean isPathExists(Graph g, int src, int dest){\n\t\tif(src == dest)\n\t\t\treturn true;\n\t\tboolean[] visited = new boolean[g.V];\n\t\tQueue<Integer> q = new Queue<Integer>();\n\t\tq.enqueue(src);\n\t\tvisited[src] = true;\n\t\twhile(!q.isEmpty()){\n\t\t\tint curr = q.dequeue();\n\t\t\tfor(int i = 0; i < g.V; i++){\n\t\t\t\tif(g.adj[curr][i] && !visited[i]){\n\t\t\t\t\tif(i == dest)\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tq.enqueue(i);\n\t\t\t\t\tvisited[i] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean isPathExists(Graph g, int src, int dest){\n\t\tif(src == dest)\n\t\t\treturn true;\n\t\tboolean[] visited = new boolean[g.V];\n\t\treturn isPathExistsUtil(g, src, dest, visited);\n\t}\n\tpublic\n\tboolean isPathExistsUtil(Graph g, int src, int dest, boolean[] visited){\n\t\tif(src == dest)\n\t\t\treturn true;\n\t\tvisited[src] = true;\n\t\tfor(int i = 0; i < g.V; i++){\n\t\t\tif(!visited[i] && g.adj[src][i] == 1 && isPathExistsUtil(g, i, dest, visited))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean isPathExists(Graph g, int src, int dest){\n\t\tif(src == dest){\n\t\t\treturn true;\n\t\t}\n\t\tboolean[] visited = new boolean[g.V];\n\t\tLinkedList<Integer> queue = new LinkedList<Integer>();\n\t\tqueue.add(src);\n\t\twhile(!queue.isEmpty()){\n\t\t\tint curr = queue.poll();\n\t\t\tvisited[curr] = true;\n\t\t\tfor(int i = 0; i < g.V; i++){\n\t\t\t\tif(g.adj[curr][i] && !visited[i]){\n\t\t\t\t\tqueue.add(i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn visited[dest];\n\t}\n}\n",
            "\tstatic boolean isPathExists(Graph g, int src, int dest){\n\t\tif(src == dest){\n\t\t\treturn true;\n\t\t}\n\t\tboolean[] visited = new boolean[g.V];\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tq.add(src);\n\t\tvisited[src] = true;\n\t\twhile(!q.isEmpty()){\n\t\t\tint curr = q.remove();\n\t\t\tfor(int i = 0; i < g.V; i++){\n\t\t\t\tif(g.adj[curr][i] && !visited[i]){\n\t\t\t\t\tq.add(i);\n\t\t\t\t\tvisited[i] = true;\n\t\t\t\t\tif(i == dest){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean isPathExists(Graph g, int src, int dest){\n\t\tif(src == dest){\n\t\t\treturn true;\n\t\t}\n\t\tboolean[] visited = new boolean[g.V];\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tq.add(src);\n\t\tvisited[src] = true;\n\t\twhile(!q.isEmpty()){\n\t\t\tint curr = q.poll();\n\t\t\tfor(int i = 0; i < g.V; i++){\n\t\t\t\tif(g.adj[curr][i] == 1 && !visited[i]){\n\t\t\t\t\tq.add(i);\n\t\t\t\t\tvisited[i] = true;\n\t\t\t\t\tif(i == dest){\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean isPath(Graph g, int s, int d){\n\t\tif(s==d)\n\t\t\treturn true;\n\t\tboolean[] visited = new boolean[g.V];\n\t\tQueue<Integer> q = new LinkedList<Integer>();\n\t\tq.add(s);\n\t\tvisited[s]=true;\n\t\twhile(!q.isEmpty()){\n\t\t\tint curr = q.remove();\n\t\t\tfor(int i=0;i<g.V;i++){\n\t\t\t\tif(g.adj[curr][i] && !visited[i]){\n\t\t\t\t\tq.add(i);\n\t\t\t\t\tvisited[i]=true;\n\t\t\t\t\tif(i==d)\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1308",
        "source": "leetcodeTitles",
        "source_id": "171",
        "url": "https://leetcode.com/problems/excel-sheet-column-number/",
        "language": "java",
        "query": "Excel Sheet Column Number",
        "snippets": [
            "\tint titleToNumber(String s) {\n\t\tint res = 0;\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tres = res * 26 + (s.charAt(i) - 'A' + 1);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"A\";\n\t\tSystem.out.println(s.charAt(0)-'A'+1);\n\t}\n}\n",
            "\tint titleToNumber(String s) {\n\t\tint res = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tres = res * 26 + s.charAt(i) - 'A' + 1;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"AB\";\n\t\tSystem.out.println(s.charAt(0)-'A'+1);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1309",
        "source": "leetcodeTitles",
        "source_id": "653",
        "url": "https://leetcode.com/problems/two-sum-iv-input-is-a-bst/",
        "language": "java",
        "query": "Two Sum IV - Input a BST",
        "snippets": [
            "\tclass TreeNode{\n\t\tint val;\n\t\tTreeNode left;\n\t\tTreeNode right;\n\t\tTreeNode(int x){\n\t\t\tval = x;\n\t\t}\n\t}\n\tpublic int findTarget(TreeNode root, int k) {\n\t\tif(root == null) return 0;\n\t\tSet<Integer> set = new HashSet<>();\n\t\treturn dfs(root, k, set);\n\t}\n\tpublic int dfs(TreeNode root, int k, Set<Integer> set){\n\t\tif(root == null) return 0;\n\t\tint res = 0;\n\t\tif(set.contains(k - root.val)) res = 1;\n\t\tset.add(root.val);\n\t\tres += dfs(root.left, k, set) + dfs(root.right, k, set);\n\t\treturn res;\n\t}\n}\n",
            "\tclass TreeNode{\n\t\tint val;\n\t\tTreeNode left;\n\t\tTreeNode right;\n\t\tTreeNode(int x){\n\t\t\tval = x;\n\t\t}\n\t}\n\tpublic boolean findTarget(TreeNode root, int k) {\n\t\tif(root == null) return false;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\treturn dfs(root, k, set);\n\t}\n\tpublic boolean dfs(TreeNode root, int k, Set<Integer> set){\n\t\tif(root == null) return false;\n\t\tif(set.contains(k - root.val)) return true;\n\t\tset.add(root.val);\n\t\treturn dfs(root.left, k, set) || dfs(root.right, k, set);\n\t}\n}\n",
            "\tTreeNode getTargetCopy(TreeNode original, TreeNode cloned, int target) {\n\t\tif(original == null) return null;\n\t\tif(original.val == target) return cloned;\n\t\tTreeNode left = getTargetCopy(original.left, cloned.left, target);\n\t\tif(left != null) return left;\n\t\treturn getTargetCopy(original.right, cloned.right, target);\n\t}\n}\n",
            "\tboolean findTarget(TreeNode root, int k) {\n\t\tif(root == null) return false;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\treturn helper(root, k, set);\n\t}\n\t\n\tpublic boolean helper(TreeNode root, int k, Set<Integer> set){\n\t\tif(root == null) return false;\n\t\tif(set.contains(k - root.val)) return true;\n\t\tset.add(root.val);\n\t\treturn helper(root.left, k, set) || helper(root.right, k, set);\n\t}\n}\n",
            "\tTreeNode findTarget(TreeNode root, int k) {\n\t\tif(root == null) return null;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\treturn findTarget(root, k, set);\n\t}\n\tprivate TreeNode findTarget(TreeNode root, int k, Set<Integer> set){\n\t\tif(root == null) return null;\n\t\tif(set.contains(k - root.val)) return root;\n\t\tset.add(root.val);\n\t\tTreeNode left = findTarget(root.left, k, set);\n\t\tif(left != null) return left;\n\t\tTreeNode right = findTarget(root.right, k, set);\n\t\tif(right != null) return right;\n\t\treturn null;\n\t}\n}\n",
            "\tTreeNode findTarget(TreeNode root, int k) {\n\t\tif(root == null) return null;\n\t\tSet<Integer> set = new HashSet<>();\n\t\treturn findTarget(root, k, set);\n\t}\n\tprivate TreeNode findTarget(TreeNode root, int k, Set<Integer> set){\n\t\tif(root == null) return null;\n\t\tif(set.contains(k - root.val)) return root;\n\t\tset.add(root.val);\n\t\tTreeNode left = findTarget(root.left, k, set);\n\t\tif(left != null) return left;\n\t\treturn findTarget(root.right, k, set);\n\t}\n}\n",
            "\tboolean findTarget(TreeNode root, int k) {\n\t\tif(root == null) return false;\n\t\tStack<TreeNode> stack = new Stack<TreeNode>();\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tTreeNode p = root;\n\t\twhile(p != null){\n\t\t\tstack.push(p);\n\t\t\tp = p.left;\n\t\t}\n\t\twhile(!stack.isEmpty()){\n\t\t\tp = stack.pop();\n\t\t\tif(set.contains(k - p.val)) return true;\n\t\t\tset.add(p.val);\n\t\t\tp = p.right;\n\t\t\twhile(p != null){\n\t\t\t\tstack.push(p);\n\t\t\t\tp = p.left;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean findTarget(TreeNode root, int k) {\n\t\tif(root == null) return false;\n\t\tSet<Integer> set = new HashSet<>();\n\t\treturn findTarget(root, k, set);\n\t}\n\tprivate boolean findTarget(TreeNode root, int k, Set<Integer> set){\n\t\tif(root == null) return false;\n\t\tif(set.contains(k - root.val)) return true;\n\t\tset.add(root.val);\n\t\treturn findTarget(root.left, k, set) || findTarget(root.right, k, set);\n\t}\n}\n",
            "\tTreeNode findTarget(TreeNode root, int k) {\n\t\tif(root == null) return null;\n\t\tSet<Integer> set = new HashSet<>();\n\t\treturn dfs(root, k, set);\n\t}\n\tprivate TreeNode dfs(TreeNode root, int k, Set<Integer> set){\n\t\tif(root == null) return null;\n\t\tif(set.contains(k - root.val)) return root;\n\t\tset.add(root.val);\n\t\tTreeNode left = dfs(root.left, k, set);\n\t\tif(left != null) return left;\n\t\treturn dfs(root.right, k, set);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1310",
        "source": "leetcodeTitles",
        "source_id": "1030",
        "url": "https://leetcode.com/problems/matrix-cells-in-distance-order/",
        "language": "java",
        "query": "Matrix Cells in Distance Order",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] result = new int[3][3];\n\t\tfor(int i=0;i<3;i++){\n\t\t\tfor(int j=0;j<3;j++){\n\t\t\t\tresult[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<3;i++){\n\t\t\tfor(int j=0;j<3;j++){\n\t\t\t\tSystem.out.print(result[i][j]+\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tfor(int i=0;i<3;i++){\n\t\t\tfor(int j=0;j<3;j++){\n\t\t\t\tif(i==j){\n\t\t\t\t\tresult[i][j] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<3;i++){\n\t\t\tfor(int j=0;j<3;j++){\n\t\t\t\tSystem.out.print(result[i][j]+\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tfor(int i=0;i<3;i++){\n\t\t\tfor(int j=0;j<3;j++){\n\t\t\t\tif(i>j){\n\t\t\t\t\tresult[i][j] = matrix[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<3;i++){\n\t\t\tfor(int j=0;j<3;j++){\n\t\t\t\tSystem.out.print(result[i][j]+\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] result = new int[3][3];\n\t\tfor(int i = 0; i < 3; i++){\n\t\t\tfor(int j = 0; j < 3; j++){\n\t\t\t\tresult[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < 3; i++){\n\t\t\tfor(int j = 0; j < 3; j++){\n\t\t\t\tSystem.out.print(result[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tint[][] result2 = new int[3][3];\n\t\tfor(int i = 0; i < 3; i++){\n\t\t\tfor(int j = 0; j < 3; j++){\n\t\t\t\tresult2[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < 3; i++){\n\t\t\tfor(int j = 0; j < 3; j++){\n\t\t\t\tSystem.out.print(result2[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t\tint[][] result3 = new int[3][3];\n\t\tfor(int i = 0; i < 3; i++){\n\t\t\tfor(int j = 0; j < 3; j++){\n\t\t\t\tresult3[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < 3; i++){\n\t\t\tfor(int j = 0; j < 3; j++){\n\t\t\t\tSystem.out.print(result3[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.\n",
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] result = new int[3][3];\n\t\tint[][] result2 = new int[3][3];\n\t\tint[][] result3 = new int[3][3];\n\t\tint[][] result4 = new int[3][3];\n\t\tint[][] result5 = new int[3][3];\n\t\tint[][] result6 = new int[3][3];\n\t\tint[][] result7 = new int[3][3];\n\t\tint[][] result8 = new int[3][3];\n\t\tint[][] result9 = new int[3][3];\n\t\tint[][] result10 = new int[3][3];\n\t\tint[][] result11 = new int[3][3];\n\t\tint[][] result12 = new int[3][3];\n\t\tint[][] result13 = new int[3][3];\n\t\tint[][] result14 = new int[3][3];\n\t\tint[][] result15 = new int[3][3];\n\t\tint[][] result16 = new int[3][3];\n\t\tint[][] result17 = new int[3][3];\n\t\tint[][] result18 = new int[3][3];\n\t\tint[][] result19 = new int[3][3];\n\t\tint[][] result20 = new int[3][3];\n\t\tint[][] result21 = new int[3][3];\n\t\tint[][] result22 = new int[3][3];\n\t\tint[][] result23 = new int[3][3];\n\t\tint[][] result24 = new int[3][3];\n\t\tint[][] result25 = new int[3][3];\n\t\tint[][] result26 = new int[3][3];\n\t\tint[][] result27 = new int[3][3];\n",
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] result = new int[3][3];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n\t\tint ggg = 0;\n\t\tint hhh = 0;\n",
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] result = new int[3][3];\n\t\tint i = 0, j = 0;\n\t\tfor(int[] row : matrix){\n\t\t\tfor(int cell : row){\n\t\t\t\tresult[i][j] = cell;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj = 0;\n\t\t}\n\t\tfor(int[] row : result){\n\t\t\tfor(int cell : row){\n\t\t\t\tSystem.out.print(cell + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] result = new int[3][3];\n\t\tint row = matrix.length;\n\t\tint col = matrix[0].length;\n\t\tint[] distance = new int[row*col];\n\t\tint index = 0;\n\t\tfor(int i = 0; i < row; i++){\n\t\t\tfor(int j = 0; j < col; j++){\n\t\t\t\tdistance[index] = matrix[i][j];\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tArrays.sort(distance);\n\t\tindex = 0;\n\t\tfor(int i = 0; i < row; i++){\n\t\t\tfor(int j = 0; j < col; j++){\n\t\t\t\tresult[i][j] = distance[index];\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < row; i++){\n\t\t\tfor(int j = 0; j < col; j++){\n\t\t\t\tSystem.out.print(result[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[][] matrix = {{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[] result = new int[9];\n\t\tint count = 0;\n\t\tfor(int i = 0; i < 3; i++){\n\t\t\tfor(int j = 0; j < 3; j++){\n\t\t\t\tresult[count] = matrix[i][j];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < 9; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1311",
        "source": "leetcodeTitles",
        "source_id": "2055",
        "url": "https://leetcode.com/problems/plates-between-candles/",
        "language": "java",
        "query": "Plates Between Candles",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] > b[j]){\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] < b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] <= b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] > b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] <= b[j]){\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tcount += a[j];\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tcount += a[j];\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(arr[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count >= 2){\n\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"NO\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1312",
        "source": "leetcodeTitles",
        "source_id": "143",
        "url": "https://leetcode.com/problems/reorder-list/",
        "language": "java",
        "query": "Reorder List",
        "snippets": [
            "\tListNode reorderList(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode slow = head, fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\tListNode head2 = slow.next;\n\t\tslow.next = null;\n\t\thead2 = reverse(head2);\n\t\tListNode dummy = new ListNode(0);\n\t\tListNode cur = dummy;\n\t\twhile(head != null && head2 != null){\n\t\t\tcur.next = head;\n\t\t\tcur = cur.next;\n\t\t\thead = head.next;\n\t\t\tcur.next = head2;\n\t\t\tcur = cur.next;\n\t\t\thead2 = head2.next;\n\t\t}\n\t\tif(head != null) cur.next = head;\n\t\tif(head2 != null) cur.next = head2;\n\t\treturn dummy.next;\n\t}\n\tpublic ListNode reverse(ListNode head){\n\t\tListNode prev = null;\n\t\twhile(head != null){\n\t\t\tListNode next = head.next;\n\t\t\thead.next = prev;\n\t\t\tprev = head;\n\t\t\thead = next;\n\t\t}\n\t\treturn prev;\n\t}\n}\n",
            "\tListNode reorderList(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode slow = head, fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\tListNode head2 = slow.next;\n\t\tslow.next = null;\n\t\tListNode cur = head2;\n\t\twhile(cur != null){\n\t\t\tListNode next = cur.next;\n\t\t\tcur.next = head2;\n\t\t\thead2 = cur;\n\t\t\tcur = next;\n\t\t}\n\t\tListNode cur1 = head, cur2 = head2;\n\t\twhile(cur1 != null && cur2 != null){\n\t\t\tListNode next1 = cur1.next;\n\t\t\tListNode next2 = cur2.next;\n\t\t\tcur1.next = cur2;\n\t\t\tcur2.next = next1;\n\t\t\tcur1 = next1;\n\t\t\tcur2 = next2;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tListNode reorderList(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode slow = head, fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\tListNode head2 = slow.next;\n\t\tslow.next = null;\n\t\tListNode cur = head2;\n\t\twhile(cur != null){\n\t\t\tListNode next = cur.next;\n\t\t\tcur.next = head;\n\t\t\thead = cur;\n\t\t\tcur = next;\n\t\t}\n\t\tListNode cur1 = head;\n\t\tListNode cur2 = head2;\n\t\twhile(cur1 != null && cur2 != null){\n\t\t\tListNode next1 = cur1.next;\n\t\t\tListNode next2 = cur2.next;\n\t\t\tcur1.next = cur2;\n\t\t\tcur2.next = next1;\n\t\t\tcur1 = next1;\n\t\t\tcur2 = next2;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tListNode reorderList(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode slow = head, fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\tListNode second = slow.next;\n\t\tslow.next = null;\n\t\tListNode p = second;\n\t\twhile(p != null){\n\t\t\tListNode q = p.next;\n\t\t\tp.next = slow.next;\n\t\t\tslow.next = p;\n\t\t\tp = q;\n\t\t}\n\t\tListNode cur = head;\n\t\twhile(cur != null){\n\t\t\tListNode next = cur.next;\n\t\t\tcur.next = second;\n\t\t\tsecond = second.next;\n\t\t\tcur = next;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tListNode reorderList(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode slow = head, fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\tListNode second = slow.next;\n\t\tslow.next = null;\n\t\tListNode p = second;\n\t\twhile(p != null){\n\t\t\tListNode q = p.next;\n\t\t\tp.next = slow.next;\n\t\t\tslow.next = p;\n\t\t\tp = q;\n\t\t}\n\t\tListNode q = head;\n\t\twhile(q != null && slow != null){\n\t\t\tListNode p = q.next;\n\t\t\tq.next = slow.next;\n\t\t\tslow.next = q;\n\t\t\tq = p;\n\t\t\tslow = slow.next.next;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tListNode reorderList(ListNode head) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode slow = head;\n\t\tListNode fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\tListNode second = slow.next;\n\t\tslow.next = null;\n\t\tListNode p = second;\n\t\twhile(p != null){\n\t\t\tListNode q = p.next;\n\t\t\tp.next = slow.next;\n\t\t\tslow.next = p;\n\t\t\tp = q;\n\t\t}\n\t\tListNode head1 = head;\n\t\tListNode head2 = slow.next;\n\t\twhile(head1 != null && head2 != null){\n\t\t\tListNode next1 = head1.next;\n\t\t\tListNode next2 = head2.next;\n\t\t\thead1.next = head2;\n\t\t\thead2.next = next1;\n\t\t\thead1 = next1;\n\t\t\thead2 = next2;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tvoid reorderList(ListNode head){\n\t\tif(head == null || head.next == null) return;\n\t\tListNode slow = head;\n\t\tListNode fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\tListNode second = slow.next;\n\t\tslow.next = null;\n\t\tListNode prev = null;\n\t\twhile(second != null){\n\t\t\tListNode next = second.next;\n\t\t\tsecond.next = prev;\n\t\t\tprev = second;\n\t\t\tsecond = next;\n\t\t}\n\t\tListNode cur = head;\n\t\twhile(cur != null && prev != null){\n\t\t\tListNode next = cur.next;\n\t\t\tcur.next = prev;\n\t\t\tprev = cur;\n\t\t\tcur = next;\n\t\t}\n\t\thead.next = prev;\n\t}\n}\n",
            "\tvoid reorderList(ListNode head){\n\t\tif(head==null||head.next==null) return;\n\t\tListNode fast=head;\n\t\tListNode slow=head;\n\t\twhile(fast.next!=null&&fast.next.next!=null){\n\t\t\tfast=fast.next.next;\n\t\t\tslow=slow.next;\n\t\t}\n\t\tListNode head2=slow.next;\n\t\tslow.next=null;\n\t\tListNode prev=null;\n\t\twhile(head2!=null){\n\t\t\tListNode next=head2.next;\n\t\t\thead2.next=prev;\n\t\t\tprev=head2;\n\t\t\thead2=next;\n\t\t}\n\t\tListNode cur=head;\n\t\twhile(prev!=null){\n\t\t\tListNode next=cur.next;\n\t\t\tcur.next=prev;\n\t\t\tprev=prev.next;\n\t\t\tcur.next.next=next;\n\t\t\tcur=next;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1313",
        "source": "leetcodeTitles",
        "source_id": "93",
        "url": "https://leetcode.com/problems/restore-ip-addresses/",
        "language": "java",
        "query": "Restore IP Addresses",
        "snippets": [
            "\tString restoreIpAddresses(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 1; i < 4; i++) {\n\t\t\tfor (int j = i + 1; j < i + 4; j++) {\n\t\t\t\tfor (int k = j + 1; k < j + 4; k++) {\n\t\t\t\t\tString s1 = s.substring(0, i);\n\t\t\t\t\tString s2 = s.substring(i, j);\n\t\t\t\t\tString s3 = s.substring(j, k);\n\t\t\t\t\tString s4 = s.substring(k);\n\t\t\t\t\tif (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)) {\n\t\t\t\t\t\tsb.append(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4 + \"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tprivate boolean isValid(String s) {\n\t\tif (s.length() > 3 || s.length() == 0 || (s.length() > 1 && s.charAt(0) == '0')) {\n\t\t\treturn false;\n\t\t}\n\t\tint num = Integer.parseInt(s);\n\t\treturn num <= 255;\n\t}\n}\n",
            "\tString restoreIpAddresses(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 1; i < 4; i++) {\n\t\t\tfor (int j = i + 1; j < i + 4; j++) {\n\t\t\t\tfor (int k = j + 1; k < j + 4; k++) {\n\t\t\t\t\tString s1 = s.substring(0, i);\n\t\t\t\t\tString s2 = s.substring(i, j);\n\t\t\t\t\tString s3 = s.substring(j, k);\n\t\t\t\t\tString s4 = s.substring(k);\n\t\t\t\t\tif (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)) {\n\t\t\t\t\t\tsb.append(s1 + \".\" + s2 + \".\" + s3 + \".\" + s4 + \"\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic boolean isValid(String s) {\n\t\tif (s.length() > 3 || s.length() == 0 || (s.length() > 1 && s.charAt(0) == '0')) {\n\t\t\treturn false;\n\t\t}\n\t\tint num = Integer.parseInt(s);\n\t\treturn num <= 255;\n\t}\n}\n",
            "\tString restoreIpAddresses(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 1; i <= 3; i++) {\n\t\t\tfor (int j = 1; j <= 3; j++) {\n\t\t\t\tfor (int k = 1; k <= 3; k++) {\n\t\t\t\t\tfor (int l = 1; l <= 3; l++) {\n\t\t\t\t\t\tif (i + j + k + l == s.length()) {\n\t\t\t\t\t\t\tString ip = s.substring(0, i) + \".\" + s.substring(i, i + j) + \".\" + s.substring(i + j, i + j + k) + \".\" + s.substring(i + j + k);\n\t\t\t\t\t\t\tif (isValid(ip)) {\n\t\t\t\t\t\t\t\tsb.append(ip + \".\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic boolean isValid(String ip) {\n\t\tString[] parts = ip.split(\"\\\\.\");\n\t\tif (parts.length != 4) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (String part : parts) {\n\t\t\tif (part.length() == 0 || part.length() > 3 || Integer.parseInt(part) > 255) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tString restoreIpAddresses(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 1; i <= 3; i++) {\n\t\t\tfor (int j = 1; j <= 3; j++) {\n\t\t\t\tfor (int k = 1; k <= 3; k++) {\n\t\t\t\t\tfor (int l = 1; l <= 3; l++) {\n\t\t\t\t\t\tif (i + j + k + l == s.length()) {\n\t\t\t\t\t\t\tStringBuilder sb1 = new StringBuilder();\n\t\t\t\t\t\t\tsb1.append(s.charAt(0));\n\t\t\t\t\t\t\tsb1.append(s.charAt(i));\n\t\t\t\t\t\t\tsb1.append(s.charAt(j));\n\t\t\t\t\t\t\tsb1.append(s.charAt(k));\n\t\t\t\t\t\t\tsb1.append(s.charAt(l));\n\t\t\t\t\t\t\tif (isValid(sb1.toString())) {\n\t\t\t\t\t\t\t\tsb.append(sb1.toString() + \".\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (sb.length() > 0) {\n\t\t\tsb.deleteCharAt(sb.length() - 1);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic boolean isValid(String s) {\n\t\tif (s.length() > 3) {\n\t\t\treturn false;\n\t\t}\n\t\tif (s.length() == 1 || s.length() == 2 || s.length() == 3) {\n\t\t\treturn s.charAt(0) != '0';\n\t\t}\n\t\tif (s.charAt(0) == '0') {\n\t\t\treturn false;\n\t\t}\n\t\tint num = Integer.parseInt(s);\n\t\treturn num <= 255;\n"
        ],
        "results": 10
    },
    {
        "id": "1314",
        "source": "leetcodeTitles",
        "source_id": "204",
        "url": "https://leetcode.com/problems/count-primes/",
        "language": "java",
        "query": "Count Primes",
        "snippets": [
            "\tstatic int countPrimes(int n) {\n\t\tint count = 0;\n\t\tboolean[] isPrime = new boolean[n];\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tisPrime[i] = true;\n\t\t}\n\t\tfor (int i = 2; i * i < n; i++) {\n\t\t\tif (isPrime[i]) {\n\t\t\t\tfor (int j = i * i; j < n; j += i) {\n\t\t\t\t\tisPrime[j] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (isPrime[i]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countPrimes(int n) {\n\t\tint count = 0;\n\t\tboolean[] isPrime = new boolean[n];\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tisPrime[i] = true;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (isPrime[i]) {\n\t\t\t\tcount++;\n\t\t\t\tfor (int j = 2; i * j < n; j++) {\n\t\t\t\t\tisPrime[i * j] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countPrimes(int n) {\n\t\tint count = 0;\n\t\tboolean[] isPrime = new boolean[n];\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tisPrime[i] = true;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (isPrime[i]) {\n\t\t\t\tcount++;\n\t\t\t\tfor (int j = i * i; j < n; j += i) {\n\t\t\t\t\tisPrime[j] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countPrimes(int n) {\n\t\tboolean[] isPrime = new boolean[n];\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tisPrime[i] = true;\n\t\t}\n\t\tfor (int i = 2; i * i < n; i++) {\n\t\t\tif (isPrime[i]) {\n\t\t\t\tfor (int j = i * i; j < n; j += i) {\n\t\t\t\t\tisPrime[j] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (isPrime[i]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countPrimes(int n) {\n\t\tboolean[] isPrime = new boolean[n];\n\t\tint count = 0;\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (!isPrime[i]) {\n\t\t\t\tcount++;\n\t\t\t\tfor (int j = i + i; j < n; j += i) {\n\t\t\t\t\tisPrime[j] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countPrimes(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (isPrime(i)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic static boolean isPrime(int n) {\n\t\tif (n <= 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic int countPrimes(int n) {\n\t\tint count = 0;\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(isPrime(i)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic static boolean isPrime(int n){\n\t\tif(n <= 1){\n\t\t\treturn false;\n\t\t}\n\t\tfor(int i = 2; i <= Math.sqrt(n); i++){\n\t\t\tif(n % i == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tint countPrimes(int n) {\n\t\tboolean[] isPrime = new boolean[n];\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tisPrime[i] = true;\n\t\t}\n\t\tfor (int i = 2; i * i < n; i++) {\n\t\t\tif (isPrime[i]) {\n\t\t\t\tfor (int j = i * i; j < n; j += i) {\n\t\t\t\t\tisPrime[j] = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 2; i < n; i++) {\n\t\t\tif (isPrime[i]) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1315",
        "source": "leetcodeTitles",
        "source_id": "1519",
        "url": "https://leetcode.com/problems/number-of-nodes-in-the-sub-tree-with-the-same-label/",
        "language": "java",
        "query": "Number of Nodes in the Sub-Tree With the Same Label",
        "snippets": [
            "\tint countNodes(TreeNode root){\n\t\tif(root == null) return 0;\n\t\tint left = countNodes(root.left);\n\t\tint right = countNodes(root.right);\n\t\treturn left + right + 1;\n\t}\n}\n",
            "\tint countSubTrees(TreeNode root){\n\t\tif(root == null) return 0;\n\t\tint count = 0;\n\t\tif(root.left == null && root.right == null) return 1;\n\t\tif(root.left != null) count += countSubTrees(root.left);\n\t\tif(root.right != null) count += countSubTrees(root.right);\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubTrees(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint count=0;\n\t\tif(root.left==null && root.right==null) return 1;\n\t\tif(root.left!=null){\n\t\t\tcount+=countSubTrees(root.left);\n\t\t}\n\t\tif(root.right!=null){\n\t\t\tcount+=countSubTrees(root.right);\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubTrees(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint count=0;\n\t\tcount+=countSubTrees(root.left);\n\t\tcount+=countSubTrees(root.right);\n\t\treturn count+1;\n\t}\n}\n",
            "\tstatic int countNodes(TreeNode root){\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\tint l=countNodes(root.left);\n\t\tint r=countNodes(root.right);\n\t\treturn l+r+1;\n\t}\n}\n",
            "\tint countSubTrees(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint count=0;\n\t\tif(root.left==null && root.right==null){\n\t\t\tcount++;\n\t\t\treturn count;\n\t\t}\n\t\tif(root.left!=null){\n\t\t\tcount+=countSubTrees(root.left);\n\t\t}\n\t\tif(root.right!=null){\n\t\t\tcount+=countSubTrees(root.right);\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubTrees(TreeNode root){\n\t\tif(root == null) return 0;\n\t\tint count = 0;\n\t\tint[] countArray = new int[26];\n\t\tcountSubTrees(root, countArray);\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tcount += countArray[i] * countArray[i];\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tvoid countSubTrees(TreeNode root, int[] countArray){\n\t\tif(root == null) return;\n\t\tcountArray[root.val - 'a']++;\n\t\tcountSubTrees(root.left, countArray);\n\t\tcountSubTrees(root.right, countArray);\n\t\tcountArray[root.val - 'a']--;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1316",
        "source": "leetcodeTitles",
        "source_id": "1464",
        "url": "https://leetcode.com/problems/maximum-product-of-two-elements-in-an-array/",
        "language": "java",
        "query": "Maximum Product of Two Elements in an Array",
        "snippets": [
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint res = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(Math.max(max*nums[i], min*nums[i]), nums[i]);\n\t\t\tmin = Math.min(Math.min(temp*nums[i], min*nums[i]), nums[i]);\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint res = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(nums[i], Math.max(max * nums[i], min * nums[i]));\n\t\t\tmin = Math.min(nums[i], Math.min(temp * nums[i], min * nums[i]));\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint res = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint tmp = max;\n\t\t\tmax = Math.max(Math.max(max*nums[i], min*nums[i]), nums[i]);\n\t\t\tmin = Math.min(Math.min(tmp*nums[i], min*nums[i]), nums[i]);\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint result = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(Math.max(max * nums[i], min * nums[i]), nums[i]);\n\t\t\tmin = Math.min(Math.min(temp * nums[i], min * nums[i]), nums[i]);\n\t\t\tresult = Math.max(result, max);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint result = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(nums[i], Math.max(max * nums[i], min * nums[i]));\n\t\t\tmin = Math.min(nums[i], Math.min(temp * nums[i], min * nums[i]));\n\t\t\tresult = Math.max(result, max);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint result = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(nums[i], Math.max(max * nums[i], min * nums[i]));\n\t\t\tmin = Math.min(nums[i], Math.min(temp * nums[i], min * nums[i]));\n\t\t\tresult = Math.max(result, max);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint max_product = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(nums[i], Math.max(max * nums[i], min * nums[i]));\n\t\t\tmin = Math.min(nums[i], Math.min(temp * nums[i], min * nums[i]));\n\t\t\tmax_product = Math.max(max_product, max);\n\t\t}\n\t\treturn max_product;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1317",
        "source": "leetcodeTitles",
        "source_id": "508",
        "url": "https://leetcode.com/problems/most-frequent-subtree-sum/",
        "language": "java",
        "query": "Most Frequent Subtree Sum",
        "snippets": [
            "\tint mostFrequentSubtreeSum(TreeNode root){\n\t\tint[] count = new int[1000];\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tint sum = 0;\n\t\tmostFrequentSubtreeSum(root, count, sum, max, maxIndex);\n\t\treturn maxIndex;\n\t}\n\tpublic\n\tvoid mostFrequentSubtreeSum(TreeNode root, int[] count, int sum, int max, int maxIndex){\n\t\tif(root == null) return;\n\t\tsum += root.val;\n\t\tcount[sum]++;\n\t\tif(count[sum] > max){\n\t\t\tmax = count[sum];\n\t\t\tmaxIndex = sum;\n\t\t}\n\t\tmostFrequentSubtreeSum(root.left, count, sum, max, maxIndex);\n\t\tmostFrequentSubtreeSum(root.right, count, sum, max, maxIndex);\n\t\tcount[sum]--;\n\t}\n}\n",
            "\tint mostFrequentSubtreeSum(TreeNode root){\n\t\tint[] count = new int[1000];\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tmostFrequentSubtreeSum(root, count, max, maxIndex);\n\t\treturn maxIndex;\n\t}\n\tpublic\n\tvoid mostFrequentSubtreeSum(TreeNode root, int[] count, int max, int maxIndex){\n\t\tif(root == null) return;\n\t\tint sum = root.val;\n\t\tif(root.left != null) sum += mostFrequentSubtreeSum(root.left, count, max, maxIndex);\n\t\tif(root.right != null) sum += mostFrequentSubtreeSum(root.right, count, max, maxIndex);\n\t\tcount[sum]++;\n\t\tif(count[sum] > max){\n\t\t\tmax = count[sum];\n\t\t\tmaxIndex = sum;\n\t\t}\n\t}\n}\n",
            "\tint mostFrequentSubtreeSum(TreeNode root){\n\t\tint[] count = new int[1000];\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tint sum = 0;\n\t\tmostFrequentSubtreeSum(root, count, sum, max, maxIndex);\n\t\treturn maxIndex;\n\t}\n\tprivate void mostFrequentSubtreeSum(TreeNode root, int[] count, int sum, int max, int maxIndex){\n\t\tif(root == null) return;\n\t\tsum += root.val;\n\t\tcount[sum]++;\n\t\tif(count[sum] > max){\n\t\t\tmax = count[sum];\n\t\t\tmaxIndex = sum;\n\t\t}\n\t\tmostFrequentSubtreeSum(root.left, count, sum, max, maxIndex);\n\t\tmostFrequentSubtreeSum(root.right, count, sum, max, maxIndex);\n\t\tcount[sum]--;\n\t}\n}\n",
            "\tint mostFrequentSubtreeSum(TreeNode root){\n\t\tint[] count = new int[1000];\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\thelper(root, count, max, maxIndex);\n\t\treturn maxIndex;\n\t}\n\tpublic void helper(TreeNode root, int[] count, int max, int maxIndex){\n\t\tif(root == null) return;\n\t\tint sum = root.val;\n\t\tif(root.left != null) sum += helper(root.left, count, max, maxIndex);\n\t\tif(root.right != null) sum += helper(root.right, count, max, maxIndex);\n\t\tcount[sum]++;\n\t\tif(count[sum] > max){\n\t\t\tmax = count[sum];\n\t\t\tmaxIndex = sum;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int mostFrequentSubtreeSum(TreeNode root){\n\t\tint[] count = new int[1000];\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tmostFrequentSubtreeSum(root, count, max, maxIndex);\n\t\treturn maxIndex;\n\t}\n\tpublic\n\tstatic void mostFrequentSubtreeSum(TreeNode root, int[] count, int max, int maxIndex){\n\t\tif(root == null) return;\n\t\tint sum = root.val;\n\t\tif(root.left != null) sum += mostFrequentSubtreeSum(root.left);\n\t\tif(root.right != null) sum += mostFrequentSubtreeSum(root.right);\n\t\tcount[sum]++;\n\t\tif(count[sum] > max){\n\t\t\tmax = count[sum];\n\t\t\tmaxIndex = sum;\n\t\t}\n\t}\n}\n",
            "\tint mostFrequentSubtreeSum(TreeNode root){\n\t\tint[] count = new int[1000];\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\treturn mostFrequentSubtreeSum(root, count, max, maxIndex);\n\t}\n\tprivate int mostFrequentSubtreeSum(TreeNode root, int[] count, int max, int maxIndex){\n\t\tif(root == null) return 0;\n\t\tint sum = root.val + mostFrequentSubtreeSum(root.left, count, max, maxIndex) + mostFrequentSubtreeSum(root.right, count, max, maxIndex);\n\t\tcount[sum]++;\n\t\tif(count[sum] > max){\n\t\t\tmax = count[sum];\n\t\t\tmaxIndex = sum;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tint mostFrequentSubtreeSum(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint[] count=new int[10000];\n\t\tint max=0;\n\t\tint maxCount=0;\n\t\tint sum=0;\n\t\tcount[sum]=1;\n\t\tmostFrequentSubtreeSum(root,count,sum,max,maxCount);\n\t\treturn max;\n\t}\n\tpublic\n\tvoid mostFrequentSubtreeSum(TreeNode root,int[] count,int sum,int max,int maxCount){\n\t\tif(root==null) return;\n\t\tsum+=root.val;\n\t\tcount[sum]++;\n\t\tif(count[sum]>maxCount){\n\t\t\tmaxCount=count[sum];\n\t\t\tmax=sum;\n\t\t}\n\t\tmostFrequentSubtreeSum(root.left,count,sum,max,maxCount);\n\t\tmostFrequentSubtreeSum(root.right,count,sum,max,maxCount);\n\t\tcount[sum]--;\n\t}\n}\n",
            "\tint mostFrequentSubtreeSum(TreeNode root){\n\t\tint max = 0;\n\t\tint[] count = new int[1001];\n\t\tmostFrequentSubtreeSum(root, count, max);\n\t\treturn max;\n\t}\n\tprivate\n\tint mostFrequentSubtreeSum(TreeNode root, int[] count, int max){\n\t\tif(root == null) return 0;\n\t\tint sum = root.val + mostFrequentSubtreeSum(root.left, count, max) + mostFrequentSubtreeSum(root.right, count, max);\n\t\tcount[sum]++;\n\t\tif(count[sum] > max) max = count[sum];\n\t\treturn sum;\n\t}\n}\n",
            "\tint mostFrequentSubtreeSum(TreeNode root){\n\t\tint[] count = new int[10001];\n\t\tint max = 0;\n\t\tint maxIndex = 0;\n\t\tint sum = 0;\n\t\tmostFrequentSubtreeSum(root, count, sum, max, maxIndex);\n\t\treturn maxIndex;\n\t}\n\tpublic\n\tvoid mostFrequentSubtreeSum(TreeNode root, int[] count, int sum, int max, int maxIndex){\n\t\tif(root == null) return;\n\t\tsum += root.val;\n\t\tcount[sum]++;\n\t\tif(count[sum] > max){\n\t\t\tmax = count[sum];\n\t\t\tmaxIndex = sum;\n\t\t}\n\t\tmostFrequentSubtreeSum(root.left, count, sum, max, maxIndex);\n\t\tmostFrequentSubtreeSum(root.right, count, sum, max, maxIndex);\n\t\tcount[sum]--;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1318",
        "source": "leetcodeTitles",
        "source_id": "121",
        "url": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock/",
        "language": "java",
        "query": "Best Time to Buy and Sell Stock",
        "snippets": [
            "\tint maxProfit(int[] prices) {\n\t\tint max = 0;\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < prices.length; i++){\n\t\t\tif(prices[i] < min){\n\t\t\t\tmin = prices[i];\n\t\t\t}\n\t\t\tif(prices[i] - min > max){\n\t\t\t\tmax = prices[i] - min;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxProfit(int[] prices) {\n\t\tint maxprofit = 0;\n\t\tint minprice = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i < prices.length; i++) {\n\t\t\tif (prices[i] < minprice) {\n\t\t\t\tminprice = prices[i];\n\t\t\t}\n\t\t\tif (prices[i] - minprice > maxprofit) {\n\t\t\t\tmaxprofit = prices[i] - minprice;\n\t\t\t}\n\t\t}\n\t\treturn maxprofit;\n\t}\n}\n",
            "\tint maxProfit(int[] prices) {\n\t\tint maxProfit = 0;\n\t\tint minPrice = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i < prices.length; i++) {\n\t\t\tif (prices[i] < minPrice) {\n\t\t\t\tminPrice = prices[i];\n\t\t\t}\n\t\t\tif (prices[i] - minPrice > maxProfit) {\n\t\t\t\tmaxProfit = prices[i] - minPrice;\n\t\t\t}\n\t\t}\n\t\treturn maxProfit;\n\t}\n}\n",
            "\tint maxProfit(int[] prices) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = 0;\n\t\tfor (int i = 0; i < prices.length; i++) {\n\t\t\tif (prices[i] < min) {\n\t\t\t\tmin = prices[i];\n\t\t\t}\n\t\t\tif (prices[i] - min > max) {\n\t\t\t\tmax = prices[i] - min;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxProfit(int[] prices) {\n\t\tint maxprofit = 0;\n\t\tfor (int i = 0; i < prices.length - 1; i++) {\n\t\t\tfor (int j = i + 1; j < prices.length; j++) {\n\t\t\t\tif (prices[j] - prices[i] > maxprofit) {\n\t\t\t\t\tmaxprofit = prices[j] - prices[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn maxprofit;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1319",
        "source": "leetcodeTitles",
        "source_id": "292",
        "url": "https://leetcode.com/problems/nim-game/",
        "language": "java",
        "query": "Nim Game",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner input = new Scanner(System.in);\n\t\tint n = input.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = input.nextInt();\n\t\t}\n\t\tint[] arr2 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr2[i] = input.nextInt();\n\t\t}\n\t\tint[] arr3 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr3[i] = input.nextInt();\n\t\t}\n\t\tint[] arr4 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr4[i] = input.nextInt();\n\t\t}\n\t\tint[] arr5 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr5[i] = input.nextInt();\n\t\t}\n\t\tint[] arr6 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr6[i] = input.nextInt();\n\t\t}\n\t\tint[] arr7 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr7[i] = input.nextInt();\n\t\t}\n\t\tint[] arr8 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr8[i] = input.nextInt();\n\t\t}\n\t\tint[] arr9 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr9[i] = input.nextInt();\n\t\t}\n\t\tint[] arr10 = new int[n];\n\t\tfor(int i = 0; i <\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = in.nextInt();\n\t\t}\n\t\tint[] arr2 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr2[i] = in.nextInt();\n\t\t}\n\t\tint[] arr3 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr3[i] = in.nextInt();\n\t\t}\n\t\tint[] arr4 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr4[i] = in.nextInt();\n\t\t}\n\t\tint[] arr5 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr5[i] = in.nextInt();\n\t\t}\n\t\tint[] arr6 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr6[i] = in.nextInt();\n\t\t}\n\t\tint[] arr7 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr7[i] = in.nextInt();\n\t\t}\n\t\tint[] arr8 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr8[i] = in.nextInt();\n\t\t}\n\t\tint[] arr9 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr9[i] = in.nextInt();\n\t\t}\n\t\tint[] arr10 = new int[n];\n\t\tfor(int i = 0; i <\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = Integer.parseInt(args[i+2]);\n\t\t}\n\t\tint[] arr2 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr2[i] = Integer.parseInt(args[i+n+2]);\n\t\t}\n\t\tint[] arr3 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr3[i] = Integer.parseInt(args[i+m+2]);\n\t\t}\n\t\tint[] arr4 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr4[i] = Integer.parseInt(args[i+n+m+2]);\n\t\t}\n\t\tint[] arr5 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr5[i] = Integer.parseInt(args[i+m+n+m+2]);\n\t\t}\n\t\tint[] arr6 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr6[i] = Integer.parseInt(args[i+n+m+n+m+2]);\n\t\t}\n\t\tint[] arr7 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr7[i] = Integer.parseInt(args[i+m+n+m+n+m+2]);\n\t\t}\n\t\tint[] arr8 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr8[i] = Integer.parseInt(\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = in.nextInt();\n\t\t}\n\t\tint[] arr2 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr2[i] = in.nextInt();\n\t\t}\n\t\tint[] arr3 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr3[i] = in.nextInt();\n\t\t}\n\t\tint[] arr4 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr4[i] = in.nextInt();\n\t\t}\n\t\tint[] arr5 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr5[i] = in.nextInt();\n\t\t}\n\t\tint[] arr6 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr6[i] = in.nextInt();\n\t\t}\n\t\tint[] arr7 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr7[i] = in.nextInt();\n\t\t}\n\t\tint[] arr8 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr8[i] = in.nextInt();\n\t\t}\n\t\tint[] arr9 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr9[i] = in.nextInt();\n\t\t}\n\t\tint[] arr10 = new int[m];\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(arr[i] % 2 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count % 2 == 0){\n\t\t\tSystem.out.println(\"Malvika\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Akshat\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr[i] = in.nextInt();\n\t\t}\n\t\tint[] arr2 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr2[i] = in.nextInt();\n\t\t}\n\t\tint[] arr3 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr3[i] = in.nextInt();\n\t\t}\n\t\tint[] arr4 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr4[i] = in.nextInt();\n\t\t}\n\t\tint[] arr5 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr5[i] = in.nextInt();\n\t\t}\n\t\tint[] arr6 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr6[i] = in.nextInt();\n\t\t}\n\t\tint[] arr7 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr7[i] = in.nextInt();\n\t\t}\n\t\tint[] arr8 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr8[i] = in.nextInt();\n\t\t}\n\t\tint[] arr9 = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tarr9[i] = in.nextInt();\n\t\t}\n\t\tint[] arr10 = new int[n];\n\t\tfor (int i = 0; i\n"
        ],
        "results": 10
    },
    {
        "id": "1320",
        "source": "leetcodeTitles",
        "source_id": "2327",
        "url": "https://leetcode.com/problems/number-of-people-aware-of-a-secret/",
        "language": "java",
        "query": "Number of People Aware of a Secret",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i=0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int b_i=0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tint[] res = new int[m];\n\t\tres = solve(a, b);\n\t\tfor(int res_i=0; res_i < m; res_i++){\n\t\t\tSystem.out.println(res[res_i]);\n\t\t}\n\t}\n\tpublic static int[] solve(int[] a, int[] b){\n\t\tint[] res = new int[b.length];\n\t\tfor(int i=0; i < b.length; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j=0; j < a.length; j++){\n\t\t\t\tif(a[j] == b[i]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres[i] = count;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i=0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint m = in.nextInt();\n\t\tint[] b = new int[m];\n\t\tfor(int b_i=0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tint[] res = new int[m];\n\t\tres = solve(a, b);\n\t\tfor(int res_i=0; res_i < m; res_i++){\n\t\t\tSystem.out.println(res[res_i]);\n\t\t}\n\t}\n\tpublic static int[] solve(int[] a, int[] b){\n\t\tint[] res = new int[b.length];\n\t\tfor(int i=0; i < b.length; i++){\n\t\t\tres[i] = 0;\n\t\t\tfor(int j=0; j < a.length; j++){\n\t\t\t\tif(a[j] == b[i]){\n\t\t\t\t\tres[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint k = Integer.parseInt(args[1]);\n\t\tint[] people = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tpeople[i] = i+1;\n\t\t}\n\t\tint[] secret = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tsecret[i] = i+1;\n\t\t}\n\t\tint[] result = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tresult[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < k; j++){\n\t\t\t\tif(people[i] == secret[j]){\n\t\t\t\t\tresult[i] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i=0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint m = in.nextInt();\n\t\tint[] b = new int[m];\n\t\tfor(int b_i=0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tint[] res = new int[m];\n\t\tres = solve(a, b);\n\t\tfor(int res_i=0; res_i < m; res_i++){\n\t\t\tSystem.out.println(res[res_i]);\n\t\t}\n\t}\n\tpublic static int[] solve(int[] a, int[] b){\n\t\tint[] res = new int[b.length];\n\t\tfor(int i=0; i < b.length; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j=0; j < a.length; j++){\n\t\t\t\tif(a[j] == b[i]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres[i] = count;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint k = Integer.parseInt(args[1]);\n\t\tint[] people = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tpeople[i] = i;\n\t\t}\n\t\tint[] secret = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tsecret[i] = i;\n\t\t}\n\t\tint[] result = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tresult[i] = i;\n\t\t}\n\t\tint[] temp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ttemp[i] = i;\n\t\t}\n\t\tint count = 0;\n\t\twhile(count < n){\n\t\t\tfor(int i = 0; i < k; i++){\n\t\t\t\tif(people[i] == secret[i]){\n\t\t\t\t\tresult[count] = people[i];\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tif(people[i] != secret[i]){\n\t\t\t\t\ttemp[i] = people[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tpeople[i] = temp[i];\n\t\t\t}\n\t\t\tfor(int i = 0; i < k; i++){\n\t\t\t\tsecret[i] = result[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(arr[i] <= k){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = Integer.parseInt(args[i+2]);\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = Integer.parseInt(args[i+n+2]);\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = Integer.parseInt(args[i+n+m+2]);\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = Integer.parseInt(args[i+n+m+m+2]);\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = Integer.parseInt(args[i+n+m+m+m+2]);\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = Integer.parseInt(args[i+n+m+m+m+m+2]);\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = Integer.parseInt(args[i+n+m+m+m+m+m+2]);\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = Integer.parseInt(args[i+\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint m = sc.nextInt();\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] people = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tpeople[i] = Integer.parseInt(args[i+1]);\n\t\t}\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(people[i] == people[j]){\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(count[i] == 1){\n\t\t\t\tSystem.out.println(people[i]);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tint numberOfPeopleAwareOfASecret(int[] peopleAwareOfASecret){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < peopleAwareOfASecret.length; i++){\n\t\t\tif(peopleAwareOfASecret[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1321",
        "source": "leetcodeTitles",
        "source_id": "799",
        "url": "https://leetcode.com/problems/champagne-tower/",
        "language": "java",
        "query": "Champagne Tower",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint w = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint p = 0;\n\t\tint o = 0;\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = 0;\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tint f = 0;\n\t\tint g = 0;\n\t\tint h = 0;\n\t\tint jk = 0;\n\t\tint lm = 0;\n\t\tint no = 0;\n\t\tint pq = 0;\n\t\tint rs = 0;\n\t\tint tu = 0;\n\t\tint vw = 0;\n\t\tint xy = 0;\n\t\tint zw = 0;\n\t\tint ab = 0;\n\t\tint cd = 0;\n\t\tint ef = 0;\n\t\tint gh = 0;\n\t\tint ij = 0;\n\t\tint kl = 0;\n\t\tint mn = 0;\n\t\tint op = 0;\n\t\tint qr = 0;\n\t\tint st = 0;\n\t\tint uv = 0;\n\t\tint wx = 0;\n\t\tint yz = 0;\n\t\tint abc = 0;\n\t\tint def = 0;\n\t\tint ghi = 0;\n\t\tint jkl = 0;\n\t\tint mno = 0;\n\t\tint pqr = 0;\n\t\tint stu = 0;\n\t\tint vwx = 0;\n\t\tint xyz = 0;\n\t\tint abcd = 0;\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint h = 0;\n\t\tint g = 0;\n\t\tint f = 0;\n\t\tint e = 0;\n\t\tint d = 0;\n\t\tint c = 0;\n\t\tint b = 0;\n\t\tint a = 0;\n\t\tint a1 = 0;\n\t\tint a2 = 0;\n\t\tint a3 = 0;\n\t\tint a4 = 0;\n\t\tint a5 = 0;\n\t\tint a6 = 0;\n\t\tint a7 = 0;\n\t\tint a8 = 0;\n\t\tint a9 = 0;\n\t\tint a10 = 0;\n\t\tint a11 = 0;\n\t\tint a12 = 0;\n\t\tint a13 = 0;\n\t\tint a14 = 0;\n\t\tint a15 = 0;\n\t\tint a16 = 0;\n\t\tint a17 = 0;\n\t\tint a18 = 0;\n\t\tint a19 = 0;\n\t\tint a20 = 0;\n\t\tint a21 = 0;\n\t\tint a22 = 0;\n\t\tint a23 = 0;\n\t\tint a24 = 0;\n\t\tint a25 = 0;\n\t\tint a26 = 0;\n\t\tint a27 = 0;\n\t\tint a28 = 0;\n\t\tint a29 = 0;\n\t\tint a30 = 0;\n\t\tint a31 = 0;\n\t\tint a32 = 0;\n\t\tint a33 = 0;\n\t\tint a34 = 0;\n\t\tint a35 = 0;\n\t\tint a36 = 0;\n\t\tint a37 = 0;\n\t\tint a38 = 0;\n\t\tint a39 = 0;\n\t\tint a40 = 0;\n\t\tint a41 = 0;\n\t\tint a42 = 0;\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n\t\tint ggg = 0;\n\t\tint hhh = 0;\n\t\tint iii = 0;\n\t\tint jjj = 0;\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint w = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint p = 0;\n\t\tint o = 0;\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = 0;\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tint f = 0;\n\t\tint g = 0;\n\t\tint h = 0;\n\t\tint j1 = 0;\n\t\tint k1 = 0;\n\t\tint l1 = 0;\n\t\tint m1 = 0;\n\t\tint x1 = 0;\n\t\tint y1 = 0;\n\t\tint z1 = 0;\n\t\tint w1 = 0;\n\t\tint q1 = 0;\n\t\tint r1 = 0;\n\t\tint s1 = 0;\n\t\tint t1 = 0;\n\t\tint u1 = 0;\n\t\tint v1 = 0;\n\t\tint p1 = 0;\n\t\tint o1 = 0;\n\t\tint a1 = 0;\n\t\tint b1 = 0;\n\t\tint c1 = 0;\n\t\tint d1 = 0;\n\t\tint e1 = 0;\n\t\tint f1 = 0;\n\t\tint g1 = 0;\n\t\tint h1 = 0;\n\t\tint j2 = 0;\n\t\tint k2 = 0;\n\t\tint l2 = 0;\n\t\tint m2 = 0;\n\t\tint x2 = 0;\n\t\tint y2 = 0;\n\t\tint z2 = 0;\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n\t\tint ggg = 0;\n\t\tint hhh = 0;\n\t\tint iii = 0;\n\t\tint jjj = 0;\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint height = (int)Math.pow(2, n) - 1;\n\t\tint width = 2 * n - 1;\n\t\tint[][] tower = new int[height][width];\n\t\tfor(int i = 0; i < height; i++){\n\t\t\tfor(int j = 0; j < width; j++){\n\t\t\t\ttower[i][j] = 0;\n\t\t\t}\n\t\t}\n\t\tint row = 0;\n\t\tint col = n - 1;\n\t\tint count = 1;\n\t\twhile(count <= n){\n\t\t\tfor(int i = 0; i < count; i++){\n\t\t\t\ttower[row][col] = count;\n\t\t\t\tcol--;\n\t\t\t}\n\t\t\trow++;\n\t\t\tcol++;\n\t\t\tcount++;\n\t\t}\n\t\tfor(int i = 0; i < height; i++){\n\t\t\tfor(int j = 0; j < width; j++){\n\t\t\t\tSystem.out.print(tower[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint i, j, k;\n\t\tfor(i = 1; i <= n; i++){\n\t\t\tfor(j = 1; j <= n - i; j++){\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t\tfor(k = 1; k <= i; k++){\n\t\t\t\tSystem.out.print(\"*\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint height = n;\n\t\tint space = n-1;\n\t\tint i = 0;\n\t\twhile(i<n){\n\t\t\tint j = 0;\n\t\t\twhile(j<space){\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tint k = 0;\n\t\t\twhile(k<height){\n\t\t\t\tSystem.out.print(\"*\");\n\t\t\t\tk++;\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t\tspace--;\n\t\t\theight += 2;\n\t\t\ti++;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint height = (n+1)*n/2;\n\t\tint i,j;\n\t\tfor(i=1;i<=height;i++){\n\t\t\tfor(j=1;j<=height-i;j++){\n\t\t\t\tSystem.out.print(\" \");\n\t\t\t}\n\t\t\tfor(j=1;j<=i;j++){\n\t\t\t\tSystem.out.print(\"*\");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1322",
        "source": "leetcodeTitles",
        "source_id": "1332",
        "url": "https://leetcode.com/problems/remove-palindromic-subsequences/",
        "language": "java",
        "query": "Remove Palindromic Subsequences",
        "snippets": [
            "\tint removePalindromeSub(String s) {\n\t\tif(s.length() == 0) return 0;\n\t\tif(s.equals(new StringBuilder(s).reverse().toString())) return 1;\n\t\treturn 2;\n\t}\n}\n",
            "\tint removePalindromeSub(String s){\n\t\tif(s.length() == 0) return 0;\n\t\tif(s.length() == 1) return 1;\n\t\tif(s.equals(new StringBuilder(s).reverse().toString())) return 2;\n\t\treturn 1;\n\t}\n}\n",
            "\tint removePalindromeSub(String s) {\n\t\tif(s == null || s.length() == 0) return 0;\n\t\tif(isPalindrome(s)) return 1;\n\t\treturn 2;\n\t}\n\t\n\tpublic boolean isPalindrome(String s){\n\t\tint i = 0;\n\t\tint j = s.length() - 1;\n\t\twhile(i < j){\n\t\t\tif(s.charAt(i++) != s.charAt(j--)) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1323",
        "source": "leetcodeTitles",
        "source_id": "955",
        "url": "https://leetcode.com/problems/delete-columns-to-make-sorted-ii/",
        "language": "java",
        "query": "Delete Columns to Make Sorted II",
        "snippets": [
            "\tvoid deleteColumnsToMakeSorted(int[] A, int k){\n\t\tint n = A.length;\n\t\tint[] B = new int[n];\n\t\tint[] C = new int[n];\n\t\tint[] D = new int[n];\n\t\tint[] E = new int[n];\n\t\tint[] F = new int[n];\n\t\tint[] G = new int[n];\n\t\tint[] H = new int[n];\n\t\tint[] I = new int[n];\n\t\tint[] J = new int[n];\n\t\tint[] K = new int[n];\n\t\tint[] L = new int[n];\n\t\tint[] M = new int[n];\n\t\tint[] N = new int[n];\n\t\tint[] O = new int[n];\n\t\tint[] P = new int[n];\n\t\tint[] Q = new int[n];\n\t\tint[] R = new int[n];\n\t\tint[] S = new int[n];\n\t\tint[] T = new int[n];\n\t\tint[] U = new int[n];\n\t\tint[] V = new int[n];\n\t\tint[] W = new int[n];\n\t\tint[] X = new int[n];\n\t\tint[] Y = new int[n];\n\t\tint[] Z = new int[n];\n\t\tint[] AA = new int[n];\n\t\tint[] BB = new int[n];\n\t\tint[] CC = new int[n];\n\t\tint[] DD = new int[n];\n\t\tint[] EE = new int[n];\n\t\tint[] FF = new int[n];\n\t\tint[] GG = new int[n];\n\t\tint[] HH = new int[n];\n\t\tint[] II = new int[n];\n\t\tint[] JJ = new int[n];\n\t\tint[] KK = new int[n];\n\t\tint[] LL = new int[n];\n\t\tint[] MM = new int[n];\n\t\tint[] NN = new int[n];\n",
            "\tvoid deleteColumns(int[][] matrix, int k){\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < m && j < n){\n\t\t\tif(matrix[i][j] == 0){\n\t\t\t\tif(k > 0){\n\t\t\t\t\tk--;\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor(int r = 0; r < m; r++){\n\t\t\t\t\t\tmatrix[r][j] = 0;\n\t\t\t\t\t}\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid deleteColumnsToMakeSortedII(int[] A, int k){\n\t\tint n = A.length;\n\t\tint[] B = new int[n];\n\t\tint[] C = new int[n];\n\t\tint[] D = new int[n];\n\t\tint[] E = new int[n];\n\t\tint[] F = new int[n];\n\t\tint[] G = new int[n];\n\t\tint[] H = new int[n];\n\t\tint[] I = new int[n];\n\t\tint[] J = new int[n];\n\t\tint[] K = new int[n];\n\t\tint[] L = new int[n];\n\t\tint[] M = new int[n];\n\t\tint[] N = new int[n];\n\t\tint[] O = new int[n];\n\t\tint[] P = new int[n];\n\t\tint[] Q = new int[n];\n\t\tint[] R = new int[n];\n\t\tint[] S = new int[n];\n\t\tint[] T = new int[n];\n\t\tint[] U = new int[n];\n\t\tint[] V = new int[n];\n\t\tint[] W = new int[n];\n\t\tint[] X = new int[n];\n\t\tint[] Y = new int[n];\n\t\tint[] Z = new int[n];\n\t\tint[] AA = new int[n];\n\t\tint[] BB = new int[n];\n\t\tint[] CC = new int[n];\n\t\tint[] DD = new int[n];\n\t\tint[] EE = new int[n];\n\t\tint[] FF = new int[n];\n\t\tint[] GG = new int[n];\n\t\tint[] HH = new int[n];\n\t\tint[] II = new int[n];\n\t\tint[] JJ = new int[n];\n\t\tint[] KK = new int[n];\n\t\tint[] LL = new int[n];\n\t\tint[] MM = new int[n];\n\t\tint[] NN = new int[n];\n",
            "\tvoid deleteColumns(int[][] A, int k){\n\t\tint m = A.length;\n\t\tint n = A[0].length;\n\t\tint[][] B = new int[m][n-k];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n-k; j++){\n\t\t\t\tB[i][j] = A[i][j+k];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n-k; j++){\n\t\t\t\tA[i][j] = B[i][j];\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid deleteColumnsToMakeSortedII(int[][] matrix, int k){\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + matrix[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint[][] dp2 = new int[m][n];\n\t\tfor(int i = m-1; i >= 0; i--){\n\t\t\tfor(int j = n-1; j >= 0; j--){\n\t\t\t\tif(i == m-1 && j == n-1){\n\t\t\t\t\tdp2[i][j] = matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == m-1){\n\t\t\t\t\tdp2[i][j] = dp2[i][j+1] + matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == n-1){\n\t\t\t\t\tdp2[i][j] = dp2[i+1][j] + matrix[i][j];\n\t\t\t\t}\n",
            "\tvoid deleteColumnsToMakeSorted(int[][] A, int k){\n\t\tint m = A.length;\n\t\tint n = A[0].length;\n\t\tint[][] B = new int[m][n-k];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n-k; j++){\n\t\t\t\tB[i][j] = A[i][j+k];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n-k; j++){\n\t\t\t\tA[i][j] = B[i][j];\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid deleteColumnsToMakeSortedII(int[][] matrix, int k){\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tcount[j] += matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tint[] sum = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsum[i] = count[i];\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tsum[i] += sum[j];\n\t\t\t}\n\t\t}\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = sum[n - 1] - sum[i];\n\t\t}\n\t\tint[] dp2 = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp2[i] = dp[i];\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tdp2[i] = Math.min(dp2[i], dp2[j] + dp[i] - dp[j]);\n\t\t\t}\n\t\t}\n\t\tint min = dp2[0];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmin = Math.min(min, dp2[i]);\n\t\t}\n\t\tint[] res = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tres[i] = dp2[i] - min;\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n;\n",
            "\tvoid deleteColumnsToMakeSorted(int[][] matrix, int k){\n\t\tint n = matrix.length;\n\t\tint m = matrix[0].length;\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + matrix[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint min = dp[n-1][m-1];\n\t\tint[][] dp2 = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp2[i][j] = matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp2[i][j] = dp2[i][j-1] + matrix[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp2[i][j] = dp2[i-1][j] + matrix[i][j];\n\t\t\t\t}\n",
            "\tvoid deleteColumnsToMakeSorted(int[] A, int k) {\n\t\tint n = A.length;\n\t\tint[] B = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tB[i] = A[i];\n\t\t}\n\t\tint[] C = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tC[i] = A[i];\n\t\t}\n\t\tint[] D = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tD[i] = A[i];\n\t\t}\n\t\tint[] E = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tE[i] = A[i];\n\t\t}\n\t\tint[] F = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tF[i] = A[i];\n\t\t}\n\t\tint[] G = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tG[i] = A[i];\n\t\t}\n\t\tint[] H = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tH[i] = A[i];\n\t\t}\n\t\tint[] I = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tI[i] = A[i];\n\t\t}\n\t\tint[] J = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tJ[i] = A[i];\n\t\t}\n\t\tint[] K = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tK[i] = A[i];\n\t\t}\n\t\tint[] L = new int[n\n"
        ],
        "results": 10
    },
    {
        "id": "1324",
        "source": "leetcodeTitles",
        "source_id": "397",
        "url": "https://leetcode.com/problems/integer-replacement/",
        "language": "java",
        "query": "Integer Replacement",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint a = 10;\n\t\tint b = 20;\n\t\tint c = a + b;\n\t\tSystem.out.println(c);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint i = 0;\n\t\twhile(i < 10){\n\t\t\tSystem.out.println(i);\n\t\t\ti++;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = 0;\n\t\tint b = 1;\n\t\tint c = 2;\n\t\tint d = 3;\n\t\tint e = 4;\n\t\tint f = 5;\n\t\tint g = 6;\n\t\tint h = 7;\n\t\tint i = 8;\n\t\tint j = 9;\n\t\tint k = 10;\n\t\tint l = 11;\n\t\tint m = 12;\n\t\tint n = 13;\n\t\tint o = 14;\n\t\tint p = 15;\n\t\tint q = 16;\n\t\tint r = 17;\n\t\tint s = 18;\n\t\tint t = 19;\n\t\tint u = 20;\n\t\tint v = 21;\n\t\tint w = 22;\n\t\tint x = 23;\n\t\tint y = 24;\n\t\tint z = 25;\n\t\tint aa = 26;\n\t\tint bb = 27;\n\t\tint cc = 28;\n\t\tint dd = 29;\n\t\tint ee = 30;\n\t\tint ff = 31;\n\t\tint gg = 32;\n\t\tint hh = 33;\n\t\tint ii = 34;\n\t\tint jj = 35;\n\t\tint kk = 36;\n\t\tint ll = 37;\n\t\tint mm = 38;\n\t\tint nn = 39;\n\t\tint oo = 40;\n\t\tint pp = 41;\n\t\tint qq = 42;\n\t\tint rr = 43;\n\t\tint ss = 44;\n\t\tint tt = 45;\n\t\tint uu = 46;\n\t\tint vv = 47;\n\t\tint ww = 48;\n\t\tint xx = 49;\n\t\tint yy = 50;\n\t\tint zz = 51;\n\t\tint aaa = 52;\n\t\tint bbb = 53;\n\t\tint ccc = 54;\n\t\tint ddd = 55;\n\t\tint eee = 56;\n\t\tint fff = 57;\n",
            "\tstatic void main(String[] args){\n\t\tint a = Integer.parseInt(args[0]);\n\t\tint b = Integer.parseInt(args[1]);\n\t\tint c = a + b;\n\t\tSystem.out.println(c);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = Integer.parseInt(\"123\");\n\t\tSystem.out.println(a);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = 10;\n\t\tint b = a;\n\t\ta = 20;\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(b);\n\t}\n}\n",
            "\tvoid m1(){\n\t\tint i = 0;\n\t\ti = i + 1;\n\t\ti = i + 2;\n\t\ti = i + 3;\n\t\ti = i + 4;\n\t\ti = i + 5;\n\t\ti = i + 6;\n\t\ti = i + 7;\n\t\ti = i + 8;\n\t\ti = i + 9;\n\t\ti = i + 10;\n\t\ti = i + 11;\n\t\ti = i + 12;\n\t\ti = i + 13;\n\t\ti = i + 14;\n\t\ti = i + 15;\n\t\ti = i + 16;\n\t\ti = i + 17;\n\t\ti = i + 18;\n\t\ti = i + 19;\n\t\ti = i + 20;\n\t\ti = i + 21;\n\t\ti = i + 22;\n\t\ti = i + 23;\n\t\ti = i + 24;\n\t\ti = i + 25;\n\t\ti = i + 26;\n\t\ti = i + 27;\n\t\ti = i + 28;\n\t\ti = i + 29;\n\t\ti = i + 30;\n\t\ti = i + 31;\n\t\ti = i + 32;\n\t\ti = i + 33;\n\t\ti = i + 34;\n\t\ti = i + 35;\n\t\ti = i + 36;\n\t\ti = i + 37;\n\t\ti = i + 38;\n\t\ti = i + 39;\n\t\ti = i + 40;\n\t\ti = i + 41;\n\t\ti = i + 42;\n\t\ti = i + 43;\n\t\ti = i + 44;\n\t\ti = i + 45;\n\t\ti = i + 46;\n\t\ti = i + 47;\n\t\ti = i + 48;\n\t\ti = i + 49;\n\t\ti = i + 50;\n\t\ti = i + 51;\n\t\ti = i + 52;\n\t\ti = i + 53;\n\t\ti = i + 54;\n"
        ],
        "results": 10
    },
    {
        "id": "1325",
        "source": "leetcodeTitles",
        "source_id": "1438",
        "url": "https://leetcode.com/problems/longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit/",
        "language": "java",
        "query": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "snippets": [
            "\tint longestSubarray(int[] nums, int limit) {\n\t\tint n = nums.length;\n\t\tint[] sums = new int[n + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsums[i + 1] = sums[i] + nums[i];\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j <= n; j++) {\n\t\t\t\tint abs = Math.abs(sums[j] - sums[i]);\n\t\t\t\tif (abs <= limit) {\n\t\t\t\t\tans = Math.max(ans, j - i);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint longestSubarray(int[] nums, int limit) {\n\t\tint n = nums.length;\n\t\tint[] sums = new int[n + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsums[i + 1] = sums[i] + nums[i];\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j <= n; j++) {\n\t\t\t\tans = Math.max(ans, j - i);\n\t\t\t\tif (sums[j] - sums[i] > limit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint longestSubarray(int[] nums, int limit) {\n\t\tint n = nums.length;\n\t\tint[] sums = new int[n];\n\t\tsums[0] = nums[0];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tsums[i] = sums[i - 1] + nums[i];\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i; j < n; j++) {\n\t\t\t\tint abs = Math.abs(sums[j] - sums[i]);\n\t\t\t\tif (abs <= limit) {\n\t\t\t\t\tans = Math.max(ans, j - i + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint longestSubarray(int[] nums, int limit) {\n\t\tint max = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tsum += nums[i];\n\t\t\twhile (sum > limit) {\n\t\t\t\tsum -= nums[start];\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\tmax = Math.max(max, i - start + 1);\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1326",
        "source": "leetcodeTitles",
        "source_id": "922",
        "url": "https://leetcode.com/problems/sort-array-by-parity-ii/",
        "language": "java",
        "query": "Sort Array By Parity II",
        "snippets": [
            "\tint[] sortArrayByParityII(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0, j = 1;\n\t\tfor (int k = 0; k < A.length; k++) {\n\t\t\tif (A[k] % 2 == 0) {\n\t\t\t\tB[i] = A[k];\n\t\t\t\ti += 2;\n\t\t\t} else {\n\t\t\t\tB[j] = A[k];\n\t\t\t\tj += 2;\n\t\t\t}\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tvoid sortArrayByParityII(int[] A) {\n\t\tint i = 0;\n\t\tint j = 1;\n\t\twhile (i < A.length && j < A.length) {\n\t\t\tif (A[i] % 2 == 0) {\n\t\t\t\ti += 2;\n\t\t\t} else if (A[j] % 2 == 1) {\n\t\t\t\tj += 2;\n\t\t\t} else {\n\t\t\t\tint temp = A[i];\n\t\t\t\tA[i] = A[j];\n\t\t\t\tA[j] = temp;\n\t\t\t\ti += 2;\n\t\t\t\tj += 2;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid sortArrayByParityII(int[] A) {\n\t\tint i = 0, j = 1;\n\t\twhile (i < A.length && j < A.length) {\n\t\t\tif ((A[i] & 1) == 0 && (A[j] & 1) == 1) {\n\t\t\t\tint temp = A[i];\n\t\t\t\tA[i] = A[j];\n\t\t\t\tA[j] = temp;\n\t\t\t}\n\t\t\tif ((A[i] & 1) == 0) {\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\tif ((A[j] & 1) == 1) {\n\t\t\t\tj += 2;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic int[] sortArrayByParityII(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tfor(int k = 0; k < A.length; k++){\n\t\t\tif(A[k] % 2 == 0){\n\t\t\t\tB[i] = A[k];\n\t\t\t\ti += 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tB[j] = A[k];\n\t\t\t\tj += 2;\n\t\t\t}\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tstatic void sortArrayByParityII(int[] A) {\n\t\tint i = 0;\n\t\tint j = 1;\n\t\twhile (i < A.length && j < A.length) {\n\t\t\tif (A[i] % 2 == 0) {\n\t\t\t\ti += 2;\n\t\t\t} else if (A[j] % 2 == 1) {\n\t\t\t\tj += 2;\n\t\t\t} else {\n\t\t\t\tint temp = A[i];\n\t\t\t\tA[i] = A[j];\n\t\t\t\tA[j] = temp;\n\t\t\t\ti += 2;\n\t\t\t\tj += 2;\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1327",
        "source": "leetcodeTitles",
        "source_id": "152",
        "url": "https://leetcode.com/problems/maximum-product-subarray/",
        "language": "java",
        "query": "Maximum Product Subarray",
        "snippets": [
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint res = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint tmp = max;\n\t\t\tmax = Math.max(Math.max(max*nums[i], min*nums[i]), nums[i]);\n\t\t\tmin = Math.min(Math.min(tmp*nums[i], min*nums[i]), nums[i]);\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint res = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint tmp = max;\n\t\t\tmax = Math.max(Math.max(nums[i], nums[i] * max), nums[i] * min);\n\t\t\tmin = Math.min(Math.min(nums[i], nums[i] * tmp), nums[i] * min);\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint res = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(Math.max(max*nums[i], min*nums[i]), nums[i]);\n\t\t\tmin = Math.min(Math.min(temp*nums[i], min*nums[i]), nums[i]);\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint result = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(Math.max(max*nums[i], min*nums[i]), nums[i]);\n\t\t\tmin = Math.min(Math.min(temp*nums[i], min*nums[i]), nums[i]);\n\t\t\tresult = Math.max(result, max);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tif(nums.length == 0) return 0;\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint res = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(Math.max(max*nums[i], min*nums[i]), nums[i]);\n\t\t\tmin = Math.min(Math.min(temp*nums[i], min*nums[i]), nums[i]);\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1328",
        "source": "leetcodeTitles",
        "source_id": "932",
        "url": "https://leetcode.com/problems/beautiful-array/",
        "language": "java",
        "query": "Beautiful Array",
        "snippets": [
            "\tstatic int[] beautifulArray(int N) {\n\t\tint[] res = new int[N];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tres[0] = 1;\n\t\twhile(i < N-1){\n\t\t\twhile(j < N && res[j-1] * 2 <= res[j]){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j == N){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tres[i+1] = res[j-1] * 2;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\twhile(j < N){\n\t\t\tres[i+1] = res[j-1] * 2;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] beautifulArray(int N) {\n\t\tint[] res = new int[N];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tres[0] = 1;\n\t\twhile(i < N) {\n\t\t\tif(j == 1) {\n\t\t\t\tres[i] = j;\n\t\t\t\ti++;\n\t\t\t\tj = 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres[i] = j;\n\t\t\t\ti++;\n\t\t\t\tj = j * 2 + 1;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] beautifulArray(int N) {\n\t\tint[] res = new int[N];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tres[0] = 1;\n\t\twhile(j < N){\n\t\t\tif(res[i] * 2 > N){\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t\tres[j] = res[i] * 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres[j] = res[i] * 2;\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] beautifulArray(int N) {\n\t\tint[] res = new int[N];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tres[0] = 1;\n\t\twhile (i < N) {\n\t\t\tif (j == 1) {\n\t\t\t\tres[i] = j;\n\t\t\t\ti++;\n\t\t\t\tj = 2;\n\t\t\t} else if (j == 2) {\n\t\t\t\tres[i] = j;\n\t\t\t\ti++;\n\t\t\t\tj = 3;\n\t\t\t} else if (j == 3) {\n\t\t\t\tres[i] = j;\n\t\t\t\ti++;\n\t\t\t\tj = 5;\n\t\t\t} else {\n\t\t\t\tres[i] = j;\n\t\t\t\ti++;\n\t\t\t\tj = j * 2 + 1;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] beautifulArray(int N) {\n\t\tint[] res = new int[N];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tres[0] = 1;\n\t\twhile(i < N - 1){\n\t\t\twhile(j < N && res[j] == 0){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j == N){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tres[i + 1] = res[j];\n\t\t\tres[j] = 0;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] beautifulArray(int N) {\n\t\tint[] res = new int[N];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tres[0] = 1;\n\t\twhile(i < N-1){\n\t\t\tif(res[i] == j){\n\t\t\t\ti++;\n\t\t\t\tj = res[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres[i+1] = j;\n\t\t\t\ti++;\n\t\t\t\tj = res[i];\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] beautifulArray(int N) {\n\t\tint[] res = new int[N];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tres[0] = 1;\n\t\twhile(i < N - 1){\n\t\t\twhile(j < N && res[j] == 0) j++;\n\t\t\tif(j == N) break;\n\t\t\tres[i + 1] = res[j];\n\t\t\tres[j] = 0;\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] beautifulArray(int N) {\n\t\tint[] res = new int[N];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tres[0] = 1;\n\t\twhile(i < N){\n\t\t\tif(res[i] * 2 > N){\n\t\t\t\tres[i] = res[i] * 2 - N;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres[i] = res[i] * 2;\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr2 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr3 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr4 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr5 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr6 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr7 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr8 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr9 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr10 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr11 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr12 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr13 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr14 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr15 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr16 = {2,4,6,8,10,12,14,16,18,20};\n\t\tint[] arr17 = {2,4,6,8,10,12,14,16,18,\n"
        ],
        "results": 10
    },
    {
        "id": "1329",
        "source": "leetcodeTitles",
        "source_id": "1637",
        "url": "https://leetcode.com/problems/widest-vertical-area-between-two-points-containing-no-points/",
        "language": "java",
        "query": "Widest Vertical Area Between Two Points Containing No Points",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {1,2,3,\n",
            "\tstatic int maxWidth(int[][] points){\n\t\tint max = 0;\n\t\tfor(int i = 0; i < points.length; i++){\n\t\t\tfor(int j = i + 1; j < points.length; j++){\n\t\t\t\tint width = getWidth(points[i], points[j]);\n\t\t\t\tif(width > max){\n\t\t\t\t\tmax = width;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tstatic int getWidth(int[] p1, int[] p2){\n\t\tint x1 = p1[0];\n\t\tint y1 = p1[1];\n\t\tint x2 = p2[0];\n\t\tint y2 = p2[1];\n\t\tint width = Math.abs(x1 - x2);\n\t\tint height = Math.abs(y1 - y2);\n\t\treturn width > height ? width : height;\n\t}\n}\n",
            "\tstatic int maxWidth(int[][] points){\n\t\tint max = 0;\n\t\tfor(int i = 0; i < points.length; i++){\n\t\t\tfor(int j = i + 1; j < points.length; j++){\n\t\t\t\tint width = width(points[i], points[j]);\n\t\t\t\tif(width > max){\n\t\t\t\t\tmax = width;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tstatic int width(int[] p1, int[] p2){\n\t\tint x1 = p1[0];\n\t\tint y1 = p1[1];\n\t\tint x2 = p2[0];\n\t\tint y2 = p2[1];\n\t\tint width = Math.abs(x1 - x2);\n\t\tint height = Math.abs(y1 - y2);\n\t\treturn Math.max(width, height);\n\t}\n}\n",
            "\tstatic int maxArea(int[] A, int[] B){\n\t\tint n = A.length;\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tint area = (B[j] - A[i]) * (A[i] - A[j]);\n\t\t\t\tif(area > max)\n\t\t\t\t\tmax = area;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxArea(int[] A, int[] B){\n\t\tint n = A.length;\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tint area = (B[j] - A[i]) * (A[j] - A[i]);\n\t\t\t\tif(area > max)\n\t\t\t\t\tmax = area;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxArea(int[] A, int[] B){\n\t\tint n = A.length;\n\t\tint[] left = new int[n];\n\t\tint[] right = new int[n];\n\t\tleft[0] = A[0];\n\t\tright[n-1] = B[n-1];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tleft[i] = Math.min(left[i-1], A[i]);\n\t\t}\n\t\tfor(int i = n-2; i >= 0; i--){\n\t\t\tright[i] = Math.min(right[i+1], B[i]);\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmax = Math.max(max, (right[i]-left[i])*(i+1));\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxArea(int[] a, int[] b) {\n\t\tint n = a.length;\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tint area = (b[j] - a[i]) * (b[j] - a[i]);\n\t\t\t\tif (area > max) {\n\t\t\t\t\tmax = area;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxArea(int[] A, int[] B) {\n\t\tint n = A.length;\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tint area = (B[j] - A[i]) * (A[j] - A[i]);\n\t\t\t\tif (area > max) {\n\t\t\t\t\tmax = area;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxArea(int[] a, int[] b){\n\t\tint n = a.length;\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tint area = (b[j] - a[i]) * (a[i] - a[j]);\n\t\t\t\tif(area > max) max = area;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxArea(int[] A, int[] B){\n\t\tint n = A.length;\n\t\tint max = 0;\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\twhile(i < j){\n\t\t\tmax = Math.max(max, Math.min(A[i], B[j]) * (j - i));\n\t\t\tif(A[i] < B[j]){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1330",
        "source": "leetcodeTitles",
        "source_id": "2011",
        "url": "https://leetcode.com/problems/final-value-of-variable-after-performing-operations/",
        "language": "java",
        "query": "Final Value of Variable After Performing Operations",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint a=10;\n\t\tint b=20;\n\t\tint c=a+b;\n\t\tSystem.out.println(\"Sum of a and b is \"+c);\n\t\tint d=a-b;\n\t\tSystem.out.println(\"Difference of a and b is \"+d);\n\t\tint e=a*b;\n\t\tSystem.out.println(\"Product of a and b is \"+e);\n\t\tint f=a/b;\n\t\tSystem.out.println(\"Quotient of a and b is \"+f);\n\t\tint g=a%b;\n\t\tSystem.out.println(\"Remainder of a and b is \"+g);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a=10;\n\t\tint b=20;\n\t\tint c=a+b;\n\t\tSystem.out.println(\"Sum of a and b is \"+c);\n\t\tc=a-b;\n\t\tSystem.out.println(\"Difference of a and b is \"+c);\n\t\tc=a*b;\n\t\tSystem.out.println(\"Product of a and b is \"+c);\n\t\tc=a/b;\n\t\tSystem.out.println(\"Quotient of a and b is \"+c);\n\t\tc=a%b;\n\t\tSystem.out.println(\"Remainder of a and b is \"+c);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a=10;\n\t\tint b=20;\n\t\tint c=30;\n\t\tint d=40;\n\t\tint e=50;\n\t\tint f=60;\n\t\tint g=70;\n\t\tint h=80;\n\t\tint i=90;\n\t\tint j=100;\n\t\tint k=110;\n\t\tint l=120;\n\t\tint m=130;\n\t\tint n=140;\n\t\tint o=150;\n\t\tint p=160;\n\t\tint q=170;\n\t\tint r=180;\n\t\tint s=190;\n\t\tint t=200;\n\t\tint u=210;\n\t\tint v=220;\n\t\tint w=230;\n\t\tint x=240;\n\t\tint y=250;\n\t\tint z=260;\n\t\tint aa=270;\n\t\tint bb=280;\n\t\tint cc=290;\n\t\tint dd=300;\n\t\tint ee=310;\n\t\tint ff=320;\n\t\tint gg=330;\n\t\tint hh=340;\n\t\tint ii=350;\n\t\tint jj=360;\n\t\tint kk=370;\n\t\tint ll=380;\n\t\tint mm=390;\n\t\tint nn=400;\n\t\tint oo=410;\n\t\tint pp=420;\n\t\tint qq=430;\n\t\tint rr=440;\n\t\tint ss=450;\n\t\tint tt=460;\n\t\tint uu=470;\n\t\tint vv=480;\n\t\tint ww=490;\n\t\tint xx=500;\n\t\tint yy=510;\n\t\tint zz=520;\n\t\tint aaa=530;\n\t\tint bbb=540;\n\t\tint ccc=550;\n\t\tint ddd=560;\n\t\tint eee=570;\n\t\tint fff=580;\n",
            "\tstatic void main(String[] args){\n\t\tint a=10;\n\t\tint b=20;\n\t\tint c=a+b;\n\t\tSystem.out.println(\"Addition of a and b is \"+c);\n\t\tc=a-b;\n\t\tSystem.out.println(\"Subtraction of a and b is \"+c);\n\t\tc=a*b;\n\t\tSystem.out.println(\"Multiplication of a and b is \"+c);\n\t\tc=a/b;\n\t\tSystem.out.println(\"Division of a and b is \"+c);\n\t\tc=a%b;\n\t\tSystem.out.println(\"Modulus of a and b is \"+c);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = 10;\n\t\tint b = 20;\n\t\tint c = a + b;\n\t\tSystem.out.println(c);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1331",
        "source": "leetcodeTitles",
        "source_id": "2058",
        "url": "https://leetcode.com/problems/find-the-minimum-and-maximum-number-of-nodes-between-critical-points/",
        "language": "java",
        "query": "Find the Minimum and Maximum Number of Nodes Between Critical Points",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i=0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int b_i=0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int c_i=0; c_i < m; c_i++){\n\t\t\tc[c_i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int d_i=0; d_i < m; d_i++){\n\t\t\td[d_i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int e_i=0; e_i < m; e_i++){\n\t\t\te[e_i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int f_i=0; f_i < m; f_i++){\n\t\t\tf[f_i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int g_i=0; g_i < m; g_i++){\n\t\t\tg[g_i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int h_i=0; h_i < m; h_i++){\n\t\t\th[h_i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n",
            "\tint findMin(int[] a, int n){\n\t\tint min = a[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n\tpublic\n\tint findMax(int[] a, int n){\n\t\tint max = a[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tint findMinMax(int[] a, int n){\n\t\tint min = findMin(a, n);\n\t\tint max = findMax(a, n);\n\t\treturn max - min;\n\t}\n}\n",
            "\tint findMin(int[] a, int n){\n\t\tint min = a[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(a[i] < min)\n\t\t\t\tmin = a[i];\n\t\t}\n\t\treturn min;\n\t}\n\tpublic\n\tint findMax(int[] a, int n){\n\t\tint max = a[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(a[i] > max)\n\t\t\t\tmax = a[i];\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tint findMinMax(int[] a, int n){\n\t\tint min = findMin(a, n);\n\t\tint max = findMax(a, n);\n\t\treturn max - min;\n\t}\n}\n",
            "\tint findMin(int[] a, int[] b, int[] c){\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tint sum = a[i] + b[i] + c[i];\n\t\t\tif(sum < min){\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n\tpublic\n\tint findMax(int[] a, int[] b, int[] c){\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tint sum = a[i] + b[i] + c[i];\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint findMin(int[] a, int[] b, int[] c){\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tint sum = a[i] + b[i] + c[i];\n\t\t\tif(sum < min)\n\t\t\t\tmin = sum;\n\t\t}\n\t\treturn min;\n\t}\n\tpublic\n\tint findMax(int[] a, int[] b, int[] c){\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tint sum = a[i] + b[i] + c[i];\n\t\t\tif(sum > max)\n\t\t\t\tmax = sum;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint findMin(int[] a, int n){\n\t\tint min = a[0];\n\t\tfor(int i=1;i<n;i++){\n\t\t\tif(a[i]<min)\n\t\t\t\tmin = a[i];\n\t\t}\n\t\treturn min;\n\t}\n\tpublic\n\tint findMax(int[] a, int n){\n\t\tint max = a[0];\n\t\tfor(int i=1;i<n;i++){\n\t\t\tif(a[i]>max)\n\t\t\t\tmax = a[i];\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tint findMinMax(int[] a, int n){\n\t\tint min = findMin(a,n);\n\t\tint max = findMax(a,n);\n\t\tint minMax = max-min;\n\t\treturn minMax;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1332",
        "source": "leetcodeTitles",
        "source_id": "2170",
        "url": "https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/",
        "language": "java",
        "query": "Minimum Operations to Make the Array Alternating",
        "snippets": [
            "\tstatic int minOperations(int[] arr){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] arr){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] nums){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tint j = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 0){\n\t\t\t\tnums[i] = 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnums[i] = 0;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 1){\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tif(j == nums.length){\n\t\t\treturn count;\n\t\t}\n\t\telse{\n\t\t\treturn count + 1;\n\t\t}\n\t}\n}\n",
            "\tstatic int minOperations(int[] nums){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount += 2;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] nums){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minOperations(int[] nums){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] arr) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tint[] temp = new int[count];\n\t\tint j = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == 0){\n\t\t\t\ttemp[j] = i;\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < temp.length; i++){\n\t\t\tarr[temp[i]] = 1;\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == 0){\n\t\t\t\tarr[i] = 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarr[i] = 0;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1333",
        "source": "leetcodeTitles",
        "source_id": "2120",
        "url": "https://leetcode.com/problems/execution-of-all-suffix-instructions-staying-in-a-grid/",
        "language": "java",
        "query": "Execution of All Suffix Instructions Staying in a Grid",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[][] grid = new int[3][3];\n\t\tgrid[0][0] = 1;\n\t\tgrid[0][1] = 2;\n\t\tgrid[0][2] = 3;\n\t\tgrid[1][0] = 4;\n\t\tgrid[1][1] = 5;\n\t\tgrid[1][2] = 6;\n\t\tgrid[2][0] = 7;\n\t\tgrid[2][1] = 8;\n\t\tgrid[2][2] = 9;\n\t\tint[][] grid2 = new int[3][3];\n\t\tgrid2[0][0] = 1;\n\t\tgrid2[0][1] = 2;\n\t\tgrid2[0][2] = 3;\n\t\tgrid2[1][0] = 4;\n\t\tgrid2[1][1] = 5;\n\t\tgrid2[1][2] = 6;\n\t\tgrid2[2][0] = 7;\n\t\tgrid2[2][1] = 8;\n\t\tgrid2[2][2] = 9;\n\t\tint[][] grid3 = new int[3][3];\n\t\tgrid3[0][0] = 1;\n\t\tgrid3[0][1] = 2;\n\t\tgrid3[0][2] = 3;\n\t\tgrid3[1][0] = 4;\n\t\tgrid3[1][1] = 5;\n\t\tgrid3[1][2] = 6;\n\t\tgrid3[2][0] = 7;\n\t\tgrid3[2][1] = 8;\n\t\tgrid3[2][2] = 9;\n\t\tint[][] grid4 = new int[3][3];\n\t\tgrid4[0][0] = 1;\n\t\tgrid4[0][1] = 2;\n\t\tgrid4[0][2] = 3;\n\t\tgrid4[1][0] = 4;\n\t\tgrid4[1][1] = 5;\n\t\tgrid4[1][2] = 6;\n",
            "\tstatic void main(String[] args){\n\t\tint[][] grid = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid2 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid3 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid4 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid5 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid6 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid7 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid8 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid9 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid10 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid11 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid12 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid13 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid14 =\n"
        ],
        "results": 10
    },
    {
        "id": "1334",
        "source": "leetcodeTitles",
        "source_id": "2259",
        "url": "https://leetcode.com/problems/remove-digit-from-number-to-maximize-result/",
        "language": "java",
        "query": "Remove Digit From Number to Maximize Result",
        "snippets": [
            "\tstatic int removeDigit(int n){\n\t\tint max = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tint digit = temp % 10;\n\t\t\ttemp = temp / 10;\n\t\t\tmax = Math.max(max, digit * (temp + 1));\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int removeDigit(int n){\n\t\tint max = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tint digit = temp % 10;\n\t\t\ttemp = temp / 10;\n\t\t\tint newNum = temp + digit;\n\t\t\tif(newNum > max){\n\t\t\t\tmax = newNum;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxDigit(int n){\n\t\tint max=0;\n\t\twhile(n>0){\n\t\t\tint digit=n%10;\n\t\t\tmax=Math.max(max,digit);\n\t\t\tn/=10;\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tint removeDigit(int n){\n\t\tint max=maxDigit(n);\n\t\tint result=0;\n\t\twhile(n>0){\n\t\t\tint digit=n%10;\n\t\t\tif(digit==max){\n\t\t\t\tn/=10;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult=result*10+digit;\n\t\t\t\tn/=10;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint removeDigit(int n){\n\t\tint max = 0;\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tint num = n;\n\t\t\tint digit = i;\n\t\t\twhile(num > 0){\n\t\t\t\tint rem = num % 10;\n\t\t\t\tif(rem == digit){\n\t\t\t\t\tnum = num / 10;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tnum = num / 10;\n\t\t\t\t\tnum = num * 10 + rem;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(num > max){\n\t\t\t\tmax = num;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint removeDigit(int n){\n\t\tint max = 0;\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tint num = n;\n\t\t\tint digit = i;\n\t\t\twhile(num > 0){\n\t\t\t\tint lastDigit = num % 10;\n\t\t\t\tif(lastDigit == digit){\n\t\t\t\t\tnum = num / 10;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tnum = num % 10;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(num > max){\n\t\t\t\tmax = num;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint removeDigit(int n){\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint temp = n;\n\t\t\twhile(temp > 0){\n\t\t\t\tint digit = temp % 10;\n\t\t\t\ttemp /= 10;\n\t\t\t\ttemp = temp * 10 + digit;\n\t\t\t\tif(temp > max)\n\t\t\t\t\tmax = temp;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxDigit(int n){\n\t\tint max = 0;\n\t\twhile(n > 0){\n\t\t\tint digit = n % 10;\n\t\t\tmax = Math.max(max, digit);\n\t\t\tn /= 10;\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tint removeDigit(int n){\n\t\tint max = maxDigit(n);\n\t\tint result = 0;\n\t\twhile(n > 0){\n\t\t\tint digit = n % 10;\n\t\t\tif(digit != max)\n\t\t\t\tresult = result * 10 + digit;\n\t\t\tn /= 10;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint removeDigit(int n){\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint temp = n;\n\t\t\twhile(temp > 0){\n\t\t\t\tint digit = temp % 10;\n\t\t\t\ttemp = temp / 10;\n\t\t\t\tint temp2 = n;\n\t\t\t\twhile(temp2 > 0){\n\t\t\t\t\tint digit2 = temp2 % 10;\n\t\t\t\t\ttemp2 = temp2 / 10;\n\t\t\t\t\tif(digit != digit2){\n\t\t\t\t\t\tint result = temp2 * 10 + digit;\n\t\t\t\t\t\tif(result > max){\n\t\t\t\t\t\t\tmax = result;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxDigit(int n){\n\t\tint max = 0;\n\t\twhile(n>0){\n\t\t\tint digit = n%10;\n\t\t\tmax = Math.max(max,digit);\n\t\t\tn = n/10;\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tint removeDigit(int n){\n\t\tint max = maxDigit(n);\n\t\tint sum = 0;\n\t\twhile(n>0){\n\t\t\tint digit = n%10;\n\t\t\tif(digit!=max){\n\t\t\t\tsum = sum*10+digit;\n\t\t\t}\n\t\t\tn = n/10;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tint maxDigit(int n){\n\t\tint max = 0;\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tmax = Math.max(max, temp % 10);\n\t\t\ttemp /= 10;\n\t\t}\n\t\treturn max;\n\t}\n\tpublic\n\tint removeDigit(int n){\n\t\tint max = maxDigit(n);\n\t\tint temp = n;\n\t\twhile(temp > 0){\n\t\t\tif(temp % 10 == max){\n\t\t\t\ttemp /= 10;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttemp = temp % 10;\n\t\t\t}\n\t\t}\n\t\treturn temp;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1335",
        "source": "leetcodeTitles",
        "source_id": "160",
        "url": "https://leetcode.com/problems/intersection-of-two-linked-lists/",
        "language": "java",
        "query": "Intersection of Two Linked Lists",
        "snippets": [
            "\tListNode getIntersectionNode(ListNode headA, ListNode headB) {\n\t\tListNode p = headA;\n\t\tListNode q = headB;\n\t\twhile(p != q){\n\t\t\tp = p == null ? headB : p.next;\n\t\t\tq = q == null ? headA : q.next;\n\t\t}\n\t\treturn p;\n\t}\n}\n",
            "\tListNode getIntersectionNode(ListNode headA, ListNode headB) {\n\t\tif(headA == null || headB == null) return null;\n\t\tListNode p = headA;\n\t\tListNode q = headB;\n\t\twhile(p != q){\n\t\t\tp = p.next;\n\t\t\tq = q.next;\n\t\t\tif(p == q) return p;\n\t\t\tif(p == null){\n\t\t\t\tp = headB;\n\t\t\t}\n\t\t\tif(q == null){\n\t\t\t\tq = headA;\n\t\t\t}\n\t\t}\n\t\treturn p;\n\t}\n}\n",
            "\tListNode getIntersectionNode(ListNode headA, ListNode headB) {\n\t\tif(headA == null || headB == null) return null;\n\t\tListNode p = headA;\n\t\tListNode q = headB;\n\t\twhile(p != q){\n\t\t\tp = p.next;\n\t\t\tq = q.next;\n\t\t\tif(p == q) return p;\n\t\t\tif(p == null) p = headB;\n\t\t\tif(q == null) q = headA;\n\t\t}\n\t\treturn p;\n\t}\n}\n",
            "\tNode intersection(Node head1, Node head2) {\n\t\tNode p1 = head1;\n\t\tNode p2 = head2;\n\t\tint len1 = 0;\n\t\tint len2 = 0;\n\t\twhile (p1 != null) {\n\t\t\tlen1++;\n\t\t\tp1 = p1.next;\n\t\t}\n\t\twhile (p2 != null) {\n\t\t\tlen2++;\n\t\t\tp2 = p2.next;\n\t\t}\n\t\tint diff = Math.abs(len1 - len2);\n\t\tif (len1 > len2) {\n\t\t\tp1 = head1;\n\t\t\tp2 = head2;\n\t\t} else {\n\t\t\tp1 = head2;\n\t\t\tp2 = head1;\n\t\t}\n\t\tfor (int i = 0; i < diff; i++) {\n\t\t\tp1 = p1.next;\n\t\t}\n\t\twhile (p1 != p2) {\n\t\t\tp1 = p1.next;\n\t\t\tp2 = p2.next;\n\t\t}\n\t\treturn p1;\n\t}\n}\n",
            "\tNode intersection(Node headA, Node headB) {\n\t\tNode p = headA;\n\t\tNode q = headB;\n\t\tint lenA = 0;\n\t\tint lenB = 0;\n\t\twhile (p != null) {\n\t\t\tlenA++;\n\t\t\tp = p.next;\n\t\t}\n\t\twhile (q != null) {\n\t\t\tlenB++;\n\t\t\tq = q.next;\n\t\t}\n\t\tint diff = Math.abs(lenA - lenB);\n\t\tp = headA;\n\t\tq = headB;\n\t\tif (lenA > lenB) {\n\t\t\twhile (diff-- > 0) {\n\t\t\t\tp = p.next;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (diff-- > 0) {\n\t\t\t\tq = q.next;\n\t\t\t}\n\t\t}\n\t\twhile (p != q) {\n\t\t\tp = p.next;\n\t\t\tq = q.next;\n\t\t}\n\t\treturn p;\n\t}\n}\n",
            "\tNode intersection(Node headA, Node headB) {\n\t\tNode p = headA;\n\t\tNode q = headB;\n\t\tint lenA = 0;\n\t\tint lenB = 0;\n\t\twhile (p != null) {\n\t\t\tp = p.next;\n\t\t\tlenA++;\n\t\t}\n\t\twhile (q != null) {\n\t\t\tq = q.next;\n\t\t\tlenB++;\n\t\t}\n\t\tint diff = Math.abs(lenA - lenB);\n\t\tif (lenA > lenB) {\n\t\t\tp = headA;\n\t\t\tq = headB;\n\t\t} else {\n\t\t\tp = headB;\n\t\t\tq = headA;\n\t\t}\n\t\tfor (int i = 0; i < diff; i++) {\n\t\t\tp = p.next;\n\t\t}\n\t\twhile (p != q) {\n\t\t\tp = p.next;\n\t\t\tq = q.next;\n\t\t}\n\t\treturn p;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1336",
        "source": "leetcodeTitles",
        "source_id": "1539",
        "url": "https://leetcode.com/problems/kth-missing-positive-number/",
        "language": "java",
        "query": "Kth Missing Positive Number",
        "snippets": [
            "\tint kthMissingPositive(int[] A, int k){\n\t\tint n = A.length;\n\t\tint[] B = new int[n+1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(A[i] > 0 && A[i] <= n){\n\t\t\t\tB[A[i]] = 1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(B[i] == 0){\n\t\t\t\tk--;\n\t\t\t\tif(k == 0){\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint kthMissingPositive(int[] A, int k){\n\t\tint n = A.length;\n\t\tint[] B = new int[n+1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(A[i] > 0 && A[i] <= n){\n\t\t\t\tB[A[i]] = 1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(B[i] == 0){\n\t\t\t\tk--;\n\t\t\t}\n\t\t\tif(k == 0){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn n+1;\n\t}\n}\n",
            "\tint kthMissingPositive(int[] A, int k) {\n\t\tint n = A.length;\n\t\tint[] B = new int[n + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (A[i] > 0) {\n\t\t\t\tB[A[i]] = 1;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (B[i] == 0) {\n\t\t\t\tk--;\n\t\t\t\tif (k == 0) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint kthMissingPositive(int[] A, int k) {\n\t\tint n = A.length;\n\t\tint[] B = new int[n + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (A[i] > 0) {\n\t\t\t\tB[A[i] - 1] = 1;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n + 1; i++) {\n\t\t\tif (B[i] == 0) {\n\t\t\t\tk--;\n\t\t\t\tif (k == 0) {\n\t\t\t\t\treturn i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tstatic int kthMissingPositive(int[] A, int k){\n\t\tint n = A.length;\n\t\tint[] B = new int[n+1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(A[i] > 0 && A[i] <= n){\n\t\t\t\tB[A[i]] = 1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(B[i] == 0){\n\t\t\t\tk--;\n\t\t\t\tif(k == 0){\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint kthMissingPositive(int[] nums, int k) {\n\t\tint n = nums.length;\n\t\tint[] count = new int[n + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (nums[i] > 0 && nums[i] <= n) {\n\t\t\t\tcount[nums[i]]++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (count[i] == 0) {\n\t\t\t\tk--;\n\t\t\t\tif (k == 0) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn n + 1;\n\t}\n}\n",
            "\tint findKthPositive(int[] A, int k){\n\t\tint i = 0;\n\t\tint j = A.length - 1;\n\t\tint mid;\n\t\twhile(i <= j){\n\t\t\tmid = (i + j) / 2;\n\t\t\tif(A[mid] > 0){\n\t\t\t\tj = mid - 1;\n\t\t\t}else{\n\t\t\t\ti = mid + 1;\n\t\t\t}\n\t\t}\n\t\tif(i == A.length){\n\t\t\treturn A[i - 1] + 1;\n\t\t}else{\n\t\t\treturn A[i] + 1;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1337",
        "source": "leetcodeTitles",
        "source_id": "976",
        "url": "https://leetcode.com/problems/largest-perimeter-triangle/",
        "language": "java",
        "query": "Largest Perimeter Triangle",
        "snippets": [
            "\tstatic int largestPerimeter(int[] A) {\n\t\tArrays.sort(A);\n\t\tint max = 0;\n\t\tfor (int i = A.length - 1; i >= 2; i--) {\n\t\t\tif (A[i] < A[i - 1] + A[i - 2]) {\n\t\t\t\tmax = A[i] + A[i - 1] + A[i - 2];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int largestPerimeter(int[] a){\n\t\tint max = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = i + 1; j < a.length; j++){\n\t\t\t\tfor(int k = j + 1; k < a.length; k++){\n\t\t\t\t\tif(a[i] + a[j] > a[k] && a[i] + a[k] > a[j] && a[j] + a[k] > a[i]){\n\t\t\t\t\t\tmax = Math.max(max, a[i] + a[j] + a[k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int largestPerimeter(int[] a) {\n\t\tArrays.sort(a);\n\t\tint max = 0;\n\t\tfor (int i = a.length - 1; i >= 2; i--) {\n\t\t\tif (a[i] < a[i - 1] + a[i - 2]) {\n\t\t\t\tmax = a[i] + a[i - 1] + a[i - 2];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int largestPerimeter(int[] A){\n\t\tArrays.sort(A);\n\t\tfor(int i=A.length-1;i>=2;i--){\n\t\t\tif(A[i-1]+A[i-2]>A[i])\n\t\t\t\treturn A[i-1]+A[i-2]+A[i];\n\t\t}\n\t\treturn 0;\n\t}\n}\n",
            "\tstatic int largestPerimeter(int[] A) {\n\t\tArrays.sort(A);\n\t\tfor (int i = A.length - 1; i >= 2; i--) {\n\t\t\tif (A[i - 2] + A[i - 1] > A[i]) {\n\t\t\t\treturn A[i - 2] + A[i - 1] + A[i];\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1338",
        "source": "leetcodeTitles",
        "source_id": "1357",
        "url": "https://leetcode.com/problems/apply-discount-every-n-orders/",
        "language": "java",
        "query": "Apply Discount Every n Orders",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint q = sc.nextInt();\n\t\tint[] a = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[q];\n\t\tfor(int i = 0; i < q; i++){\n",
            "\tstatic void main(String[] args){\n\t\tint n = 3;\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] result = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(i % n == 0){\n\t\t\t\tresult[i] = arr[i] - (arr[i] * 0.1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult[i] = arr[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < result.length; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tint total = 0;\n\t\tint price = 0;\n\t\tint discount = 0;\n\t\tint discountedPrice = 0;\n\t\twhile(true){\n\t\t\tprice = Integer.parseInt(args[count+1]);\n\t\t\tif(price == 0){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal += price;\n\t\t\tcount++;\n\t\t\tif(count % n == 0){\n\t\t\t\tdiscount = total / n;\n\t\t\t\tdiscountedPrice = total - discount;\n\t\t\t\tSystem.out.println(\"Discounted Price: \" + discountedPrice);\n\t\t\t\ttotal = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tint total = 0;\n\t\tint price = 0;\n\t\tint discount = 0;\n\t\tint discountedPrice = 0;\n\t\twhile(true){\n\t\t\tprice = Integer.parseInt(args[count+1]);\n\t\t\tif(price == -1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal += price;\n\t\t\tcount++;\n\t\t\tif(count % n == 0){\n\t\t\t\tdiscount = total / n;\n\t\t\t\tdiscountedPrice = total - discount;\n\t\t\t\tSystem.out.println(\"Discounted Price: \" + discountedPrice);\n\t\t\t\ttotal = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tdouble total = 0;\n\t\tdouble discount = 0;\n\t\tdouble price = 0;\n\t\tdouble discountPrice = 0;\n\t\twhile(true){\n\t\t\tprice = Double.parseDouble(args[count+1]);\n\t\t\tif(price == -1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttotal += price;\n\t\t\tcount++;\n\t\t\tif(count % n == 0){\n\t\t\t\tdiscount = total * 0.1;\n\t\t\t\tdiscountPrice = total - discount;\n\t\t\t\tSystem.out.println(\"Discount: \" + discount);\n\t\t\t\tSystem.out.println(\"Discounted Price: \" + discountPrice);\n\t\t\t\ttotal = 0;\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tint total = 0;\n\t\tint price = 0;\n\t\tint discount = 0;\n\t\tint discountedPrice = 0;\n\t\twhile(true){\n\t\t\tString line = StdIn.readLine();\n\t\t\tif(line == null){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tString[] tokens = line.split(\" \");\n\t\t\tprice = Integer.parseInt(tokens[0]);\n\t\t\tdiscount = Integer.parseInt(tokens[1]);\n\t\t\tdiscountedPrice = price - (price * discount / 100);\n\t\t\ttotal += discountedPrice;\n\t\t\tcount++;\n\t\t\tif(count % n == 0){\n\t\t\t\tStdOut.println(total);\n\t\t\t\ttotal = 0;\n\t\t\t}\n\t\t}\n\t\tStdOut.println(total);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tint total = 0;\n\t\tint discount = 0;\n\t\tint price = 0;\n\t\tint cost = 0;\n\t\tint tax = 0;\n\t\tint totalCost = 0;\n\t\tint totalTax = 0;\n\t\tint totalDiscount = 0;\n\t\tint totalPrice = 0;\n\t\tint totalCostTax = 0;\n\t\tint totalCostDiscount = 0;\n\t\tint totalCostPrice = 0;\n\t\tint totalCostTaxDiscount = 0;\n\t\tint totalCostPriceDiscount = 0;\n\t\tint totalCostTaxPriceDiscount = 0;\n\t\tint totalCostPriceTaxDiscount = 0;\n\t\tint totalCostTaxPriceDiscountDiscount = 0;\n\t\tint totalCostPriceTaxDiscountDiscount = 0;\n\t\tint totalCostTaxPriceDiscountDiscountDiscount = 0;\n\t\tint totalCostPriceTaxDiscountDiscountDiscount = 0;\n\t\tint totalCostTaxPriceDiscountDiscountDiscountDiscount = 0;\n\t\tint totalCostPriceTaxDiscountDiscountDiscountDiscountDiscount = 0;\n\t\tint totalCostTaxPriceDiscountDiscountDiscountDiscountDiscountDiscount = 0;\n\t\tint totalCostPriceTaxDiscountDiscountDiscountDiscountDiscountDiscountDiscount = 0;\n\t\tint totalCostTaxPriceDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscount = 0;\n\t\tint totalCostPriceTaxDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscount = 0;\n\t\tint totalCostTaxPriceDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscount = 0;\n\t\tint totalCostPriceTaxDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscount = 0;\n\t\tint totalCostTaxPriceDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscountDiscount = 0;\n"
        ],
        "results": 10
    },
    {
        "id": "1339",
        "source": "leetcodeTitles",
        "source_id": "698",
        "url": "https://leetcode.com/problems/partition-to-k-equal-sum-subsets/",
        "language": "java",
        "query": "Partition to K Equal Sum Subsets",
        "snippets": [
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, target, k, 0, 0, new int[k]);\n\t}\n\n\tprivate boolean dfs(int[] nums, int target, int k, int index, int cur, int[] sums) {\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (cur == target) {\n\t\t\treturn dfs(nums, target, k - 1, 0, 0, sums);\n\t\t}\n\t\tfor (int i = index; i < nums.length; i++) {\n\t\t\tif (cur + nums[i] > target) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (dfs(nums, target, k, i + 1, cur + nums[i], sums)) {\n\t\t\t\tsums[k - 1] = nums[i];\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (k > nums.length || sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, target, k, 0, 0, new int[k]);\n\t}\n\tprivate boolean dfs(int[] nums, int target, int k, int index, int sum, int[] subset) {\n\t\tif (index == nums.length) {\n\t\t\treturn sum == target;\n\t\t}\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tif (subset[i] + nums[index] > target) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsubset[i] += nums[index];\n\t\t\tif (dfs(nums, target, k, index + 1, sum + nums[index], subset)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tsubset[i] -= nums[index];\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, target, k, 0, 0, new boolean[nums.length]);\n\t}\n\tprivate boolean dfs(int[] nums, int target, int k, int index, int cur, boolean[] visited) {\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (cur == target) {\n\t\t\treturn dfs(nums, target, k - 1, 0, 0, visited);\n\t\t}\n\t\tfor (int i = index; i < nums.length; i++) {\n\t\t\tif (visited[i]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (cur + nums[i] > target) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvisited[i] = true;\n\t\t\tif (dfs(nums, target, k, i + 1, cur + nums[i], visited)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvisited[i] = false;\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, 0, target, new boolean[nums.length], new int[k]);\n\t}\n\tpublic\n\tboolean dfs(int[] nums, int start, int target, boolean[] visited, int[] sums) {\n\t\tif (target == 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (target < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = start; i < nums.length; i++) {\n\t\t\tif (!visited[i]) {\n\t\t\t\tvisited[i] = true;\n\t\t\t\tsums[0] += nums[i];\n\t\t\t\tif (dfs(nums, i + 1, target - nums[i], visited, sums)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tvisited[i] = false;\n\t\t\t\tsums[0] -= nums[i];\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (k > nums.length || sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, target, k, 0, 0);\n\t}\n\tpublic\n\tboolean dfs(int[] nums, int target, int k, int index, int sum) {\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum == target) {\n\t\t\treturn dfs(nums, target, k - 1, 0, 0);\n\t\t}\n\t\tfor (int i = index; i < nums.length; i++) {\n\t\t\tif (sum + nums[i] > target) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (dfs(nums, target, k, i + 1, sum + nums[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, new boolean[nums.length], 0, k, target);\n\t}\n\tpublic\n\tboolean dfs(int[] nums, boolean[] visited, int start, int k, int target) {\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (target == 0) {\n\t\t\treturn dfs(nums, visited, 0, k - 1, target);\n\t\t}\n\t\tfor (int i = start; i < nums.length; i++) {\n\t\t\tif (visited[i]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (nums[i] > target) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvisited[i] = true;\n\t\t\tif (dfs(nums, visited, i + 1, k, target - nums[i])) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvisited[i] = false;\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, target, k, 0, 0, new int[k]);\n\t}\n\tprivate boolean dfs(int[] nums, int target, int k, int index, int cur, int[] sums) {\n\t\tif (cur == target) {\n\t\t\treturn true;\n\t\t}\n\t\tif (index == nums.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 0; i < k; i++) {\n\t\t\tif (sums[i] + nums[index] > target) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tsums[i] += nums[index];\n\t\t\tif (dfs(nums, target, k, index + 1, cur + nums[index], sums)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tsums[i] -= nums[index];\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, target, k, 0, 0, new int[k]);\n\t}\n\t\n\tpublic boolean dfs(int[] nums, int target, int k, int index, int cur, int[] sums) {\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (cur == target) {\n\t\t\treturn dfs(nums, target, k - 1, 0, 0, sums);\n\t\t}\n\t\tfor (int i = index; i < nums.length; i++) {\n\t\t\tif (cur + nums[i] > target) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (dfs(nums, target, k, i + 1, cur + nums[i], sums)) {\n\t\t\t\tsums[k - 1] = nums[i];\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, target, k, 0, 0, new boolean[nums.length]);\n\t}\n\tpublic\n\tboolean dfs(int[] nums, int target, int k, int index, int sum, boolean[] visited) {\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum == target) {\n\t\t\treturn dfs(nums, target, k - 1, 0, 0, visited);\n\t\t}\n\t\tfor (int i = index; i < nums.length; i++) {\n\t\t\tif (visited[i]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (sum + nums[i] > target) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvisited[i] = true;\n\t\t\tif (dfs(nums, target, k, i + 1, sum + nums[i], visited)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tvisited[i] = false;\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean canPartitionKSubsets(int[] nums, int k) {\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += num;\n\t\t}\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (sum % k != 0) {\n\t\t\treturn false;\n\t\t}\n\t\tint target = sum / k;\n\t\tArrays.sort(nums);\n\t\treturn dfs(nums, new boolean[nums.length], 0, target, k);\n\t}\n\n\tpublic\n\tstatic boolean dfs(int[] nums, boolean[] visited, int index, int target, int k) {\n\t\tif (k == 1) {\n\t\t\treturn true;\n\t\t}\n\t\tif (target == 0) {\n\t\t\treturn dfs(nums, visited, 0, target, k - 1);\n\t\t}\n\t\tfor (int i = index; i < nums.length; i++) {\n\t\t\tif (!visited[i] && target >= nums[i]) {\n\t\t\t\tvisited[i] = true;\n\t\t\t\tif (dfs(nums, visited, i + 1, target - nums[i], k)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tvisited[i] = false;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1340",
        "source": "leetcodeTitles",
        "source_id": "2087",
        "url": "https://leetcode.com/problems/minimum-cost-homecoming-of-a-robot-in-a-grid/",
        "language": "java",
        "query": "Minimum Cost Homecoming of a Robot in a Grid",
        "snippets": [
            "\tstatic int minCost(int[][] grid){\n\t\tint n = grid.length;\n\t\tint m = grid[0].length;\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1][m-1];\n\t}\n}\n",
            "\tstatic int minCost(int[][] grid){\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n\tpublic static void main(String[] args){\n\t\tint[][] grid = {{1,2,3},{4,8,2},{1,5,3}};\n\t\tSystem.out.println(minCost(grid));\n\t}\n}\n",
            "\tstatic int minCost(int[][] grid){\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n}\n",
            "\tint minCost(int[][] grid){\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[m-1][n-1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1341",
        "source": "leetcodeTitles",
        "source_id": "2270",
        "url": "https://leetcode.com/problems/number-of-ways-to-split-array/",
        "language": "java",
        "query": "Number of Ways to Split Array",
        "snippets": [
            "\tstatic int splitArray(int[] nums, int m) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[m + 1][n + 1];\n\t\tfor (int i = 1; i <= m; i++) {\n\t\t\tdp[i][1] = nums[0];\n\t\t}\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tdp[1][i] = dp[1][i - 1] + nums[i - 1];\n\t\t}\n\t\tfor (int i = 2; i <= m; i++) {\n\t\t\tfor (int j = 2; j <= n; j++) {\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = 1; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], Math.max(dp[i - 1][k], dp[i][j - k]) + nums[k - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[m][n];\n\t}\n}\n",
            "\tstatic int splitArray(int[] nums){\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i][i] = 1;\n\t\t}\n\t\tfor(int i = n - 1; i >= 0; i--){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tdp[i][j] = dp[i + 1][j] + dp[i][j - 1] + dp[i + 1][j - 1] * (nums[j] - nums[i]);\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint numWays(int n, int k) {\n\t\tif(n == 0) return 1;\n\t\tif(n == 1) return k;\n\t\tif(n == 2) return k*k;\n\t\tint a = numWays(n-1, k);\n\t\tint b = numWays(n-2, k);\n\t\treturn a + b;\n\t}\n}\n",
            "\tint numWays(int n) {\n\t\tif(n==0) return 0;\n\t\tif(n==1) return 1;\n\t\tif(n==2) return 2;\n\t\tint[] dp = new int[n+1];\n\t\tdp[0] = 1;\n\t\tdp[1] = 1;\n\t\tdp[2] = 2;\n\t\tfor(int i=3;i<=n;i++){\n\t\t\tdp[i] = (dp[i-1] + dp[i-2]) % 1000000007;\n\t\t}\n\t\treturn dp[n];\n\t}\n}\n",
            "\tstatic int splitArray(int[] nums, int m) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n][m + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][1] = 1;\n\t\t}\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tfor (int j = 2; j <= m; j++) {\n\t\t\t\tfor (int k = 1; k <= i; k++) {\n\t\t\t\t\tdp[i][j] += dp[k - 1][j - 1] * dp[i - k][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1][m];\n\t}\n}\n",
            "\tstatic int splitArray(int[] nums, int m) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n + 1][m + 1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tfor (int j = 1; j <= Math.min(m, i); j++) {\n\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] + nums[i - 1] * j;\n\t\t\t\tif (j > 1)\n\t\t\t\t\tdp[i][j] -= dp[i - 1][j - 2] * (j - 1);\n\t\t\t}\n\t\t}\n\t\treturn dp[n][m];\n\t}\n}\n",
            "\tstatic int splitArray(int[] nums, int m) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n][m + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][1] = 1;\n\t\t}\n\t\tfor (int i = 1; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tdp[j][i + 1] = dp[j][i];\n\t\t\t\tif (j + 1 < n) {\n\t\t\t\t\tdp[j][i + 1] += dp[j + 1][i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][m];\n\t}\n}\n",
            "\tstatic int countWays(int[] arr, int k){\n\t\tint n = arr.length;\n\t\tint[][] dp = new int[n][k+1];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=1;j<=k;j++){\n\t\t\t\tif(i-j>=0){\n\t\t\t\t\tdp[i][j] += dp[i-j][j];\n\t\t\t\t}\n\t\t\t\tif(i-j>=0 && j>1){\n\t\t\t\t\tdp[i][j] += dp[i-j][j-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1][k];\n\t}\n}\n",
            "\tstatic int countWays(int[] arr, int n){\n\t\tint[] dp = new int[n+1];\n\t\tdp[0] = 1;\n\t\tdp[1] = 1;\n\t\tfor(int i=2; i<=n; i++){\n\t\t\tfor(int j=1; j<=i; j++){\n\t\t\t\tdp[i] += dp[j-1]*dp[i-j];\n\t\t\t}\n\t\t}\n\t\treturn dp[n];\n\t}\n}\n",
            "\tstatic int countWays(int[] arr, int n, int k){\n\t\tint[][] dp = new int[n][k+1];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor(int i=1;i<=k;i++){\n\t\t\tdp[0][i] = 1;\n\t\t}\n\t\tfor(int i=1;i<n;i++){\n\t\t\tfor(int j=1;j<=k;j++){\n\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i-1][j-1];\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1][k];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1342",
        "source": "leetcodeTitles",
        "source_id": "2154",
        "url": "https://leetcode.com/problems/keep-multiplying-found-values-by-two/",
        "language": "java",
        "query": "Keep Multiplying Found Values by Two",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tarr2[i] = arr[i] * 2;\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tSystem.out.println(arr2[i]);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1343",
        "source": "leetcodeTitles",
        "source_id": "1488",
        "url": "https://leetcode.com/problems/avoid-flood-in-the-city/",
        "language": "java",
        "query": "Avoid Flood in The City",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf[i][j] = in.nextInt();\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf[i][j] = sc.nextInt();\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint m=sc.nextInt();\n\t\tint[][] a=new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\ta[i][j]=sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b=new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tb[i][j]=sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c=new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tc[i][j]=sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d=new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\td[i][j]=sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e=new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\te[i][j]=sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f=new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tf[i][j]=sc.nextInt();\n\t\t\t}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] grid = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgrid[i][j] = Integer.parseInt(args[i*n+j+1]);\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + grid[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) + grid[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[n-1][n-1]);\n\t}\n}\n",
            "\tint[] avoidFlood(int[] a){\n\t\tint[] res = new int[a.length];\n\t\tint[] cnt = new int[10001];\n\t\tint[] idx = new int[10001];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] == 0){\n\t\t\t\tres[i] = 1;\n\t\t\t}else{\n\t\t\t\tif(cnt[a[i]] == 0){\n\t\t\t\t\tres[i] = a[i];\n\t\t\t\t}else{\n\t\t\t\t\tint j = idx[a[i]];\n\t\t\t\t\tres[i] = a[j];\n\t\t\t\t\tidx[a[i]] = i;\n\t\t\t\t}\n\t\t\t\tcnt[a[i]]++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1344",
        "source": "leetcodeTitles",
        "source_id": "640",
        "url": "https://leetcode.com/problems/solve-the-equation/",
        "language": "java",
        "query": "Solve the Equation",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint a = sc.nextInt();\n\t\tint b = sc.nextInt();\n\t\tint c = sc.nextInt();\n\t\tint d = sc.nextInt();\n\t\tint e = sc.nextInt();\n\t\tint f = sc.nextInt();\n\t\tint g = sc.nextInt();\n\t\tint h = sc.nextInt();\n\t\tint i = sc.nextInt();\n\t\tint j = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint l = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint n = sc.nextInt();\n\t\tint o = sc.nextInt();\n\t\tint p = sc.nextInt();\n\t\tint q = sc.nextInt();\n\t\tint r = sc.nextInt();\n\t\tint s = sc.nextInt();\n\t\tint t = sc.nextInt();\n\t\tint u = sc.nextInt();\n\t\tint v = sc.nextInt();\n\t\tint w = sc.nextInt();\n\t\tint x = sc.nextInt();\n\t\tint y = sc.nextInt();\n\t\tint z = sc.nextInt();\n\t\tint a1 = sc.nextInt();\n\t\tint b1 = sc.nextInt();\n\t\tint c1 = sc.nextInt();\n\t\tint d1 = sc.nextInt();\n\t\tint e1 = sc.nextInt();\n\t\tint f1 = sc.nextInt();\n\t\tint g1 = sc.nextInt();\n\t\tint h1 = sc.nextInt();\n\t\tint i1 = sc.nextInt();\n\t\tint j1 = sc.nextInt();\n\t\tint k1 = sc.nextInt();\n\t\tint l1 = sc.nextInt();\n\t\tint m1 = sc.nextInt();\n\t\tint n1 = sc.nextInt();\n\t\tint o1 = sc.nextInt();\n\t\tint p1 = sc.\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tdouble a = in.nextDouble();\n\t\tdouble b = in.nextDouble();\n\t\tdouble c = in.nextDouble();\n\t\tdouble d = in.nextDouble();\n\t\tdouble e = in.nextDouble();\n\t\tdouble f = in.nextDouble();\n\t\tdouble g = in.nextDouble();\n\t\tdouble h = in.nextDouble();\n\t\tdouble i = in.nextDouble();\n\t\tdouble j = in.nextDouble();\n\t\tdouble k = in.nextDouble();\n\t\tdouble l = in.nextDouble();\n\t\tdouble m = in.nextDouble();\n\t\tdouble n = in.nextDouble();\n\t\tdouble o = in.nextDouble();\n\t\tdouble p = in.nextDouble();\n\t\tdouble q = in.nextDouble();\n\t\tdouble r = in.nextDouble();\n\t\tdouble s = in.nextDouble();\n\t\tdouble t = in.nextDouble();\n\t\tdouble u = in.nextDouble();\n\t\tdouble v = in.nextDouble();\n\t\tdouble w = in.nextDouble();\n\t\tdouble x = in.nextDouble();\n\t\tdouble y = in.nextDouble();\n\t\tdouble z = in.nextDouble();\n\t\tdouble a1 = in.nextDouble();\n\t\tdouble b1 = in.nextDouble();\n\t\tdouble c1 = in.nextDouble();\n\t\tdouble d1 = in.nextDouble();\n\t\tdouble e1 = in.nextDouble();\n\t\tdouble f1 = in.nextDouble();\n\t\tdouble g1 = in.nextDouble();\n\t\tdouble h1 = in.nextDouble();\n\t\tdouble i1 = in.nextDouble();\n\t\tdouble j1 = in.nextDouble();\n\t\tdouble k1 = in.nextDouble();\n\t\tdouble l1 = in.nextDouble();\n\t\tdouble m1 = in.nextDouble();\n\t\tdouble n1 = in.nextDouble();\n\t\tdouble o1 = in.nextDouble();\n\t\tdouble p1 = in.\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint a = in.nextInt();\n\t\tint b = in.nextInt();\n\t\tint c = in.nextInt();\n\t\tint d = in.nextInt();\n\t\tint e = in.nextInt();\n\t\tint f = in.nextInt();\n\t\tint g = in.nextInt();\n\t\tint h = in.nextInt();\n\t\tint i = in.nextInt();\n\t\tint j = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint l = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint n = in.nextInt();\n\t\tint o = in.nextInt();\n\t\tint p = in.nextInt();\n\t\tint q = in.nextInt();\n\t\tint r = in.nextInt();\n\t\tint s = in.nextInt();\n\t\tint t = in.nextInt();\n\t\tint u = in.nextInt();\n\t\tint v = in.nextInt();\n\t\tint w = in.nextInt();\n\t\tint x = in.nextInt();\n\t\tint y = in.nextInt();\n\t\tint z = in.nextInt();\n\t\tint aa = in.nextInt();\n\t\tint bb = in.nextInt();\n\t\tint cc = in.nextInt();\n\t\tint dd = in.nextInt();\n\t\tint ee = in.nextInt();\n\t\tint ff = in.nextInt();\n\t\tint gg = in.nextInt();\n\t\tint hh = in.nextInt();\n\t\tint ii = in.nextInt();\n\t\tint jj = in.nextInt();\n\t\tint kk = in.nextInt();\n\t\tint ll = in.nextInt();\n\t\tint mm = in.nextInt();\n\t\tint nn = in.nextInt();\n\t\tint oo = in.nextInt();\n\t\tint pp = in.nextInt();\n\t\tint\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tdouble a = sc.nextDouble();\n\t\tdouble b = sc.nextDouble();\n\t\tdouble c = sc.nextDouble();\n\t\tdouble d = sc.nextDouble();\n\t\tdouble e = sc.nextDouble();\n\t\tdouble f = sc.nextDouble();\n\t\tdouble g = sc.nextDouble();\n\t\tdouble h = sc.nextDouble();\n\t\tdouble i = sc.nextDouble();\n\t\tdouble j = sc.nextDouble();\n\t\tdouble k = sc.nextDouble();\n\t\tdouble l = sc.nextDouble();\n\t\tdouble m = sc.nextDouble();\n\t\tdouble n = sc.nextDouble();\n\t\tdouble o = sc.nextDouble();\n\t\tdouble p = sc.nextDouble();\n\t\tdouble q = sc.nextDouble();\n\t\tdouble r = sc.nextDouble();\n\t\tdouble s = sc.nextDouble();\n\t\tdouble t = sc.nextDouble();\n\t\tdouble u = sc.nextDouble();\n\t\tdouble v = sc.nextDouble();\n\t\tdouble w = sc.nextDouble();\n\t\tdouble x = sc.nextDouble();\n\t\tdouble y = sc.nextDouble();\n\t\tdouble z = sc.nextDouble();\n\t\tdouble a1 = sc.nextDouble();\n\t\tdouble b1 = sc.nextDouble();\n\t\tdouble c1 = sc.nextDouble();\n\t\tdouble d1 = sc.nextDouble();\n\t\tdouble e1 = sc.nextDouble();\n\t\tdouble f1 = sc.nextDouble();\n\t\tdouble g1 = sc.nextDouble();\n\t\tdouble h1 = sc.nextDouble();\n\t\tdouble i1 = sc.nextDouble();\n\t\tdouble j1 = sc.nextDouble();\n\t\tdouble k1 = sc.nextDouble();\n\t\tdouble l1 = sc.nextDouble();\n\t\tdouble m1 = sc.nextDouble();\n\t\tdouble n1 = sc.nextDouble();\n\t\tdouble o1 = sc.nextDouble();\n\t\tdouble p1 = sc.\n"
        ],
        "results": 10
    },
    {
        "id": "1345",
        "source": "leetcodeTitles",
        "source_id": "1785",
        "url": "https://leetcode.com/problems/minimum-elements-to-add-to-form-a-given-sum/",
        "language": "java",
        "query": "Minimum Elements to Add to Form a Given Sum",
        "snippets": [
            "\tstatic int minElements(int[] arr, int sum){\n\t\tint n = arr.length;\n\t\tint[] dp = new int[sum+1];\n\t\tdp[0] = 1;\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tfor(int j=sum;j>=arr[i-1];j--){\n\t\t\t\tdp[j] = Math.min(dp[j],dp[j-arr[i-1]]+1);\n\t\t\t}\n\t\t}\n\t\treturn dp[sum];\n\t}\n}\n",
            "\tstatic int minElements(int[] arr, int sum){\n\t\tint n = arr.length;\n\t\tint[] dp = new int[sum+1];\n\t\tdp[0] = 1;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=sum;j>=arr[i];j--){\n\t\t\t\tdp[j] += dp[j-arr[i]];\n\t\t\t}\n\t\t}\n\t\treturn dp[sum];\n\t}\n}\n",
            "\tstatic int minElements(int[] arr, int sum){\n\t\tint n = arr.length;\n\t\tint[] dp = new int[sum+1];\n\t\tdp[0] = 1;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=sum;j>=arr[i];j--){\n\t\t\t\tdp[j] = Math.min(dp[j],dp[j-arr[i]]+1);\n\t\t\t}\n\t\t}\n\t\treturn dp[sum];\n\t}\n}\n",
            "\tstatic int minElements(int[] arr, int sum){\n\t\tint n = arr.length;\n\t\tint[] dp = new int[sum+1];\n\t\tdp[0] = 1;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=sum;j>=arr[i];j--){\n\t\t\t\tdp[j] = Math.min(dp[j],dp[j-arr[i]]+1);\n\t\t\t}\n\t\t}\n\t\treturn dp[sum];\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 11;\n\t\tSystem.out.println(minElements(arr,sum));\n\t}\n}\n",
            "\tstatic int minElements(int[] arr, int k){\n\t\tint n = arr.length;\n\t\tint[] dp = new int[k+1];\n\t\tdp[0] = 1;\n\t\tfor(int i=0; i<n; i++){\n\t\t\tfor(int j=k; j>=arr[i]; j--){\n\t\t\t\tdp[j] = Math.min(dp[j], dp[j-arr[i]]+1);\n\t\t\t}\n\t\t}\n\t\treturn dp[k];\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint k = 15;\n\t\tSystem.out.println(minElements(arr, k));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1346",
        "source": "leetcodeTitles",
        "source_id": "2145",
        "url": "https://leetcode.com/problems/count-the-hidden-sequences/",
        "language": "java",
        "query": "Count the Hidden Sequences",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + 1;\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i][j-1], dp[i-1][j]) + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i][j] == 1){\n\t\t\t\t\tans += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf[i][j] = in.nextInt();\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tfor(int l = 0; l < k; l++){\n\t\t\t\t\tif(a[i] + b[j] + c[l] == 0){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(i == 0 && j == 0){\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t}\n\t\t\t\telse if(i == 0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1];\n\t\t\t\t}\n\t\t\t\telse if(j == 0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i][j-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[n-1][m-1]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tfor(int l = 0; l < k; l++){\n\t\t\t\t\tif(a[i] + b[j] + c[l] == 0){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1347",
        "source": "leetcodeTitles",
        "source_id": "1328",
        "url": "https://leetcode.com/problems/break-a-palindrome/",
        "language": "java",
        "query": "Break a Palindrome",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString s = \"aabaa\";\n\t\tSystem.out.println(breakPalindrome(s));\n\t}\n\tpublic static String breakPalindrome(String s){\n\t\tif(s.length() == 0) return \"\";\n\t\tif(s.length() == 1) return \"\";\n\t\tif(s.length() == 2) return s.charAt(0) == s.charAt(1) ? \"\" : s.substring(0,1);\n\t\tif(s.charAt(0) == s.charAt(s.length()-1)){\n\t\t\treturn breakPalindrome(s.substring(1,s.length()-1));\n\t\t}\n\t\telse{\n\t\t\treturn s.substring(0,1) + breakPalindrome(s.substring(1,s.length()));\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabaa\";\n\t\tSystem.out.println(breakPalindrome(s));\n\t}\n\tpublic static String breakPalindrome(String s){\n\t\tif(s.length() == 0) return \"\";\n\t\tif(s.length() == 1) return \"\";\n\t\tif(s.length() == 2) return s.charAt(0) == s.charAt(1) ? \"\" : s.charAt(0) + s.charAt(1);\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) != s.charAt(s.length() - 1 - i)){\n\t\t\t\tString left = s.substring(0, i);\n\t\t\t\tString right = s.substring(i + 1, s.length());\n\t\t\t\tif(left.length() == 0) return right + s.charAt(i);\n\t\t\t\tif(right.length() == 0) return left + s.charAt(i);\n\t\t\t\treturn left + right;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabaa\";\n\t\tSystem.out.println(breakPalindrome(s));\n\t}\n\tpublic static String breakPalindrome(String s){\n\t\tif(s.length() == 0) return \"\";\n\t\tif(s.length() == 1) return \"\";\n\t\tif(s.length() == 2) return s.charAt(0) == s.charAt(1) ? \"\" : s.charAt(0) + s.charAt(1);\n\t\tif(s.charAt(0) == s.charAt(s.length() - 1)) return breakPalindrome(s.substring(1, s.length() - 1));\n\t\treturn s.charAt(0) + breakPalindrome(s.substring(1, s.length())) + s.charAt(s.length() - 1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabaa\";\n\t\tSystem.out.println(breakPalindrome(s));\n\t}\n\tpublic static String breakPalindrome(String s){\n\t\tif(s.length() == 0) return \"\";\n\t\tif(s.length() == 1) return \"\";\n\t\tif(s.length() == 2){\n\t\t\tif(s.charAt(0) == s.charAt(1)) return \"\";\n\t\t\telse return s.charAt(0) + s.charAt(1);\n\t\t}\n\t\tif(s.charAt(0) == s.charAt(s.length() - 1)){\n\t\t\tString s1 = s.substring(1, s.length() - 1);\n\t\t\tif(s1.length() == 0) return \"\";\n\t\t\tif(s1.length() == 1) return s1;\n\t\t\tif(s1.charAt(0) == s1.charAt(s1.length() - 1)){\n\t\t\t\tString s2 = s1.substring(1, s1.length() - 1);\n\t\t\t\tif(s2.length() == 0) return \"\";\n\t\t\t\tif(s2.length() == 1) return s2;\n\t\t\t\tif(s2.charAt(0) == s2.charAt(s2.length() - 1)){\n\t\t\t\t\tString s3 = s2.substring(1, s2.length() - 1);\n\t\t\t\t\tif(s3.length() == 0) return \"\";\n\t\t\t\t\tif(s3.length() == 1) return s3;\n\t\t\t\t\tif(s3.charAt(0) == s3.charAt(s3.length() - 1)){\n\t\t\t\t\t\tString s4 = s3.substring(1, s3.length() - 1);\n\t\t\t\t\t\tif(s4.length() == 0) return \"\";\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabaa\";\n\t\tSystem.out.println(breakPalindrome(s));\n\t}\n\tpublic static String breakPalindrome(String s){\n\t\tif(s.length() == 0) return \"\";\n\t\tif(s.length() == 1) return \"\";\n\t\tif(s.length() == 2) return s.charAt(0) == s.charAt(1) ? \"\" : s.charAt(0) + \"\" + s.charAt(1);\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) != s.charAt(s.length() - 1 - i)){\n\t\t\t\tString s1 = s.substring(0, i);\n\t\t\t\tString s2 = s.substring(i + 1, s.length());\n\t\t\t\tif(s1.length() == 0) return s2 + s.charAt(i);\n\t\t\t\tif(s2.length() == 0) return s1 + s.charAt(i);\n\t\t\t\treturn s1 + s2;\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabaa\";\n\t\tSystem.out.println(breakPalindrome(s));\n\t}\n\tpublic static String breakPalindrome(String s){\n\t\tif(s.length() == 0) return \"\";\n\t\tif(s.length() == 1) return \"\";\n\t\tif(s.length() == 2) return s.charAt(0) == s.charAt(1) ? \"\" : s;\n\t\tint i = 0;\n\t\tint j = s.length() - 1;\n\t\twhile(i < j){\n\t\t\tif(s.charAt(i) != s.charAt(j)){\n\t\t\t\tString left = s.substring(0, i);\n\t\t\t\tString right = s.substring(j + 1);\n\t\t\t\treturn left + right;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn \"\";\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabaa\";\n\t\tSystem.out.println(breakPalindrome(s));\n\t}\n\tpublic static String breakPalindrome(String s){\n\t\tif(s.length() == 0) return \"\";\n\t\tif(s.length() == 1) return \"\";\n\t\tif(s.length() == 2) return s.charAt(0) == s.charAt(1) ? \"\" : s.charAt(0) + s.charAt(1);\n\t\tif(s.charAt(0) == s.charAt(s.length() - 1)){\n\t\t\treturn breakPalindrome(s.substring(1, s.length() - 1));\n\t\t}\n\t\telse{\n\t\t\treturn s.charAt(0) + breakPalindrome(s.substring(1, s.length())) + s.charAt(s.length() - 1);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tSystem.out.println(breakPalindrome(s));\n\t}\n\tpublic static String breakPalindrome(String s){\n\t\tif(s.length()==0) return \"\";\n\t\tif(s.length()==1) return \"\";\n\t\tif(s.length()==2) return s.charAt(0)==s.charAt(1)?\"\":s.charAt(0)+s.charAt(1);\n\t\tif(s.charAt(0)==s.charAt(s.length()-1)){\n\t\t\treturn s.charAt(0)+breakPalindrome(s.substring(1,s.length()-1))+s.charAt(s.length()-1);\n\t\t}\n\t\telse{\n\t\t\treturn s.charAt(0)+breakPalindrome(s.substring(1,s.length()))+s.charAt(s.length()-1);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aabaa\";\n\t\tString s1 = \"aabaa\";\n\t\tString s2 = \"aabaa\";\n\t\tString s3 = \"aabaa\";\n\t\tString s4 = \"aabaa\";\n\t\tString s5 = \"aabaa\";\n\t\tString s6 = \"aabaa\";\n\t\tString s7 = \"aabaa\";\n\t\tString s8 = \"aabaa\";\n\t\tString s9 = \"aabaa\";\n\t\tString s10 = \"aabaa\";\n\t\tString s11 = \"aabaa\";\n\t\tString s12 = \"aabaa\";\n\t\tString s13 = \"aabaa\";\n\t\tString s14 = \"aabaa\";\n\t\tString s15 = \"aabaa\";\n\t\tString s16 = \"aabaa\";\n\t\tString s17 = \"aabaa\";\n\t\tString s18 = \"aabaa\";\n\t\tString s19 = \"aabaa\";\n\t\tString s20 = \"aabaa\";\n\t\tString s21 = \"aabaa\";\n\t\tString s22 = \"aabaa\";\n\t\tString s23 = \"aabaa\";\n\t\tString s24 = \"aabaa\";\n\t\tString s25 = \"aabaa\";\n\t\tString s26 = \"aabaa\";\n\t\tString s27 = \"aabaa\";\n\t\tString s28 = \"aabaa\";\n\t\tString s29 = \"aabaa\";\n\t\tString s30 = \"aabaa\";\n\t\tString s31 = \"aabaa\";\n\t\tString s32 = \"aabaa\";\n\t\tString s33 = \"aabaa\";\n\t\tString s34 = \"aabaa\";\n\t\tString s35 = \"aabaa\";\n\t\tString s36 = \"aabaa\";\n\t\tString s37 = \"aabaa\";\n\t\tString s38 = \"aabaa\";\n\t\tString s39 = \"aabaa\";\n\t\tString s40 = \"aabaa\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcd\";\n\t\tString s1 = \"\";\n\t\tfor(int i = s.length()-1; i >= 0; i--){\n\t\t\ts1 += s.charAt(i);\n\t\t}\n\t\tSystem.out.println(s1);\n\t\tif(s1.equals(s)){\n\t\t\tSystem.out.println(\"Palindrome\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Not Palindrome\");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1348",
        "source": "leetcodeTitles",
        "source_id": "491",
        "url": "https://leetcode.com/problems/increasing-subsequences/",
        "language": "java",
        "query": "Increasing Subsequences",
        "snippets": [
            "\tList<List<Integer>> increasingSubsequences(int[] nums){\n\t\tList<List<Integer>> res = new ArrayList<List<Integer>>();\n\t\tif(nums == null || nums.length == 0) return res;\n\t\tList<Integer> path = new ArrayList<Integer>();\n\t\thelper(nums, 0, path, res);\n\t\treturn res;\n\t}\n\tpublic void helper(int[] nums, int index, List<Integer> path, List<List<Integer>> res){\n\t\tif(index == nums.length){\n\t\t\tres.add(new ArrayList<Integer>(path));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = index; i < nums.length; i++){\n\t\t\tif(i > index && nums[i] <= nums[i - 1]) continue;\n\t\t\tpath.add(nums[i]);\n\t\t\thelper(nums, i + 1, path, res);\n\t\t\tpath.remove(path.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tstatic List<List<Integer>> increasingSubsequences(int[] array){\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(array == null || array.length == 0)\n\t\t\treturn result;\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tlist.add(array[0]);\n\t\tresult.add(list);\n\t\tfor(int i = 1; i < array.length; i++){\n\t\t\tint size = result.size();\n\t\t\tfor(int j = 0; j < size; j++){\n\t\t\t\tList<Integer> temp = new ArrayList<Integer>(result.get(j));\n\t\t\t\tif(temp.get(temp.size() - 1) < array[i]){\n\t\t\t\t\ttemp.add(array[i]);\n\t\t\t\t\tresult.add(temp);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(array[i] > result.get(result.size() - 1).get(result.get(result.size() - 1).size() - 1)){\n\t\t\t\tList<Integer> temp = new ArrayList<Integer>();\n\t\t\t\ttemp.add(array[i]);\n\t\t\t\tresult.add(temp);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic List<List<Integer>> increasingSubsequences(int[] array){\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(array == null || array.length == 0) return result;\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\thelper(array, 0, list, result);\n\t\treturn result;\n\t}\n\tpublic static void helper(int[] array, int index, List<Integer> list, List<List<Integer>> result){\n\t\tif(index == array.length){\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = index; i < array.length; i++){\n\t\t\tif(i > index && array[i] < array[i - 1]) continue;\n\t\t\tlist.add(array[i]);\n\t\t\thelper(array, i + 1, list, result);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tstatic List<List<Integer>> increasingSubsequences(int[] array){\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(array == null || array.length == 0){\n\t\t\treturn result;\n\t\t}\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\thelper(array, 0, list, result);\n\t\treturn result;\n\t}\n\tpublic\n\tstatic void helper(int[] array, int index, List<Integer> list, List<List<Integer>> result){\n\t\tif(index == array.length){\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tlist.add(array[index]);\n\t\thelper(array, index + 1, list, result);\n\t\tlist.remove(list.size() - 1);\n\t\twhile(index < array.length - 1 && array[index] >= array[index + 1]){\n\t\t\tindex++;\n\t\t}\n\t\tif(index < array.length - 1){\n\t\t\thelper(array, index + 1, list, result);\n\t\t}\n\t}\n}\n",
            "\tstatic List<List<Integer>> increasingSubsequences(int[] nums){\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(nums == null || nums.length == 0) return result;\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\thelper(nums, 0, list, result);\n\t\treturn result;\n\t}\n\tpublic static void helper(int[] nums, int index, List<Integer> list, List<List<Integer>> result){\n\t\tif(index == nums.length){\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = index; i < nums.length; i++){\n\t\t\tif(i > index && nums[i] <= nums[i - 1]) continue;\n\t\t\tlist.add(nums[i]);\n\t\t\thelper(nums, i + 1, list, result);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tstatic List<List<Integer>> increasingSubsequences(int[] nums){\n\t\tList<List<Integer>> res = new ArrayList<List<Integer>>();\n\t\tif(nums == null || nums.length == 0) return res;\n\t\tList<Integer> path = new ArrayList<Integer>();\n\t\thelper(nums, 0, path, res);\n\t\treturn res;\n\t}\n\tpublic\n\tstatic void helper(int[] nums, int index, List<Integer> path, List<List<Integer>> res){\n\t\tif(index == nums.length){\n\t\t\tres.add(new ArrayList<Integer>(path));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = index; i < nums.length; i++){\n\t\t\tif(i != index && nums[i] <= nums[i-1]) continue;\n\t\t\tpath.add(nums[i]);\n\t\t\thelper(nums, i+1, path, res);\n\t\t\tpath.remove(path.size()-1);\n\t\t}\n\t}\n}\n",
            "\tstatic List<List<Integer>> increasingSubsequences(int[] nums){\n\t\tList<List<Integer>> res = new ArrayList<>();\n\t\tif(nums == null || nums.length == 0) return res;\n\t\thelper(nums, 0, new ArrayList<Integer>(), res);\n\t\treturn res;\n\t}\n\tpublic static void helper(int[] nums, int index, List<Integer> list, List<List<Integer>> res){\n\t\tif(index == nums.length){\n\t\t\tres.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tfor(int i = index; i < nums.length; i++){\n\t\t\tif(i != index && nums[i] <= nums[i - 1]) continue;\n\t\t\tlist.add(nums[i]);\n\t\t\thelper(nums, i + 1, list, res);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tstatic List<List<Integer>> increasingSubsequences(int[] nums){\n\t\tList<List<Integer>> res = new ArrayList<>();\n\t\tif(nums == null || nums.length == 0) return res;\n\t\thelper(nums, 0, new ArrayList<>(), res);\n\t\treturn res;\n\t}\n\tpublic static void helper(int[] nums, int index, List<Integer> list, List<List<Integer>> res){\n\t\tif(index == nums.length){\n\t\t\tres.add(new ArrayList<>(list));\n\t\t\treturn;\n\t\t}\n\t\tlist.add(nums[index]);\n\t\thelper(nums, index + 1, list, res);\n\t\tlist.remove(list.size() - 1);\n\t\thelper(nums, index + 1, list, res);\n\t}\n}\n",
            "\tstatic List<List<Integer>> increasingSubsequences(int[] arr){\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(arr == null || arr.length == 0) return result;\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\thelper(arr, 0, list, result);\n\t\treturn result;\n\t}\n\tpublic static void helper(int[] arr, int index, List<Integer> list, List<List<Integer>> result){\n\t\tif(index == arr.length){\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tlist.add(arr[index]);\n\t\thelper(arr, index + 1, list, result);\n\t\tlist.remove(list.size() - 1);\n\t\thelper(arr, index + 1, list, result);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1349",
        "source": "leetcodeTitles",
        "source_id": "146",
        "url": "https://leetcode.com/problems/lru-cache/",
        "language": "java",
        "query": "LRU Cache",
        "snippets": [
            "\tint get(int key) {\n\t\tif(map.containsKey(key)){\n\t\t\tint value = map.get(key);\n\t\t\tlist.remove(key);\n\t\t\tlist.add(key);\n\t\t\treturn value;\n\t\t}\n\t\treturn -1;\n\t}\n\tpublic\n\tvoid set(int key, int value) {\n\t\tif(map.containsKey(key)){\n\t\t\tlist.remove(key);\n\t\t}\n\t\tlist.add(key);\n\t\tmap.put(key, value);\n\t\tif(list.size() > capacity){\n\t\t\tint keyToRemove = list.removeFirst();\n\t\t\tmap.remove(keyToRemove);\n\t\t}\n\t}\n\tpublic\n\tClazz(int capacity) {\n\t\tthis.capacity = capacity;\n\t}\n\tprivate\n\tint capacity;\n\tprivate\n\tLinkedList<Integer> list = new LinkedList<Integer>();\n\tprivate\n\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n}\n",
            "\tint get(int key) {\n\t\tif(map.containsKey(key)){\n\t\t\tint value = map.get(key);\n\t\t\tlist.remove(key);\n\t\t\tlist.add(key);\n\t\t\treturn value;\n\t\t}\n\t\treturn -1;\n\t}\n\tpublic\n\tvoid set(int key, int value) {\n\t\tif(map.containsKey(key)){\n\t\t\tlist.remove(key);\n\t\t\tmap.put(key, value);\n\t\t\tlist.add(key);\n\t\t}\n\t\telse{\n\t\t\tif(map.size() == capacity){\n\t\t\t\tint removeKey = list.remove(0);\n\t\t\t\tmap.remove(removeKey);\n\t\t\t}\n\t\t\tmap.put(key, value);\n\t\t\tlist.add(key);\n\t\t}\n\t}\n\tpublic\n\tClazz(int capacity) {\n\t\tthis.capacity = capacity;\n\t}\n\tprivate\n\tint capacity;\n\tprivate\n\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\tprivate\n\tList<Integer> list = new ArrayList<Integer>();\n}\n",
            "\tint get(int key) {\n\t\tif(map.containsKey(key)){\n\t\t\tint value = map.get(key);\n\t\t\tlist.remove(key);\n\t\t\tlist.add(key);\n\t\t\treturn value;\n\t\t}\n\t\treturn -1;\n\t}\n\tpublic\n\tvoid set(int key, int value) {\n\t\tif(map.containsKey(key)){\n\t\t\tlist.remove(key);\n\t\t\tlist.add(key);\n\t\t\tmap.put(key, value);\n\t\t}\n\t\telse{\n\t\t\tif(map.size() == capacity){\n\t\t\t\tint removeKey = list.remove();\n\t\t\t\tmap.remove(removeKey);\n\t\t\t}\n\t\t\tlist.add(key);\n\t\t\tmap.put(key, value);\n\t\t}\n\t}\n}\n",
            "\tclass LRUCache{\n\t\tpublic LRUCache(int capacity) {\n\t\t\t\n\t\t}\n\t\tpublic int get(int key) {\n\t\t\treturn 0;\n\t\t}\n\t\tpublic void put(int key, int value) {\n\t\t\t\n\t\t}\n\t}\n}\n",
            "\tclass LRUCache {\n\t\tprivate int capacity;\n\t\tprivate Map<Integer, Integer> map;\n\t\tprivate List<Integer> list;\n\t\tpublic LRUCache(int capacity) {\n\t\t\tthis.capacity = capacity;\n\t\t\tmap = new HashMap<Integer, Integer>();\n\t\t\tlist = new ArrayList<Integer>();\n\t\t}\n\t\tpublic int get(int key) {\n\t\t\tif(map.containsKey(key)){\n\t\t\t\tint index = list.indexOf(key);\n\t\t\t\tlist.remove(index);\n\t\t\t\tlist.add(index, key);\n\t\t\t\treturn map.get(key);\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t\tpublic void set(int key, int value) {\n\t\t\tif(map.containsKey(key)){\n\t\t\t\tint index = list.indexOf(key);\n\t\t\t\tlist.remove(index);\n\t\t\t\tlist.add(index, key);\n\t\t\t\tmap.put(key, value);\n\t\t\t}else{\n\t\t\t\tif(list.size() == capacity){\n\t\t\t\t\tint removeKey = list.remove(0);\n\t\t\t\t\tmap.remove(removeKey);\n\t\t\t\t}\n\t\t\t\tlist.add(key);\n\t\t\t\tmap.put(key, value);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tint get(int key) {\n\t\tif(map.containsKey(key)){\n\t\t\tint index = map.get(key);\n\t\t\tint value = array[index];\n\t\t\tarray[index] = array[0];\n\t\t\tarray[0] = value;\n\t\t\tmap.put(key, 0);\n\t\t\treturn value;\n\t\t}\n\t\treturn -1;\n\t}\n\tpublic\n\tvoid set(int key, int value) {\n\t\tif(map.containsKey(key)){\n\t\t\tint index = map.get(key);\n\t\t\tarray[index] = value;\n\t\t}\n\t\telse{\n\t\t\tif(map.size() == capacity){\n\t\t\t\tint last = array[size - 1];\n\t\t\t\tmap.remove(last);\n\t\t\t\tarray[size - 1] = value;\n\t\t\t\tmap.put(key, size - 1);\n\t\t\t\tarray[0] = last;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tarray[size] = value;\n\t\t\t\tmap.put(key, size);\n\t\t\t\tsize++;\n\t\t\t}\n\t\t}\n\t}\n\tpublic\n\tClazz(int capacity) {\n\t\tthis.capacity = capacity;\n\t\tarray = new int[capacity];\n\t\tmap = new HashMap<Integer, Integer>();\n\t\tsize = 0;\n\t}\n\tint[] array;\n\tHashMap<Integer, Integer> map;\n\tint capacity;\n\tint size;\n}\n",
            "\tstatic class LRUCache{\n\t\tpublic static void main(String[] args){\n\t\t\tLRUCache cache = new LRUCache(2);\n\t\t\tcache.set(1, 1);\n\t\t\tcache.set(2, 2);\n\t\t\tSystem.out.println(cache.get(1));\n\t\t\tcache.set(3, 3);\n\t\t\tSystem.out.println(cache.get(2));\n\t\t\tcache.set(4, 4);\n\t\t\tSystem.out.println(cache.get(1));\n\t\t\tSystem.out.println(cache.get(3));\n\t\t\tSystem.out.println(cache.get(4));\n\t\t}\n\t}\n}\n",
            "\tint get(int key){\n\t\treturn -1;\n\t}\n\tpublic\n\tvoid set(int key, int value){\n\t}\n}\n",
            "\tstatic class LRUCache {\n\t\tclass Node {\n\t\t\tint key;\n\t\t\tint value;\n\t\t\tNode prev;\n\t\t\tNode next;\n\t\t\tNode(int key, int value) {\n\t\t\t\tthis.key = key;\n\t\t\t\tthis.value = value;\n\t\t\t}\n\t\t}\n\t\tint capacity;\n\t\tint size;\n\t\tNode head;\n\t\tNode tail;\n\t\tHashMap<Integer, Node> map = new HashMap<>();\n\t\tpublic LRUCache(int capacity) {\n\t\t\tthis.capacity = capacity;\n\t\t\tthis.size = 0;\n\t\t\tthis.head = new Node(0, 0);\n\t\t\tthis.tail = new Node(0, 0);\n\t\t\thead.next = tail;\n\t\t\ttail.prev = head;\n\t\t}\n\t\tpublic int get(int key) {\n\t\t\tif (!map.containsKey(key)) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tNode node = map.get(key);\n\t\t\tnode.prev.next = node.next;\n\t\t\tnode.next.prev = node.prev;\n\t\t\tmoveToHead(node);\n\t\t\treturn node.value;\n\t\t}\n\t\tpublic void put(int key, int value) {\n\t\t\tif (map.containsKey(key)) {\n\t\t\t\tNode node = map.get(key);\n\t\t\t\tnode.value = value;\n\t\t\t\tnode.prev.next = node.next;\n\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\tmoveToHead(node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tNode node = new Node(key, value);\n\t\t\tmap.put(key, node);\n\t\t\tmoveToHead(node);\n\t\t\tsize++;\n\t\t\tif (size > capacity) {\n\t\t\t\tmap.remove(tail.prev.key);\n\t\t\t\ttail.\n",
            "\tstatic class LRUCache {\n\t\tpublic static class Node{\n\t\t\tint key;\n\t\t\tint value;\n\t\t\tNode prev;\n\t\t\tNode next;\n\t\t\tpublic Node(int key, int value){\n\t\t\t\tthis.key = key;\n\t\t\t\tthis.value = value;\n\t\t\t}\n\t\t}\n\t\tint capacity;\n\t\tint size;\n\t\tNode head;\n\t\tNode tail;\n\t\tHashMap<Integer, Node> map;\n\t\tpublic LRUCache(int capacity) {\n\t\t\tthis.capacity = capacity;\n\t\t\tthis.size = 0;\n\t\t\tthis.head = new Node(0, 0);\n\t\t\tthis.tail = new Node(0, 0);\n\t\t\tthis.head.next = this.tail;\n\t\t\tthis.tail.prev = this.head;\n\t\t\tthis.map = new HashMap<Integer, Node>();\n\t\t}\n\t\tpublic int get(int key) {\n\t\t\tif(!map.containsKey(key)){\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tNode node = map.get(key);\n\t\t\tnode.prev.next = node.next;\n\t\t\tnode.next.prev = node.prev;\n\t\t\tnode.next = head.next;\n\t\t\tnode.prev = head;\n\t\t\thead.next.prev = node;\n\t\t\thead.next = node;\n\t\t\treturn node.value;\n\t\t}\n\t\tpublic void set(int key, int value) {\n\t\t\tif(map.containsKey(key)){\n\t\t\t\tNode node = map.get(key);\n\t\t\t\tnode.prev.next = node.next;\n\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\tnode.next = head.next;\n\t\t\t\tnode.prev = head;\n\t\t\t\thead.next.prev = node;\n\t\t\t\thead.next = node;\n"
        ],
        "results": 10
    },
    {
        "id": "1350",
        "source": "leetcodeTitles",
        "source_id": "378",
        "url": "https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/",
        "language": "java",
        "query": "Kth Smallest Element in a Sorted Matrix",
        "snippets": [
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint lo = matrix[0][0], hi = matrix[n - 1][n - 1];\n\t\twhile (lo < hi) {\n\t\t\tint mid = lo + (hi - lo) / 2;\n\t\t\tif (count(matrix, mid) < k)\n\t\t\t\tlo = mid + 1;\n\t\t\telse\n\t\t\t\thi = mid;\n\t\t}\n\t\treturn lo;\n\t}\n\tpublic int count(int[][] matrix, int target) {\n\t\tint n = matrix.length, i = n - 1, j = 0, res = 0;\n\t\twhile (i >= 0 && j < n) {\n\t\t\tif (matrix[i][j] <= target)\n\t\t\t\tres += i + 1, j++;\n\t\t\telse\n\t\t\t\ti--;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint lo = matrix[0][0], hi = matrix[n - 1][n - 1];\n\t\twhile (lo < hi) {\n\t\t\tint mid = lo + (hi - lo) / 2;\n\t\t\tif (count(matrix, mid) < k)\n\t\t\t\tlo = mid + 1;\n\t\t\telse\n\t\t\t\thi = mid;\n\t\t}\n\t\treturn lo;\n\t}\n\tpublic int count(int[][] matrix, int target) {\n\t\tint n = matrix.length, cnt = 0;\n\t\tint i = n - 1, j = 0;\n\t\twhile (i >= 0 && j < n) {\n\t\t\tif (matrix[i][j] <= target) {\n\t\t\t\tcnt += i + 1;\n\t\t\t\tj++;\n\t\t\t} else\n\t\t\t\ti--;\n\t\t}\n\t\treturn cnt;\n\t}\n}\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint lo = matrix[0][0], hi = matrix[n - 1][n - 1];\n\t\twhile (lo < hi) {\n\t\t\tint mid = lo + (hi - lo) / 2;\n\t\t\tif (count(matrix, mid) < k)\n\t\t\t\tlo = mid + 1;\n\t\t\telse\n\t\t\t\thi = mid;\n\t\t}\n\t\treturn lo;\n\t}\n\tpublic int count(int[][] matrix, int target) {\n\t\tint n = matrix.length;\n\t\tint i = n - 1, j = 0;\n\t\tint res = 0;\n\t\twhile (i >= 0 && j < n) {\n\t\t\tif (matrix[i][j] <= target) {\n\t\t\t\tres += i + 1;\n\t\t\t\tj++;\n\t\t\t} else\n\t\t\t\ti--;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint lo = matrix[0][0], hi = matrix[n-1][n-1];\n\t\twhile(lo < hi) {\n\t\t\tint mid = lo + (hi - lo) / 2;\n\t\t\tif(count(matrix, mid) < k) lo = mid + 1;\n\t\t\telse hi = mid;\n\t\t}\n\t\treturn lo;\n\t}\n\tpublic int count(int[][] matrix, int target) {\n\t\tint n = matrix.length;\n\t\tint i = 0, j = n - 1;\n\t\tint count = 0;\n\t\twhile(i < n && j >= 0) {\n\t\t\tif(matrix[i][j] <= target) {\n\t\t\t\tcount += j + 1;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse j--;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint lo = matrix[0][0], hi = matrix[n-1][n-1];\n\t\twhile(lo < hi){\n\t\t\tint mid = lo + (hi - lo) / 2;\n\t\t\tif(count(matrix, mid) < k) lo = mid + 1;\n\t\t\telse hi = mid;\n\t\t}\n\t\treturn lo;\n\t}\n\tpublic int count(int[][] matrix, int target){\n\t\tint n = matrix.length, i = n - 1, j = 0, cnt = 0;\n\t\twhile(i >= 0 && j < n){\n\t\t\tif(matrix[i][j] <= target) j++;\n\t\t\telse i--;\n\t\t\tcnt += (i - j + 1);\n\t\t}\n\t\treturn cnt;\n\t}\n}\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint m = matrix[0].length;\n\t\tint[] heap = new int[n * m];\n\t\tint heapSize = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\theap[heapSize++] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tbuildHeap(heap, heapSize);\n\t\tfor (int i = 0; i < k - 1; i++) {\n\t\t\theap[0] = heap[heapSize - 1];\n\t\t\theapSize--;\n\t\t\theapify(heap, 0, heapSize);\n\t\t}\n\t\treturn heap[0];\n\t}\n\tpublic void buildHeap(int[] heap, int heapSize) {\n\t\tfor (int i = heapSize / 2 - 1; i >= 0; i--) {\n\t\t\theapify(heap, i, heapSize);\n\t\t}\n\t}\n\tpublic void heapify(int[] heap, int i, int heapSize) {\n\t\tint left = 2 * i + 1;\n\t\tint right = 2 * i + 2;\n\t\tint largest = i;\n\t\tif (left < heapSize && heap[left] > heap[i]) {\n\t\t\tlargest = left;\n\t\t}\n\t\tif (right < heapSize && heap[right] > heap[largest]) {\n\t\t\tlargest = right;\n\t\t}\n\t\tif (largest != i) {\n\t\t\tint temp = heap[i];\n\t\t\theap[i] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t\theapify(heap, largest, heapSize);\n\t\t}\n\t}\n}\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint l = matrix[0].length;\n\t\tint[] heap = new int[n];\n\t\tint[] index = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\theap[i] = matrix[i][0];\n\t\t\tindex[i] = i;\n\t\t}\n\t\tbuildHeap(heap, index);\n\t\tfor(int i = 0; i < k - 1; i++){\n\t\t\tint min = heap[0];\n\t\t\tint minIndex = index[0];\n\t\t\theap[0] = heap[n - 1];\n\t\t\tindex[0] = index[n - 1];\n\t\t\theap[n - 1] = min;\n\t\t\tindex[n - 1] = minIndex;\n\t\t\tn--;\n\t\t\theapify(heap, index, 0, n);\n\t\t}\n\t\treturn heap[0];\n\t}\n\tpublic void buildHeap(int[] heap, int[] index){\n\t\tint n = heap.length;\n\t\tfor(int i = n / 2 - 1; i >= 0; i--){\n\t\t\theapify(heap, index, i, n);\n\t\t}\n\t}\n\tpublic void heapify(int[] heap, int[] index, int i, int n){\n\t\tint left = 2 * i + 1;\n\t\tint right = 2 * i + 2;\n\t\tint min = i;\n\t\tif(left < n && heap[left] < heap[min]){\n\t\t\tmin = left;\n\t\t}\n\t\tif(right < n && heap[right] < heap[min]){\n\t\t\tmin = right;\n\t\t}\n\t\tif(min != i){\n\t\t\tint temp = heap[i];\n\t\t\theap[i] = heap[min];\n\t\t\theap[min] = temp;\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint l = matrix[0].length;\n\t\tint[] arr = new int[n * l];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < l; j++) {\n\t\t\t\tarr[i * l + j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tArrays.sort(arr);\n\t\treturn arr[k - 1];\n\t}\n}\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint[] heap = new int[n];\n\t\tint[] index = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\theap[i] = matrix[i][0];\n\t\t\tindex[i] = i;\n\t\t}\n\t\tbuildHeap(heap, index);\n\t\tfor(int i = 0; i < k - 1; i++){\n\t\t\theap[0] = matrix[heap[0]][0];\n\t\t\tindex[0] = matrix[heap[0]][0];\n\t\t\theapify(heap, index, 0);\n\t\t}\n\t\treturn heap[0];\n\t}\n\tpublic\n\tvoid buildHeap(int[] heap, int[] index){\n\t\tfor(int i = heap.length / 2 - 1; i >= 0; i--){\n\t\t\theapify(heap, index, i);\n\t\t}\n\t}\n\tpublic\n\tvoid heapify(int[] heap, int[] index, int i){\n\t\tint left = 2 * i + 1;\n\t\tint right = 2 * i + 2;\n\t\tint largest = i;\n\t\tif(left < heap.length && heap[left] > heap[largest]){\n\t\t\tlargest = left;\n\t\t}\n\t\tif(right < heap.length && heap[right] > heap[largest]){\n\t\t\tlargest = right;\n\t\t}\n\t\tif(largest != i){\n\t\t\tint temp = heap[i];\n\t\t\theap[i] = heap[largest];\n\t\t\theap[largest] = temp;\n\t\t\tint temp2 = index[i];\n\t\t\tindex[i] = index[largest];\n\t\t\tindex[largest] = temp2;\n\t\t\theapify(heap, index, largest);\n\t\t}\n\t}\n}\n",
            "\tint kthSmallest(int[][] matrix, int k) {\n\t\tint n = matrix.length;\n\t\tint[] heap = new int[n];\n\t\tint[] pos = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\theap[i] = matrix[i][0];\n\t\t\tpos[i] = i;\n\t\t}\n\t\tbuildHeap(heap, pos);\n\t\tfor(int i = 0; i < k - 1; i++){\n\t\t\tint min = heap[0];\n\t\t\tint minPos = pos[0];\n\t\t\theap[0] = heap[n - 1];\n\t\t\tpos[0] = pos[n - 1];\n\t\t\theap[n - 1] = min;\n\t\t\tpos[n - 1] = minPos;\n\t\t\tn--;\n\t\t\tsink(heap, pos, 0, n);\n\t\t}\n\t\treturn heap[0];\n\t}\n\tpublic\n\tvoid buildHeap(int[] heap, int[] pos){\n\t\tint n = heap.length;\n\t\tfor(int i = n / 2 - 1; i >= 0; i--){\n\t\t\tsink(heap, pos, i, n);\n\t\t}\n\t}\n\tpublic\n\tvoid sink(int[] heap, int[] pos, int i, int n){\n\t\twhile(2 * i + 1 < n){\n\t\t\tint j = 2 * i + 1;\n\t\t\tif(j + 1 < n && heap[j] > heap[j + 1]){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(heap[i] <= heap[j]){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint temp = heap[i];\n\t\t\theap[i] = heap[j];\n\t\t\theap[j] = temp;\n\t\t\tint tempPos = pos[i];\n\t\t\tpos[i] = pos[j];\n"
        ],
        "results": 10
    },
    {
        "id": "1351",
        "source": "leetcodeTitles",
        "source_id": "1154",
        "url": "https://leetcode.com/problems/day-of-the-year/",
        "language": "java",
        "query": "Day of the Year",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint day = Integer.parseInt(args[0]);\n\t\tint month = Integer.parseInt(args[1]);\n\t\tint year = Integer.parseInt(args[2]);\n\t\tint[] days = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\t\tif(year % 4 == 0 && year % 100 != 0 || year % 400 == 0){\n\t\t\tdays[2] = 29;\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < month - 1; i++){\n\t\t\tsum += days[i];\n\t\t}\n\t\tsum += day;\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint day = Integer.parseInt(args[0]);\n\t\tint month = Integer.parseInt(args[1]);\n\t\tint year = Integer.parseInt(args[2]);\n\t\tint days = 0;\n\t\tint[] months = {31,28,31,30,31,30,31,31,30,31,30,31};\n\t\tif(year % 4 == 0 && year % 100 != 0 || year % 400 == 0){\n\t\t\tmonths[1] = 29;\n\t\t}\n\t\tfor(int i = 0; i < month - 1; i++){\n\t\t\tdays += months[i];\n\t\t}\n\t\tdays += day;\n\t\tSystem.out.println(days);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint day = Integer.parseInt(args[0]);\n\t\tint year = Integer.parseInt(args[1]);\n\t\tint month = Integer.parseInt(args[2]);\n\t\tint dayOfYear = day + (month-1)*30;\n\t\tint leapYear = year % 4 == 0 && year % 100 != 0 || year % 400 == 0;\n\t\tif(month == 2 && leapYear){\n\t\t\tdayOfYear += 1;\n\t\t}\n\t\tSystem.out.println(dayOfYear);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint day = Integer.parseInt(args[0]);\n\t\tint year = Integer.parseInt(args[1]);\n\t\tint month = Integer.parseInt(args[2]);\n\t\tint dayOfYear = day + (month * 30) + (year * 365);\n\t\tSystem.out.println(dayOfYear);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint day = Integer.parseInt(args[0]);\n\t\tint year = Integer.parseInt(args[1]);\n\t\tint month = Integer.parseInt(args[2]);\n\t\tint dayOfYear = day + (month - 1) * 30 + (year - 1) * 365;\n\t\tSystem.out.println(dayOfYear);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint month = in.nextInt();\n\t\tint day = in.nextInt();\n\t\tint year = in.nextInt();\n\t\tint[] days = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\t\tint sum = 0;\n\t\tfor(int i = 1; i < month; i++){\n\t\t\tsum += days[i];\n\t\t}\n\t\tsum += day;\n\t\tif(year % 4 == 0 && year % 100 != 0 || year % 400 == 0){\n\t\t\tsum += 1;\n\t\t}\n\t\tSystem.out.println(sum);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the year\");\n\t\tint year = sc.nextInt();\n\t\tSystem.out.println(\"Enter the month\");\n\t\tint month = sc.nextInt();\n\t\tSystem.out.println(\"Enter the day\");\n\t\tint day = sc.nextInt();\n\t\tint[] monthDays = {31,28,31,30,31,30,31,31,30,31,30,31};\n\t\tint days = 0;\n\t\tfor(int i = 0; i < month - 1; i++){\n\t\t\tdays += monthDays[i];\n\t\t}\n\t\tdays += day;\n\t\tif(year % 4 == 0 && year % 100 != 0 || year % 400 == 0){\n\t\t\tdays += 1;\n\t\t}\n\t\tSystem.out.println(\"The day of the year is \" + days);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1352",
        "source": "leetcodeTitles",
        "source_id": "120",
        "url": "https://leetcode.com/problems/triangle/",
        "language": "java",
        "query": "Triangle",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint a = Integer.parseInt(args[0]);\n\t\tint b = Integer.parseInt(args[1]);\n\t\tint c = Integer.parseInt(args[2]);\n\t\tif(a+b>c && a+c>b && b+c>a){\n\t\t\tSystem.out.println(\"Triangle\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Not Triangle\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = Integer.parseInt(args[0]);\n\t\tint b = Integer.parseInt(args[1]);\n\t\tint c = Integer.parseInt(args[2]);\n\t\tif(a+b>c && a+c>b && b+c>a){\n\t\t\tif(a==b && b==c){\n\t\t\t\tSystem.out.println(\"Equilateral\");\n\t\t\t}\n\t\t\telse if(a==b || b==c || a==c){\n\t\t\t\tSystem.out.println(\"Isosceles\");\n\t\t\t}\n\t\t\telse{\n\t\t\t\tSystem.out.println(\"Scalene\");\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Not a triangle\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = Integer.parseInt(args[0]);\n\t\tint b = Integer.parseInt(args[1]);\n\t\tint c = Integer.parseInt(args[2]);\n\t\tif(a+b>c && a+c>b && b+c>a){\n\t\t\tSystem.out.println(\"Triangle\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"Not a Triangle\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a=5;\n\t\tint b=6;\n\t\tint c=7;\n\t\tint p=a+b+c;\n\t\tint s=a+b+c;\n\t\tint area=s/2;\n\t\tSystem.out.println(\"The area of the triangle is \"+area);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = 5;\n\t\tint b = 6;\n\t\tint c = 7;\n\t\tint p = (a + b + c) / 2;\n\t\tint area = (int) Math.sqrt(p * (p - a) * (p - b) * (p - c));\n\t\tSystem.out.println(area);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1353",
        "source": "leetcodeTitles",
        "source_id": "2017",
        "url": "https://leetcode.com/problems/grid-game/",
        "language": "java",
        "query": "Grid Game",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[][] grid = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid2 = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid3 = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid4 = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid5 = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid6 = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid7 = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid8 = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid9 = new int[][]{\n\t\t\t{1,2,3},\n\t\t\t{4,5,6},\n\t\t\t{7,8,9}\n\t\t};\n\t\tint[][] grid10 = new int[][\n",
            "\tstatic void main(String[] args){\n\t\tint[][] grid = new int[3][3];\n\t\tint[][] grid2 = new int[3][3];\n\t\tint[][] grid3 = new int[3][3];\n\t\tint[][] grid4 = new int[3][3];\n\t\tint[][] grid5 = new int[3][3];\n\t\tint[][] grid6 = new int[3][3];\n\t\tint[][] grid7 = new int[3][3];\n\t\tint[][] grid8 = new int[3][3];\n\t\tint[][] grid9 = new int[3][3];\n\t\tint[][] grid10 = new int[3][3];\n\t\tint[][] grid11 = new int[3][3];\n\t\tint[][] grid12 = new int[3][3];\n\t\tint[][] grid13 = new int[3][3];\n\t\tint[][] grid14 = new int[3][3];\n\t\tint[][] grid15 = new int[3][3];\n\t\tint[][] grid16 = new int[3][3];\n\t\tint[][] grid17 = new int[3][3];\n\t\tint[][] grid18 = new int[3][3];\n\t\tint[][] grid19 = new int[3][3];\n\t\tint[][] grid20 = new int[3][3];\n\t\tint[][] grid21 = new int[3][3];\n\t\tint[][] grid22 = new int[3][3];\n\t\tint[][] grid23 = new int[3][3];\n\t\tint[][] grid24 = new int[3][3];\n\t\tint[][] grid25 = new int[3][3];\n\t\tint[][] grid26 = new int[3][3];\n\t\tint[][] grid27 = new int[3][3];\n\t\tint[][] grid28 = new int[3][3];\n\t\tint[][] grid29 = new int[3][\n",
            "\tstatic void main(String[] args){\n\t\tint[][] grid = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid2 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid3 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid4 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid5 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid6 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid7 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid8 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid9 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid10 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid11 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid12 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid13 = new int[][]{{1,2,3},{4,5,6},{7,8,9}};\n\t\tint[][] grid14 =\n"
        ],
        "results": 10
    },
    {
        "id": "1354",
        "source": "leetcodeTitles",
        "source_id": "128",
        "url": "https://leetcode.com/problems/longest-consecutive-sequence/",
        "language": "java",
        "query": "Longest Consecutive Sequence",
        "snippets": [
            "\tint longestConsecutive(int[] nums) {\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tset.add(nums[i]);\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(!set.contains(nums[i] - 1)){\n\t\t\t\tint j = nums[i];\n\t\t\t\twhile(set.contains(j)){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tmax = Math.max(max, j - nums[i]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int longestConsecutive(int[] nums) {\n\t\tif(nums == null || nums.length == 0)\n\t\t\treturn 0;\n\t\tint max = 0;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < nums.length; i++)\n\t\t\tset.add(nums[i]);\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(!set.contains(nums[i] - 1)){\n\t\t\t\tint j = nums[i];\n\t\t\t\twhile(set.contains(j))\n\t\t\t\t\tj++;\n\t\t\t\tmax = Math.max(max, j - nums[i]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint longestConsecutive(int[] nums) {\n\t\tif(nums == null || nums.length == 0) return 0;\n\t\tint max = 0;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tset.add(nums[i]);\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(!set.contains(nums[i] - 1)){\n\t\t\t\tint j = nums[i];\n\t\t\t\twhile(set.contains(j)){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tmax = Math.max(max, j - nums[i]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint longestConsecutive(int[] nums) {\n\t\tif(nums == null || nums.length == 0)\n\t\t\treturn 0;\n\t\tint max = 0;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tset.add(nums[i]);\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(!set.contains(nums[i] - 1)){\n\t\t\t\tint j = nums[i];\n\t\t\t\twhile(set.contains(j))\n\t\t\t\t\tj++;\n\t\t\t\tmax = Math.max(max, j - nums[i]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint longestConsecutive(int[] nums) {\n\t\tif(nums == null || nums.length == 0)\n\t\t\treturn 0;\n\t\tint max = 0;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < nums.length; i++)\n\t\t\tset.add(nums[i]);\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(!set.contains(nums[i] - 1)){\n\t\t\t\tint j = nums[i];\n\t\t\t\twhile(set.contains(j))\n\t\t\t\t\tj++;\n\t\t\t\tmax = Math.max(max, j - nums[i]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int longestConsecutive(int[] nums) {\n\t\tif(nums.length==0) return 0;\n\t\tint max=1;\n\t\tHashSet<Integer> set=new HashSet<Integer>();\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tset.add(nums[i]);\n\t\t}\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tint count=1;\n\t\t\tint num=nums[i];\n\t\t\twhile(set.contains(num+1)){\n\t\t\t\tcount++;\n\t\t\t\tnum++;\n\t\t\t}\n\t\t\tmax=Math.max(max,count);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint longestConsecutive(int[] nums) {\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i: nums) set.add(i);\n\t\tint max = 0;\n\t\tfor(int i: nums){\n\t\t\tif(!set.contains(i-1)){\n\t\t\t\tint j = i+1;\n\t\t\t\twhile(set.contains(j)) j++;\n\t\t\t\tmax = Math.max(max, j-i);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int longestConsecutive(int[] nums) {\n\t\tif(nums == null || nums.length == 0)\n\t\t\treturn 0;\n\t\tint max = 1;\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < nums.length; i++)\n\t\t\tset.add(nums[i]);\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tint count = 1;\n\t\t\tif(set.contains(nums[i] - 1))\n\t\t\t\tcontinue;\n\t\t\tint j = nums[i] + 1;\n\t\t\twhile(set.contains(j)){\n\t\t\t\tcount++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tmax = Math.max(max, count);\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1355",
        "source": "leetcodeTitles",
        "source_id": "168",
        "url": "https://leetcode.com/problems/excel-sheet-column-title/",
        "language": "java",
        "query": "Excel Sheet Column Title",
        "snippets": [
            "\tString convertToTitle(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile (n > 0) {\n\t\t\tn--;\n\t\t\tsb.insert(0, (char) ('A' + n % 26));\n\t\t\tn /= 26;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString convertToTitle(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(n > 0){\n\t\t\tn--;\n\t\t\tsb.insert(0, (char)(n % 26 + 'A'));\n\t\t\tn /= 26;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString convertToTitle(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(n>0){\n\t\t\tn--;\n\t\t\tsb.append((char)('A'+n%26));\n\t\t\tn/=26;\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tString convertToTitle(int n) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(n>0){\n\t\t\tn--;\n\t\t\tsb.append((char)(n%26+'A'));\n\t\t\tn/=26;\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1356",
        "source": "leetcodeTitles",
        "source_id": "525",
        "url": "https://leetcode.com/problems/contiguous-array/",
        "language": "java",
        "query": "Contiguous Array",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint max = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] > max){\n\t\t\t\tmax = arr[i];\n\t\t\t\tstart = i;\n\t\t\t}\n\t\t}\n\t\tfor(int i = start; i < arr.length; i++){\n\t\t\tif(arr[i] < max){\n\t\t\t\tend = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max: \" + max);\n\t\tSystem.out.println(\"Start: \" + start);\n\t\tSystem.out.println(\"End: \" + end);\n\t\tSystem.out.println(\"Length: \" + (end - start));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint max = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t\tstart = i - sum + 1;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t\tif(sum < 0){\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max sum is \" + max);\n\t\tSystem.out.println(\"Start is \" + start);\n\t\tSystem.out.println(\"End is \" + end);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint max = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t\tstart = i - sum + 1;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t\tif(sum < 0){\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"max: \" + max);\n\t\tSystem.out.println(\"start: \" + start);\n\t\tSystem.out.println(\"end: \" + end);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint max = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t\tstart = i - sum + 1;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t\tif(sum < 0){\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max sum is \" + max);\n\t\tSystem.out.println(\"Start index is \" + start);\n\t\tSystem.out.println(\"End index is \" + end);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint max = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i; j < arr.length; j++){\n\t\t\t\tsum += arr[j];\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t\tstart = i;\n\t\t\t\t\tend = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"max: \" + max);\n\t\tfor(int i = start; i <= end; i++){\n\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1357",
        "source": "leetcodeTitles",
        "source_id": "1561",
        "url": "https://leetcode.com/problems/maximum-number-of-coins-you-can-get/",
        "language": "java",
        "query": "Maximum Number of Coins You Can Get",
        "snippets": [
            "\tint maxCoins(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n + 1][n + 1];\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tfor (int j = i; j < n; j++) {\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[i][k - 1] + nums[k] + dp[k + 1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tstatic int maxCoins(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n + 1][n + 1];\n\t\tfor (int len = 1; len <= n; len++) {\n\t\t\tfor (int i = 0; i + len - 1 < n; i++) {\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tdp[i][j] = Integer.MIN_VALUE;\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k + 1][j] + nums[i] * nums[k] * nums[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint maxCoins(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n + 1][n + 1];\n\t\tfor (int len = 1; len <= n; len++) {\n\t\t\tfor (int i = 0; i + len <= n; i++) {\n\t\t\t\tint j = i + len;\n\t\t\t\tfor (int k = i; k < j; k++) {\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k + 1][j] + A[i] * A[k] * A[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n];\n\t}\n}\n",
            "\tstatic int maxCoins(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n + 1][n + 1];\n\t\tfor (int len = 1; len <= n; len++) {\n\t\t\tfor (int i = 0; i + len <= n; i++) {\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[i][k] + dp[k + 1][j] + nums[i] * nums[k] * nums[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tint maxCoins(int[] piles) {\n\t\tint n = piles.length;\n\t\tint[][] dp = new int[n + 1][n + 1];\n\t\tfor (int len = 1; len <= n; len++) {\n\t\t\tfor (int i = 1; i <= n - len + 1; i++) {\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], piles[k - 1] + dp[i][k - 1] + dp[k + 1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[1][n];\n\t}\n}\n",
            "\tint maxCoins(int[] A){\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int len = 1; len <= n; len++){\n\t\t\tfor(int i = 0; i + len - 1 < n; i++){\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tdp[i][j] = Integer.MIN_VALUE;\n\t\t\t\tfor(int k = i; k <= j; k++){\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], A[k] + (k - i > 0 ? dp[i][k - 1] : 0) + (j - k > 0 ? dp[k + 1][j] : 0));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n - 1];\n\t}\n}\n",
            "\tstatic int maxCoins(int[] nums){\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n+1][n+1];\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tdp[i][i] = nums[i-1];\n\t\t}\n\t\tfor(int len = 2; len <= n; len++){\n\t\t\tfor(int i = 1; i <= n-len+1; i++){\n\t\t\t\tint j = i+len-1;\n\t\t\t\tdp[i][j] = Integer.MIN_VALUE;\n\t\t\t\tfor(int k = i; k <= j; k++){\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[i][k-1] + dp[k+1][j] + nums[k]*(j-i+1));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[1][n];\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] nums = {1,3,4,5};\n\t\tSystem.out.println(maxCoins(nums));\n\t}\n}\n",
            "\tint maxCoins(int[] A) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n + 1][n + 1];\n\t\tfor (int i = 0; i <= n; i++) {\n\t\t\tArrays.fill(dp[i], -1);\n\t\t}\n\t\treturn helper(A, 0, n - 1, dp);\n\t}\n\tpublic int helper(int[] A, int i, int j, int[][] dp) {\n\t\tif (i > j) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (dp[i][j] != -1) {\n\t\t\treturn dp[i][j];\n\t\t}\n\t\tint res = 0;\n\t\tfor (int k = i; k <= j; k++) {\n\t\t\tres = Math.max(res, A[k] + helper(A, i, k - 1, dp) + helper(A, k + 1, j, dp));\n\t\t}\n\t\tdp[i][j] = res;\n\t\treturn res;\n\t}\n}\n",
            "\tint maxCoins(int[] nums){\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n + 1][n + 1];\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tdp[i][i] = nums[i - 1];\n\t\t}\n\t\tfor(int len = 2; len <= n; len++){\n\t\t\tfor(int i = 1; i <= n - len + 1; i++){\n\t\t\t\tint j = i + len - 1;\n\t\t\t\tdp[i][j] = Integer.MIN_VALUE;\n\t\t\t\tfor(int k = i; k <= j; k++){\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[i][k - 1] + dp[k + 1][j] + nums[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[1][n];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1358",
        "source": "leetcodeTitles",
        "source_id": "235",
        "url": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/",
        "language": "java",
        "query": "Lowest Common Ancestor of a Binary Search Tree",
        "snippets": [
            "\tTreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\t\tif(root==null) return null;\n\t\tif(root.val>p.val&&root.val>q.val) return lowestCommonAncestor(root.left,p,q);\n\t\tif(root.val<p.val&&root.val<q.val) return lowestCommonAncestor(root.right,p,q);\n\t\treturn root;\n\t}\n}\n",
            "\tTreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\t\tif(root==null) return null;\n\t\tif(root==p || root==q) return root;\n\t\tTreeNode left=lowestCommonAncestor(root.left,p,q);\n\t\tTreeNode right=lowestCommonAncestor(root.right,p,q);\n\t\tif(left!=null && right!=null) return root;\n\t\treturn left==null?right:left;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1359",
        "source": "leetcodeTitles",
        "source_id": "2255",
        "url": "https://leetcode.com/problems/count-prefixes-of-a-given-string/",
        "language": "java",
        "query": "Count Prefixes of a Given String",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString s = \"ababab\";\n\t\tint n = s.length();\n\t\tint[] count = new int[n];\n\t\tcount[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(s.charAt(i) == s.charAt(i-1)){\n\t\t\t\tcount[i] = count[i-1] + 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount[i] = 1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(count[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"geeksforgeeks\";\n\t\tint n = str.length();\n\t\tint count = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(str.substring(0,i+1).equals(str.substring(0,i+1).toLowerCase())){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"ababab\";\n\t\tint n = str.length();\n\t\tint[] count = new int[n];\n\t\tcount[0] = 1;\n\t\tfor(int i=1;i<n;i++){\n\t\t\tif(str.charAt(i) == str.charAt(i-1)){\n\t\t\t\tcount[i] = count[i-1] + 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount[i] = 1;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tSystem.out.print(count[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abababab\";\n\t\tint n = s.length();\n\t\tint[] count = new int[n];\n\t\tcount[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(s.charAt(i) == s.charAt(i-1)){\n\t\t\t\tcount[i] = count[i-1] + 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount[i] = 1;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(count[i] + \" \");\n\t\t}\n\t}\n}\n"
        ],
        "results": 8
    },
    {
        "id": "1360",
        "source": "leetcodeTitles",
        "source_id": "901",
        "url": "https://leetcode.com/problems/online-stock-span/",
        "language": "java",
        "query": "Online Stock Span",
        "snippets": [
            "\tint[] stockSpan(int[] prices) {\n\t\tint[] result = new int[prices.length];\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\tfor (int i = 0; i < prices.length; i++) {\n\t\t\twhile (!stack.isEmpty() && prices[i] >= prices[stack.peek()]) {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tresult[i] = stack.isEmpty() ? i + 1 : i - stack.peek();\n\t\t\tstack.push(i);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint[] stockSpan(int[] prices) {\n\t\tint[] result = new int[prices.length];\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\tfor(int i = 0; i < prices.length; i++){\n\t\t\twhile(!stack.isEmpty() && prices[i] >= prices[stack.peek()]){\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tif(stack.isEmpty()){\n\t\t\t\tresult[i] = i + 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult[i] = i - stack.peek();\n\t\t\t}\n\t\t\tstack.push(i);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] stockSpan(int[] prices) {\n\t\tint[] result = new int[prices.length];\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\tfor (int i = 0; i < prices.length; i++) {\n\t\t\twhile (!stack.isEmpty() && prices[i] >= prices[stack.peek()]) {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tresult[i] = stack.isEmpty() ? i + 1 : i - stack.peek();\n\t\t\tstack.push(i);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint[] stockSpan(int[] prices) {\n\t\tint[] res = new int[prices.length];\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\tfor(int i = 0; i < prices.length; i++){\n\t\t\twhile(!stack.isEmpty() && prices[i] >= prices[stack.peek()]){\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tres[i] = stack.isEmpty() ? i + 1 : i - stack.peek();\n\t\t\tstack.push(i);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int onlineStockSpan(int[] prices) {\n\t\tint[] span = new int[prices.length];\n\t\tint max = 0;\n\t\tfor (int i = 0; i < prices.length; i++) {\n\t\t\tint j = i - 1;\n\t\t\twhile (j >= 0 && prices[j] <= prices[i]) {\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tspan[i] = i - j;\n\t\t\tif (span[i] > max) {\n\t\t\t\tmax = span[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int onlineStockSpan(int[] prices) {\n\t\tint[] span = new int[prices.length];\n\t\tint max = 0;\n\t\tfor (int i = 0; i < prices.length; i++) {\n\t\t\tint j = i - 1;\n\t\t\twhile (j >= 0 && prices[j] >= prices[i]) {\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif (j == -1) {\n\t\t\t\tspan[i] = i + 1;\n\t\t\t} else {\n\t\t\t\tspan[i] = i - j;\n\t\t\t}\n\t\t\tmax = Math.max(max, span[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint[] stockSpan(int[] price){\n\t\tint[] result = new int[price.length];\n\t\tint[] stack = new int[price.length];\n\t\tint top = -1;\n\t\tfor(int i = 0; i < price.length; i++){\n\t\t\twhile(top >= 0 && price[i] >= price[stack[top]]){\n\t\t\t\ttop--;\n\t\t\t}\n\t\t\tresult[i] = (top == -1) ? i + 1 : i - stack[top];\n\t\t\tstack[++top] = i;\n\t\t}\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1361",
        "source": "leetcodeTitles",
        "source_id": "1338",
        "url": "https://leetcode.com/problems/reduce-array-size-to-the-half/",
        "language": "java",
        "query": "Reduce Array Size to The Half",
        "snippets": [
            "\tstatic int[] array = {1,2,3,4,5,6,7,8,9,10};\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(Arrays.toString(array));\n\t\tarray = reduceArray(array);\n\t\tSystem.out.println(Arrays.toString(array));\n\t}\n\tpublic static int[] reduceArray(int[] array){\n\t\tint[] newArray = new int[array.length/2];\n\t\tfor(int i = 0; i < newArray.length; i++){\n\t\t\tnewArray[i] = array[i];\n\t\t}\n\t\treturn newArray;\n\t}\n}\n",
            "\tstatic int[] array = {1,2,3,4,5,6,7,8,9,10};\n\tpublic static void main(String[] args){\n\t\tint[] newArray = new int[array.length/2];\n\t\tfor(int i = 0; i < newArray.length; i++){\n\t\t\tnewArray[i] = array[i];\n\t\t}\n\t\tSystem.out.println(Arrays.toString(newArray));\n\t}\n}\n",
            "\tint[] array = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array2 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array3 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array4 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array5 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array6 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array7 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array8 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array9 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array10 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array11 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array12 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array13 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array14 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array15 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array16 = {1,2,3,4,5,6,7,8,9,10};\n\tpublic\n\tint[] array\n",
            "\tstatic int[] array=new int[10];\n\tpublic static void main(String[] args){\n\t\tfor(int i=0;i<10;i++){\n\t\t\tarray[i]=i;\n\t\t}\n\t\tSystem.out.println(Arrays.toString(array));\n\t\tarray=Arrays.copyOf(array,5);\n\t\tSystem.out.println(Arrays.toString(array));\n\t}\n}\n",
            "\tstatic int[] array = new int[]{1,2,3,4,5,6,7,8,9,10};\n\tpublic static void main(String[] args){\n\t\tint[] array = new int[]{1,2,3,4,5,6,7,8,9,10};\n\t\tint[] array2 = new int[array.length/2];\n\t\tfor(int i = 0; i < array2.length; i++){\n\t\t\tarray2[i] = array[i];\n\t\t}\n\t\tSystem.out.println(Arrays.toString(array2));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1362",
        "source": "leetcodeTitles",
        "source_id": "948",
        "url": "https://leetcode.com/problems/bag-of-tokens/",
        "language": "java",
        "query": "Bag of Tokens",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tBag<String> bag = new Bag<String>();\n\t\tbag.add(\"a\");\n\t\tbag.add(\"b\");\n\t\tbag.add(\"c\");\n\t\tbag.add(\"d\");\n\t\tbag.add(\"e\");\n\t\tbag.add(\"f\");\n\t\tbag.add(\"g\");\n\t\tbag.add(\"h\");\n\t\tbag.add(\"i\");\n\t\tbag.add(\"j\");\n\t\tbag.add(\"k\");\n\t\tbag.add(\"l\");\n\t\tbag.add(\"m\");\n\t\tbag.add(\"n\");\n\t\tbag.add(\"o\");\n\t\tbag.add(\"p\");\n\t\tbag.add(\"q\");\n\t\tbag.add(\"r\");\n\t\tbag.add(\"s\");\n\t\tbag.add(\"t\");\n\t\tbag.add(\"u\");\n\t\tbag.add(\"v\");\n\t\tbag.add(\"w\");\n\t\tbag.add(\"x\");\n\t\tbag.add(\"y\");\n\t\tbag.add(\"z\");\n\t\tbag.add(\"A\");\n\t\tbag.add(\"B\");\n\t\tbag.add(\"C\");\n\t\tbag.add(\"D\");\n\t\tbag.add(\"E\");\n\t\tbag.add(\"F\");\n\t\tbag.add(\"G\");\n\t\tbag.add(\"H\");\n\t\tbag.add(\"I\");\n\t\tbag.add(\"J\");\n\t\tbag.add(\"K\");\n\t\tbag.add(\"L\");\n\t\tbag.add(\"M\");\n\t\tbag.add(\"N\");\n\t\tbag.add(\"O\");\n\t\tbag.add(\"P\");\n\t\tbag.add(\"Q\");\n\t\tbag.add(\"R\");\n\t\tbag.add(\"S\");\n\t\tbag.add(\"T\");\n\t\tbag.add(\"U\");\n\t\tbag.add(\"V\");\n\t\tbag.add(\"W\");\n\t\tbag.add(\"X\");\n\t\tbag.add(\"Y\");\n\t\tbag.add(\"Z\");\n\t\tbag.add\n",
            "\tvoid main(String[] args){\n\t\tBag<String> bag = new Bag<String>();\n\t\tbag.add(\"a\");\n\t\tbag.add(\"b\");\n\t\tbag.add(\"c\");\n\t\tbag.add(\"d\");\n\t\tbag.add(\"e\");\n\t\tbag.add(\"f\");\n\t\tbag.add(\"g\");\n\t\tbag.add(\"h\");\n\t\tbag.add(\"i\");\n\t\tbag.add(\"j\");\n\t\tbag.add(\"k\");\n\t\tbag.add(\"l\");\n\t\tbag.add(\"m\");\n\t\tbag.add(\"n\");\n\t\tbag.add(\"o\");\n\t\tbag.add(\"p\");\n\t\tbag.add(\"q\");\n\t\tbag.add(\"r\");\n\t\tbag.add(\"s\");\n\t\tbag.add(\"t\");\n\t\tbag.add(\"u\");\n\t\tbag.add(\"v\");\n\t\tbag.add(\"w\");\n\t\tbag.add(\"x\");\n\t\tbag.add(\"y\");\n\t\tbag.add(\"z\");\n\t\tbag.add(\"A\");\n\t\tbag.add(\"B\");\n\t\tbag.add(\"C\");\n\t\tbag.add(\"D\");\n\t\tbag.add(\"E\");\n\t\tbag.add(\"F\");\n\t\tbag.add(\"G\");\n\t\tbag.add(\"H\");\n\t\tbag.add(\"I\");\n\t\tbag.add(\"J\");\n\t\tbag.add(\"K\");\n\t\tbag.add(\"L\");\n\t\tbag.add(\"M\");\n\t\tbag.add(\"N\");\n\t\tbag.add(\"O\");\n\t\tbag.add(\"P\");\n\t\tbag.add(\"Q\");\n\t\tbag.add(\"R\");\n\t\tbag.add(\"S\");\n\t\tbag.add(\"T\");\n\t\tbag.add(\"U\");\n\t\tbag.add(\"V\");\n\t\tbag.add(\"W\");\n\t\tbag.add(\"X\");\n\t\tbag.add(\"Y\");\n\t\tbag.add(\"Z\");\n\t\tbag.add(\"\n",
            "\tvoid method(){\n\t\tint i = 0;\n\t\twhile(i < 10){\n\t\t\tSystem.out.println(i);\n\t\t\ti++;\n\t\t}\n\t}\n}\n",
            "\tvoid method(){\n\t\tString s = \"\";\n\t\tif(s.equals(\"\")){\n\t\t\tSystem.out.println(\"\");\n\t\t}\n\t}\n}\n",
            "\tClazz(){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1363",
        "source": "leetcodeTitles",
        "source_id": "1455",
        "url": "https://leetcode.com/problems/check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence/",
        "language": "java",
        "query": "Check if a Word Occurs As a Prefix of Any Word in a Sentence",
        "snippets": [
            "\tstatic boolean isPrefix(String word, String sentence){\n\t\tString[] words = sentence.split(\" \");\n\t\tfor(String w : words){\n\t\t\tif(w.startsWith(word)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean check(String str, String[] arr){\n\t\tfor(int i=0;i<arr.length;i++){\n\t\t\tif(arr[i].startsWith(str)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean isPrefix(String str, String[] arr){\n\t\tfor(String s: arr){\n\t\t\tif(s.startsWith(str)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean isPrefixOfWord(String sentence, String prefix){\n\t\tString[] words = sentence.split(\" \");\n\t\tfor(String word: words){\n\t\t\tif(word.startsWith(prefix)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean isPrefix(String str, String[] words){\n\t\tfor(String word: words){\n\t\t\tif(word.startsWith(str)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\tpublic\n\tstatic boolean isPrefix(String str, String sentence){\n\t\tString[] words = sentence.split(\" \");\n\t\treturn isPrefix(str, words);\n\t}\n\tpublic\n\tstatic void main(String[] args){\n\t\tString str = \"ab\";\n\t\tString sentence = \"ab ab ab\";\n\t\tSystem.out.println(isPrefix(str, sentence));\n\t}\n}\n",
            "\tstatic boolean isPrefix(String str, String[] arr){\n\t\tfor(String s: arr){\n\t\t\tif(s.startsWith(str))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\tpublic static void main(String[] args){\n\t\tString[] arr = {\"i\", \"am\", \"a\", \"student\", \"of\", \"cs\", \"student\"};\n\t\tString str = \"student\";\n\t\tSystem.out.println(isPrefix(str, arr));\n\t}\n}\n",
            "\tboolean isPrefix(String[] sentence, String prefix){\n\t\tfor(String word:sentence){\n\t\t\tif(word.startsWith(prefix)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1364",
        "source": "leetcodeTitles",
        "source_id": "2249",
        "url": "https://leetcode.com/problems/count-lattice-points-inside-a-circle/",
        "language": "java",
        "query": "Count Lattice Points Inside a Circle",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint x = in.nextInt();\n\t\tint y = in.nextInt();\n\t\tint r = in.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(Math.sqrt((i-x)*(i-x)+(j-y)*(j-y)) <= r){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint x = in.nextInt();\n\t\tint y = in.nextInt();\n\t\tint r = in.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(Math.pow(i - x, 2) + Math.pow(j - y, 2) <= Math.pow(r, 2)){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint x = in.nextInt();\n\t\tint y = in.nextInt();\n\t\tint r = in.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(Math.sqrt(Math.pow(i-x,2)+Math.pow(j-y,2)) <= r){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint r = sc.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(Math.pow(i, 2) + Math.pow(j, 2) <= Math.pow(r, 2)){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint x = sc.nextInt();\n\t\tint y = sc.nextInt();\n\t\tint r = sc.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tint x1 = sc.nextInt();\n\t\t\t\tint y1 = sc.nextInt();\n\t\t\t\tif(Math.pow(x1 - x, 2) + Math.pow(y1 - y, 2) <= Math.pow(r, 2)){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tint n=sc.nextInt();\n\t\tint x=sc.nextInt();\n\t\tint y=sc.nextInt();\n\t\tint r=sc.nextInt();\n\t\tint count=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint x1=sc.nextInt();\n\t\t\tint y1=sc.nextInt();\n\t\t\tif(Math.sqrt(Math.pow(x1-x,2)+Math.pow(y1-y,2))<=r){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic int countLatticePointsInsideCircle(int r){\n\t\tint count = 0;\n\t\tfor(int i = -r; i <= r; i++){\n\t\t\tfor(int j = -r; j <= r; j++){\n\t\t\t\tif(i*i + j*j <= r*r)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countLatticePointsInsideCircle(double x, double y, double r){\n\t\tint count = 0;\n\t\tfor(double i = -r; i <= r; i++){\n\t\t\tfor(double j = -r; j <= r; j++){\n\t\t\t\tif(i*i + j*j <= r*r){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1365",
        "source": "leetcodeTitles",
        "source_id": "1387",
        "url": "https://leetcode.com/problems/sort-integers-by-the-power-value/",
        "language": "java",
        "query": "Sort Integers by The Power Value",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9,\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tb[i] = (int)Math.pow(a[i], 2);\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(b[i] < b[j]){\n\t\t\t\t\tint temp = b[i];\n\t\t\t\t\tb[i] = b[j];\n\t\t\t\t\tb[j] = temp;\n\t\t\t\t\tint temp2 = a[i];\n\t\t\t\t\ta[i] = a[j];\n\t\t\t\t\ta[j] = temp2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tSystem.out.print(a[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tsort(arr);\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t}\n\t}\n\tpublic static void sort(int[] arr){\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tfor(int j = i + 1; j < arr.length; j++){\n\t\t\t\tif(arr[i] > arr[j]){\n\t\t\t\t\tint temp = arr[i];\n\t\t\t\t\tarr[i] = arr[j];\n\t\t\t\t\tarr[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] b = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tb[i] = a[i];\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(a[i] > a[j]){\n\t\t\t\t\tint temp = a[i];\n\t\t\t\t\ta[i] = a[j];\n\t\t\t\t\ta[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tSystem.out.println(a[i]);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1366",
        "source": "leetcodeTitles",
        "source_id": "283",
        "url": "https://leetcode.com/problems/move-zeroes/",
        "language": "java",
        "query": "Move Zeroes",
        "snippets": [
            "\tvoid moveZeroes(int[] nums) {\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(j < nums.length){\n\t\t\tif(nums[j] != 0){\n\t\t\t\tnums[i] = nums[j];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tj++;\n\t\t}\n\t\twhile(i < nums.length){\n\t\t\tnums[i] = 0;\n\t\t\ti++;\n\t\t}\n\t}\n}\n",
            "\tvoid moveZeroes(int[] nums) {\n\t\tint j = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] != 0) {\n\t\t\t\tnums[j] = nums[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tfor (int i = j; i < nums.length; i++) {\n\t\t\tnums[i] = 0;\n\t\t}\n\t}\n}\n",
            "\tvoid moveZeroes(int[] nums) {\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i < nums.length) {\n\t\t\tif (nums[i] != 0) {\n\t\t\t\tnums[j] = nums[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\twhile (j < nums.length) {\n\t\t\tnums[j] = 0;\n\t\t\tj++;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1367",
        "source": "leetcodeTitles",
        "source_id": "1185",
        "url": "https://leetcode.com/problems/day-of-the-week/",
        "language": "java",
        "query": "Day of the Week",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint day = Integer.parseInt(args[0]);\n\t\tswitch(day){\n\t\t\tcase 1:\n\t\t\t\tSystem.out.println(\"Monday\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tSystem.out.println(\"Tuesday\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tSystem.out.println(\"Wednesday\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tSystem.out.println(\"Thursday\");\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tSystem.out.println(\"Friday\");\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tSystem.out.println(\"Saturday\");\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tSystem.out.println(\"Sunday\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"Invalid day\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint day = Integer.parseInt(args[0]);\n\t\tString[] days = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\n\t\tSystem.out.println(days[day]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint day = Integer.parseInt(args[0]);\n\t\tswitch(day){\n\t\t\tcase 1:\n\t\t\t\tSystem.out.println(\"Monday\");\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tSystem.out.println(\"Tuesday\");\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tSystem.out.println(\"Wednesday\");\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tSystem.out.println(\"Thursday\");\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tSystem.out.println(\"Friday\");\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\tSystem.out.println(\"Saturday\");\n\t\t\t\tbreak;\n\t\t\tcase 7:\n\t\t\t\tSystem.out.println(\"Sunday\");\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"Invalid day\");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1368",
        "source": "leetcodeTitles",
        "source_id": "303",
        "url": "https://leetcode.com/problems/range-sum-query-immutable/",
        "language": "java",
        "query": "Range Sum Query - Immutable",
        "snippets": [
            "\tclass NumArray {\n\t\tint[] nums;\n\t\tpublic NumArray(int[] nums) {\n\t\t\tthis.nums = nums;\n\t\t}\n\t\tpublic int sumRange(int i, int j) {\n\t\t\tint sum = 0;\n\t\t\tfor(int k = i; k <= j; k++) {\n\t\t\t\tsum += nums[k];\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t}\n}\n",
            "\tclass NumArray {\n\t\tint[] nums;\n\t\tpublic NumArray(int[] nums) {\n\t\t\tthis.nums = nums;\n\t\t}\n\t\tpublic int sumRange(int i, int j) {\n\t\t\tint sum = 0;\n\t\t\tfor(int k = i; k <= j; k++)\n\t\t\t\tsum += nums[k];\n\t\t\treturn sum;\n\t\t}\n\t}\n}\n",
            "\tclass NumArray {\n\t\tprivate int[] nums;\n\t\tpublic NumArray(int[] nums) {\n\t\t\tthis.nums = nums;\n\t\t}\n\t\tpublic int sumRange(int i, int j) {\n\t\t\tint sum = 0;\n\t\t\tfor (int k = i; k <= j; k++) {\n\t\t\t\tsum += nums[k];\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t}\n}\n",
            "\tint sumRange(int[] nums, int i, int j) {\n\t\tint sum = 0;\n\t\tfor(int k = i; k <= j; k++){\n\t\t\tsum += nums[k];\n\t\t}\n\t\treturn sum;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1369",
        "source": "leetcodeTitles",
        "source_id": "1004",
        "url": "https://leetcode.com/problems/max-consecutive-ones-iii/",
        "language": "java",
        "query": "Max Consecutive Ones III",
        "snippets": [
            "\tint maxConsecutiveOnes(int[] nums) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tmax = Math.max(max, count);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxConsecutiveOnes(int[] nums) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\tif(count > max){\n\t\t\tmax = count;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint max(int[] A, int K){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tif(A[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1370",
        "source": "leetcodeTitles",
        "source_id": "2215",
        "url": "https://leetcode.com/problems/find-the-difference-of-two-arrays/",
        "language": "java",
        "query": "Find the Difference of Two Arrays",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5};\n\t\tint[] b = {1,2,3,4,5};\n\t\tint[] c = {1,2,3,4,5};\n\t\tint[] d = {1,2,3,4,5};\n\t\tint[] e = {1,2,3,4,5};\n\t\tint[] f = {1,2,3,4,5};\n\t\tint[] g = {1,2,3,4,5};\n\t\tint[] h = {1,2,3,4,5};\n\t\tint[] i = {1,2,3,4,5};\n\t\tint[] j = {1,2,3,4,5};\n\t\tint[] k = {1,2,3,4,5};\n\t\tint[] l = {1,2,3,4,5};\n\t\tint[] m = {1,2,3,4,5};\n\t\tint[] n = {1,2,3,4,5};\n\t\tint[] o = {1,2,3,4,5};\n\t\tint[] p = {1,2,3,4,5};\n\t\tint[] q = {1,2,3,4,5};\n\t\tint[] r = {1,2,3,4,5};\n\t\tint[] s = {1,2,3,4,5};\n\t\tint[] t = {1,2,3,4,5};\n\t\tint[] u = {1,2,3,4,5};\n\t\tint[] v = {1,2,3,4,5};\n\t\tint[] w = {1,2,3,4,5};\n\t\tint[] x = {1,2,3,4,5};\n\t\tint[] y = {1,2,3,4,5};\n\t\tint[] z = {1,2,3,4,5};\n\t\tint[] aa = {1,2,3,4,5};\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {1,2,3,\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5};\n\t\tint[] b = {1,2,3,4,5,6};\n\t\tint[] c = {1,2,3,4,5,6,7};\n\t\tint[] d = {1,2,3,4,5,6,7,8};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10,11};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10,11,12};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10,11,12,13};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10,11,12,13,14};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n\t\tint[] p = {1,\n",
            "\tstatic void main(String[] args){\n\t\tString[] a = {\"a\",\"b\",\"c\",\"d\",\"e\"};\n\t\tString[] b = {\"a\",\"b\",\"c\",\"f\",\"g\"};\n\t\tString[] c = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"};\n\t\tString[] d = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"};\n\t\tString[] e = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"};\n\t\tString[] f = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"};\n\t\tString[] g = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\"};\n\t\tString[] h = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"};\n\t\tString[] i = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"};\n\t\tString[] j = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"};\n\t\tString[] k = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"};\n\t\tString[] l = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"};\n\t\tString[] m = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"};\n\t\tString[] n = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\"};\n\t\tString[] o = {\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"\n"
        ],
        "results": 10
    },
    {
        "id": "1371",
        "source": "leetcodeTitles",
        "source_id": "1419",
        "url": "https://leetcode.com/problems/minimum-number-of-frogs-croaking/",
        "language": "java",
        "query": "Minimum Number of Frogs Croaking",
        "snippets": [
            "\tstatic int minNumberOfFrogs(String croakOfFrogs){\n\t\tint count = 0;\n\t\tint count2 = 0;\n\t\tint count3 = 0;\n\t\tint count4 = 0;\n\t\tint count5 = 0;\n\t\tint count6 = 0;\n\t\tint count7 = 0;\n\t\tint count8 = 0;\n\t\tint count9 = 0;\n\t\tint count10 = 0;\n\t\tint count11 = 0;\n\t\tint count12 = 0;\n\t\tint count13 = 0;\n\t\tint count14 = 0;\n\t\tint count15 = 0;\n\t\tint count16 = 0;\n\t\tint count17 = 0;\n\t\tint count18 = 0;\n\t\tint count19 = 0;\n\t\tint count20 = 0;\n\t\tint count21 = 0;\n\t\tint count22 = 0;\n\t\tint count23 = 0;\n\t\tint count24 = 0;\n\t\tint count25 = 0;\n\t\tint count26 = 0;\n\t\tint count27 = 0;\n\t\tint count28 = 0;\n\t\tint count29 = 0;\n\t\tint count30 = 0;\n\t\tint count31 = 0;\n\t\tint count32 = 0;\n\t\tint count33 = 0;\n\t\tint count34 = 0;\n\t\tint count35 = 0;\n\t\tint count36 = 0;\n\t\tint count37 = 0;\n\t\tint count38 = 0;\n\t\tint count39 = 0;\n\t\tint count40 = 0;\n\t\tint count41 = 0;\n\t\tint count42 = 0;\n\t\tint count43 = 0;\n\t\tint count44 = 0;\n\t\tint count45 = 0;\n\t\tint count46 = 0;\n\t\tint count47 = 0;\n\t\tint count48 = 0;\n\t\tint count49 = 0;\n\t\tint count50 = 0;\n\t\tint count51 = 0;\n\t\tint count52 = 0;\n\t\tint count53 = 0;\n\t\tint count\n",
            "\tint minNumberOfFrogs(String croakOfFrogs){\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tfor(int i = 0; i < croakOfFrogs.length(); i++){\n\t\t\tif(croakOfFrogs.charAt(i) == 'c'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'r'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'o'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'a'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'k'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'f'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'g'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'c'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'r')\n",
            "\tint minNumberOfFrogs(String croakOfFrogs){\n\t\tint count = 0;\n\t\tint count2 = 0;\n\t\tint count3 = 0;\n\t\tint count4 = 0;\n\t\tfor(int i = 0; i < croakOfFrogs.length(); i++){\n\t\t\tif(croakOfFrogs.charAt(i) == 'c'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'r'){\n\t\t\t\tcount2++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'o'){\n\t\t\t\tcount3++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'a'){\n\t\t\t\tcount4++;\n\t\t\t}\n\t\t}\n\t\tif(count == count2 && count2 == count3 && count3 == count4){\n\t\t\treturn count;\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint minNumber(int[] croak){\n\t\tint n = croak.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tdp[1] = 1;\n\t\tdp[2] = 1;\n\t\tfor(int i = 3; i < n; i++){\n\t\t\tdp[i] = dp[i - 1];\n\t\t\tif(croak[i - 2] == 'c' && croak[i - 1] == 'r' && croak[i] == 'o'){\n\t\t\t\tdp[i] = Math.min(dp[i], dp[i - 2] + 1);\n\t\t\t}\n\t\t\tif(croak[i - 2] == 'c' && croak[i - 1] == 'a' && croak[i] == 'k'){\n\t\t\t\tdp[i] = Math.min(dp[i], dp[i - 2] + 1);\n\t\t\t}\n\t\t\tif(croak[i - 2] == 'r' && croak[i - 1] == 'c' && croak[i] == 'o'){\n\t\t\t\tdp[i] = Math.min(dp[i], dp[i - 2] + 1);\n\t\t\t}\n\t\t\tif(croak[i - 2] == 'r' && croak[i - 1] == 'a' && croak[i] == 'k'){\n\t\t\t\tdp[i] = Math.min(dp[i], dp[i - 2] + 1);\n\t\t\t}\n\t\t\tif(croak[i - 2] == 'o' && croak[i - 1] == 'c' && croak[i] == 'r'){\n\t\t\t\tdp[i] = Math.min(dp[i], dp[i - 2] + 1);\n\t\t\t}\n\t\t\tif(croak[i - 2] == 'o' && croak[i - 1] == 'a' && croak[i] == '\n",
            "\tint minNumber(int[] croak){\n\t\tint n = croak.length;\n\t\tint[] dp = new int[n];\n\t\tint[] dp2 = new int[n];\n\t\tint[] dp3 = new int[n];\n\t\tint[] dp4 = new int[n];\n\t\tdp[0] = 1;\n\t\tdp2[0] = 1;\n\t\tdp3[0] = 1;\n\t\tdp4[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = dp[i - 1];\n\t\t\tif(croak[i - 1] == 'c') dp[i]++;\n\t\t\tdp2[i] = dp2[i - 1];\n\t\t\tif(croak[i - 1] == 'r') dp2[i]++;\n\t\t\tdp3[i] = dp3[i - 1];\n\t\t\tif(croak[i - 1] == 'o') dp3[i]++;\n\t\t\tdp4[i] = dp4[i - 1];\n\t\t\tif(croak[i - 1] == 'a') dp4[i]++;\n\t\t}\n\t\tint res = n;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tres = Math.min(res, dp[i] + dp2[i] + dp3[i] + dp4[i]);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minNumber(int[] croak){\n\t\tint n = croak.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(croak[i].equals(croak[j])){\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int minNumberOfFrogs(String croakOfFrogs){\n\t\tint frogs = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < croakOfFrogs.length(); i++){\n\t\t\tif(croakOfFrogs.charAt(i) == 'c'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'r'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'o'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'a'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(croakOfFrogs.charAt(i) == 'k'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(count < 0){\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\tif(count == 0){\n\t\t\t\tfrogs++;\n\t\t\t}\n\t\t}\n\t\tif(count != 0){\n\t\t\treturn -1;\n\t\t}\n\t\treturn frogs;\n\t}\n}\n",
            "\tstatic int minNumberOfFrogs(String croak){\n\t\tint n = croak.length();\n\t\tint[] c = new int[5];\n\t\tint[] r = new int[5];\n\t\tint[] o = new int[5];\n\t\tint[] a = new int[5];\n\t\tint[] k = new int[5];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tchar ch = croak.charAt(i);\n\t\t\tif(ch == 'c') c[0]++;\n\t\t\telse if(ch == 'r') r[0]++;\n\t\t\telse if(ch == 'o') o[0]++;\n\t\t\telse if(ch == 'a') a[0]++;\n\t\t\telse if(ch == 'k') k[0]++;\n\t\t\telse return -1;\n\t\t}\n\t\tfor(int i = 1; i < 5; i++){\n\t\t\tc[i] = c[i-1] + c[i];\n\t\t\tr[i] = r[i-1] + r[i];\n\t\t\to[i] = o[i-1] + o[i];\n\t\t\ta[i] = a[i-1] + a[i];\n\t\t\tk[i] = k[i-1] + k[i];\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < 5; i++){\n\t\t\tif(c[i] != r[i] || c[i] != o[i] || c[i] != a[i] || c[i] != k[i]) return -1;\n\t\t\tres += c[i];\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minNumberOfFrogs(String croakOfFrogs) {\n\t\tint numOfFrogs = 0;\n\t\tint numOfCroak = 0;\n\t\tint numOfQuack = 0;\n\t\tfor(int i = 0; i < croakOfFrogs.length(); i++){\n\t\t\tif(croakOfFrogs.charAt(i) == 'c'){\n\t\t\t\tnumOfCroak++;\n\t\t\t}\n\t\t\telse if(croakOfFrogs.charAt(i) == 'r'){\n\t\t\t\tnumOfFrogs++;\n\t\t\t}\n\t\t\telse if(croakOfFrogs.charAt(i) == 'o'){\n\t\t\t\tnumOfQuack++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t\tif(numOfFrogs == numOfCroak && numOfQuack == numOfCroak){\n\t\t\treturn numOfFrogs;\n\t\t}\n\t\telse{\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1372",
        "source": "leetcodeTitles",
        "source_id": "523",
        "url": "https://leetcode.com/problems/continuous-subarray-sum/",
        "language": "java",
        "query": "Continuous Subarray Sum",
        "snippets": [
            "\tstatic int continuousSubarraySum(int[] nums, int k) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tsum += nums[i];\n\t\t\tif (sum == k) {\n\t\t\t\tcount++;\n\t\t\t\tsum = 0;\n\t\t\t\tstart = i + 1;\n\t\t\t\tend = i + 1;\n\t\t\t} else if (sum > k) {\n\t\t\t\tsum -= nums[start];\n\t\t\t\tstart++;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t}\n\t\tif (sum == k) {\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int continuousSubarraySum(int[] nums, int k) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tsum += nums[i];\n\t\t\tif (sum == k) {\n\t\t\t\tcount++;\n\t\t\t\tsum = 0;\n\t\t\t\tstart = i + 1;\n\t\t\t\tend = i + 1;\n\t\t\t} else if (sum > k) {\n\t\t\t\tsum = nums[i];\n\t\t\t\tstart = i;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t\tif (i > end) {\n\t\t\t\tsum -= nums[start];\n\t\t\t\tstart++;\n\t\t\t\tend++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int continuousSubarraySum(int[] nums, int k) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tsum += nums[i];\n\t\t\tif (sum == k) {\n\t\t\t\tcount++;\n\t\t\t\tsum = 0;\n\t\t\t\tstart = i + 1;\n\t\t\t\tend = i + 1;\n\t\t\t} else if (sum > k) {\n\t\t\t\tsum -= nums[start];\n\t\t\t\tstart++;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t}\n\t\treturn count + (end - start + 1) / 2;\n\t}\n}\n",
            "\tstatic int continuousSubarraySum(int[] nums, int k) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tint start = 0;\n\t\tint end = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tsum += nums[i];\n\t\t\tif (sum == k) {\n\t\t\t\tcount++;\n\t\t\t\tsum = 0;\n\t\t\t\tstart = i + 1;\n\t\t\t\tend = i + 1;\n\t\t\t} else if (sum > k) {\n\t\t\t\tsum = nums[i];\n\t\t\t\tstart = i;\n\t\t\t\tend = i;\n\t\t\t}\n\t\t\tif (end < nums.length - 1) {\n\t\t\t\tsum += nums[end + 1];\n\t\t\t\tend++;\n\t\t\t}\n\t\t\tif (sum == k) {\n\t\t\t\tcount++;\n\t\t\t\tsum = 0;\n\t\t\t\tstart = end + 1;\n\t\t\t\tend = end + 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint continuousSubarraySum(int[] nums) {\n\t\tint max = 0;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tif(sum > max) max = sum;\n\t\t\tif(sum < 0) sum = 0;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint continuousSubarraySum(int[] nums, int k) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tint max = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tif(sum == k){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(sum > k){\n\t\t\t\tsum = nums[i];\n\t\t\t}\n\t\t\tif(sum - k >= 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(sum - k > max){\n\t\t\t\tmax = sum - k;\n\t\t\t}\n\t\t}\n\t\treturn count + max;\n\t}\n}\n",
            "\tstatic boolean checkSubarraySum(int[] nums, int k) {\n\t\tint n = nums.length;\n\t\tif (n < 2) return false;\n\t\tint[] sums = new int[n];\n\t\tsums[0] = nums[0];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tsums[i] = sums[i - 1] + nums[i];\n\t\t}\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (k == 0) {\n\t\t\t\t\tif (sums[j] - sums[i] == 0) return true;\n\t\t\t\t} else {\n\t\t\t\t\tif ((sums[j] - sums[i]) % k == 0) return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tint continuousSubarraySum(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] sums = new int[n];\n\t\tsums[0] = nums[0];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tsums[i] = sums[i - 1] + nums[i];\n\t\t}\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i; j < n; j++) {\n\t\t\t\tint cur = sums[j] - (i > 0 ? sums[i - 1] : 0);\n\t\t\t\tmax = Math.max(max, cur);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic boolean checkSubarraySum(int[] nums, int k) {\n\t\tint n = nums.length;\n\t\tif (n < 2) return false;\n\t\tint[] sum = new int[n];\n\t\tsum[0] = nums[0];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tsum[i] = sum[i - 1] + nums[i];\n\t\t}\n\t\tfor (int i = 0; i < n - 1; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (k == 0) {\n\t\t\t\t\tif (sum[j] - sum[i] == 0) return true;\n\t\t\t\t} else {\n\t\t\t\t\tif ((sum[j] - sum[i]) % k == 0) return true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1373",
        "source": "leetcodeTitles",
        "source_id": "748",
        "url": "https://leetcode.com/problems/shortest-completing-word/",
        "language": "java",
        "query": "Shortest Completing Word",
        "snippets": [
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] letters = new int[26];\n\t\tfor (int i = 0; i < licensePlate.length(); i++) {\n\t\t\tchar c = licensePlate.charAt(i);\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tletters[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tletters[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tint minLen = Integer.MAX_VALUE;\n\t\tfor (String word : words) {\n\t\t\tint[] copy = letters.clone();\n\t\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\t\tchar c = word.charAt(i);\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcopy[c - 'a']--;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcopy[c - 'A']--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean valid = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (copy[i] != 0) {\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (valid) {\n\t\t\t\tif (word.length() < minLen) {\n\t\t\t\t\tminLen = word.length();\n\t\t\t\t\tres = word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] letters = new int[26];\n\t\tfor (int i = 0; i < licensePlate.length(); i++) {\n\t\t\tchar c = licensePlate.charAt(i);\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tletters[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tletters[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tint minLen = Integer.MAX_VALUE;\n\t\tfor (String w : words) {\n\t\t\tint[] count = new int[26];\n\t\t\tfor (int i = 0; i < w.length(); i++) {\n\t\t\t\tchar c = w.charAt(i);\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcount[c - 'a']++;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcount[c - 'A']++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean valid = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (count[i] > letters[i]) {\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (valid && w.length() < minLen) {\n\t\t\t\tres = w;\n\t\t\t\tminLen = w.length();\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] letters = new int[26];\n\t\tfor (int i = 0; i < licensePlate.length(); i++) {\n\t\t\tchar c = licensePlate.charAt(i);\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tletters[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tletters[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tint minLen = Integer.MAX_VALUE;\n\t\tfor (String word : words) {\n\t\t\tint[] copy = letters.clone();\n\t\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\t\tchar c = word.charAt(i);\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcopy[c - 'a']--;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcopy[c - 'A']--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean valid = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (copy[i] > 0) {\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (valid && minLen > word.length()) {\n\t\t\t\tminLen = word.length();\n\t\t\t\tres = word;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] letters = new int[26];\n\t\tfor (int i = 0; i < licensePlate.length(); i++) {\n\t\t\tchar c = licensePlate.charAt(i);\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tletters[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tletters[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tint minLen = Integer.MAX_VALUE;\n\t\tfor (String word : words) {\n\t\t\tint[] copy = letters.clone();\n\t\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\t\tchar c = word.charAt(i);\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcopy[c - 'a']--;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcopy[c - 'A']--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean valid = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (copy[i] > 0) {\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (valid) {\n\t\t\t\tif (word.length() < minLen) {\n\t\t\t\t\tminLen = word.length();\n\t\t\t\t\tres = word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] letters = new int[26];\n\t\tfor (char c : licensePlate.toCharArray()) {\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tletters[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tletters[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString shortest = null;\n\t\tint shortestLen = Integer.MAX_VALUE;\n\t\tfor (String word : words) {\n\t\t\tint[] copy = letters.clone();\n\t\t\tfor (char c : word.toCharArray()) {\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcopy[c - 'a']--;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcopy[c - 'A']--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tint i = 0;\n\t\t\twhile (i < copy.length && copy[i] >= 0) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i == copy.length) {\n\t\t\t\tif (word.length() < shortestLen) {\n\t\t\t\t\tshortest = word;\n\t\t\t\t\tshortestLen = word.length();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn shortest;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] letters = new int[26];\n\t\tfor (char c : licensePlate.toCharArray()) {\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tletters[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tletters[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tfor (String w : words) {\n\t\t\tint[] count = new int[26];\n\t\t\tfor (char c : w.toCharArray()) {\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcount[c - 'a']++;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcount[c - 'A']++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean ok = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (count[i] > letters[i]) {\n\t\t\t\t\tok = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ok && (res.length() == 0 || w.length() < res.length())) {\n\t\t\t\tres = w;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] letters = new int[26];\n\t\tfor (char c : licensePlate.toCharArray()) {\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tletters[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tletters[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tint minLen = Integer.MAX_VALUE;\n\t\tfor (String word : words) {\n\t\t\tint[] copy = letters.clone();\n\t\t\tfor (char c : word.toCharArray()) {\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcopy[c - 'a']--;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcopy[c - 'A']--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean valid = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (copy[i] > 0) {\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (valid) {\n\t\t\t\tif (word.length() < minLen) {\n\t\t\t\t\tminLen = word.length();\n\t\t\t\t\tres = word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] count = new int[26];\n\t\tfor (int i = 0; i < licensePlate.length(); i++) {\n\t\t\tchar c = licensePlate.charAt(i);\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tcount[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tcount[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tint minLen = Integer.MAX_VALUE;\n\t\tfor (String w : words) {\n\t\t\tint[] temp = count.clone();\n\t\t\tfor (int i = 0; i < w.length(); i++) {\n\t\t\t\tchar c = w.charAt(i);\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\ttemp[c - 'a']--;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\ttemp[c - 'A']--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean valid = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (temp[i] < 0) {\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (valid && w.length() < minLen) {\n\t\t\t\tres = w;\n\t\t\t\tminLen = w.length();\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] count = new int[26];\n\t\tfor (int i = 0; i < licensePlate.length(); i++) {\n\t\t\tchar c = licensePlate.charAt(i);\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tcount[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tcount[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tint minLen = Integer.MAX_VALUE;\n\t\tfor (String word : words) {\n\t\t\tint[] copy = count.clone();\n\t\t\tfor (int i = 0; i < word.length(); i++) {\n\t\t\t\tchar c = word.charAt(i);\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcopy[c - 'a']--;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcopy[c - 'A']--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean valid = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (copy[i] > 0) {\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (valid) {\n\t\t\t\tif (word.length() < minLen) {\n\t\t\t\t\tminLen = word.length();\n\t\t\t\t\tres = word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString shortestCompletingWord(String licensePlate, String[] words) {\n\t\tint[] count = new int[26];\n\t\tfor (char c : licensePlate.toCharArray()) {\n\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\tcount[c - 'a']++;\n\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\tcount[c - 'A']++;\n\t\t\t}\n\t\t}\n\t\tString res = \"\";\n\t\tint minLen = Integer.MAX_VALUE;\n\t\tfor (String word : words) {\n\t\t\tint[] copy = count.clone();\n\t\t\tfor (char c : word.toCharArray()) {\n\t\t\t\tif (c >= 'a' && c <= 'z') {\n\t\t\t\t\tcopy[c - 'a']--;\n\t\t\t\t} else if (c >= 'A' && c <= 'Z') {\n\t\t\t\t\tcopy[c - 'A']--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tboolean valid = true;\n\t\t\tfor (int i = 0; i < 26; i++) {\n\t\t\t\tif (copy[i] > 0) {\n\t\t\t\t\tvalid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (valid) {\n\t\t\t\tif (word.length() < minLen) {\n\t\t\t\t\tminLen = word.length();\n\t\t\t\t\tres = word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1374",
        "source": "leetcodeTitles",
        "source_id": "2236",
        "url": "https://leetcode.com/problems/root-equals-sum-of-children/",
        "language": "java",
        "query": "Root Equals Sum of Children",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\tSystem.out.println(root.equals(root.sumOfChildren()));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\tSystem.out.println(root.equals(root.left.left.left.left.left.left.left));\n\t}\n}\n",
            "\tstatic boolean rootEqualsSumOfChildren(TreeNode root){\n\t\tif(root == null) return true;\n\t\tif(root.left == null && root.right == null) return true;\n\t\tif(root.left == null) return root.val == root.right.val + rootEqualsSumOfChildren(root.right);\n\t\tif(root.right == null) return root.val == root.left.val + rootEqualsSumOfChildren(root.left);\n\t\treturn root.val == root.left.val + root.right.val + rootEqualsSumOfChildren(root.left) + rootEqualsSumOfChildren(root.right);\n\t}\n}\n",
            "\tstatic boolean rootEqualsSumOfChildren(TreeNode root){\n\t\tif(root == null) return true;\n\t\tif(root.left == null && root.right == null) return true;\n\t\tif(root.left == null) return root.val == root.right.val + root.right.val;\n\t\tif(root.right == null) return root.val == root.left.val + root.left.val;\n\t\treturn root.val == root.left.val + root.right.val;\n\t}\n}\n",
            "\tboolean isRoot(int[] parent, int node){\n\t\tif(parent[node] == -1)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tpublic\n\tboolean isLeaf(int[] parent, int node){\n\t\tif(parent[node] == -1)\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\tpublic\n\tint getRoot(int[] parent, int node){\n\t\tif(isRoot(parent, node))\n\t\t\treturn node;\n\t\treturn getRoot(parent, parent[node]);\n\t}\n\tpublic\n\tint getSum(int[] parent, int node){\n\t\tif(isLeaf(parent, node))\n\t\t\treturn node;\n\t\treturn getSum(parent, parent[node]);\n\t}\n\tpublic\n\tboolean isEquals(int[] parent, int node1, int node2){\n\t\tif(getRoot(parent, node1) == getRoot(parent, node2))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tpublic\n\tint getSum(int[] parent, int node1, int node2){\n\t\tif(isEquals(parent, node1, node2))\n\t\t\treturn getSum(parent, node1) + getSum(parent, node2);\n\t\treturn -1;\n\t}\n}\n",
            "\tboolean isRoot(int[] parent, int n){\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[parent[i]]++;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(count[i] == 0){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean isRoot(int[] parent, int i){\n\t\tif(parent[i] == -1)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tpublic\n\tboolean isLeaf(int[] parent, int i){\n\t\tif(parent[i] == -1)\n\t\t\treturn false;\n\t\treturn true;\n\t}\n\tpublic\n\tint getRoot(int[] parent, int i){\n\t\tif(parent[i] == -1)\n\t\t\treturn i;\n\t\treturn getRoot(parent, parent[i]);\n\t}\n\tpublic\n\tint getSum(int[] parent, int i){\n\t\tif(parent[i] == -1)\n\t\t\treturn i;\n\t\treturn getSum(parent, parent[i]);\n\t}\n\tpublic\n\tboolean isRootEqualsSumOfChildren(int[] parent, int i){\n\t\tif(isRoot(parent, i)){\n\t\t\tif(isLeaf(parent, i))\n\t\t\t\treturn true;\n\t\t\telse{\n\t\t\t\tint sum = getSum(parent, i);\n\t\t\t\tint root = getRoot(parent, i);\n\t\t\t\tint[] children = new int[parent.length];\n\t\t\t\tint count = 0;\n\t\t\t\tfor(int j = 0; j < parent.length; j++){\n\t\t\t\t\tif(parent[j] == root)\n\t\t\t\t\t\tchildren[count++] = j;\n\t\t\t\t}\n\t\t\t\tfor(int j = 0; j < count; j++){\n\t\t\t\t\tif(!isRootEqualsSumOfChildren(parent, children[j]))\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tint rootEqualsSumOfChildren(int[] arr){\n\t\tint root = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == 0){\n\t\t\t\troot = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(i != root){\n\t\t\t\tsum += arr[i];\n\t\t\t}\n\t\t}\n\t\tif(arr[root] == sum){\n\t\t\treturn 1;\n\t\t}\n\t\treturn 0;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1375",
        "source": "leetcodeTitles",
        "source_id": "139",
        "url": "https://leetcode.com/problems/word-break/",
        "language": "java",
        "query": "Word Break",
        "snippets": [
            "\tboolean wordBreak(String s, Set<String> dict) {\n\t\tif(s == null || s.length() == 0)\n\t\t\treturn false;\n\t\tboolean[] dp = new boolean[s.length() + 1];\n\t\tdp[0] = true;\n\t\tfor(int i = 1; i <= s.length(); i++){\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(dp[j] && dict.contains(s.substring(j, i))){\n\t\t\t\t\tdp[i] = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[s.length()];\n\t}\n}\n",
            "\tboolean wordBreak(String s, Set<String> dict) {\n\t\tboolean[] dp = new boolean[s.length() + 1];\n\t\tdp[0] = true;\n\t\tfor (int i = 1; i <= s.length(); i++) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (dp[j] && dict.contains(s.substring(j, i))) {\n\t\t\t\t\tdp[i] = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[s.length()];\n\t}\n}\n",
            "\tboolean wordBreak(String s, Set<String> dict) {\n\t\tif (s == null || s.length() == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tboolean[] dp = new boolean[s.length() + 1];\n\t\tdp[0] = true;\n\t\tfor (int i = 1; i <= s.length(); i++) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (dp[j] && dict.contains(s.substring(j, i))) {\n\t\t\t\t\tdp[i] = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[s.length()];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1376",
        "source": "leetcodeTitles",
        "source_id": "1286",
        "url": "https://leetcode.com/problems/iterator-for-combination/",
        "language": "java",
        "query": "Iterator for Combination",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tIterator<String> it = new Combination(\"abc\").iterator();\n\t\twhile(it.hasNext()){\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tIterator<String> it = new CombinationIterator(\"abc\");\n\t\twhile(it.hasNext()){\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tIterator<Integer> it = new Combination(3,2).iterator();\n\t\twhile(it.hasNext()){\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tIterator<Integer> it = new CombinationIterator(3,2);\n\t\twhile(it.hasNext()){\n\t\t\tSystem.out.println(it.next());\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1377",
        "source": "leetcodeTitles",
        "source_id": "598",
        "url": "https://leetcode.com/problems/range-addition-ii/",
        "language": "java",
        "query": "Range Addition II",
        "snippets": [
            "\tint addRange(int a, int b){\n\t\tint sum = 0;\n\t\tfor(int i = a; i <= b; i++){\n\t\t\tsum += i;\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n+m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i+j] += a[i] * b[j];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n+m; i++){\n\t\t\tSystem.out.print(c[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tint c = 0;\n\t\tint d = 0;\n\t\tint e = 0;\n\t\tint f = 0;\n\t\tint g = 0;\n\t\tint h = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n",
            "\tstatic int rangeAdditionII(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] B = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tB[i] = A[i] % K;\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsum += B[i];\n\t\t}\n\t\tint max = sum;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsum = sum - B[i] + K;\n\t\t\tmax = Math.max(max, sum);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int rangeAdditionII(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] B = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tB[i] = A[i] % K;\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsum += B[i];\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint temp = sum - B[i] + K;\n\t\t\tmax = Math.max(max, temp);\n\t\t\tsum = temp;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int rangeAdditionII(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] sum = new int[n];\n\t\tsum[0] = A[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tsum[i] = sum[i-1] + A[i];\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tint x = sum[j] - (i == 0 ? 0 : sum[i-1]);\n\t\t\t\tmax = Math.max(max, x % K);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint addRange(int[] nums, int n) {\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++) {\n\t\t\tif(nums[i] <= n) {\n\t\t\t\tsum += nums[i];\n\t\t\t}\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tint add(int x, int y){\n\t\treturn x+y;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1378",
        "source": "leetcodeTitles",
        "source_id": "1498",
        "url": "https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/",
        "language": "java",
        "query": "Number of Subsequences That Satisfy the Given Sum Condition",
        "snippets": [
            "\tstatic int countSubsequences(int[] nums, int target) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n][target + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j <= target; j++) {\n\t\t\t\tif (j == 0) {\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t} else if (j >= nums[i]) {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]];\n\t\t\t\t} else {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1][target];\n\t}\n}\n",
            "\tstatic int countSubsequences(int[] nums, int target) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n][target + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 1; j <= target; j++) {\n\t\t\t\tif (j >= nums[i]) {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]];\n\t\t\t\t} else {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1][target];\n\t}\n}\n",
            "\tstatic int countSubsequences(int[] arr, int sum){\n\t\tint n = arr.length;\n\t\tint[][] dp = new int[n][sum+1];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=1;j<=sum;j++){\n\t\t\t\tif(arr[i]<=j){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + dp[i-1][j-arr[i]];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = dp[i-1][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n-1][sum];\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr = {1,1,2,3};\n\t\tint sum = 4;\n\t\tSystem.out.println(countSubsequences(arr,sum));\n\t}\n}\n",
            "\tstatic int countSubsequences(int[] nums, int target) {\n\t\tint n = nums.length;\n\t\tint[] dp = new int[target + 1];\n\t\tdp[0] = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = target; j >= nums[i]; j--) {\n\t\t\t\tdp[j] += dp[j - nums[i]];\n\t\t\t}\n\t\t}\n\t\treturn dp[target];\n\t}\n}\n",
            "\tint countSubsequences(int[] nums, int target) {\n\t\tint n = nums.length;\n\t\tint[][] dp = new int[n][target + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 1; j <= target; j++) {\n\t\t\t\tif (nums[i] <= j) {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i - 1][j - nums[i]];\n\t\t\t\t} else {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1][target];\n\t}\n}\n",
            "\tint numSubseq(int[] nums, int target) {\n\t\tint n = nums.length;\n\t\tint[] dp = new int[target + 1];\n\t\tdp[0] = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = target; j >= nums[i]; j--) {\n\t\t\t\tdp[j] += dp[j - nums[i]];\n\t\t\t}\n\t\t}\n\t\treturn dp[target];\n\t}\n}\n",
            "\tint numSubseqWithSum(int[] A, int target) {\n\t\tint n = A.length;\n\t\tint[] dp = new int[target + 1];\n\t\tdp[0] = 1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = target; j >= A[i]; j--) {\n\t\t\t\tdp[j] += dp[j - A[i]];\n\t\t\t}\n\t\t}\n\t\treturn dp[target];\n\t}\n}\n",
            "\tstatic int countSubsequences(int[] A, int sum) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n][sum + 1];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 1; j <= sum; j++) {\n\t\t\t\tif (A[i] <= j) {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i - 1][j - A[i]];\n\t\t\t\t} else {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n - 1][sum];\n\t}\n}\n",
            "\tint numSubseqWithSum(int[] A, int target) {\n\t\tint n = A.length;\n\t\tint[][] dp = new int[n + 1][target + 1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tdp[i][0] = 1;\n\t\t\tfor (int j = 1; j <= target; j++) {\n\t\t\t\tdp[i][j] = dp[i - 1][j];\n\t\t\t\tif (j >= A[i - 1])\n\t\t\t\t\tdp[i][j] += dp[i - 1][j - A[i - 1]];\n\t\t\t}\n\t\t}\n\t\treturn dp[n][target];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1379",
        "source": "leetcodeTitles",
        "source_id": "342",
        "url": "https://leetcode.com/problems/power-of-four/",
        "language": "java",
        "query": "Power of Four",
        "snippets": [
            "\tboolean isPowerOfFour(int num){\n\t\tif(num==0) return false;\n\t\tif(num==1) return true;\n\t\tif(num%4!=0) return false;\n\t\treturn isPowerOfFour(num/4);\n\t}\n}\n",
            "\tboolean isPowerOfFour(int num){\n\t\tif(num<=0) return false;\n\t\tif(num==1) return true;\n\t\tif(num%4!=0) return false;\n\t\treturn isPowerOfFour(num/4);\n\t}\n}\n",
            "\tboolean isPowerOfFour(int num){\n\t\treturn num>0 && (num&(num-1))==0 && (num&0x55555555)!=0;\n\t}\n}\n",
            "\tboolean isPowerOfFour(int num){\n\t\tif(num==1) return true;\n\t\tif(num%4!=0) return false;\n\t\treturn isPowerOfFour(num/4);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1380",
        "source": "leetcodeTitles",
        "source_id": "2172",
        "url": "https://leetcode.com/problems/removing-minimum-number-of-magic-beans/",
        "language": "java",
        "query": "Removing Minimum Number of Magic Beans",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += count;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i != j){\n\t\t\t\t\tmin = Math.min(min, a[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += min;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint cnt = 0;\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += cnt;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tmin = Math.min(min, j);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(min != Integer.MAX_VALUE){\n\t\t\t\tans++;\n\t\t\t\tb[min] = -1;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint min = a[i];\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(a[j] < min){\n\t\t\t\t\tmin = a[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += min;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint m = in.nextInt();\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint cnt = 0;\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += cnt;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic int minMagicBeans(int[] A, int[] B, int[] C){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = A[0] + B[0] + C[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = Math.min(dp[i-1] + A[i] + B[i] + C[i], A[i] + B[i] + C[i]);\n\t\t\tdp[i] = Math.min(dp[i], A[i] + B[i] + C[i]);\n\t\t\tdp[i] = Math.min(dp[i], A[i] + B[i]);\n\t\t\tdp[i] = Math.min(dp[i], A[i]);\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tstatic int removeMagicBeans(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] B = new int[n];\n\t\tint[] C = new int[n];\n\t\tint[] D = new int[n];\n\t\tint[] E = new int[n];\n\t\tint[] F = new int[n];\n\t\tint[] G = new int[n];\n\t\tint[] H = new int[n];\n\t\tint[] I = new int[n];\n\t\tint[] J = new int[n];\n\t\tint[] K1 = new int[n];\n\t\tint[] L = new int[n];\n\t\tint[] M = new int[n];\n\t\tint[] N = new int[n];\n\t\tint[] O = new int[n];\n\t\tint[] P = new int[n];\n\t\tint[] Q = new int[n];\n\t\tint[] R = new int[n];\n\t\tint[] S = new int[n];\n\t\tint[] T = new int[n];\n\t\tint[] U = new int[n];\n\t\tint[] V = new int[n];\n\t\tint[] W = new int[n];\n\t\tint[] X = new int[n];\n\t\tint[] Y = new int[n];\n\t\tint[] Z = new int[n];\n\t\tint[] AA = new int[n];\n\t\tint[] BB = new int[n];\n\t\tint[] CC = new int[n];\n\t\tint[] DD = new int[n];\n\t\tint[] EE = new int[n];\n\t\tint[] FF = new int[n];\n\t\tint[] GG = new int[n];\n\t\tint[] HH = new int[n];\n\t\tint[] II = new int[n];\n\t\tint[] JJ = new int[n];\n\t\tint[] KK = new int[n];\n\t\tint[] LL = new int[n];\n\t\tint[] MM = new int[n];\n\t\tint[] NN = new int[n];\n"
        ],
        "results": 10
    },
    {
        "id": "1381",
        "source": "leetcodeTitles",
        "source_id": "979",
        "url": "https://leetcode.com/problems/distribute-coins-in-binary-tree/",
        "language": "java",
        "query": "Distribute Coins in Binary Tree",
        "snippets": [
            "\tvoid distributeCoins(TreeNode root){\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t}\n\tprivate\n\tint helper(TreeNode root, int[] res){\n\t\tif(root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tint cur = left + right + root.val - 1;\n\t\tres[0] += Math.abs(cur);\n\t\treturn cur + 1;\n\t}\n}\n",
            "\tvoid distributeCoins(TreeNode root){\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t}\n\tprivate\n\tint helper(TreeNode root, int[] res){\n\t\tif(root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tres[0] += Math.abs(left) + Math.abs(right);\n\t\treturn root.val + left + right - 1;\n\t}\n}\n",
            "\tvoid distributeCoins(TreeNode root){\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t}\n\tpublic\n\tint helper(TreeNode root, int[] res){\n\t\tif(root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tres[0] += Math.abs(left) + Math.abs(right);\n\t\treturn root.val + left + right - 1;\n\t}\n}\n",
            "\tstatic int distributeCoins(TreeNode root) {\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t\treturn res[0];\n\t}\n\tpublic static int helper(TreeNode root, int[] res) {\n\t\tif (root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tres[0] += Math.abs(left) + Math.abs(right);\n\t\treturn root.val + left + right - 1;\n\t}\n}\n",
            "\tTreeNode distributeCoins(TreeNode root) {\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t\treturn root;\n\t}\n\tpublic int helper(TreeNode root, int[] res) {\n\t\tif (root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tres[0] += Math.abs(left) + Math.abs(right);\n\t\tint cur = left + right + root.val - 1;\n\t\troot.val += cur / 2;\n\t\treturn cur % 2;\n\t}\n}\n",
            "\tTreeNode distributeCoins(TreeNode root) {\n\t\tint[] res = helper(root);\n\t\treturn root;\n\t}\n\tpublic int[] helper(TreeNode root){\n\t\tif(root == null) return new int[]{0,0};\n\t\tint[] left = helper(root.left);\n\t\tint[] right = helper(root.right);\n\t\tint[] res = new int[2];\n\t\tres[0] = left[0] + right[0] + Math.abs(root.val - 1);\n\t\tres[1] = left[1] + right[1] + Math.abs(left[0] - 1) + Math.abs(right[0] - 1);\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void distributeCoins(TreeNode root){\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t}\n\tpublic static int helper(TreeNode root, int[] res){\n\t\tif(root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tint cur = left + right + root.val - 1;\n\t\tres[0] += Math.abs(cur);\n\t\treturn cur + 1;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1382",
        "source": "leetcodeTitles",
        "source_id": "118",
        "url": "https://leetcode.com/problems/pascals-triangle/",
        "language": "java",
        "query": "Pascal's Triangle",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint[][] triangle = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j <= i; j++){\n\t\t\t\tif(j == 0 || j == i){\n\t\t\t\t\ttriangle[i][j] = 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttriangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j <= i; j++){\n\t\t\t\tSystem.out.print(triangle[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint i, j;\n\t\tint[][] triangle = new int[n][n];\n\t\tfor(i = 0; i < n; i++){\n\t\t\tfor(j = 0; j <= i; j++){\n\t\t\t\tif(j == 0 || j == i){\n\t\t\t\t\ttriangle[i][j] = 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\ttriangle[i][j] = triangle[i-1][j-1] + triangle[i-1][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(i = 0; i < n; i++){\n\t\t\tfor(j = 0; j <= i; j++){\n\t\t\t\tSystem.out.print(triangle[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tvoid printPascalTriangle(int n){\n\t\tint i, j, k;\n\t\tint[][] pascal = new int[n][n];\n\t\tfor(i = 0; i < n; i++){\n\t\t\tfor(j = 0; j < n; j++){\n\t\t\t\tif(i == 0 || j == 0 || i == j){\n\t\t\t\t\tpascal[i][j] = 1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tpascal[i][j] = pascal[i-1][j-1] + pascal[i-1][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(i = 0; i < n; i++){\n\t\t\tfor(j = 0; j < n; j++){\n\t\t\t\tSystem.out.print(pascal[i][j] + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1383",
        "source": "leetcodeTitles",
        "source_id": "1261",
        "url": "https://leetcode.com/problems/find-elements-in-a-contaminated-binary-tree/",
        "language": "java",
        "query": "Find Elements in a Contaminated Binary Tree",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(28);\n\t\troot.right.right\n",
            "\tstatic class Node{\n\t\tint data;\n\t\tNode left;\n\t\tNode right;\n\t\tNode(int data){\n\t\t\tthis.data=data;\n\t\t}\n\t}\n\tpublic static Node construct(int[] arr,int n){\n\t\tNode root=new Node(arr[0]);\n\t\tQueue<Node> q=new LinkedList<Node>();\n\t\tq.add(root);\n\t\tint i=1;\n\t\twhile(!q.isEmpty()&&i<n){\n\t\t\tNode temp=q.remove();\n\t\t\tif(arr[i]!=-1){\n\t\t\t\ttemp.left=new Node(arr[i]);\n\t\t\t\tq.add(temp.left);\n\t\t\t}\n\t\t\ti++;\n\t\t\tif(i<n&&arr[i]!=-1){\n\t\t\t\ttemp.right=new Node(arr[i]);\n\t\t\t\tq.add(temp.right);\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn root;\n\t}\n\tpublic static void print(Node root){\n\t\tif(root==null)\n\t\t\treturn;\n\t\tSystem.out.print(root.data+\" \");\n\t\tprint(root.left);\n\t\tprint(root.right);\n\t}\n\tpublic static void print(Node root,int k){\n\t\tif(root==null)\n\t\t\treturn;\n\t\tif(k==0){\n\t\t\tSystem.out.print(root.data+\" \");\n\t\t}\n\t\tprint(root.left,k-1);\n\t\tprint(root.right,k-1);\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr={1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36\n",
            "\tstatic class Node{\n\t\tint data;\n\t\tNode left;\n\t\tNode right;\n\t\tNode(int data){\n\t\t\tthis.data=data;\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tNode root=new Node(1);\n\t\troot.left=new Node(2);\n\t\troot.right=new Node(3);\n\t\troot.left.left=new Node(4);\n\t\troot.left.right=new Node(5);\n\t\troot.right.left=new Node(6);\n\t\troot.right.right=new Node(7);\n\t\troot.left.left.left=new Node(8);\n\t\troot.left.left.right=new Node(9);\n\t\troot.left.right.left=new Node(10);\n\t\troot.left.right.right=new Node(11);\n\t\troot.right.left.left=new Node(12);\n\t\troot.right.left.right=new Node(13);\n\t\troot.right.right.left=new Node(14);\n\t\troot.right.right.right=new Node(15);\n\t\troot.left.left.left.left=new Node(16);\n\t\troot.left.left.left.right=new Node(17);\n\t\troot.left.left.right.left=new Node(18);\n\t\troot.left.left.right.right=new Node(19);\n\t\troot.left.right.left.left=new Node(20);\n\t\troot.left.right.left.right=new Node(21);\n\t\troot.left.right.right.left=new Node(22);\n\t\troot.left.right.right.right=new Node(23);\n\t\troot.right.left.left.left=new Node(24);\n\t\troot.right.left.left.right=new Node(25);\n\t\troot.right.left.right.left=new Node(26);\n\t\troot.right.left.right.right=new Node(27);\n\t\troot.\n"
        ],
        "results": 10
    },
    {
        "id": "1384",
        "source": "leetcodeTitles",
        "source_id": "357",
        "url": "https://leetcode.com/problems/count-numbers-with-unique-digits/",
        "language": "java",
        "query": "Count Numbers with Unique Digits",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(countNumbersWithUniqueDigits(2));\n\t}\n\tpublic static int countNumbersWithUniqueDigits(int n){\n\t\tif(n==0) return 1;\n\t\tint count=10;\n\t\tint uniqueDigits=9;\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tuniqueDigits*=10-i+1;\n\t\t\tcount+=uniqueDigits;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countNumbersWithUniqueDigits(int n){\n\t\tif(n==0) return 1;\n\t\tint res=10;\n\t\tint uniqueDigits=9;\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tuniqueDigits*=10-i+1;\n\t\t\tres+=uniqueDigits;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int countNumbersWithUniqueDigits(int n){\n\t\tif(n==0) return 1;\n\t\tint count=10;\n\t\tint uniqueDigits=9;\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tuniqueDigits*=10-i+1;\n\t\t\tcount+=uniqueDigits;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countNumbersWithUniqueDigits(int n) {\n\t\tif(n == 0) return 1;\n\t\tint res = 10;\n\t\tint uniqueDigits = 9;\n\t\tfor(int i = 2; i <= n; i++){\n\t\t\tuniqueDigits *= (10 - i + 1);\n\t\t\tres += uniqueDigits;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int countNumbersWithUniqueDigits(int n) {\n\t\tif(n==0) return 1;\n\t\tint count=10;\n\t\tint i=2;\n\t\twhile(i<=n){\n\t\t\tcount*=10-i+1;\n\t\t\ti++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countNumbersWithUniqueDigits(int n){\n\t\tif(n==0) return 1;\n\t\tint count=10;\n\t\tint uniqueDigit=9;\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tuniqueDigit*=10-i+1;\n\t\t\tcount+=uniqueDigit;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countNumbersWithUniqueDigits(int n){\n\t\tif(n==0) return 1;\n\t\tint res=10;\n\t\tint uniqueDigits=9;\n\t\tint num=9;\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tuniqueDigits*=num;\n\t\t\tres+=uniqueDigits;\n\t\t\tnum--;\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1385",
        "source": "leetcodeTitles",
        "source_id": "457",
        "url": "https://leetcode.com/problems/circular-array-loop/",
        "language": "java",
        "query": "Circulat Array Loop",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = new int[10];\n\t\tint i = 0;\n\t\twhile(i < 10){\n\t\t\ta[i] = i;\n\t\t\ti++;\n\t\t}\n\t\ti = 0;\n\t\twhile(i < 10){\n\t\t\tSystem.out.println(a[i]);\n\t\t\ti++;\n\t\t}\n\t}\n}\n",
            "\tvoid method(){\n\t\tint[] a = new int[10];\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\ta[i] = i;\n\t\t}\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tSystem.out.println(a[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = new int[10];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tarr[i] = i;\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t}\n}\n",
            "\tvoid method(){\n\t\tint[] arr = new int[10];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tarr[i] = i;\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1386",
        "source": "leetcodeTitles",
        "source_id": "1592",
        "url": "https://leetcode.com/problems/rearrange-spaces-between-words/",
        "language": "java",
        "query": "Rearrange Spaces Between Words",
        "snippets": [
            "\tString solution(String s){\n\t\tString[] words = s.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(words[i].length() > 0){\n\t\t\t\tsb.append(words[i]);\n\t\t\t\tsb.append(\" \");\n\t\t\t}\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n}\n",
            "\tString solution(String s){\n\t\tString[] words = s.split(\" \");\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(words[i].length() > 0){\n\t\t\t\tresult += words[i] + \" \";\n\t\t\t}\n\t\t}\n\t\treturn result.substring(0, result.length() - 1);\n\t}\n}\n",
            "\tString solution(String s){\n\t\tString[] words = s.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(String word: words){\n\t\t\tsb.append(word);\n\t\t\tsb.append(\" \");\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n}\n",
            "\tString solution(String s){\n\t\tString[] words = s.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(String word : words){\n\t\t\tif(word.length() > 0){\n\t\t\t\tsb.append(word);\n\t\t\t\tsb.append(\" \");\n\t\t\t}\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n}\n",
            "\tString reArrangeSpaces(String str){\n\t\tString[] words = str.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(String word:words){\n\t\t\tif(word.length()>1){\n\t\t\t\tsb.append(word.charAt(0));\n\t\t\t\tsb.append(\" \");\n\t\t\t\tsb.append(word.substring(1));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(word);\n\t\t\t}\n\t\t\tsb.append(\" \");\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n}\n",
            "\tstatic String reArrangeSpaces(String str){\n\t\tString[] words = str.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(String word: words){\n\t\t\tif(word.length() > 1){\n\t\t\t\tsb.append(word);\n\t\t\t\tsb.append(\" \");\n\t\t\t}\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1387",
        "source": "leetcodeTitles",
        "source_id": "1277",
        "url": "https://leetcode.com/problems/count-square-submatrices-with-all-ones/",
        "language": "java",
        "query": "Count Square Submatrices with All Ones",
        "snippets": [
            "\tint countSquares(int[][] matrix) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint count = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tif (i == 0 || j == 0) {\n\t\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n\t\t\t\t\t}\n\t\t\t\t\tcount += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSquares(int[][] matrix) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint count = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tif (i == 0 || j == 0) {\n\t\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i][j - 1] + 1;\n\t\t\t\t\t}\n\t\t\t\t\tcount += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSquares(int[][] matrix) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint count = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = (i > 0 && j > 0) ? dp[i - 1][j - 1] + 1 : 1;\n\t\t\t\t\tcount += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i - 1][j] + 1);\n\t\t\t\t\t}\n\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\tdp[i][j] = Math.min(dp[i][j], dp[i][j - 1] + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1388",
        "source": "leetcodeTitles",
        "source_id": "1684",
        "url": "https://leetcode.com/problems/count-the-number-of-consistent-strings/",
        "language": "java",
        "query": "Count the Number of Consistent Strings",
        "snippets": [
            "\tstatic int countConsistentStrings(String[] strings){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < strings.length; i++){\n\t\t\tfor(int j = i + 1; j < strings.length; j++){\n\t\t\t\tif(isConsistent(strings[i], strings[j])){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic boolean isConsistent(String s1, String s2){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s1.length(); i++){\n\t\t\tif(s1.charAt(i) == s2.charAt(i)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count == s1.length();\n\t}\n}\n",
            "\tstatic int countConsistentStrings(String[] strings){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < strings.length; i++){\n\t\t\tif(isConsistent(strings[i])){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic boolean isConsistent(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] % 2 != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tint countConsistentStrings(String[] strings){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < strings.length; i++){\n\t\t\tif(isConsistent(strings[i])){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tboolean isConsistent(String s){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] % 2 != 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tint countConsistentStrings(String[] strings){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < strings.length; i++){\n\t\t\tfor(int j = 0; j < strings.length; j++){\n\t\t\t\tif(i != j && strings[i].equals(strings[j])){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countConsistentStrings(String[] strings, String target) {\n\t\tint count = 0;\n\t\tfor (String s : strings) {\n\t\t\tif (isConsistent(s, target)) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tprivate\n\tboolean isConsistent(String s, String target) {\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i < s.length() && j < target.length()) {\n\t\t\tif (s.charAt(i) == target.charAt(j)) {\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn j == target.length();\n\t}\n}\n",
            "\tint countConsistentStrings(String[] strings) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < strings.length; i++) {\n\t\t\tboolean consistent = true;\n\t\t\tfor (int j = 0; j < strings.length; j++) {\n\t\t\t\tif (i != j && !strings[i].equals(strings[j])) {\n\t\t\t\t\tconsistent = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (consistent) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1389",
        "source": "leetcodeTitles",
        "source_id": "1442",
        "url": "https://leetcode.com/problems/count-triplets-that-can-form-two-arrays-of-equal-xor/",
        "language": "java",
        "query": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "snippets": [
            "\tstatic int countTriplets(int[] arr, int xor) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tif (arr[i] ^ arr[j] ^ arr[k] == xor) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countTriplets(int[] arr) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tif (arr[i] ^ arr[j] ^ arr[k] == 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countTriplets(int[] arr) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tif (arr[i] ^ arr[j] ^ arr[k] == 0) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1390",
        "source": "leetcodeTitles",
        "source_id": "1534",
        "url": "https://leetcode.com/problems/count-good-triplets/",
        "language": "java",
        "query": "Count Good Triplets",
        "snippets": [
            "\tstatic int countGoodTriplets(int[] arr, int a, int b, int c) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tif (Math.abs(arr[i] - arr[j]) <= a && Math.abs(arr[j] - arr[k]) <= b && Math.abs(arr[k] - arr[i]) <= c) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countGoodTriplets(int[] arr, int a, int b, int c) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tif (Math.abs(arr[i] - arr[j]) <= a && Math.abs(arr[j] - arr[k]) <= b && Math.abs(arr[i] - arr[k]) <= c) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countGoodTriplets(int arr[], int a, int b, int c) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tif (Math.abs(arr[i] - arr[j]) <= a && Math.abs(arr[j] - arr[k]) <= b && Math.abs(arr[k] - arr[i]) <= c) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1391",
        "source": "leetcodeTitles",
        "source_id": "1399",
        "url": "https://leetcode.com/problems/count-largest-group/",
        "language": "java",
        "query": "Count Largest Group",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {2,1,2,5,3,3};\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tint temp = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == temp){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(count > max){\n\t\t\t\t\tmax = count;\n\t\t\t\t}\n\t\t\t\tcount = 1;\n\t\t\t\ttemp = arr[i];\n\t\t\t}\n\t\t}\n\t\tif(count > max){\n\t\t\tmax = count;\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic int countLargestGroup(int n) {\n\t\tint[] nums = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tnums[i] = i + 1;\n\t\t}\n\t\tint count = 0;\n\t\twhile (n > 1) {\n\t\t\tint max = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (nums[i] > max) {\n\t\t\t\t\tmax = nums[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\tint index = 0;\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (nums[i] == max) {\n\t\t\t\t\tindex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tn--;\n\t\t\tint[] newNums = new int[n];\n\t\t\tfor (int i = 0; i < n; i++) {\n\t\t\t\tif (i < index) {\n\t\t\t\t\tnewNums[i] = nums[i];\n\t\t\t\t} else {\n\t\t\t\t\tnewNums[i] = nums[i + 1];\n\t\t\t\t}\n\t\t\t}\n\t\t\tnums = newNums;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countLargestGroup(int n){\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tint[] num = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tnum[i] = (int)(Math.random()*10);\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint temp = 0;\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tif(num[i] == num[j]){\n\t\t\t\t\ttemp++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(temp > max){\n\t\t\t\tmax = temp;\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\telse if(temp == max){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {2,1,2,5,3,5,2,1,2,4};\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tint maxCount = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == max){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(count > maxCount){\n\t\t\t\t\tmaxCount = count;\n\t\t\t\t}\n\t\t\t\tcount = 1;\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\tif(count > maxCount){\n\t\t\tmaxCount = count;\n\t\t}\n\t\tSystem.out.println(maxCount);\n\t}\n}\n",
            "\tstatic int countLargestGroup(int n){\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tint temp = 0;\n\t\tint[] num = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tnum[i] = (int)(Math.random()*n);\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ttemp = num[i];\n\t\t\tint j = i;\n\t\t\twhile(j < n && num[j] == temp){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j - i > max){\n\t\t\t\tmax = j - i;\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\telse if(j - i == max){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countLargestGroup(int n) {\n\t\tint[] count = new int[n + 1];\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tint x = i;\n\t\t\twhile (x > 0) {\n\t\t\t\tcount[x % 10]++;\n\t\t\t\tx /= 10;\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (count[i] > max) {\n\t\t\t\tmax = count[i];\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 1; i <= n; i++) {\n\t\t\tif (count[i] == max) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {2,1,2,5,3,4,6,7,8,9,10};\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tint maxCount = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == max){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(count > maxCount){\n\t\t\t\t\tmaxCount = count;\n\t\t\t\t}\n\t\t\t\tcount = 1;\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\tif(count > maxCount){\n\t\t\tmaxCount = count;\n\t\t}\n\t\tSystem.out.println(maxCount);\n\t}\n}\n",
            "\tstatic int countLargestGroup(int n){\n\t\tint count = 0;\n\t\tint max = 0;\n\t\tint temp = 0;\n\t\tint[] nums = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tnums[i] = (int)(Math.random() * n);\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ttemp = nums[i];\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tif(temp == nums[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t\tcount = 0;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int countLargestGroup(int n) {\n\t\tint[] count = new int[n + 1];\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tint j = i;\n\t\t\twhile (j <= n) {\n\t\t\t\tcount[j]++;\n\t\t\t\tj += i;\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tif (count[i] > max) {\n\t\t\t\tmax = count[i];\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tif (count[i] == max) {\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1392",
        "source": "leetcodeTitles",
        "source_id": "858",
        "url": "https://leetcode.com/problems/mirror-reflection/",
        "language": "java",
        "query": "Mirror Reflection",
        "snippets": [
            "\tvoid method(){\n\t\tSystem.out.println(\"method\");\n\t}\n}\n",
            "\tvoid method(){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n",
            "\tClazz(){\n\t\tSystem.out.println(\"Clazz\");\n\t}\n}\n",
            "\tvoid method(){\n\t\tSystem.out.println(\"Hello\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1393",
        "source": "leetcodeTitles",
        "source_id": "648",
        "url": "https://leetcode.com/problems/replace-words/",
        "language": "java",
        "query": "Replace Words",
        "snippets": [
            "\tString replaceWords(String[] dict, String sentence){\n\t\tString[] words = sentence.split(\" \");\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tfor(int j = 0; j < dict.length; j++){\n\t\t\t\tif(words[i].equals(dict[j])){\n\t\t\t\t\twords[i] = dict[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tresult += words[i] + \" \";\n\t\t}\n\t\treturn result.substring(0, result.length() - 1);\n\t}\n}\n",
            "\tstatic String replaceWords(String[] dict, String sentence){\n\t\tString[] words = sentence.split(\" \");\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tfor(int j = 0; j < dict.length; j++){\n\t\t\t\tif(words[i].equals(dict[j])){\n\t\t\t\t\twords[i] = dict[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tresult += words[i] + \" \";\n\t\t}\n\t\treturn result.substring(0, result.length() - 1);\n\t}\n}\n",
            "\tstatic String replaceWords(String[] dict, String sentence){\n\t\tString[] words = sentence.split(\" \");\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tfor(int j = 0; j < dict.length; j++){\n\t\t\t\tif(words[i].equals(dict[j])){\n\t\t\t\t\twords[i] = dict[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tresult += words[i] + \" \";\n\t\t}\n\t\treturn result.substring(0, result.length() - 1);\n\t}\n}\n",
            "\tvoid replaceWords(String[] dict, String sentence){\n\t\tString[] words = sentence.split(\" \");\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(dict.contains(words[i])){\n\t\t\t\twords[i] = \"\";\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tsb.append(words[i]);\n\t\t\tsb.append(\" \");\n\t\t}\n\t\tSystem.out.println(sb.toString().trim());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tString[] words = {\"World\", \"Hello\"};\n\t\tString[] output = replaceWords(s, words);\n\t\tfor(String str: output){\n\t\t\tSystem.out.println(str);\n\t\t}\n\t}\n\tpublic static String[] replaceWords(String s, String[] words){\n\t\tString[] output = new String[s.length()];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\toutput[i] = s.substring(i, i+1);\n\t\t}\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tfor(int j = 0; j < s.length(); j++){\n\t\t\t\tif(s.substring(j, j+words[i].length()).equals(words[i])){\n\t\t\t\t\toutput[j] = words[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tString[] words = {\"Hello\", \"World\"};\n\t\tString[] newWords = {\"Hi\", \"World\"};\n\t\tSystem.out.println(replaceWords(s, words, newWords));\n\t}\n\tpublic static String replaceWords(String s, String[] words, String[] newWords){\n\t\tString[] wordsArray = s.split(\" \");\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tfor(int j = 0; j < words.length; j++){\n\t\t\t\tif(wordsArray[i].equals(words[j])){\n\t\t\t\t\twordsArray[i] = newWords[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tresult += wordsArray[i] + \" \";\n\t\t}\n\t\treturn result.substring(0, result.length() - 1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tString[] words = {\"Hello\", \"World\"};\n\t\tString[] newWords = {\"Hi\", \"Earth\"};\n\t\tSystem.out.println(replaceWords(s, words, newWords));\n\t}\n\tpublic static String replaceWords(String s, String[] words, String[] newWords){\n\t\tString[] wordsArray = s.split(\" \");\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tfor(int j = 0; j < words.length; j++){\n\t\t\t\tif(wordsArray[i].equals(words[j])){\n\t\t\t\t\twordsArray[i] = newWords[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tresult += wordsArray[i] + \" \";\n\t\t}\n\t\treturn result.substring(0, result.length() - 1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tString[] words = {\"Hello\", \"World\"};\n\t\tString[] newWords = {\"Hi\", \"There\"};\n\t\treplaceWords(s, words, newWords);\n\t}\n\tpublic static String replaceWords(String s, String[] words, String[] newWords){\n\t\tString[] wordsArray = s.split(\" \");\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tfor(int j = 0; j < words.length; j++){\n\t\t\t\tif(wordsArray[i].equals(words[j])){\n\t\t\t\t\twordsArray[i] = newWords[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tresult += wordsArray[i] + \" \";\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"We are happy\";\n\t\tString[] words = {\"happy\", \"we\"};\n\t\tString[] newWords = {\"sad\", \"you\"};\n\t\tSystem.out.println(replaceWords(s, words, newWords));\n\t}\n\tpublic static String replaceWords(String s, String[] words, String[] newWords){\n\t\tString[] wordsArray = s.split(\" \");\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tfor(int j = 0; j < words.length; j++){\n\t\t\t\tif(wordsArray[i].equals(words[j])){\n\t\t\t\t\twordsArray[i] = newWords[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tresult += wordsArray[i] + \" \";\n\t\t}\n\t\treturn result.substring(0, result.length() - 1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"We are happy\";\n\t\tString[] words = {\"happy\", \"we\"};\n\t\tString[] newWords = {\"fun\", \"we\"};\n\t\tSystem.out.println(replaceWords(s, words, newWords));\n\t}\n\tpublic static String replaceWords(String s, String[] words, String[] newWords){\n\t\tString[] wordsArray = s.split(\" \");\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tfor(int j = 0; j < words.length; j++){\n\t\t\t\tif(wordsArray[i].equals(words[j])){\n\t\t\t\t\twordsArray[i] = newWords[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < wordsArray.length; i++){\n\t\t\tresult += wordsArray[i] + \" \";\n\t\t}\n\t\treturn result.substring(0, result.length() - 1);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1394",
        "source": "leetcodeTitles",
        "source_id": "189",
        "url": "https://leetcode.com/problems/rotate-array/",
        "language": "java",
        "query": "Rotate Array",
        "snippets": [
            "\tvoid rotate(int[] nums, int k){\n\t\tint[] temp = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\ttemp[(i+k)%nums.length] = nums[i];\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tnums[i] = temp[i];\n\t\t}\n\t}\n}\n",
            "\tvoid rotate(int[] nums, int k) {\n\t\tint n = nums.length;\n\t\tk = k % n;\n\t\treverse(nums, 0, n - 1);\n\t\treverse(nums, 0, k - 1);\n\t\treverse(nums, k, n - 1);\n\t}\n\tpublic void reverse(int[] nums, int start, int end){\n\t\twhile(start < end){\n\t\t\tint temp = nums[start];\n\t\t\tnums[start] = nums[end];\n\t\t\tnums[end] = temp;\n\t\t\tstart++;\n\t\t\tend--;\n\t\t}\n\t}\n}\n",
            "\tstatic void rotate(int[] arr, int k){\n\t\tint[] temp = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\ttemp[(i+k)%arr.length] = arr[i];\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tarr[i] = temp[i];\n\t\t}\n\t}\n}\n",
            "\tvoid rotate(int[] nums, int k) {\n\t\tint n = nums.length;\n\t\tk = k % n;\n\t\treverse(nums, 0, n - k - 1);\n\t\treverse(nums, n - k, n - 1);\n\t\treverse(nums, 0, n - 1);\n\t}\n\tpublic void reverse(int[] nums, int start, int end){\n\t\twhile(start < end){\n\t\t\tint temp = nums[start];\n\t\t\tnums[start] = nums[end];\n\t\t\tnums[end] = temp;\n\t\t\tstart++;\n\t\t\tend--;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1395",
        "source": "leetcodeTitles",
        "source_id": "1694",
        "url": "https://leetcode.com/problems/reformat-phone-number/",
        "language": "java",
        "query": "Reformat Phone Number",
        "snippets": [
            "\tString reformat(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) == '-') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i < s.length()) {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tString res = sb.toString();\n\t\tsb = new StringBuilder();\n\t\ti = 0;\n\t\twhile (i < res.length()) {\n\t\t\tif (res.charAt(i) == ' ') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i < res.length()) {\n\t\t\t\tsb.append(res.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tres = sb.toString();\n\t\tsb = new StringBuilder();\n\t\ti = 0;\n\t\twhile (i < res.length()) {\n\t\t\tif (res.charAt(i) == ' ') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i < res.length()) {\n\t\t\t\tsb.append(res.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tres = sb.toString();\n\t\tsb = new StringBuilder();\n\t\ti = 0;\n\t\twhile (i < res.length()) {\n\t\t\tif (res.charAt(i) == ' ') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i < res.length()) {\n\t\t\t\tsb.append(res.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tres = sb.toString();\n\t\tsb = new StringBuilder();\n\t\ti = 0;\n\t\twhile (i < res.length()) {\n\t\t\tif\n",
            "\tString reformat(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (sb.length() == 11) {\n\t\t\treturn sb.substring(0, 3) + \"-\" + sb.substring(3, 7) + \"-\" + sb.substring(7, 11);\n\t\t} else if (sb.length() == 10) {\n\t\t\treturn sb.substring(0, 3) + \"-\" + sb.substring(3, 6) + \"-\" + sb.substring(6, 10);\n\t\t} else {\n\t\t\treturn s;\n\t\t}\n\t}\n}\n",
            "\tString reformat(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (sb.length() == 11) {\n\t\t\treturn sb.insert(0, \"(\").insert(4, \") \").insert(9, \"-\").toString();\n\t\t} else if (sb.length() == 10) {\n\t\t\treturn sb.insert(0, \"(\").insert(3, \") \").insert(8, \"-\").toString();\n\t\t} else {\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n}\n",
            "\tString reformat(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (sb.length() == 11) {\n\t\t\treturn sb.substring(0, 3) + \"-\" + sb.substring(3, 7) + \"-\" + sb.substring(7);\n\t\t} else if (sb.length() == 10) {\n\t\t\treturn sb.substring(0, 3) + \"-\" + sb.substring(3, 6) + \"-\" + sb.substring(6);\n\t\t} else {\n\t\t\treturn s;\n\t\t}\n\t}\n}\n",
            "\tString reformat(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (sb.length() == 11) {\n\t\t\treturn sb.substring(0, 3) + \"-\" + sb.substring(3, 7) + \"-\" + sb.substring(7, 11);\n\t\t} else if (sb.length() == 10) {\n\t\t\treturn sb.substring(0, 3) + \"-\" + sb.substring(3, 6) + \"-\" + sb.substring(6, 10);\n\t\t} else {\n\t\t\treturn sb.toString();\n\t\t}\n\t}\n}\n",
            "\tString reformat(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tif (sb.length() == 11) {\n\t\t\treturn sb.insert(0, \"(\").insert(4, \") \").insert(9, \"-\").toString();\n\t\t} else if (sb.length() == 10) {\n\t\t\treturn sb.insert(0, \"(\").insert(3, \") \").insert(7, \"-\").toString();\n\t\t} else {\n\t\t\treturn s;\n\t\t}\n\t}\n}\n",
            "\tString reformatPhoneNumber(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (s.charAt(i) == '-') {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif (i < s.length()) {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\ts = sb.toString();\n\t\tsb = new StringBuilder();\n\t\ti = 0;\n\t\twhile (i < s.length()) {\n\t\t\tif (i == 3 || i == 7) {\n\t\t\t\tsb.append('-');\n\t\t\t}\n\t\t\tif (i < s.length()) {\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1396",
        "source": "leetcodeTitles",
        "source_id": "322",
        "url": "https://leetcode.com/problems/coin-change/",
        "language": "java",
        "query": "Coin Change",
        "snippets": [
            "\tstatic int coinChange(int[] coins, int amount) {\n\t\tint[] dp = new int[amount + 1];\n\t\tdp[0] = 1;\n\t\tfor (int i = 0; i < coins.length; i++) {\n\t\t\tfor (int j = coins[i]; j <= amount; j++) {\n\t\t\t\tdp[j] += dp[j - coins[i]];\n\t\t\t}\n\t\t}\n\t\treturn dp[amount];\n\t}\n}\n",
            "\tstatic int coinChange(int[] coins, int amount) {\n\t\tint[] dp = new int[amount + 1];\n\t\tdp[0] = 1;\n\t\tfor (int i = 0; i < coins.length; i++) {\n\t\t\tfor (int j = 1; j <= amount; j++) {\n\t\t\t\tif (j >= coins[i]) {\n\t\t\t\t\tdp[j] += dp[j - coins[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[amount];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1397",
        "source": "leetcodeTitles",
        "source_id": "872",
        "url": "https://leetcode.com/problems/leaf-similar-trees/",
        "language": "java",
        "query": "Leaf-Similar Trees",
        "snippets": [
            "\tboolean leafSimilar(TreeNode root1, TreeNode root2) {\n\t\tList<Integer> list1 = new ArrayList<Integer>();\n\t\tList<Integer> list2 = new ArrayList<Integer>();\n\t\tdfs(root1, list1);\n\t\tdfs(root2, list2);\n\t\treturn list1.equals(list2);\n\t}\n\tpublic void dfs(TreeNode root, List<Integer> list){\n\t\tif(root == null) return;\n\t\tif(root.left == null && root.right == null){\n\t\t\tlist.add(root.val);\n\t\t\treturn;\n\t\t}\n\t\tdfs(root.left, list);\n\t\tdfs(root.right, list);\n\t}\n}\n",
            "\tboolean leafSimilar(TreeNode root1, TreeNode root2) {\n\t\tList<Integer> list1 = new ArrayList<Integer>();\n\t\tList<Integer> list2 = new ArrayList<Integer>();\n\t\tgetLeaf(root1, list1);\n\t\tgetLeaf(root2, list2);\n\t\treturn list1.equals(list2);\n\t}\n\tpublic void getLeaf(TreeNode root, List<Integer> list){\n\t\tif(root == null) return;\n\t\tif(root.left == null && root.right == null){\n\t\t\tlist.add(root.val);\n\t\t\treturn;\n\t\t}\n\t\tgetLeaf(root.left, list);\n\t\tgetLeaf(root.right, list);\n\t}\n}\n",
            "\tboolean leafSimilar(TreeNode root1, TreeNode root2) {\n\t\tList<Integer> list1 = new ArrayList<Integer>();\n\t\tList<Integer> list2 = new ArrayList<Integer>();\n\t\tgetLeaves(root1, list1);\n\t\tgetLeaves(root2, list2);\n\t\treturn list1.equals(list2);\n\t}\n\tpublic void getLeaves(TreeNode root, List<Integer> list){\n\t\tif(root == null) return;\n\t\tif(root.left == null && root.right == null){\n\t\t\tlist.add(root.val);\n\t\t\treturn;\n\t\t}\n\t\tgetLeaves(root.left, list);\n\t\tgetLeaves(root.right, list);\n\t}\n}\n",
            "\tboolean leafSimilar(TreeNode root1, TreeNode root2) {\n\t\tList<Integer> list1 = new ArrayList<>();\n\t\tList<Integer> list2 = new ArrayList<>();\n\t\tdfs(root1, list1);\n\t\tdfs(root2, list2);\n\t\treturn list1.equals(list2);\n\t}\n\tpublic void dfs(TreeNode node, List<Integer> list){\n\t\tif(node == null) return;\n\t\tif(node.left == null && node.right == null){\n\t\t\tlist.add(node.val);\n\t\t\treturn;\n\t\t}\n\t\tdfs(node.left, list);\n\t\tdfs(node.right, list);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1398",
        "source": "leetcodeTitles",
        "source_id": "2114",
        "url": "https://leetcode.com/problems/maximum-number-of-words-found-in-sentences/",
        "language": "java",
        "query": "Maximum Number of Words Found in Sentences",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tString[] strArray = str.split(\" \");\n\t\tint max = 0;\n\t\tfor(int i = 0; i < strArray.length; i++){\n\t\t\tif(strArray[i].length() > max){\n\t\t\t\tmax = strArray[i].length();\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World. This is a test sentence.\";\n\t\tString[] words = str.split(\" \");\n\t\tint max = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(words[i].length() > max){\n\t\t\t\tmax = words[i].length();\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World. This is a test\";\n\t\tString[] strArray = str.split(\" \");\n\t\tint max = 0;\n\t\tfor(int i = 0; i < strArray.length; i++){\n\t\t\tif(strArray[i].length() > max){\n\t\t\t\tmax = strArray[i].length();\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str=\"I am a good\n"
        ],
        "results": 5
    },
    {
        "id": "1399",
        "source": "leetcodeTitles",
        "source_id": "524",
        "url": "https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/",
        "language": "java",
        "query": "Longest Word in Dictionary Through Deleting",
        "snippets": [
            "\tString findLongestWord(String s, Set<String> d) {\n\t\tString result = \"\";\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tString temp = s.substring(i, s.length());\n\t\t\tif (d.contains(temp)) {\n\t\t\t\tif (temp.length() > result.length()) {\n\t\t\t\t\tresult = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (int j = 1; j < temp.length(); j++) {\n\t\t\t\tString t = temp.substring(j, temp.length());\n\t\t\t\tif (d.contains(t)) {\n\t\t\t\t\tif (t.length() > result.length()) {\n\t\t\t\t\t\tresult = t;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tString findLongestWord(String s, String[] d) {\n\t\tString result = \"\";\n\t\tfor (String word : d) {\n\t\t\tif (word.length() > result.length() && isSubsequence(s, word)) {\n\t\t\t\tresult = word;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tpublic boolean isSubsequence(String s, String t) {\n\t\tint m = s.length();\n\t\tint n = t.length();\n\t\tint i = 0, j = 0;\n\t\twhile (i < m && j < n) {\n\t\t\tif (s.charAt(i) == t.charAt(j)) {\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn i == m;\n\t}\n}\n",
            "\tString findLongestWord(String s, String[] d) {\n\t\tString result = \"\";\n\t\tfor (String word : d) {\n\t\t\tif (word.length() > result.length() && isValid(s, word)) {\n\t\t\t\tresult = word;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tpublic boolean isValid(String s, String word) {\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i < s.length() && j < word.length()) {\n\t\t\tif (s.charAt(i) == word.charAt(j)) {\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn j == word.length();\n\t}\n}\n",
            "\tString findLongestWord(String[] words){\n\t\tString longestWord = \"\";\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(words[i].length() > longestWord.length()){\n\t\t\t\tlongestWord = words[i];\n\t\t\t}\n\t\t}\n\t\treturn longestWord;\n\t}\n}\n",
            "\tString findLongestWord(String s, String[] d) {\n\t\tString longest = \"\";\n\t\tfor (String word : d) {\n\t\t\tif (isValid(s, word)) {\n\t\t\t\tif (word.length() > longest.length()) {\n\t\t\t\t\tlongest = word;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn longest;\n\t}\n\t\n\tpublic boolean isValid(String s, String word) {\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile (i < s.length() && j < word.length()) {\n\t\t\tif (s.charAt(i) == word.charAt(j)) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn j == word.length();\n\t}\n}\n",
            "\tString findLongestWord(String s, String[] d) {\n\t\tString res = \"\";\n\t\tfor (String str : d) {\n\t\t\tif (str.length() > res.length() && isSubsequence(s, str)) {\n\t\t\t\tres = str;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tpublic boolean isSubsequence(String s, String t) {\n\t\tint m = s.length(), n = t.length();\n\t\tint i = 0, j = 0;\n\t\twhile (i < m && j < n) {\n\t\t\tif (s.charAt(i) == t.charAt(j)) {\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn i == m;\n\t}\n}\n",
            "\tString findLongestWord(String s, String[] d) {\n\t\tString longest = \"\";\n\t\tfor (String word : d) {\n\t\t\tif (isSubsequence(s, word) && word.length() > longest.length()) {\n\t\t\t\tlongest = word;\n\t\t\t}\n\t\t}\n\t\treturn longest;\n\t}\n\tpublic boolean isSubsequence(String s, String t) {\n\t\tint m = s.length();\n\t\tint n = t.length();\n\t\tint i = 0, j = 0;\n\t\twhile (i < m && j < n) {\n\t\t\tif (s.charAt(i) == t.charAt(j)) {\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn i == m;\n\t}\n}\n",
            "\tString findLongestWord(String s, String[] d) {\n\t\tString res = \"\";\n\t\tfor (String str : d) {\n\t\t\tif (isSubstring(s, str)) {\n\t\t\t\tif (str.length() > res.length()) {\n\t\t\t\t\tres = str;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tpublic boolean isSubstring(String s, String t) {\n\t\tint m = s.length();\n\t\tint n = t.length();\n\t\tint[][] dp = new int[m + 1][n + 1];\n\t\tfor (int i = 0; i <= m; i++) {\n\t\t\tfor (int j = 0; j <= n; j++) {\n\t\t\t\tif (i == 0 || j == 0) {\n\t\t\t\t\tdp[i][j] = 0;\n\t\t\t\t} else if (s.charAt(i - 1) == t.charAt(j - 1)) {\n\t\t\t\t\tdp[i][j] = dp[i - 1][j - 1] + 1;\n\t\t\t\t} else {\n\t\t\t\t\tdp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[m][n] == n;\n\t}\n}\n",
            "\tString findLongestWord(String s, String[] d) {\n\t\tString res = \"\";\n\t\tfor (String str : d) {\n\t\t\tif (isSubstring(s, str)) {\n\t\t\t\tif (str.length() > res.length()) {\n\t\t\t\t\tres = str;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tpublic boolean isSubstring(String s, String t) {\n\t\tint m = s.length();\n\t\tint n = t.length();\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint j = 0;\n\t\t\twhile (j < n && i + j < m && s.charAt(i + j) == t.charAt(j)) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif (j == n) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1400",
        "source": "leetcodeTitles",
        "source_id": "1460",
        "url": "https://leetcode.com/problems/make-two-arrays-equal-by-reversing-sub-arrays/",
        "language": "java",
        "query": "Make Two Arrays Equal by Reversing Sub-arrays",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr1 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {10,9,8,7,6,5,4,3,2,1};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {10,9,8,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr1 = {1,2,3,4,5,6,7};\n\t\tint[] arr2 = {7,6,5,4,3,2,1};\n\t\tint[] arr3 = {1,2,3,4,5,6,7};\n\t\tint[] arr4 = {7,6,5,4,3,2,1};\n\t\tint[] arr5 = {1,2,3,4,5,6,7};\n\t\tint[] arr6 = {7,6,5,4,3,2,1};\n\t\tint[] arr7 = {1,2,3,4,5,6,7};\n\t\tint[] arr8 = {7,6,5,4,3,2,1};\n\t\tint[] arr9 = {1,2,3,4,5,6,7};\n\t\tint[] arr10 = {7,6,5,4,3,2,1};\n\t\tint[] arr11 = {1,2,3,4,5,6,7};\n\t\tint[] arr12 = {7,6,5,4,3,2,1};\n\t\tint[] arr13 = {1,2,3,4,5,6,7};\n\t\tint[] arr14 = {7,6,5,4,3,2,1};\n\t\tint[] arr15 = {1,2,3,4,5,6,7};\n\t\tint[] arr16 = {7,6,5,4,3,2,1};\n\t\tint[] arr17 = {1,2,3,4,5,6,7};\n\t\tint[] arr18 = {7,6,5,4,3,2,1};\n\t\tint[] arr19 = {1,2,3,4,5,6,7};\n\t\tint[] arr20 = {7,6,5,4,3,2,1};\n\t\tint[] arr21 = {1,2,3,4,5,6,7};\n\t\tint[] arr22\n"
        ],
        "results": 10
    },
    {
        "id": "1401",
        "source": "leetcodeTitles",
        "source_id": "802",
        "url": "https://leetcode.com/problems/find-eventual-safe-states/",
        "language": "java",
        "query": "Find Eventual Safe States",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i+j+1]);\n\t\t\t}\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tint[] path = new int[n];\n\t\tint[] path_length = new int[n];\n\t\tint[] path_index = new int[n];\n\t\tint[] path_count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tif(!find_path(i, graph, visited, path, path_length, path_index, path_count)){\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(path[i] + \" \");\n\t\t}\n\t}\n\tpublic static boolean find_path(int start, int[][] graph, int[] visited, int[] path, int[] path_length, int[] path_index, int[] path_count){\n\t\tif(visited[start] == 1){\n\t\t\treturn true;\n\t\t}\n\t\tvisited[start] = 1;\n\t\tpath[path_length[start]] = start;\n\t\tpath_length[start]++;\n\t\tfor(int i = 0; i < graph[start].length; i++){\n\t\t\tif(graph[start][i] == 1){\n\t\t\t\tif(visited[i] == 0){\n\t\t\t\t\tif(find_path(i, graph,\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i+j+1]);\n\t\t\t}\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tint[] path = new int[n];\n\t\tint[] path_length = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tif(dfs(i, graph, visited, path, path_length)){\n\t\t\t\t\tSystem.out.println(\"YES\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"NO\");\n\t}\n\tpublic\n\tstatic boolean dfs(int i, int[][] graph, int[] visited, int[] path, int[] path_length){\n\t\tif(visited[i] == 1){\n\t\t\treturn true;\n\t\t}\n\t\tvisited[i] = 1;\n\t\tpath[i] = 1;\n\t\tpath_length[i] = 1;\n\t\tfor(int j = 0; j < graph[i].length; j++){\n\t\t\tif(graph[i][j] == 1){\n\t\t\t\tif(path[j] == 1){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tif(dfs(j, graph, visited, path, path_length)){\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpath[i] = 0;\n\t\treturn false;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i+1+j]);\n\t\t\t}\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tint[] stack = new int[n];\n\t\tint top = -1;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tif(!isSafe(i, graph, visited, stack, top)){\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t}\n\tpublic\n\tstatic boolean isSafe(int i, int[][] graph, int[] visited, int[] stack, int top){\n\t\tif(visited[i] == 1){\n\t\t\treturn false;\n\t\t}\n\t\tif(visited[i] == 2){\n\t\t\treturn true;\n\t\t}\n\t\tvisited[i] = 1;\n\t\tstack[++top] = i;\n\t\tfor(int j = 0; j < graph[i].length; j++){\n\t\t\tif(graph[i][j] == 1){\n\t\t\t\tif(!isSafe(j, graph, visited, stack, top)){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvisited[i] = 2;\n\t\ttop--;\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i*n+j+1]);\n\t\t\t}\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tint[] color = new int[n];\n\t\tint[] parent = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tif(!isSafe(i, graph, visited, color, parent)){\n\t\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t}\n\tpublic static boolean isSafe(int i, int[][] graph, int[] visited, int[] color, int[] parent){\n\t\tif(visited[i] == 1){\n\t\t\treturn true;\n\t\t}\n\t\tvisited[i] = 1;\n\t\tfor(int j = 0; j < graph[i].length; j++){\n\t\t\tif(graph[i][j] == 1){\n\t\t\t\tif(color[j] == 0){\n\t\t\t\t\tcolor[j] = 1;\n\t\t\t\t\tparent[j] = i;\n\t\t\t\t\tif(!isSafe(j, graph, visited, color, parent)){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(color[j] == 1){\n\t\t\t\t\tif(parent[i] != j){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i*n+j+1]);\n\t\t\t}\n\t\t}\n\t\tint[] visited = new int[n];\n\t\tint[] path = new int[n];\n\t\tint[] path_length = new int[n];\n\t\tint[] path_index = new int[n];\n\t\tint[] path_count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tif(!findPath(i, graph, visited, path, path_length, path_index, path_count)){\n\t\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"YES\");\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(path[i]+\" \");\n\t\t}\n\t}\n\tpublic static boolean findPath(int start, int[][] graph, int[] visited, int[] path, int[] path_length, int[] path_index, int[] path_count){\n\t\tvisited[start] = 1;\n\t\tpath[path_length[start]++] = start;\n\t\tfor(int i = 0; i < graph[start].length; i++){\n\t\t\tif(graph[start][i] == 1){\n\t\t\t\tif(visited[i] == 0){\n\t\t\t\t\tif(!findPath(i, graph, visited, path, path_length, path_index, path_count)){\n\t\t\t\t\t\treturn false;\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i*n+j+1]);\n\t\t\t}\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(!isSafe(graph, colors, i)){\n\t\t\t\tSystem.out.println(\"No\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Yes\");\n\t}\n\tpublic static boolean isSafe(int[][] graph, int[] colors, int vertex){\n\t\tif(colors[vertex] == 1){\n\t\t\treturn true;\n\t\t}\n\t\tif(colors[vertex] == 2){\n\t\t\treturn false;\n\t\t}\n\t\tcolors[vertex] = 1;\n\t\tfor(int i = 0; i < graph[vertex].length; i++){\n\t\t\tif(graph[vertex][i] == 1 && !isSafe(graph, colors, i)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tcolors[vertex] = 2;\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i+1].charAt(j) + \"\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(findEventualSafeStates(graph));\n\t}\n\tpublic static int findEventualSafeStates(int[][] graph){\n\t\tint n = graph.length;\n\t\tint[] visited = new int[n];\n\t\tint[] color = new int[n];\n\t\tint[] parent = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tif(!isSafe(i, graph, visited, color, parent)){\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn 1;\n\t}\n\tpublic static boolean isSafe(int i, int[][] graph, int[] visited, int[] color, int[] parent){\n\t\tint n = graph.length;\n\t\tif(visited[i] == 1){\n\t\t\treturn true;\n\t\t}\n\t\tvisited[i] = 1;\n\t\tfor(int j = 0; j < n; j++){\n\t\t\tif(graph[i][j] == 1){\n\t\t\t\tif(visited[j] == 0){\n\t\t\t\t\tif(!isSafe(j, graph, visited, color, parent)){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if(color[j] == 0){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcolor[i] = 1\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i+1+j]);\n\t\t\t}\n\t\t}\n\t\tint[] colors = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(!isSafe(graph, colors, i)){\n\t\t\t\tSystem.out.println(\"NO\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"YES\");\n\t}\n\tpublic static boolean isSafe(int[][] graph, int[] colors, int vertex){\n\t\tif(colors[vertex] == 1){\n\t\t\treturn true;\n\t\t}\n\t\tif(colors[vertex] == 2){\n\t\t\treturn false;\n\t\t}\n\t\tcolors[vertex] = 1;\n\t\tfor(int i = 0; i < graph[vertex].length; i++){\n\t\t\tif(graph[vertex][i] == 1 && !isSafe(graph, colors, i)){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tcolors[vertex] = 2;\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint[][] graph = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tgraph[i][j] = Integer.parseInt(args[i*m+j+2]);\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tdp[i][j] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t}\n\t\tdp[0][0] = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(dp[i][j] != Integer.MAX_VALUE){\n\t\t\t\t\tif(i-1 >= 0 && j-1 >= 0 && graph[i-1][j-1] == 1){\n\t\t\t\t\t\tdp[i-1][j-1] = Math.min(dp[i-1][j-1], dp[i][j]+1);\n\t\t\t\t\t}\n\t\t\t\t\tif(i-1 >= 0 && graph[i-1][j] == 1){\n\t\t\t\t\t\tdp[i-1][j] = Math.min(dp[i-1][j], dp[i][j]+1);\n\t\t\t\t\t}\n\t\t\t\t\tif(i-1 >= 0 && j+1 < m && graph[i-1][j+1] == 1){\n\t\t\t\t\t\tdp[i-1][j+1] = Math.min(dp[i-1][j+1], dp[i][j]+1);\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint[][] graph = new int[n][n];\n\t\tgraph[0][1] = 1;\n\t\tgraph[0][2] = 1;\n\t\tgraph[1][2] = 1;\n\t\tgraph[2][3] = 1;\n\t\tgraph[3][4] = 1;\n\t\tgraph[4][0] = 1;\n\t\tgraph[4][1] = 1;\n\t\tgraph[4][2] = 1;\n\t\tgraph[4][3] = 1;\n\t\tgraph[4][4] = 1;\n\t\tint[] visited = new int[n];\n\t\tint[] result = new int[n];\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(visited[i] == 0){\n\t\t\t\tcount++;\n\t\t\t\tresult = dfs(graph, visited, i, count, result);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n\tpublic static int[] dfs(int[][] graph, int[] visited, int i, int count, int[] result){\n\t\tif(count == 0){\n\t\t\tresult[i] = 1;\n\t\t}\n\t\telse{\n\t\t\tresult[i] = 0;\n\t\t}\n\t\tvisited[i] = 1;\n\t\tfor(int j = 0; j < graph[i].length; j++){\n\t\t\tif(graph[i][j] == 1 && visited[j] == 0){\n\t\t\t\tresult = dfs(graph, visited, j, count - 1, result);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1402",
        "source": "leetcodeTitles",
        "source_id": "506",
        "url": "https://leetcode.com/problems/relative-ranks/",
        "language": "java",
        "query": "Relative Ranks",
        "snippets": [
            "\tList<String> findRelativeRanks(int[] nums) {\n\t\tList<String> res = new ArrayList<>();\n\t\tint[] rank = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\trank[i] = i;\n\t\t}\n\t\tArrays.sort(nums);\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(i == 0){\n\t\t\t\tres.add(\"Gold Medal\");\n\t\t\t}else if(i == 1){\n\t\t\t\tres.add(\"Silver Medal\");\n\t\t\t}else if(i == 2){\n\t\t\t\tres.add(\"Bronze Medal\");\n\t\t\t}else{\n\t\t\t\tres.add(String.valueOf(i+1));\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tfor(int j = 0; j < nums.length; j++){\n\t\t\t\tif(nums[i] == nums[j]){\n\t\t\t\t\trank[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tres.set(rank[i], res.get(i));\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString[] findRelativeRanks(int[] nums) {\n\t\tString[] res = new String[nums.length];\n\t\tint[] temp = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\ttemp[i] = nums[i];\n\t\t}\n\t\tArrays.sort(temp);\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(i == 0){\n\t\t\t\tres[i] = \"Gold Medal\";\n\t\t\t}\n\t\t\telse if(i == 1){\n\t\t\t\tres[i] = \"Silver Medal\";\n\t\t\t}\n\t\t\telse if(i == 2){\n\t\t\t\tres[i] = \"Bronze Medal\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres[i] = String.valueOf(i+1);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tfor(int j = 0; j < nums.length; j++){\n\t\t\t\tif(temp[i] == nums[j]){\n\t\t\t\t\tres[j] = res[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tString[] findRelativeRanks(int[] nums){\n\t\tint[] rank = new int[nums.length];\n\t\tint[] copy = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tcopy[i] = nums[i];\n\t\t}\n\t\tArrays.sort(copy);\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tfor(int j = 0; j < nums.length; j++){\n\t\t\t\tif(copy[i] == nums[j]){\n\t\t\t\t\trank[j] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tString[] result = new String[nums.length];\n\t\tif(rank[0] == 0){\n\t\t\tresult[0] = \"Gold Medal\";\n\t\t}\n\t\telse if(rank[0] == 1){\n\t\t\tresult[0] = \"Silver Medal\";\n\t\t}\n\t\telse if(rank[0] == 2){\n\t\t\tresult[0] = \"Bronze Medal\";\n\t\t}\n\t\telse{\n\t\t\tresult[0] = Integer.toString(rank[0] + 1);\n\t\t}\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tif(rank[i] == 0){\n\t\t\t\tresult[i] = \"Gold Medal\";\n\t\t\t}\n\t\t\telse if(rank[i] == 1){\n\t\t\t\tresult[i] = \"Silver Medal\";\n\t\t\t}\n\t\t\telse if(rank[i] == 2){\n\t\t\t\tresult[i] = \"Bronze Medal\";\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult[i] = Integer.toString(rank[i] + 1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] a = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] b = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] c = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] d = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] e = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] f = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] g = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] h = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] i = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] j = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] k = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] l = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] m = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] n = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] o = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] p = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] q = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] r = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] s = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] t = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] u = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] v = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] w = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] x = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] y = {\"bob\", \"kate\", \"tom\"};\n\t\tString[] z = {\"bob\", \"kate\",\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {4,5,4,2,1};\n\t\tint[] arr2 = {5,4,3,2,1};\n\t\tint[] arr3 = {1,2,3,4,5};\n\t\tint[] arr4 = {1,1,1,1,1};\n\t\tint[] arr5 = {1,1,1,1,1,1};\n\t\tint[] arr6 = {1,1,1,1,1,1,1};\n\t\tint[] arr7 = {1,1,1,1,1,1,1,1};\n\t\tint[] arr8 = {1,1,1,1,1,1,1,1,1};\n\t\tint[] arr9 = {1,1,1,1,1,1,1,1,1,1};\n\t\tint[] arr10 = {1,1,1,1,1,1,1,1,1,1,1};\n\t\tint[] arr11 = {1,1,1,1,1,1,1,1,1,1,1,1};\n\t\tint[] arr12 = {1,1,1,1,1,1,1,1,1,1,1,1,1};\n\t\tint[] arr13 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n\t\tint[] arr14 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n\t\tint[] arr15 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n\t\tint[] arr16 = {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};\n\t\tint[] arr17 = {1,1,1,1,1,1,1,1,1,1,1,\n"
        ],
        "results": 8
    },
    {
        "id": "1403",
        "source": "leetcodeTitles",
        "source_id": "1157",
        "url": "https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/",
        "language": "java",
        "query": "Number of Dice Rolls With Target Sum",
        "snippets": [
            "\tstatic int countWithTargetSum(int[] dice, int targetSum){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < dice.length; i++){\n\t\t\tfor(int j = 0; j < dice.length; j++){\n\t\t\t\tif(i != j && dice[i] + dice[j] == targetSum){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static void main(String[] args){\n\t\tint[] dice = {1,2,3,4,5,6};\n\t\tint target = 3;\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < dice.length; i++){\n\t\t\tsum += dice[i];\n\t\t}\n\t\tif(sum == target){\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tfor(int i = 0; i < dice.length; i++){\n\t\t\t\tfor(int j = 0; j < dice.length; j++){\n\t\t\t\t\tif(i != j){\n\t\t\t\t\t\tint[] newDice = new int[dice.length - 1];\n\t\t\t\t\t\tint newSum = 0;\n\t\t\t\t\t\tint k = 0;\n\t\t\t\t\t\tfor(int l = 0; l < dice.length; l++){\n\t\t\t\t\t\t\tif(l != i && l != j){\n\t\t\t\t\t\t\t\tnewDice[k] = dice[l];\n\t\t\t\t\t\t\t\tk++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(int l = 0; l < newDice.length; l++){\n\t\t\t\t\t\t\tnewSum += newDice[l];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(newSum == target){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static void main(String[] args){\n\t\tint[] dice = {1,2,3,4,5,6};\n\t\tint target = 3;\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n\t\tint ggg = 0;\n\t\tint h\n",
            "\tstatic int countRolls(int d, int f, int target){\n\t\tint[][] dp = new int[d+1][target+1];\n\t\tfor(int i=0;i<=d;i++){\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor(int i=1;i<=d;i++){\n\t\t\tfor(int j=1;j<=target;j++){\n\t\t\t\tdp[i][j] = dp[i-1][j];\n\t\t\t\tif(j>=f){\n\t\t\t\t\tdp[i][j] += dp[i-1][j-f];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[d][target];\n\t}\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(countRolls(1,1,1));\n\t}\n}\n",
            "\tstatic int countRolls(int d, int f, int target){\n\t\tint[][] dp = new int[d+1][target+1];\n\t\tfor(int i=0;i<=d;i++){\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor(int i=1;i<=d;i++){\n\t\t\tfor(int j=1;j<=target;j++){\n\t\t\t\tdp[i][j] = dp[i-1][j];\n\t\t\t\tif(j>=f){\n\t\t\t\t\tdp[i][j] += dp[i-1][j-f];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[d][target];\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static void main(String[] args){\n\t\tint[] dice = {1,1,1,1,1};\n\t\tint target = 3;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < dice.length; i++){\n\t\t\tsum += dice[i];\n\t\t}\n\t\tif(sum == target){\n\t\t\tcount++;\n\t\t}\n\t\telse{\n\t\t\tfor(int i = 0; i < dice.length; i++){\n\t\t\t\tfor(int j = 0; j < dice.length; j++){\n\t\t\t\t\tif(i != j){\n\t\t\t\t\t\tint[] newDice = new int[dice.length - 1];\n\t\t\t\t\t\tint index = 0;\n\t\t\t\t\t\tfor(int k = 0; k < dice.length; k++){\n\t\t\t\t\t\t\tif(k != i && k != j){\n\t\t\t\t\t\t\t\tnewDice[index] = dice[k];\n\t\t\t\t\t\t\t\tindex++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tint newSum = 0;\n\t\t\t\t\t\tfor(int k = 0; k < newDice.length; k++){\n\t\t\t\t\t\t\tnewSum += newDice[k];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(newSum == target){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic int numDiceRollsWithTargetSum(int dice, int sides, int target) {\n\t\tint[][] dp = new int[dice+1][target+1];\n\t\tfor(int i=0;i<=dice;i++){\n\t\t\tdp[i][0] = 1;\n\t\t}\n\t\tfor(int i=1;i<=dice;i++){\n\t\t\tfor(int j=1;j<=target;j++){\n\t\t\t\tfor(int k=1;k<=sides;k++){\n\t\t\t\t\tif(j-k>=0){\n\t\t\t\t\t\tdp[i][j] += dp[i-1][j-k];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[dice][target];\n\t}\n}\n",
            "\tstatic int countRolls(int d, int f, int t){\n\t\tif(d==0)\n\t\t\treturn 0;\n\t\tif(f==t)\n\t\t\treturn 1;\n\t\treturn countRolls(d-1,f,t)+countRolls(d-1,f+f,t);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1404",
        "source": "leetcodeTitles",
        "source_id": "949",
        "url": "https://leetcode.com/problems/largest-time-for-given-digits/",
        "language": "java",
        "query": "Largest Time for Given Digits",
        "snippets": [
            "\tstatic String largestTime(int[] A){\n\t\tString res = \"\";\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tfor(int j = 0; j < A.length; j++){\n\t\t\t\tif(i != j){\n\t\t\t\t\tif(A[i] * 10 + A[j] <= 23){\n\t\t\t\t\t\tres = String.format(\"%02d:%02d\", A[i] * 10 + A[j], A[i] * 10 + A[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic String largestTime(int[] A){\n\t\tString res = \"\";\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tfor(int j = 0; j < A.length; j++){\n\t\t\t\tif(i != j){\n\t\t\t\t\tif(A[i] * 10 + A[j] <= 23){\n\t\t\t\t\t\tres = (A[i] * 10 + A[j]) + \":\" + (A[i] * 10 + A[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic String largestTime(int[] A){\n\t\tString res = \"\";\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tfor(int j = 0; j < A.length; j++){\n\t\t\t\tif(i != j){\n\t\t\t\t\tfor(int k = 0; k < A.length; k++){\n\t\t\t\t\t\tif(i != k && j != k){\n\t\t\t\t\t\t\tfor(int l = 0; l < A.length; l++){\n\t\t\t\t\t\t\t\tif(i != l && j != l && k != l){\n\t\t\t\t\t\t\t\t\tif(A[i] * 10 + A[j] < 24 && A[k] * 10 + A[l] < 60){\n\t\t\t\t\t\t\t\t\t\tres = String.format(\"%02d:%02d\", A[i] * 10 + A[j], A[k] * 10 + A[l]);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic String largestTime(int[] A){\n\t\tString res = \"\";\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tfor(int j = 0; j < A.length; j++){\n\t\t\t\tif(i != j){\n\t\t\t\t\tint hour = A[i] * 10 + A[j];\n\t\t\t\t\tif(hour < 24){\n\t\t\t\t\t\tfor(int k = 0; k < A.length; k++){\n\t\t\t\t\t\t\tif(k != i && k != j){\n\t\t\t\t\t\t\t\tint minute = A[k] * 10;\n\t\t\t\t\t\t\t\tif(minute < 60){\n\t\t\t\t\t\t\t\t\tres = hour + \":\" + minute;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic String largestTime(int[] A){\n\t\tString res = \"\";\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tfor(int j = 0; j < A.length; j++){\n\t\t\t\tif(i != j){\n\t\t\t\t\tint h = A[i] * 10 + A[j];\n\t\t\t\t\tif(h < 24){\n\t\t\t\t\t\tfor(int k = 0; k < A.length; k++){\n\t\t\t\t\t\t\tif(k != i && k != j){\n\t\t\t\t\t\t\t\tint m = A[k];\n\t\t\t\t\t\t\t\tif(m < 60){\n\t\t\t\t\t\t\t\t\tres = String.format(\"%02d:%02d\", h, m);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic String largestTime(int[] A) {\n\t\tString res = \"\";\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tfor (int j = 0; j < A.length; j++) {\n\t\t\t\tif (i != j) {\n\t\t\t\t\tfor (int k = 0; k < A.length; k++) {\n\t\t\t\t\t\tif (k != i && k != j) {\n\t\t\t\t\t\t\tint hour = A[i] * 10 + A[j];\n\t\t\t\t\t\t\tint minute = A[k];\n\t\t\t\t\t\t\tif (hour < 24 && minute < 60) {\n\t\t\t\t\t\t\t\tres = hour + \":\" + minute;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic String largestTime(int[] A){\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tfor(int j = 0; j < A.length; j++){\n\t\t\t\tfor(int k = 0; k < A.length; k++){\n\t\t\t\t\tfor(int l = 0; l < A.length; l++){\n\t\t\t\t\t\tif(i != j && i != k && i != l && j != k && j != l && k != l){\n\t\t\t\t\t\t\tint hour = A[i] * 10 + A[j];\n\t\t\t\t\t\t\tint minute = A[k] * 10 + A[l];\n\t\t\t\t\t\t\tif(hour < 24 && minute < 60){\n\t\t\t\t\t\t\t\tString temp = hour + \":\" + minute;\n\t\t\t\t\t\t\t\tif(temp.compareTo(result) > 0){\n\t\t\t\t\t\t\t\t\tresult = temp;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic String largestTime(int[] A) {\n\t\tString ans = \"\";\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tfor (int j = 0; j < A.length; j++) {\n\t\t\t\tfor (int k = 0; k < A.length; k++) {\n\t\t\t\t\tfor (int l = 0; l < A.length; l++) {\n\t\t\t\t\t\tif (i == j || i == k || i == l || j == k || j == l || k == l)\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\tint h = A[i] * 10 + A[j];\n\t\t\t\t\t\tint m = A[k] * 10 + A[l];\n\t\t\t\t\t\tif (h < 24 && m < 60) {\n\t\t\t\t\t\t\tString s = String.format(\"%02d:%02d\", h, m);\n\t\t\t\t\t\t\tif (s.compareTo(ans) > 0)\n\t\t\t\t\t\t\t\tans = s;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic String getLargestTime(int[] A){\n\t\tString res = \"\";\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tfor(int j = 0; j < A.length; j++){\n\t\t\t\tfor(int k = 0; k < A.length; k++){\n\t\t\t\t\tif(i != j && i != k && j != k){\n\t\t\t\t\t\tint hour = A[i] * 10 + A[j];\n\t\t\t\t\t\tint minute = A[k] * 10 + A[(i+1)%3];\n\t\t\t\t\t\tint second = A[(j+1)%3] * 10 + A[(k+1)%3];\n\t\t\t\t\t\tif(hour < 24 && minute < 60 && second < 60){\n\t\t\t\t\t\t\tString time = String.format(\"%02d:%02d:%02d\", hour, minute, second);\n\t\t\t\t\t\t\tif(time.compareTo(res) > 0)\n\t\t\t\t\t\t\t\tres = time;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1405",
        "source": "leetcodeTitles",
        "source_id": "733",
        "url": "https://leetcode.com/problems/flood-fill/",
        "language": "java",
        "query": "Flood Fill",
        "snippets": [
            "\tvoid floodFill(int[][] image, int sr, int sc, int newColor){\n\t\tif(image[sr][sc] == newColor) return;\n\t\tint oldColor = image[sr][sc];\n\t\tdfs(image, sr, sc, oldColor, newColor);\n\t}\n\tpublic\n\tvoid dfs(int[][] image, int sr, int sc, int oldColor, int newColor){\n\t\tif(sr < 0 || sr >= image.length || sc < 0 || sc >= image[0].length || image[sr][sc] != oldColor) return;\n\t\timage[sr][sc] = newColor;\n\t\tdfs(image, sr + 1, sc, oldColor, newColor);\n\t\tdfs(image, sr - 1, sc, oldColor, newColor);\n\t\tdfs(image, sr, sc + 1, oldColor, newColor);\n\t\tdfs(image, sr, sc - 1, oldColor, newColor);\n\t}\n}\n",
            "\tvoid floodFill(int[][] image, int sr, int sc, int newColor){\n\t\tif(image[sr][sc] == newColor) return;\n\t\tint oldColor = image[sr][sc];\n\t\timage[sr][sc] = newColor;\n\t\tif(sr > 0 && image[sr-1][sc] == oldColor) floodFill(image, sr-1, sc, newColor);\n\t\tif(sr < image.length-1 && image[sr+1][sc] == oldColor) floodFill(image, sr+1, sc, newColor);\n\t\tif(sc > 0 && image[sr][sc-1] == oldColor) floodFill(image, sr, sc-1, newColor);\n\t\tif(sc < image[0].length-1 && image[sr][sc+1] == oldColor) floodFill(image, sr, sc+1, newColor);\n\t}\n}\n",
            "\tvoid floodFill(int[][] image, int sr, int sc, int newColor){\n\t\tif(image[sr][sc] == newColor) return;\n\t\tint oldColor = image[sr][sc];\n\t\timage[sr][sc] = newColor;\n\t\tif(sr-1 >= 0 && image[sr-1][sc] == oldColor)\n\t\t\tfloodFill(image, sr-1, sc, newColor);\n\t\tif(sr+1 < image.length && image[sr+1][sc] == oldColor)\n\t\t\tfloodFill(image, sr+1, sc, newColor);\n\t\tif(sc-1 >= 0 && image[sr][sc-1] == oldColor)\n\t\t\tfloodFill(image, sr, sc-1, newColor);\n\t\tif(sc+1 < image[0].length && image[sr][sc+1] == oldColor)\n\t\t\tfloodFill(image, sr, sc+1, newColor);\n\t}\n}\n",
            "\tstatic void floodFill(int[][] image, int sr, int sc, int newColor){\n\t\tif(image[sr][sc] == newColor) return;\n\t\tint oldColor = image[sr][sc];\n\t\timage[sr][sc] = newColor;\n\t\tif(sr > 0 && image[sr-1][sc] == oldColor) floodFill(image, sr-1, sc, newColor);\n\t\tif(sr < image.length-1 && image[sr+1][sc] == oldColor) floodFill(image, sr+1, sc, newColor);\n\t\tif(sc > 0 && image[sr][sc-1] == oldColor) floodFill(image, sr, sc-1, newColor);\n\t\tif(sc < image[0].length-1 && image[sr][sc+1] == oldColor) floodFill(image, sr, sc+1, newColor);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1406",
        "source": "leetcodeTitles",
        "source_id": "926",
        "url": "https://leetcode.com/problems/flip-string-to-monotone-increasing/",
        "language": "java",
        "query": "Flip String to Monotone Increasing",
        "snippets": [
            "\tString flipString(String A){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = A.length()-1; i >= 0; i--){\n\t\t\tsb.append(A.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tString flipString2(String A){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = A.length()-1; i >= 0; i--){\n\t\t\tsb.append(A.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tString flipString3(String A){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = A.length()-1; i >= 0; i--){\n\t\t\tsb.append(A.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tString flipString4(String A){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = A.length()-1; i >= 0; i--){\n\t\t\tsb.append(A.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tString flipString5(String A){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = A.length()-1; i >= 0; i--){\n\t\t\tsb.append(A.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tString flipString6(String A){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = A.length()-1; i >= 0; i--){\n\t\t\tsb.append(A.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tString flipString7(String A){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(\n",
            "\tString flipString(String A){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\tint j = A.length()-1;\n\t\twhile(i<=j){\n\t\t\tsb.append(A.charAt(j));\n\t\t\tsb.append(A.charAt(i));\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString flipString(String A) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\tint j = A.length() - 1;\n\t\twhile (i < j) {\n\t\t\tsb.append(A.charAt(j));\n\t\t\tsb.append(A.charAt(i));\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tif (i == j) {\n\t\t\tsb.append(A.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString flipString(String s){\n\t\tStringBuilder sb = new StringBuilder(s);\n\t\tint i = 0;\n\t\tint j = sb.length()-1;\n\t\twhile(i<j){\n\t\t\tchar temp = sb.charAt(i);\n\t\t\tsb.setCharAt(i, sb.charAt(j));\n\t\t\tsb.setCharAt(j, temp);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString flipString(String A){\n\t\tStringBuilder sb = new StringBuilder(A);\n\t\tint i = 0;\n\t\tint j = A.length() - 1;\n\t\twhile(i < j){\n\t\t\tchar temp = sb.charAt(i);\n\t\t\tsb.setCharAt(i, sb.charAt(j));\n\t\t\tsb.setCharAt(j, temp);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tstatic String flip(String s){\n\t\tStringBuilder sb = new StringBuilder(s);\n\t\tfor(int i = 0; i < sb.length()/2; i++){\n\t\t\tchar temp = sb.charAt(i);\n\t\t\tsb.setCharAt(i, sb.charAt(sb.length()-1-i));\n\t\t\tsb.setCharAt(sb.length()-1-i, temp);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tstatic String flip2(String s){\n\t\tStringBuilder sb = new StringBuilder(s);\n\t\tfor(int i = 0; i < sb.length()/2; i++){\n\t\t\tchar temp = sb.charAt(i);\n\t\t\tsb.setCharAt(i, sb.charAt(sb.length()-1-i));\n\t\t\tsb.setCharAt(sb.length()-1-i, temp);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tstatic String flip3(String s){\n\t\tStringBuilder sb = new StringBuilder(s);\n\t\tfor(int i = 0; i < sb.length()/2; i++){\n\t\t\tchar temp = sb.charAt(i);\n\t\t\tsb.setCharAt(i, sb.charAt(sb.length()-1-i));\n\t\t\tsb.setCharAt(sb.length()-1-i, temp);\n\t\t}\n\t\treturn sb.toString();\n\t}\n\tpublic\n\tstatic String flip4(String s){\n\t\tStringBuilder sb = new StringBuilder(s);\n\t\tfor(int i = 0; i < sb.length()/2; i++){\n\t\t\tchar temp = sb.charAt(i);\n\t\t\tsb.setCharAt(i, sb.charAt(sb.length()-1-i));\n\t\t\tsb.setCharAt(sb.length()-1-i, temp);\n",
            "\tstatic String flipStringToMonotoneIncreasing(String s){\n\t\tStringBuilder sb = new StringBuilder(s);\n\t\tint i = 0;\n\t\tint j = s.length()-1;\n\t\twhile(i<j){\n\t\t\tif(sb.charAt(i)>sb.charAt(j)){\n\t\t\t\tsb.setCharAt(i,sb.charAt(j));\n\t\t\t\tsb.setCharAt(j,sb.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1407",
        "source": "leetcodeTitles",
        "source_id": "1545",
        "url": "https://leetcode.com/problems/find-kth-bit-in-nth-binary-string/",
        "language": "java",
        "query": "Find Kth Bit in Nth Binary String",
        "snippets": [
            "\tstatic int findKthBit(int n, int k){\n\t\tint num = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tnum = num << 1;\n\t\t\tnum = num | 1;\n\t\t}\n\t\treturn (num >> (n - k)) & 1;\n\t}\n}\n",
            "\tstatic int findKthBit(int n, int k){\n\t\tint num = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tnum = num * 2 + 1;\n\t\t}\n\t\treturn num >> (n - k);\n\t}\n}\n",
            "\tstatic int findKthBit(int n, int k) {\n\t\tint[] arr = new int[n];\n\t\tarr[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tarr[i] = arr[i-1] * 2;\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\tint index = k - 1;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(index < arr[i]){\n\t\t\t\tcount = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tindex -= arr[i];\n\t\t}\n\t\tint result = 0;\n\t\tfor(int i = 0; i < count; i++){\n\t\t\tresult += arr[i];\n\t\t}\n\t\tresult += index + 1;\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int findKthBit(int n, int k) {\n\t\tint mask = 1 << (n - 1);\n\t\twhile (k > 0) {\n\t\t\tif ((mask & n) > 0) {\n\t\t\t\tk--;\n\t\t\t}\n\t\t\tmask >>= 1;\n\t\t}\n\t\treturn (mask & n) > 0 ? 1 : 0;\n\t}\n}\n",
            "\tstatic int findKthBit(int n, int k) {\n\t\tint num = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tnum = num * 2 + 1;\n\t\t}\n\t\tint count = 0;\n\t\twhile (num > 0) {\n\t\t\tif (num % 2 == 1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif (count == k) {\n\t\t\t\treturn num % 2;\n\t\t\t}\n\t\t\tnum /= 2;\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tstatic int findKthBit(int n, int k){\n\t\tint[] bits = new int[n+1];\n\t\tbits[0] = 0;\n\t\tbits[1] = 1;\n\t\tfor(int i = 2; i <= n; i++){\n\t\t\tbits[i] = bits[i-1] + bits[i-2];\n\t\t}\n\t\treturn bits[n] & (1<<(k-1));\n\t}\n}\n",
            "\tstatic int findKthBit(int n, int k) {\n\t\tint num = 1;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tnum = num << 1;\n\t\t}\n\t\treturn (num >> (n - k));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1408",
        "source": "leetcodeTitles",
        "source_id": "54",
        "url": "https://leetcode.com/problems/spiral-matrix/",
        "language": "java",
        "query": "Spiral Matrix",
        "snippets": [
            "\tstatic void spiral(int[][] matrix){\n\t\tint row = matrix.length;\n\t\tint col = matrix[0].length;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint count = 0;\n\t\twhile(count < row*col){\n\t\t\twhile(j < col && count < row*col){\n\t\t\t\tSystem.out.print(matrix[i][j] + \" \");\n\t\t\t\tj++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj--;\n\t\t\ti++;\n\t\t\twhile(i < row && count < row*col){\n\t\t\t\tSystem.out.print(matrix[i][j] + \" \");\n\t\t\t\ti++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti--;\n\t\t\tj--;\n\t\t\twhile(j >= 0 && count < row*col){\n\t\t\t\tSystem.out.print(matrix[i][j] + \" \");\n\t\t\t\tj--;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tj++;\n\t\t\ti--;\n\t\t\twhile(i >= 0 && count < row*col){\n\t\t\t\tSystem.out.print(matrix[i][j] + \" \");\n\t\t\t\ti--;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tint[][] matrix = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};\n\t\tspiral(matrix);\n\t}\n}\n",
            "\tstatic void spiral(int[][] matrix){\n\t\tint row = matrix.length;\n\t\tint col = matrix[0].length;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n\t\tint ggg = 0;\n\t\tint hhh = 0;\n\t\tint iii = 0;\n\t\tint jjj =\n",
            "\tstatic void spiral(int[][] matrix){\n\t\tint row = matrix.length;\n\t\tint col = matrix[0].length;\n\t\tint startRow = 0;\n\t\tint startCol = 0;\n\t\tint endRow = row-1;\n\t\tint endCol = col-1;\n\t\twhile(startRow<=endRow && startCol<=endCol){\n\t\t\tfor(int i=startCol;i<=endCol;i++){\n\t\t\t\tSystem.out.print(matrix[startRow][i]+\" \");\n\t\t\t}\n\t\t\tstartRow++;\n\t\t\tfor(int i=startRow;i<=endRow;i++){\n\t\t\t\tSystem.out.print(matrix[i][endCol]+\" \");\n\t\t\t}\n\t\t\tendCol--;\n\t\t\tif(startRow<=endRow){\n\t\t\t\tfor(int i=endCol;i>=startCol;i--){\n\t\t\t\t\tSystem.out.print(matrix[endRow][i]+\" \");\n\t\t\t\t}\n\t\t\t\tendRow--;\n\t\t\t}\n\t\t\tif(startCol<=endCol){\n\t\t\t\tfor(int i=endRow;i>=startRow;i--){\n\t\t\t\t\tSystem.out.print(matrix[i][startCol]+\" \");\n\t\t\t\t}\n\t\t\t\tstartCol++;\n\t\t\t}\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tint[][] matrix = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};\n\t\tspiral(matrix);\n\t}\n}\n",
            "\tstatic void spiral(int[][] matrix){\n\t\tint row = matrix.length;\n\t\tint col = matrix[0].length;\n\t\tint rowStart = 0;\n\t\tint colStart = 0;\n\t\tint rowEnd = row-1;\n\t\tint colEnd = col-1;\n\t\twhile(rowStart<=rowEnd && colStart<=colEnd){\n\t\t\tfor(int i=colStart;i<=colEnd;i++){\n\t\t\t\tSystem.out.print(matrix[rowStart][i]+\" \");\n\t\t\t}\n\t\t\trowStart++;\n\t\t\tfor(int i=rowStart;i<=rowEnd;i++){\n\t\t\t\tSystem.out.print(matrix[i][colEnd]+\" \");\n\t\t\t}\n\t\t\tcolEnd--;\n\t\t\tif(rowStart<=rowEnd){\n\t\t\t\tfor(int i=colEnd;i>=colStart;i--){\n\t\t\t\t\tSystem.out.print(matrix[rowEnd][i]+\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\trowEnd--;\n\t\t\tif(colStart<=colEnd){\n\t\t\t\tfor(int i=rowEnd;i>=rowStart;i--){\n\t\t\t\t\tSystem.out.print(matrix[i][colStart]+\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcolStart++;\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tint[][] matrix = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};\n\t\tspiral(matrix);\n\t}\n}\n",
            "\tstatic void spiral(int[][] matrix){\n\t\tint row = matrix.length;\n\t\tint col = matrix[0].length;\n\t\tint rowStart = 0;\n\t\tint rowEnd = row-1;\n\t\tint colStart = 0;\n\t\tint colEnd = col-1;\n\t\twhile(rowStart<=rowEnd && colStart<=colEnd){\n\t\t\tfor(int i=colStart;i<=colEnd;i++){\n\t\t\t\tSystem.out.print(matrix[rowStart][i]+\" \");\n\t\t\t}\n\t\t\trowStart++;\n\t\t\tfor(int i=rowStart;i<=rowEnd;i++){\n\t\t\t\tSystem.out.print(matrix[i][colEnd]+\" \");\n\t\t\t}\n\t\t\tcolEnd--;\n\t\t\tif(rowStart<=rowEnd){\n\t\t\t\tfor(int i=colEnd;i>=colStart;i--){\n\t\t\t\t\tSystem.out.print(matrix[rowEnd][i]+\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\trowEnd--;\n\t\t\tif(colStart<=colEnd){\n\t\t\t\tfor(int i=rowEnd;i>=rowStart;i--){\n\t\t\t\t\tSystem.out.print(matrix[i][colStart]+\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcolStart++;\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tint[][] matrix = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};\n\t\tspiral(matrix);\n\t}\n}\n",
            "\tstatic void spiral(int[][] matrix){\n\t\tint row = matrix.length;\n\t\tint col = matrix[0].length;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(count < row*col){\n\t\t\twhile(j < col){\n\t\t\t\tSystem.out.print(matrix[i][j]+\" \");\n\t\t\t\tj++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t\twhile(i < row){\n\t\t\t\tSystem.out.print(matrix[i][j]+\" \");\n\t\t\t\ti++;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti--;\n\t\t\tj--;\n\t\t\twhile(j >= 0){\n\t\t\t\tSystem.out.print(matrix[i][j]+\" \");\n\t\t\t\tj--;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti--;\n\t\t\tj++;\n\t\t\twhile(i >= 0){\n\t\t\t\tSystem.out.print(matrix[i][j]+\" \");\n\t\t\t\ti--;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t}\n\tpublic static void main(String[] args){\n\t\tint[][] matrix = {{1,2,3,4},{5,6,7,8},{9,10,11,12},{13,14,15,16}};\n\t\tspiral(matrix);\n\t}\n}\n",
            "\tvoid spiral(int[][] matrix){\n\t\tint row = matrix.length;\n\t\tint col = matrix[0].length;\n\t\tint rowStart = 0;\n\t\tint colStart = 0;\n\t\tint rowEnd = row-1;\n\t\tint colEnd = col-1;\n\t\twhile(rowStart<=rowEnd && colStart<=colEnd){\n\t\t\tfor(int i=colStart;i<=colEnd;i++){\n\t\t\t\tSystem.out.print(matrix[rowStart][i]+\" \");\n\t\t\t}\n\t\t\trowStart++;\n\t\t\tfor(int i=rowStart;i<=rowEnd;i++){\n\t\t\t\tSystem.out.print(matrix[i][colEnd]+\" \");\n\t\t\t}\n\t\t\tcolEnd--;\n\t\t\tif(rowStart<=rowEnd){\n\t\t\t\tfor(int i=colEnd;i>=colStart;i--){\n\t\t\t\t\tSystem.out.print(matrix[rowEnd][i]+\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\trowEnd--;\n\t\t\tif(colStart<=colEnd){\n\t\t\t\tfor(int i=rowEnd;i>=rowStart;i--){\n\t\t\t\t\tSystem.out.print(matrix[i][colStart]+\" \");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcolStart++;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1409",
        "source": "leetcodeTitles",
        "source_id": "842",
        "url": "https://leetcode.com/problems/split-array-into-fibonacci-sequence/",
        "language": "java",
        "query": "Split Array into Fibonacci Sequence",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700124466,8944394323791464,14472334024676221,23416728348467685,37889062373143906,61305790721611591,99194853094755497,160500643816367088,259695496911122585,420196140727489673,679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120,4660046610375530309,7540113804746\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903169,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700884757,8944394323791464,14472334024676221,23416728348467685,37889062373143906,61305790721611591,99194853094755497,160500643816367088,259695496911122585,420196140727489673,679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120,4660046610375530309,7540113804746\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903169,1836311903,2971215073,4807526976,7778742049,12586269025};\n\t\tint[] fib = new int[arr.length];\n\t\tfib[0] = 1;\n\t\tfib[1] = 1;\n\t\tfor(int i = 2; i < arr.length; i++){\n\t\t\tfib[i] = fib[i-1] + fib[i-2];\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == fib[i]){\n\t\t\t\tSystem.out.println(arr[i]);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700124461,8944394323791464,14472334024676221,23416728348467685,37889062373143906,61305790721611591,99194853094755497,160500643816367088,259695496911122585,420196140727489673,679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120,4660046610375530309,7524693431060\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903169,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700884757,8944394323791464,14472334024676221,23416728348467685,37889062373143906};\n\t\tint[] fib = new int[arr.length];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint n = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903170,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700884757,8944394323791464,14472334024676221,23416728348467685,37889062373143906,61305790721611591,99194853094755497,160500643816367088,259695496911122585,420196140727489673,679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120,4660046610375530309,7540113804746\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,17711,28657,46368,75025,121393,196418,317811,514229,832040,1346269,2178309,3524578,5702887,9227465,14930352,24157817,39088169,63245986,102334155,165580141,267914296,433494437,701408733,1134903169,1836311903,2971215073,4807526976,7778742049,12586269025,20365011074,32951280099,53316291173,86267571272,139583862445,225851433717,365435296162,591286729879,956722026041,1548008755920,2504730781961,4052739537881,6557470319842,10610209857723,17167680177565,27777890035288,44945570212853,72723460248141,117669030460994,190392490709135,308061521170129,498454011879264,806515533049393,1304969544928657,2111485077978050,3416454622906707,5527939700124461,8944394323791464,14472334024676221,23416728348467685,37889062373143906,61305790721611591,99194853094755497,160500643816367088,259695496911122585,420196140727489673,679891637638612258,1100087778366101931,1779979416004714189,2880067194370816120,4660046610375530309,7540113804746\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] fib = new int[arr.length];\n\t\tint i = 0;\n\t\tint j = 1;\n\t\tint k = 0;\n\t\twhile(k<arr.length){\n\t\t\tfib[k] = i;\n\t\t\ti = j;\n\t\t\tj = i + j;\n\t\t\tk++;\n\t\t}\n\t\tfor(int l = 0; l<arr.length; l++){\n\t\t\tSystem.out.print(fib[l] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,1,2,3,5,8,13,21,34,55,89};\n\t\tint[] fib = new int[arr.length];\n\t\tfib[0] = arr[0];\n\t\tfib[1] = arr[1];\n\t\tfor(int i = 2; i < arr.length; i++){\n\t\t\tfib[i] = fib[i-1] + fib[i-2];\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == fib[i]){\n\t\t\t\tSystem.out.print(arr[i] + \" \");\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic int[] splitArray(int[] array){\n\t\tint[] fib = new int[array.length];\n\t\tfib[0] = array[0];\n\t\tfib[1] = array[1];\n\t\tfor(int i = 2; i < array.length; i++){\n\t\t\tfib[i] = fib[i-1] + fib[i-2];\n\t\t}\n\t\tint[] result = new int[array.length];\n\t\tfor(int i = 0; i < array.length; i++){\n\t\t\tresult[i] = fib[i] - array[i];\n\t\t}\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1410",
        "source": "leetcodeTitles",
        "source_id": "167",
        "url": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/",
        "language": "java",
        "query": "Two Sum II - Input Array is Sorted",
        "snippets": [
            "\tint[] twoSum(int[] numbers, int target) {\n\t\tint[] result = new int[2];\n\t\tint i = 0;\n\t\tint j = numbers.length - 1;\n\t\twhile (i < j) {\n\t\t\tif (numbers[i] + numbers[j] == target) {\n\t\t\t\tresult[0] = i + 1;\n\t\t\t\tresult[1] = j + 1;\n\t\t\t\treturn result;\n\t\t\t} else if (numbers[i] + numbers[j] < target) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint[] twoSum(int[] numbers, int target) {\n\t\tint[] result = new int[2];\n\t\tint i = 0;\n\t\tint j = numbers.length - 1;\n\t\twhile (i < j) {\n\t\t\tif (numbers[i] + numbers[j] == target) {\n\t\t\t\tresult[0] = i + 1;\n\t\t\t\tresult[1] = j + 1;\n\t\t\t\tbreak;\n\t\t\t} else if (numbers[i] + numbers[j] < target) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] twoSum(int[] numbers, int target) {\n\t\tint[] result = new int[2];\n\t\tint i = 0;\n\t\tint j = numbers.length - 1;\n\t\twhile (i < j) {\n\t\t\tif (numbers[i] + numbers[j] == target) {\n\t\t\t\tresult[0] = i + 1;\n\t\t\t\tresult[1] = j + 1;\n\t\t\t\tbreak;\n\t\t\t} else if (numbers[i] + numbers[j] < target) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint[] twoSum(int[] numbers, int target) {\n\t\tint[] result = new int[2];\n\t\tint i = 0, j = numbers.length - 1;\n\t\twhile (i < j) {\n\t\t\tif (numbers[i] + numbers[j] == target) {\n\t\t\t\tresult[0] = i + 1;\n\t\t\t\tresult[1] = j + 1;\n\t\t\t\treturn result;\n\t\t\t} else if (numbers[i] + numbers[j] < target) {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1411",
        "source": "leetcodeTitles",
        "source_id": "1518",
        "url": "https://leetcode.com/problems/water-bottles/",
        "language": "java",
        "query": "Water Bottles",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] bottles = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tbottles[i] = Integer.parseInt(args[i+1]);\n\t\t}\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < n){\n\t\t\tif(bottles[i] == 0){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint j = i;\n\t\t\t\twhile(bottles[j] > 0){\n\t\t\t\t\tbottles[j]--;\n\t\t\t\t\tj++;\n\t\t\t\t\tif(j == n){\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] bottles = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tbottles[i] = Integer.parseInt(args[i+1]);\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(bottles[i] == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint j = i;\n\t\t\t\twhile(bottles[j] > 0){\n\t\t\t\t\tbottles[j]--;\n\t\t\t\t\tj++;\n\t\t\t\t\tif(j == n){\n\t\t\t\t\t\tj = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] bottles = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tbottles[i] = Integer.parseInt(args[i+1]);\n\t\t}\n\t\tint total = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ttotal += bottles[i];\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(bottles[i] > 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tint[] newBottles = new int[count];\n\t\tint j = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(bottles[i] > 0){\n\t\t\t\tnewBottles[j] = bottles[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tint[] newBottles2 = new int[count];\n\t\tint k = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(bottles[i] > 0){\n\t\t\t\tnewBottles2[k] = bottles[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t}\n\t\tint[] newBottles3 = new int[count];\n\t\tint l = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(bottles[i] > 0){\n\t\t\t\tnewBottles3[l] = bottles[i];\n\t\t\t\tl++;\n\t\t\t}\n\t\t}\n\t\tint[] newBottles4 = new int[count];\n\t\tint m = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(bottles[i] > 0){\n\t\t\t\tnewBottles4[m] = bottles\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint[] bottles = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tbottles[i] = i + 1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(bottles[0] != 0){\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tif(bottles[i] != 0){\n\t\t\t\t\tbottles[i]--;\n\t\t\t\t\tif(i < n - 1){\n\t\t\t\t\t\tbottles[i + 1]++;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbottles[0]++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint[] bottles = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tbottles[i] = i+1;\n\t\t}\n\t\tint[] water = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\twater[i] = i+1;\n\t\t}\n\t\tint[] result = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tresult[i] = 0;\n\t\t}\n\t\tint count = 0;\n\t\twhile(count < m){\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\tif(bottles[i] == 0){\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif(bottles[i] == water[count]){\n\t\t\t\t\tbottles[i] = 0;\n\t\t\t\t\tresult[count]++;\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tSystem.out.println(result[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint[] bottles = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tbottles[i] = i + 1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(bottles.length > 0){\n\t\t\tint i = 0;\n\t\t\twhile(i < bottles.length){\n\t\t\t\tif(bottles[i] == m){\n\t\t\t\t\tbottles[i] = 0;\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tbottles = removeZeros(bottles);\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n\tpublic static int[] removeZeros(int[] arr){\n\t\tint[] newArr = new int[arr.length];\n\t\tint j = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] != 0){\n\t\t\t\tnewArr[j] = arr[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn newArr;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint[] bottles = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tbottles[i] = Integer.parseInt(args[i+2]);\n\t\t}\n\t\tint[] result = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tresult[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(bottles[i] <= j){\n\t\t\t\t\tresult[j] += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tSystem.out.println(result[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint result = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tresult += m;\n\t\t\tm = m / 2;\n\t\t}\n\t\tSystem.out.println(result);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tans += (i + 1) * (n - i);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = 5;\n\t\tint[] bottles = {1,2,3,4,5};\n\t\tint[] result = new int[n];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tint l = 0;\n\t\tint m = 0;\n\t\tint o = 0;\n\t\tint p = 0;\n\t\tint q = 0;\n\t\tint r = 0;\n\t\tint s = 0;\n\t\tint t = 0;\n\t\tint u = 0;\n\t\tint v = 0;\n\t\tint w = 0;\n\t\tint x = 0;\n\t\tint y = 0;\n\t\tint z = 0;\n\t\tint aa = 0;\n\t\tint bb = 0;\n\t\tint cc = 0;\n\t\tint dd = 0;\n\t\tint ee = 0;\n\t\tint ff = 0;\n\t\tint gg = 0;\n\t\tint hh = 0;\n\t\tint ii = 0;\n\t\tint jj = 0;\n\t\tint kk = 0;\n\t\tint ll = 0;\n\t\tint mm = 0;\n\t\tint nn = 0;\n\t\tint oo = 0;\n\t\tint pp = 0;\n\t\tint qq = 0;\n\t\tint rr = 0;\n\t\tint ss = 0;\n\t\tint tt = 0;\n\t\tint uu = 0;\n\t\tint vv = 0;\n\t\tint ww = 0;\n\t\tint xx = 0;\n\t\tint yy = 0;\n\t\tint zz = 0;\n\t\tint aaa = 0;\n\t\tint bbb = 0;\n\t\tint ccc = 0;\n\t\tint ddd = 0;\n\t\tint eee = 0;\n\t\tint fff = 0;\n\t\tint ggg = 0;\n\t\tint hhh = 0;\n\t\tint iii = 0;\n\t\tint jjj = 0;\n"
        ],
        "results": 10
    },
    {
        "id": "1412",
        "source": "leetcodeTitles",
        "source_id": "2124",
        "url": "https://leetcode.com/problems/check-if-all-as-appears-before-all-bs/",
        "language": "java",
        "query": "Check if All A's Appears Before All B's",
        "snippets": [
            "\tstatic boolean check(String str){\n\t\tint a=0,b=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tif(str.charAt(i)=='A'){\n\t\t\t\ta++;\n\t\t\t}\n\t\t\telse if(str.charAt(i)=='B'){\n\t\t\t\tb++;\n\t\t\t}\n\t\t}\n\t\tif(a>b){\n\t\t\treturn false;\n\t\t}\n\t\telse{\n\t\t\treturn true;\n\t\t}\n\t}\n}\n",
            "\tstatic boolean check(String str){\n\t\tint a=0,b=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tif(str.charAt(i)=='a'){\n\t\t\t\ta++;\n\t\t\t}\n\t\t\telse if(str.charAt(i)=='b'){\n\t\t\t\tb++;\n\t\t\t}\n\t\t}\n\t\tif(a>b){\n\t\t\treturn false;\n\t\t}\n\t\telse{\n\t\t\treturn true;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"aab\";\n\t\tSystem.out.println(str.indexOf(\"a\"));\n\t\tSystem.out.println(str.indexOf(\"b\"));\n\t\tSystem.out.println(str.indexOf(\"a\",1));\n\t\tSystem.out.println(str.indexOf(\"b\",1));\n\t\tSystem.out.println(str.indexOf(\"a\",2));\n\t\tSystem.out.println(str.indexOf(\"b\",2));\n\t}\n}\n",
            "\tstatic boolean check(String[] a, String[] b){\n\t\tint ai = 0;\n\t\tint bi = 0;\n\t\twhile(ai < a.length && bi < b.length){\n\t\t\tif(a[ai].equals(\"a\")){\n\t\t\t\tai++;\n\t\t\t}\n\t\t\tif(b[bi].equals(\"b\")){\n\t\t\t\tbi++;\n\t\t\t}\n\t\t\tif(ai < a.length && bi < b.length){\n\t\t\t\tif(a[ai].equals(\"a\") && b[bi].equals(\"b\")){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean allA(String str){\n\t\tint a=0;\n\t\tint b=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tif(str.charAt(i)=='a'){\n\t\t\t\ta++;\n\t\t\t}\n\t\t\telse if(str.charAt(i)=='b'){\n\t\t\t\tb++;\n\t\t\t}\n\t\t}\n\t\tif(a>b){\n\t\t\treturn false;\n\t\t}\n\t\telse{\n\t\t\treturn true;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"aabb\";\n\t\tint countA = 0;\n\t\tint countB = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == 'a'){\n\t\t\t\tcountA++;\n\t\t\t}\n\t\t\tif(str.charAt(i) == 'b'){\n\t\t\t\tcountB++;\n\t\t\t}\n\t\t}\n\t\tif(countA == countB){\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"aabbbccc\";\n\t\tint a = 0;\n\t\tint b = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == 'a'){\n\t\t\t\ta++;\n\t\t\t}\n\t\t\tif(str.charAt(i) == 'b'){\n\t\t\t\tb++;\n\t\t\t}\n\t\t}\n\t\tif(a > b){\n\t\t\tSystem.out.println(\"Yes\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"No\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"aab\";\n\t\tSystem.out.println(s.matches(\"a*b\"));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1413",
        "source": "leetcodeTitles",
        "source_id": "860",
        "url": "https://leetcode.com/problems/lemonade-change/",
        "language": "java",
        "query": "Lemonae Change",
        "snippets": [
            "\tClazz(){\n\t\tSystem.out.println(\"Clazz\");\n\t}\n}\n",
            "\tClazz(){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n",
            "\tvoid method(){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1414",
        "source": "leetcodeTitles",
        "source_id": "977",
        "url": "https://leetcode.com/problems/squares-of-a-sorted-array/",
        "language": "java",
        "query": "Squares of a Sorted Array",
        "snippets": [
            "\tint[] sortedSquares(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0;\n\t\tint j = A.length - 1;\n\t\tint k = A.length - 1;\n\t\twhile (i <= j) {\n\t\t\tif (Math.abs(A[i]) > Math.abs(A[j])) {\n\t\t\t\tB[k] = A[i] * A[i];\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tB[k] = A[j] * A[j];\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tk--;\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tstatic int[] sortedSquares(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0;\n\t\tint j = A.length - 1;\n\t\tint k = A.length - 1;\n\t\twhile (i <= j) {\n\t\t\tif (A[i] * A[i] <= A[j] * A[j]) {\n\t\t\t\tB[k] = A[i] * A[i];\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tB[k] = A[j] * A[j];\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tk--;\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tstatic int[] sortedSquares(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0;\n\t\tint j = A.length - 1;\n\t\tint k = A.length - 1;\n\t\twhile (i <= j) {\n\t\t\tif (Math.abs(A[i]) > Math.abs(A[j])) {\n\t\t\t\tB[k] = A[i] * A[i];\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tB[k] = A[j] * A[j];\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tk--;\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tint[] sortedSquares(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tB[i] = A[i] * A[i];\n\t\t}\n\t\tArrays.sort(B);\n\t\treturn B;\n\t}\n}\n",
            "\tstatic int[] sortedSquares(int[] A){\n\t\tint[] B = new int[A.length];\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tB[i] = A[i] * A[i];\n\t\t}\n\t\tArrays.sort(B);\n\t\treturn B;\n\t}\n}\n",
            "\tstatic int[] sortedSquares(int[] A) {\n\t\tint[] res = new int[A.length];\n\t\tint i = 0, j = A.length - 1;\n\t\tint k = A.length - 1;\n\t\twhile (i <= j) {\n\t\t\tif (Math.abs(A[i]) > Math.abs(A[j])) {\n\t\t\t\tres[k] = A[i] * A[i];\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tres[k] = A[j] * A[j];\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tk--;\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1415",
        "source": "leetcodeTitles",
        "source_id": "908",
        "url": "https://leetcode.com/problems/smallest-range-i/",
        "language": "java",
        "query": "Smallest Range I",
        "snippets": [
            "\tstatic int smallestRange(int[] arr){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tmin = Math.min(min, arr[i]);\n\t\t\tmax = Math.max(max, arr[i]);\n\t\t}\n\t\tint range = max - min;\n\t\treturn range;\n\t}\n}\n",
            "\tstatic int[] smallestRange(int[] arr){\n\t\tint[] result = new int[2];\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tint minIndex = 0;\n\t\tint maxIndex = 0;\n\t\tint[] index = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tindex[i] = i;\n\t\t}\n\t\tArrays.sort(arr);\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] < min){\n\t\t\t\tmin = arr[i];\n\t\t\t\tminIndex = i;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] > max){\n\t\t\t\tmax = arr[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tresult[0] = min;\n\t\tresult[1] = max;\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[] smallestRange(int[] arr){\n\t\tint[] res = new int[2];\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tint minIndex = 0;\n\t\tint maxIndex = 0;\n\t\tint[] index = new int[arr.length];\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tindex[i] = i;\n\t\t}\n\t\tArrays.sort(arr);\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] < min){\n\t\t\t\tmin = arr[i];\n\t\t\t\tminIndex = i;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] > max){\n\t\t\t\tmax = arr[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tres[0] = min;\n\t\tres[1] = max;\n\t\tif(minIndex > maxIndex){\n\t\t\tres[0] = max;\n\t\t\tres[1] = min;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {4,10,15,24,26};\n\t\tint[] b = {0,9,12,20};\n\t\tint[] c = {5,18,22,30};\n\t\tint[] d = {3,6,20,21};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30};\n\t\tint[] k = {1,2,3,4,\n",
            "\tstatic int[] smallestRange(int[] nums) {\n\t\tint[] result = new int[2];\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tint minIndex = 0;\n\t\tint maxIndex = 0;\n\t\tint[] index = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tindex[i] = i;\n\t\t}\n\t\tArrays.sort(nums);\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] < min){\n\t\t\t\tmin = nums[i];\n\t\t\t\tminIndex = i;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] > max){\n\t\t\t\tmax = nums[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tresult[0] = min;\n\t\tresult[1] = max;\n\t\tif(minIndex > maxIndex){\n\t\t\tresult[0] = max;\n\t\t\tresult[1] = min;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] A = {4, 10, 15, 24, 26};\n\t\tint[] B = {0, 9, 12, 20};\n\t\tint[] C = {5, 18, 22, 30};\n\t\tint[] D = {3, 6, 20, 25};\n\t\tint[] E = {1, 8, 11, 13};\n\t\tint[] F = {2, 7, 12, 14};\n\t\tint[] G = {0, 6, 10, 12};\n\t\tint[] H = {4, 8, 12, 20};\n\t\tint[] I = {0, 4, 12, 20};\n\t\tint[] J = {2, 6, 10, 14};\n\t\tint[] K = {1, 3, 6, 9};\n\t\tint[] L = {2, 4, 8, 10};\n\t\tint[] M = {0, 2, 6, 12};\n\t\tint[] N = {1, 4, 8, 10};\n\t\tint[] O = {3, 6, 9, 12};\n\t\tint[] P = {0, 4, 8, 12};\n\t\tint[] Q = {1, 5, 9, 13};\n\t\tint[] R = {2, 6, 10, 14};\n\t\tint[] S = {3, 7, 11, 15};\n\t\tint[] T = {0, 4, 8, 12};\n\t\tint[] U = {1, 5, 9, 13};\n\t\tint[] V = {2, 6, 10, 14};\n\t\tint[] W = {3, 7, 11, 15};\n\t\tint[] X = {0, 4, 8, 12};\n\t\tint[] Y = {1, 5, 9, 13};\n\t\tint[] Z = {2, 6, 10, 14};\n\t\tint[] AA = {3, 7, 11, 15};\n\t\tint[] BB = {0, 4, 8, 12};\n\t\tint[] CC = {1, 5, 9, 13};\n\t\tint[] DD = {2, 6, 10, 14};\n\t\tint[] EE = {\n",
            "\tint[] smallestRange(int[] nums) {\n\t\tint[] res = new int[2];\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tint minIndex = 0;\n\t\tint maxIndex = 0;\n\t\tint n = nums.length;\n\t\tint[] index = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tindex[i] = i;\n\t\t}\n\t\tArrays.sort(nums);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(nums[i] < min){\n\t\t\t\tmin = nums[i];\n\t\t\t\tminIndex = i;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(nums[i] > max){\n\t\t\t\tmax = nums[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tres[0] = min;\n\t\tres[1] = max;\n\t\tif(minIndex > maxIndex){\n\t\t\tres[0] = max;\n\t\t\tres[1] = min;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\t\tstatic int[] smallestRange(int[] nums){\n\t\t\tint[] result = new int[2];\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tint max = Integer.MIN_VALUE;\n\t\t\tint minIndex = 0;\n\t\t\tint maxIndex = 0;\n\t\t\tint[] sorted = new int[nums.length];\n\t\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\t\tsorted[i] = nums[i];\n\t\t\t}\n\t\t\tArrays.sort(sorted);\n\t\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\t\tif(sorted[i] < min){\n\t\t\t\t\tmin = sorted[i];\n\t\t\t\t\tminIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = nums.length - 1; i >= 0; i--){\n\t\t\t\tif(sorted[i] > max){\n\t\t\t\t\tmax = sorted[i];\n\t\t\t\t\tmaxIndex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[0] = min;\n\t\t\tresult[1] = max;\n\t\t\treturn result;\n\t\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1416",
        "source": "leetcodeTitles",
        "source_id": "1137",
        "url": "https://leetcode.com/problems/n-th-tribonacci-number/",
        "language": "java",
        "query": "N-th Tribonacci Number",
        "snippets": [
            "\tstatic int tribonacci(int n){\n\t\tif(n==0) return 0;\n\t\tif(n==1) return 1;\n\t\tif(n==2) return 1;\n\t\treturn tribonacci(n-1)+tribonacci(n-2)+tribonacci(n-3);\n\t}\n}\n",
            "\tstatic int tribonacci(int n) {\n\t\tif(n==0) return 0;\n\t\tif(n==1) return 1;\n\t\tif(n==2) return 1;\n\t\tint a=0,b=1,c=1;\n\t\tfor(int i=3;i<=n;i++){\n\t\t\tint d=a+b+c;\n\t\t\ta=b;\n\t\t\tb=c;\n\t\t\tc=d;\n\t\t}\n\t\treturn c;\n\t}\n}\n",
            "\tstatic int tribonacci(int n){\n\t\tint[] tribonacci = new int[n+1];\n\t\ttribonacci[0] = 0;\n\t\ttribonacci[1] = 1;\n\t\ttribonacci[2] = 1;\n\t\tfor(int i = 3; i <= n; i++){\n\t\t\ttribonacci[i] = tribonacci[i-1] + tribonacci[i-2] + tribonacci[i-3];\n\t\t}\n\t\treturn tribonacci[n];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1417",
        "source": "leetcodeTitles",
        "source_id": "792",
        "url": "https://leetcode.com/problems/number-of-matching-subsequences/",
        "language": "java",
        "query": "Number of Matching Subsequences",
        "snippets": [
            "\tint numMatchingSubseq(String S, String[] words) {\n\t\tint count = 0;\n\t\tfor(String word : words){\n\t\t\tif(isSubsequence(S, word)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tpublic boolean isSubsequence(String S, String word){\n\t\tint index = 0;\n\t\tfor(int i = 0; i < S.length(); i++){\n\t\t\tif(index >= word.length()){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(S.charAt(i) == word.charAt(index)){\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\treturn index == word.length();\n\t}\n}\n",
            "\tint numMatchingSubseq(String S, String[] words) {\n\t\tint count = 0;\n\t\tfor(String word : words){\n\t\t\tif(isSubsequence(word, S)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tpublic boolean isSubsequence(String word, String S){\n\t\tint i = 0, j = 0;\n\t\twhile(i < S.length() && j < word.length()){\n\t\t\tif(S.charAt(i) == word.charAt(j)){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn j == word.length();\n\t}\n}\n",
            "\tint numMatchingSubseq(String S, String[] words) {\n\t\tint count = 0;\n\t\tfor(String word : words){\n\t\t\tif(isSubsequence(S, word)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tpublic boolean isSubsequence(String S, String word){\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < S.length() && j < word.length()){\n\t\t\tif(S.charAt(i) == word.charAt(j)){\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn i == S.length();\n\t}\n}\n",
            "\tint numMatchingSubseq(String S, String[] words) {\n\t\tint count = 0;\n\t\tfor(String word : words){\n\t\t\tif(isSubseq(S, word)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic boolean isSubseq(String S, String word){\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < S.length() && j < word.length()){\n\t\t\tif(S.charAt(i) == word.charAt(j)){\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn j == word.length();\n\t}\n}\n",
            "\tint numMatchingSubseq(String S, String[] words) {\n\t\tint count = 0;\n\t\tfor (String word : words) {\n\t\t\tif (isSubsequence(S, word))\n\t\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic boolean isSubsequence(String S, String word) {\n\t\tint i = 0, j = 0;\n\t\twhile (i < S.length() && j < word.length()) {\n\t\t\tif (S.charAt(i) == word.charAt(j))\n\t\t\t\tj++;\n\t\t\ti++;\n\t\t}\n\t\treturn j == word.length();\n\t}\n}\n",
            "\tint numMatchingSubseq(String S, String[] words) {\n\t\tint count = 0;\n\t\tfor(String word : words){\n\t\t\tif(isSubseq(word, S)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\t\n\tpublic boolean isSubseq(String word, String S){\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < word.length() && j < S.length()){\n\t\t\tif(word.charAt(i) == S.charAt(j)){\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}else{\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn i == word.length();\n\t}\n}\n",
            "\tstatic int count(String S, String T){\n\t\tint[][] dp = new int[S.length()+1][T.length()+1];\n\t\tfor(int i=1;i<=S.length();i++){\n\t\t\tfor(int j=1;j<=T.length();j++){\n\t\t\t\tif(S.charAt(i-1)==T.charAt(j-1)){\n\t\t\t\t\tdp[i][j] = dp[i-1][j-1]+1;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[S.length()][T.length()];\n\t}\n\tpublic static void main(String[] args){\n\t\tString S = \"abcdefgh\";\n\t\tString T = \"abcd\";\n\t\tSystem.out.println(count(S,T));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1418",
        "source": "leetcodeTitles",
        "source_id": "2278",
        "url": "https://leetcode.com/problems/percentage-of-letter-in-string/",
        "language": "java",
        "query": "Percentage of Letter in String",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString str=\"Hello World\";\n\t\tint count=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tif(str.charAt(i)>=65 && str.charAt(i)<=90 || str.charAt(i)>=97 && str.charAt(i)<=122){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Percentage of Letter in String is: \"+((double)count/str.length())*100);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str=\"Hello World\";\n\t\tint count=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tif(str.charAt(i)=='e'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Number of e is \"+count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str=\"Hello World\";\n\t\tint count=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tif(str.charAt(i)>='a' && str.charAt(i)<='z'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Percentage of Letter in String is:\"+count*100/str.length());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str=\"Hello World\";\n\t\tint count=0;\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tif(str.charAt(i)>='a' && str.charAt(i)<='z'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Percentage of Letter in String is \"+((double)count/str.length())*100);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == 'e'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Number of e in String is \" + count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) >= 'a' && str.charAt(i) <= 'z'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Percentage of Letter in String: \" + (count * 100 / str.length()) + \"%\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == 'e' || str.charAt(i) == 'E'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Number of e's in the string is: \" + count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) >= 'a' && str.charAt(i) <= 'z'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == 'e'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Number of e's in the string is \" + count);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1419",
        "source": "leetcodeTitles",
        "source_id": "1849",
        "url": "https://leetcode.com/problems/splitting-a-string-into-descending-consecutive-values/",
        "language": "java",
        "query": "Splitting a String Into Descending Consecutive Values",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString s = \"123456789\";\n\t\tString[] arr = s.split(\"(?<=\\\\d)(?=\\\\d)\");\n\t\tfor(String str : arr){\n\t\t\tSystem.out.println(str);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"123456789\";\n\t\tString[] arr = s.split(\"(?<=\\\\d)(?=\\\\d)\");\n\t\tfor(String a:arr){\n\t\t\tSystem.out.println(a);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"123456789\";\n\t\tString[] strArray = str.split(\"\");\n\t\tArrays.sort(strArray);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < strArray.length; i++){\n\t\t\tsb.append(strArray[i]);\n\t\t}\n\t\tSystem.out.println(sb.toString());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"123456789\";\n\t\tString[] strArray = str.split(\"\");\n\t\tArrays.sort(strArray);\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = strArray.length-1; i >= 0; i--){\n\t\t\tsb.append(strArray[i]);\n\t\t}\n\t\tSystem.out.println(sb.toString());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"123456789\";\n\t\tString[] a = s.split(\"(?<=\\\\d)(?=\\\\d)\");\n\t\tfor(String x:a){\n\t\t\tSystem.out.println(x);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str=\"123456789\";\n\t\tString[] str1=str.split(\"\");\n\t\tint[] num=new int[str1.length];\n\t\tfor(int i=0;i<str1.length;i++){\n\t\t\tnum[i]=Integer.parseInt(str1[i]);\n\t\t}\n\t\tint max=0;\n\t\tint count=0;\n\t\tfor(int i=0;i<num.length;i++){\n\t\t\tif(num[i]>max){\n\t\t\t\tmax=num[i];\n\t\t\t\tcount=1;\n\t\t\t}\n\t\t\telse if(num[i]==max){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(count>1){\n\t\t\t\t\tSystem.out.println(max+\" \"+count);\n\t\t\t\t}\n\t\t\t\tmax=num[i];\n\t\t\t\tcount=1;\n\t\t\t}\n\t\t}\n\t\tif(count>1){\n\t\t\tSystem.out.println(max+\" \"+count);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1420",
        "source": "leetcodeTitles",
        "source_id": "21",
        "url": "https://leetcode.com/problems/merge-two-sorted-lists/",
        "language": "java",
        "query": "Merge Two Sorted Lists",
        "snippets": [
            "\tListNode mergeTwoLists(ListNode l1, ListNode l2) {\n\t\tListNode dummy = new ListNode(0);\n\t\tListNode cur = dummy;\n\t\twhile(l1 != null && l2 != null){\n\t\t\tif(l1.val < l2.val){\n\t\t\t\tcur.next = l1;\n\t\t\t\tl1 = l1.next;\n\t\t\t}else{\n\t\t\t\tcur.next = l2;\n\t\t\t\tl2 = l2.next;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t}\n\t\tif(l1 != null){\n\t\t\tcur.next = l1;\n\t\t}\n\t\tif(l2 != null){\n\t\t\tcur.next = l2;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode mergeTwoLists(ListNode l1, ListNode l2) {\n\t\tListNode dummy = new ListNode(0);\n\t\tListNode cur = dummy;\n\t\twhile(l1 != null && l2 != null){\n\t\t\tif(l1.val < l2.val){\n\t\t\t\tcur.next = l1;\n\t\t\t\tl1 = l1.next;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcur.next = l2;\n\t\t\t\tl2 = l2.next;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t}\n\t\tif(l1 != null)\n\t\t\tcur.next = l1;\n\t\tif(l2 != null)\n\t\t\tcur.next = l2;\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode mergeTwoLists(ListNode l1, ListNode l2) {\n\t\tListNode dummy = new ListNode(0);\n\t\tListNode cur = dummy;\n\t\twhile (l1 != null && l2 != null) {\n\t\t\tif (l1.val < l2.val) {\n\t\t\t\tcur.next = l1;\n\t\t\t\tl1 = l1.next;\n\t\t\t} else {\n\t\t\t\tcur.next = l2;\n\t\t\t\tl2 = l2.next;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t}\n\t\tcur.next = l1 != null ? l1 : l2;\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode mergeTwoLists(ListNode l1, ListNode l2) {\n\t\tListNode dummy = new ListNode(0);\n\t\tListNode cur = dummy;\n\t\twhile (l1 != null && l2 != null) {\n\t\t\tif (l1.val < l2.val) {\n\t\t\t\tcur.next = l1;\n\t\t\t\tl1 = l1.next;\n\t\t\t} else {\n\t\t\t\tcur.next = l2;\n\t\t\t\tl2 = l2.next;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t}\n\t\tcur.next = l1 == null ? l2 : l1;\n\t\treturn dummy.next;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1421",
        "source": "leetcodeTitles",
        "source_id": "58",
        "url": "https://leetcode.com/problems/length-of-last-word/",
        "language": "java",
        "query": "Length of Last Word",
        "snippets": [
            "\tint lengthOfLastWord(String s) {\n\t\tint len = s.length();\n\t\tint i = len - 1;\n\t\twhile (i >= 0 && s.charAt(i) == ' ') {\n\t\t\ti--;\n\t\t}\n\t\tif (i < 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tint j = i;\n\t\twhile (j >= 0 && s.charAt(j) != ' ') {\n\t\t\tj--;\n\t\t}\n\t\treturn i - j;\n\t}\n}\n",
            "\tint lengthOfLastWord(String s) {\n\t\tint len = s.length();\n\t\tint i = len - 1;\n\t\twhile (i >= 0 && s.charAt(i) == ' ') {\n\t\t\ti--;\n\t\t}\n\t\tif (i < 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tint j = i;\n\t\twhile (j >= 0 && s.charAt(j) != ' ') {\n\t\t\tj--;\n\t\t}\n\t\treturn len - j - 1;\n\t}\n}\n",
            "\tint lengthOfLastWord(String s) {\n\t\tint len = s.length();\n\t\tint i = len - 1;\n\t\twhile (i >= 0 && s.charAt(i) == ' ') {\n\t\t\ti--;\n\t\t}\n\t\tint j = i;\n\t\twhile (j >= 0 && s.charAt(j) != ' ') {\n\t\t\tj--;\n\t\t}\n\t\treturn i - j;\n\t}\n}\n",
            "\tint lengthOfLastWord(String s) {\n\t\tint i = s.length() - 1;\n\t\twhile (i >= 0 && s.charAt(i) == ' ') {\n\t\t\ti--;\n\t\t}\n\t\tint j = i;\n\t\twhile (j >= 0 && s.charAt(j) != ' ') {\n\t\t\tj--;\n\t\t}\n\t\treturn i - j;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1422",
        "source": "leetcodeTitles",
        "source_id": "50",
        "url": "https://leetcode.com/problems/powx-n/",
        "language": "java",
        "query": "Pow(x, n)",
        "snippets": [
            "\tstatic double pow(double x, int n){\n\t\tif(n == 0)\n\t\t\treturn 1;\n\t\tif(n == 1)\n\t\t\treturn x;\n\t\tif(n % 2 == 0)\n\t\t\treturn pow(x * x, n / 2);\n\t\telse\n\t\t\treturn x * pow(x * x, n / 2);\n\t}\n}\n",
            "\tstatic double pow(double x, int n){\n\t\tif(n == 0)\n\t\t\treturn 1;\n\t\tif(n == 1)\n\t\t\treturn x;\n\t\tif(n < 0)\n\t\t\treturn 1/pow(x, -n);\n\t\tif(n % 2 == 0)\n\t\t\treturn pow(x*x, n/2);\n\t\telse\n\t\t\treturn x*pow(x*x, n/2);\n\t}\n}\n",
            "\tstatic double pow(double x, int n){\n\t\tif(n == 0)\n\t\t\treturn 1;\n\t\tif(n == 1)\n\t\t\treturn x;\n\t\tif(n < 0)\n\t\t\treturn 1/pow(x, -n);\n\t\tif(n % 2 == 0)\n\t\t\treturn pow(x*x, n/2);\n\t\treturn x*pow(x*x, n/2);\n\t}\n}\n",
            "\tstatic double pow(double x, int n){\n\t\tif(n == 0)\n\t\t\treturn 1;\n\t\tif(n == 1)\n\t\t\treturn x;\n\t\tif(n < 0)\n\t\t\treturn 1 / pow(x, -n);\n\t\tdouble half = pow(x, n / 2);\n\t\tif(n % 2 == 0)\n\t\t\treturn half * half;\n\t\telse\n\t\t\treturn half * half * x;\n\t}\n}\n",
            "\tstatic double pow(double x, int n){\n\t\tif(n == 0){\n\t\t\treturn 1;\n\t\t}\n\t\tif(n == 1){\n\t\t\treturn x;\n\t\t}\n\t\tif(n < 0){\n\t\t\treturn 1 / pow(x, -n);\n\t\t}\n\t\tdouble half = pow(x, n / 2);\n\t\tif(n % 2 == 0){\n\t\t\treturn half * half;\n\t\t}\n\t\treturn half * half * x;\n\t}\n}\n",
            "\tdouble pow(double x, int n){\n\t\tif(n == 0)\n\t\t\treturn 1;\n\t\tif(n == 1)\n\t\t\treturn x;\n\t\tif(n < 0)\n\t\t\treturn 1 / pow(x, -n);\n\t\tif(n % 2 == 0)\n\t\t\treturn pow(x * x, n / 2);\n\t\treturn x * pow(x * x, n / 2);\n\t}\n}\n",
            "\tstatic\n\tint\n\tpow(int x, int n){\n\t\tif(n == 0){\n\t\t\treturn 1;\n\t\t}\n\t\tif(n == 1){\n\t\t\treturn x;\n\t\t}\n\t\tif(n < 0){\n\t\t\treturn pow(1/x, -n);\n\t\t}\n\t\tint y = pow(x, n/2);\n\t\tif(n % 2 == 0){\n\t\t\treturn y * y;\n\t\t}\n\t\treturn y * y * x;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1423",
        "source": "leetcodeTitles",
        "source_id": "423",
        "url": "https://leetcode.com/problems/reconstruct-original-digits-from-english/",
        "language": "java",
        "query": "Reconstruct Original Digits from English",
        "snippets": [
            "\tString originalDigits(String s){\n\t\tint[] count = new int[10];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(c == 'z'){\n\t\t\t\tcount[0]++;\n\t\t\t}else if(c == 'w'){\n\t\t\t\tcount[2]++;\n\t\t\t}else if(c == 'x'){\n\t\t\t\tcount[6]++;\n\t\t\t}else if(c == 's'){\n\t\t\t\tcount[7]++;\n\t\t\t}else if(c == 'g'){\n\t\t\t\tcount[8]++;\n\t\t\t}else if(c == 'u'){\n\t\t\t\tcount[4]++;\n\t\t\t}else if(c == 'f'){\n\t\t\t\tcount[5]++;\n\t\t\t}else if(c == 'h'){\n\t\t\t\tcount[3]++;\n\t\t\t}else if(c == 'i'){\n\t\t\t\tcount[9]++;\n\t\t\t}else if(c == 'o'){\n\t\t\t\tcount[1]++;\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tfor(int j = 0; j < count[i]; j++){\n\t\t\t\tsb.append(i);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString originalDigits(String s){\n\t\tint[] count = new int[10];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(c == 'z') count[0]++;\n\t\t\telse if(c == 'w') count[2]++;\n\t\t\telse if(c == 'x') count[6]++;\n\t\t\telse if(c == 's') count[7]++;\n\t\t\telse if(c == 'g') count[8]++;\n\t\t\telse if(c == 'u') count[4]++;\n\t\t\telse if(c == 'f') count[5]++;\n\t\t\telse if(c == 'h') count[3]++;\n\t\t\telse if(c == 'o') count[1]++;\n\t\t\telse if(c == 'i') count[9]++;\n\t\t\telse if(c == 'e') count[6]++;\n\t\t\telse if(c == 't') count[3]++;\n\t\t\telse if(c == 'n') count[9]++;\n\t\t\telse if(c == 'r') count[8]++;\n\t\t\telse if(c == 'c') count[7]++;\n\t\t\telse if(c == 'd') count[6]++;\n\t\t\telse if(c == 'm') count[4]++;\n\t\t\telse if(c == 'b') count[2]++;\n\t\t\telse if(c == 'l') count[1]++;\n\t\t\telse if(c == 'k') count[9]++;\n\t\t\telse if(c == 'j') count[8]++;\n\t\t\telse if(c == 'p') count[7]++;\n\t\t\telse if(c == 'q') count[9]++;\n\t\t\telse if(c == 'v') count[5]++;\n\t\t\telse if(c == 'y') count[4]++;\n\t\t\telse if(c == 'w') count[2]++;\n",
            "\tString originalDigits(String s){\n\t\tString[] digits = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n\t\tint[] count = new int[10];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(c == 'z') count[0]++;\n\t\t\telse if(c == 'o') count[1]++;\n\t\t\telse if(c == 'w') count[2]++;\n\t\t\telse if(c == 'h') count[3]++;\n\t\t\telse if(c == 'r') count[4]++;\n\t\t\telse if(c == 'f') count[5]++;\n\t\t\telse if(c == 'u') count[6]++;\n\t\t\telse if(c == 'x') count[7]++;\n\t\t\telse if(c == 's') count[8]++;\n\t\t\telse if(c == 'g') count[9]++;\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tfor(int j = 0; j < count[i]; j++) sb.append(i);\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString originalDigits(String s) {\n\t\tint[] count = new int[10];\n\t\tfor (int i = 0; i < s.length(); i++) {\n\t\t\tchar c = s.charAt(i);\n\t\t\tif (c == 'z') {\n\t\t\t\tcount[0]++;\n\t\t\t} else if (c == 'w') {\n\t\t\t\tcount[2]++;\n\t\t\t} else if (c == 'u') {\n\t\t\t\tcount[4]++;\n\t\t\t} else if (c == 'x') {\n\t\t\t\tcount[6]++;\n\t\t\t} else if (c == 'g') {\n\t\t\t\tcount[8]++;\n\t\t\t} else if (c == 'o') {\n\t\t\t\tcount[1]++;\n\t\t\t} else if (c == 'f') {\n\t\t\t\tcount[3]++;\n\t\t\t} else if (c == 's') {\n\t\t\t\tcount[7]++;\n\t\t\t} else if (c == 'i') {\n\t\t\t\tcount[5]++;\n\t\t\t} else if (c == 'e') {\n\t\t\t\tcount[9]++;\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < 10; i++) {\n\t\t\tfor (int j = 0; j < count[i]; j++) {\n\t\t\t\tsb.append(i);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString originalDigits(String s){\n\t\tString[] digits = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n\t\tint[] count = new int[10];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(c == 'z') count[0]++;\n\t\t\telse if(c == 'o') count[1]++;\n\t\t\telse if(c == 'w') count[2]++;\n\t\t\telse if(c == 'h') count[3]++;\n\t\t\telse if(c == 'r') count[4]++;\n\t\t\telse if(c == 'f') count[5]++;\n\t\t\telse if(c == 'v') count[6]++;\n\t\t\telse if(c == 'u') count[7]++;\n\t\t\telse if(c == 'x') count[8]++;\n\t\t\telse if(c == 'g') count[9]++;\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tfor(int j = 0; j < count[i]; j++) sb.append(i);\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString originalDigits(String s){\n\t\tString[] digits = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n\t\tint[] count = new int[10];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tchar c = s.charAt(i);\n\t\t\tif(c == 'z') count[0]++;\n\t\t\tif(c == 'o') count[1]++;\n\t\t\tif(c == 'w') count[2]++;\n\t\t\tif(c == 'h') count[3]++;\n\t\t\tif(c == 'r') count[4]++;\n\t\t\tif(c == 'f') count[5]++;\n\t\t\tif(c == 'u') count[6]++;\n\t\t\tif(c == 'x') count[7]++;\n\t\t\tif(c == 's') count[8]++;\n\t\t\tif(c == 'g') count[9]++;\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < 10; i++){\n\t\t\tfor(int j = 0; j < count[i]; j++) sb.append(i);\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString originalDigits(String s){\n\t\tString[] digits = new String[]{\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"};\n\t\tString[] letters = new String[]{\"z\", \"o\", \"w\", \"t\", \"f\", \"s\", \"x\", \"g\", \"i\", \"n\"};\n\t\tint[] count = new int[10];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tfor(int j = 0; j < letters.length; j++){\n\t\t\t\tif(s.charAt(i) == letters[j].charAt(0)){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < count.length; i++){\n\t\t\tfor(int j = 0; j < count[i]; j++){\n\t\t\t\tsb.append(i);\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1424",
        "source": "leetcodeTitles",
        "source_id": "1567",
        "url": "https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/",
        "language": "java",
        "query": "https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product//",
        "snippets": [
            "\tint maxProduct(int[] nums) {\n\t\tint max = nums[0];\n\t\tint min = nums[0];\n\t\tint res = nums[0];\n\t\tfor(int i = 1; i < nums.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(Math.max(max*nums[i], min*nums[i]), nums[i]);\n\t\t\tmin = Math.min(Math.min(temp*nums[i], min*nums[i]), nums[i]);\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxLength(int[] arr) {\n\t\tint max = 0;\n\t\tint[] dp = new int[arr.length];\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tdp[i] = 1;\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (arr[i] > 0 && arr[j] > 0) {\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxLength(int[] arr) {\n\t\tint n = arr.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] > 0) {\n\t\t\t\tdp[i] = 1;\n\t\t\t} else {\n\t\t\t\tdp[i] = 0;\n\t\t\t}\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (arr[i] > 0 && arr[j] > 0) {\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxLength(int[] arr) {\n\t\tint n = arr.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] > 0) {\n\t\t\t\tdp[i] = 1;\n\t\t\t}\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (arr[j] > 0 && arr[i] > 0) {\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxProduct(int[] A) {\n\t\tint max = A[0];\n\t\tint min = A[0];\n\t\tint res = A[0];\n\t\tfor(int i = 1; i < A.length; i++){\n\t\t\tint temp = max;\n\t\t\tmax = Math.max(Math.max(max*A[i], min*A[i]), A[i]);\n\t\t\tmin = Math.min(Math.min(temp*A[i], min*A[i]), A[i]);\n\t\t\tres = Math.max(res, max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxProduct(int[] nums) {\n\t\tif(nums.length==0) return 0;\n\t\tint max=nums[0];\n\t\tint min=nums[0];\n\t\tint res=nums[0];\n\t\tfor(int i=1;i<nums.length;i++){\n\t\t\tint temp=max;\n\t\t\tmax=Math.max(Math.max(max*nums[i],min*nums[i]),nums[i]);\n\t\t\tmin=Math.min(Math.min(temp*nums[i],min*nums[i]),nums[i]);\n\t\t\tres=Math.max(res,max);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint maxLength(int[] arr) {\n\t\tint max = 0;\n\t\tint[] dp = new int[arr.length];\n\t\tdp[0] = 1;\n\t\tfor (int i = 1; i < arr.length; i++) {\n\t\t\tdp[i] = arr[i] > 0 ? dp[i - 1] + 1 : 1;\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1425",
        "source": "leetcodeTitles",
        "source_id": "590",
        "url": "https://leetcode.com/problems/n-ary-tree-postorder-traversal/",
        "language": "java",
        "query": "N-ary Tree Postorder Traversal",
        "snippets": [
            "\tList<Integer> postorder(Node root) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tif(root == null) return res;\n\t\tStack<Node> stack = new Stack<>();\n\t\tstack.push(root);\n\t\twhile(!stack.isEmpty()){\n\t\t\tNode cur = stack.pop();\n\t\t\tres.add(cur.val);\n\t\t\tfor(Node child : cur.children){\n\t\t\t\tstack.push(child);\n\t\t\t}\n\t\t}\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}\n",
            "\tList<Integer> postorder(Node root) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tif(root == null) return res;\n\t\tStack<Node> stack = new Stack<>();\n\t\tstack.push(root);\n\t\twhile(!stack.isEmpty()){\n\t\t\tNode cur = stack.pop();\n\t\t\tres.add(cur.val);\n\t\t\tfor(Node n : cur.children)\n\t\t\t\tstack.push(n);\n\t\t}\n\t\tCollections.reverse(res);\n\t\treturn res;\n\t}\n}\n",
            "\tList<Integer> postorder(Node root) {\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tif(root == null) return list;\n\t\tStack<Node> stack = new Stack<Node>();\n\t\tstack.push(root);\n\t\twhile(!stack.isEmpty()){\n\t\t\tNode node = stack.pop();\n\t\t\tlist.add(node.val);\n\t\t\tfor(int i = 0; i < node.children.size(); i++){\n\t\t\t\tstack.push(node.children.get(i));\n\t\t\t}\n\t\t}\n\t\tCollections.reverse(list);\n\t\treturn list;\n\t}\n}\n",
            "\tList<Integer> postorder(Node root) {\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tif(root == null) return list;\n\t\tStack<Node> stack = new Stack<Node>();\n\t\tstack.push(root);\n\t\twhile(!stack.isEmpty()){\n\t\t\tNode cur = stack.pop();\n\t\t\tlist.add(cur.val);\n\t\t\tfor(Node n : cur.children){\n\t\t\t\tstack.push(n);\n\t\t\t}\n\t\t}\n\t\tCollections.reverse(list);\n\t\treturn list;\n\t}\n}\n",
            "\tList<Integer> postorder(Node root) {\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tif(root == null) return list;\n\t\tStack<Node> stack = new Stack<Node>();\n\t\tstack.push(root);\n\t\twhile(!stack.isEmpty()){\n\t\t\tNode cur = stack.pop();\n\t\t\tlist.add(cur.val);\n\t\t\tfor(Node child : cur.children){\n\t\t\t\tstack.push(child);\n\t\t\t}\n\t\t}\n\t\tCollections.reverse(list);\n\t\treturn list;\n\t}\n}\n",
            "\tList<Integer> postorder(Node root) {\n\t\tList<Integer> list = new ArrayList<Integer>();\n\t\tif(root == null) return list;\n\t\tStack<Node> stack = new Stack<Node>();\n\t\tstack.push(root);\n\t\twhile(!stack.isEmpty()){\n\t\t\tNode node = stack.pop();\n\t\t\tlist.add(node.val);\n\t\t\tfor(Node child : node.children){\n\t\t\t\tstack.push(child);\n\t\t\t}\n\t\t}\n\t\tCollections.reverse(list);\n\t\treturn list;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1426",
        "source": "leetcodeTitles",
        "source_id": "2171",
        "url": "https://leetcode.com/problems/removing-minimum-number-of-magic-beans/",
        "language": "java",
        "query": "Removing Minimum Number of Magic Beans",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint cnt = 0;\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans += cnt;\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans = Math.max(ans, count);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint cnt = 0;\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tif(a[i]==b[j]){\n\t\t\t\t\tcnt++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tans = Math.max(ans,cnt);\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i = 0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint result = solve(a);\n\t\tSystem.out.println(result);\n\t}\n\tpublic static int solve(int[] a){\n\t\tint n = a.length;\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = a[i];\n\t\t}\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(b[j] > b[i]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(count < min){\n\t\t\t\tmin = count;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j=i;j<n;j++){\n\t\t\t\tcount += a[j];\n\t\t\t\tif(count>=k){\n\t\t\t\t\tans = Math.max(ans, j-i+1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic int minMagicBeans(int[] arr){\n\t\tint n = arr.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tdp[1] = 1;\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tdp[i] = dp[i-1] + dp[i-2];\n\t\t}\n\t\tint ans = dp[n-1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tans = Math.min(ans, dp[i] + (n-i-1));\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int minMagicBeans(int[] A, int[] B, int[] C){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = A[0] + B[0] + C[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = Math.min(dp[i-1] + A[i] + B[i] + C[i], A[i] + B[i] + C[i]);\n\t\t\tdp[i] = Math.min(dp[i], A[i] + B[i] + C[i]);\n\t\t\tdp[i] = Math.min(dp[i], A[i] + B[i]);\n\t\t\tdp[i] = Math.min(dp[i], A[i]);\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tstatic int minMagicBeans(int[] magicBeans){\n\t\tint n = magicBeans.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = magicBeans[0];\n\t\tdp[1] = Math.min(magicBeans[0], magicBeans[1]);\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tdp[i] = Math.min(dp[i-1], dp[i-2]) + magicBeans[i];\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tstatic int minMagicBeans(int[] A, int[] B){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = A[0] + B[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = Math.min(dp[i-1] + A[i] + B[i], dp[i-1] + B[i]);\n\t\t}\n\t\tint min = dp[n-1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmin = Math.min(min, dp[i] + A[n-1] + B[n-1] - A[i] - B[i]);\n\t\t}\n\t\treturn min;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1427",
        "source": "leetcodeTitles",
        "source_id": "1760",
        "url": "https://leetcode.com/problems/minimum-limit-of-balls-in-a-bag/",
        "language": "java",
        "query": "Minimum Limit of Balls in a Bag",
        "snippets": [],
        "results": 0
    },
    {
        "id": "1428",
        "source": "leetcodeTitles",
        "source_id": "18",
        "url": "https://leetcode.com/problems/4sum/",
        "language": "java",
        "query": "4Sum",
        "snippets": [
            "\tList<List<Integer>> fourSum(int[] nums, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (nums == null || nums.length < 4) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(nums);\n\t\tfor (int i = 0; i < nums.length - 3; i++) {\n\t\t\tif (i > 0 && nums[i] == nums[i - 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (int j = i + 1; j < nums.length - 2; j++) {\n\t\t\t\tif (j > i + 1 && nums[j] == nums[j - 1]) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tint left = j + 1;\n\t\t\t\tint right = nums.length - 1;\n\t\t\t\twhile (left < right) {\n\t\t\t\t\tint sum = nums[i] + nums[j] + nums[left] + nums[right];\n\t\t\t\t\tif (sum == target) {\n\t\t\t\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\t\t\t\tlist.add(nums[i]);\n\t\t\t\t\t\tlist.add(nums[j]);\n\t\t\t\t\t\tlist.add(nums[left]);\n\t\t\t\t\t\tlist.add(nums[right]);\n\t\t\t\t\t\tresult.add(list);\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t\tright--;\n\t\t\t\t\t\twhile (left < right && nums[left] == nums[left - 1]) {\n\t\t\t\t\t\t\tleft++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twhile (left < right && nums[right] == nums[right + 1]) {\n\t\t\t\t\t\t\tright--;\n\t\t\t\t\t\t}\n",
            "\tList<List<Integer>> fourSum(int[] nums, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(nums == null || nums.length < 4)\n\t\t\treturn result;\n\t\tArrays.sort(nums);\n\t\tfor(int i = 0; i < nums.length - 3; i++){\n\t\t\tif(i > 0 && nums[i] == nums[i - 1])\n\t\t\t\tcontinue;\n\t\t\tfor(int j = i + 1; j < nums.length - 2; j++){\n\t\t\t\tif(j > i + 1 && nums[j] == nums[j - 1])\n\t\t\t\t\tcontinue;\n\t\t\t\tint left = j + 1;\n\t\t\t\tint right = nums.length - 1;\n\t\t\t\twhile(left < right){\n\t\t\t\t\tint sum = nums[i] + nums[j] + nums[left] + nums[right];\n\t\t\t\t\tif(sum == target){\n\t\t\t\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\t\t\t\tlist.add(nums[i]);\n\t\t\t\t\t\tlist.add(nums[j]);\n\t\t\t\t\t\tlist.add(nums[left]);\n\t\t\t\t\t\tlist.add(nums[right]);\n\t\t\t\t\t\tresult.add(list);\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t\tright--;\n\t\t\t\t\t\twhile(left < right && nums[left] == nums[left - 1])\n\t\t\t\t\t\t\tleft++;\n\t\t\t\t\t\twhile(left < right && nums[right] == nums[right + 1])\n\t\t\t\t\t\t\tright--;\n\t\t\t\t\t}\n\t\t\t\t\telse if(sum < target)\n\t\t\t\t\t\tleft++;\n\t\t\t\t\telse\n",
            "\tList<List<Integer>> fourSum(int[] nums, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(nums == null || nums.length < 4) return result;\n\t\tArrays.sort(nums);\n\t\tfor(int i = 0; i < nums.length - 3; i++){\n\t\t\tif(i > 0 && nums[i] == nums[i - 1]) continue;\n\t\t\tfor(int j = i + 1; j < nums.length - 2; j++){\n\t\t\t\tif(j > i + 1 && nums[j] == nums[j - 1]) continue;\n\t\t\t\tint left = j + 1;\n\t\t\t\tint right = nums.length - 1;\n\t\t\t\twhile(left < right){\n\t\t\t\t\tint sum = nums[i] + nums[j] + nums[left] + nums[right];\n\t\t\t\t\tif(sum == target){\n\t\t\t\t\t\tresult.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t\tright--;\n\t\t\t\t\t\twhile(left < right && nums[left] == nums[left - 1]) left++;\n\t\t\t\t\t\twhile(left < right && nums[right] == nums[right + 1]) right--;\n\t\t\t\t\t}else if(sum < target){\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tright--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<Integer>> fourSum(int[] nums, int target) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(nums.length < 4) return result;\n\t\tArrays.sort(nums);\n\t\tfor(int i = 0; i < nums.length - 3; i++){\n\t\t\tif(i > 0 && nums[i] == nums[i - 1]) continue;\n\t\t\tfor(int j = i + 1; j < nums.length - 2; j++){\n\t\t\t\tif(j > i + 1 && nums[j] == nums[j - 1]) continue;\n\t\t\t\tint left = j + 1;\n\t\t\t\tint right = nums.length - 1;\n\t\t\t\twhile(left < right){\n\t\t\t\t\tint sum = nums[i] + nums[j] + nums[left] + nums[right];\n\t\t\t\t\tif(sum == target){\n\t\t\t\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\t\t\t\tlist.add(nums[i]);\n\t\t\t\t\t\tlist.add(nums[j]);\n\t\t\t\t\t\tlist.add(nums[left]);\n\t\t\t\t\t\tlist.add(nums[right]);\n\t\t\t\t\t\tresult.add(list);\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t\tright--;\n\t\t\t\t\t\twhile(left < right && nums[left] == nums[left - 1]) left++;\n\t\t\t\t\t\twhile(left < right && nums[right] == nums[right + 1]) right--;\n\t\t\t\t\t}\n\t\t\t\t\telse if(sum < target) left++;\n\t\t\t\t\telse right--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<Integer>> fourSum(int[] nums, int target) {\n\t\tList<List<Integer>> res = new ArrayList<List<Integer>>();\n\t\tif(nums.length < 4) return res;\n\t\tArrays.sort(nums);\n\t\tfor(int i = 0; i < nums.length - 3; i++){\n\t\t\tif(i != 0 && nums[i] == nums[i-1]) continue;\n\t\t\tfor(int j = i + 1; j < nums.length - 2; j++){\n\t\t\t\tif(j != i + 1 && nums[j] == nums[j-1]) continue;\n\t\t\t\tint left = j + 1;\n\t\t\t\tint right = nums.length - 1;\n\t\t\t\twhile(left < right){\n\t\t\t\t\tint sum = nums[i] + nums[j] + nums[left] + nums[right];\n\t\t\t\t\tif(sum == target){\n\t\t\t\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\t\t\t\tlist.add(nums[i]);\n\t\t\t\t\t\tlist.add(nums[j]);\n\t\t\t\t\t\tlist.add(nums[left]);\n\t\t\t\t\t\tlist.add(nums[right]);\n\t\t\t\t\t\tres.add(list);\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t\tright--;\n\t\t\t\t\t\twhile(left < right && nums[left] == nums[left-1]) left++;\n\t\t\t\t\t\twhile(left < right && nums[right] == nums[right+1]) right--;\n\t\t\t\t\t}\n\t\t\t\t\telse if(sum < target) left++;\n\t\t\t\t\telse right--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tList<List<Integer>> fourSum(int[] nums, int target) {\n\t\tList<List<Integer>> res = new ArrayList<List<Integer>>();\n\t\tif(nums.length < 4) return res;\n\t\tArrays.sort(nums);\n\t\tfor(int i = 0; i < nums.length - 3; i++){\n\t\t\tif(i > 0 && nums[i] == nums[i-1]) continue;\n\t\t\tfor(int j = i + 1; j < nums.length - 2; j++){\n\t\t\t\tif(j > i + 1 && nums[j] == nums[j-1]) continue;\n\t\t\t\tint left = j + 1;\n\t\t\t\tint right = nums.length - 1;\n\t\t\t\twhile(left < right){\n\t\t\t\t\tint sum = nums[i] + nums[j] + nums[left] + nums[right];\n\t\t\t\t\tif(sum == target){\n\t\t\t\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\t\t\t\tlist.add(nums[i]);\n\t\t\t\t\t\tlist.add(nums[j]);\n\t\t\t\t\t\tlist.add(nums[left]);\n\t\t\t\t\t\tlist.add(nums[right]);\n\t\t\t\t\t\tres.add(list);\n\t\t\t\t\t\tleft++;\n\t\t\t\t\t\tright--;\n\t\t\t\t\t\twhile(left < right && nums[left] == nums[left-1]) left++;\n\t\t\t\t\t\twhile(left < right && nums[right] == nums[right+1]) right--;\n\t\t\t\t\t}\n\t\t\t\t\telse if(sum < target) left++;\n\t\t\t\t\telse right--;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1429",
        "source": "leetcodeTitles",
        "source_id": "2178",
        "url": "https://leetcode.com/problems/maximum-split-of-positive-even-integers/",
        "language": "java",
        "query": "Maximum Split of Positive Even Integers",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(a[i] > 0 && a[i] % 2 == 0){\n\t\t\t\tmax = Math.max(max, a[i]);\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(a[i] > 0 && a[i] % 2 == 0 && a[i] <= max){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic int maxSplit(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic int maxSplit2(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic int maxSplit3(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic int maxSplit4(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic int maxSplit5(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic int maxSplit6(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic int maxSplit7(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic int maxSplit8(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic int maxSplit9(int num){\n\t\tint count = 0;\n",
            "\tstatic int maxSplit(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic static void main(String[] args){\n\t\tint num = 12345;\n\t\tSystem.out.println(maxSplit(num));\n\t}\n}\n",
            "\tstatic int maxSplit(int n){\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn /= 2;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn--;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int maxSplit(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tif(num % 2 == 0){\n\t\t\t\tnum /= 2;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnum--;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int maxSplit(int n){\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn = n / 2;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn = n - 1;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint split(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tnum = num / 10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tint splitEven(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tint temp = num % 10;\n\t\t\tif(temp % 2 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tint splitOdd(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tint temp = num % 10;\n\t\t\tif(temp % 2 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tint splitPositive(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tint temp = num % 10;\n\t\t\tif(temp > 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tint splitPositiveEven(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tint temp = num % 10;\n\t\t\tif(temp > 0 && temp % 2 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tint splitPositiveOdd(int num){\n\t\tint count = 0;\n\t\twhile(num > 0){\n\t\t\tint temp = num % 10;\n\t\t\tif(temp > 0 && temp % 2 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tnum = num / 10;\n\t\t}\n\t\treturn count;\n"
        ],
        "results": 10
    },
    {
        "id": "1430",
        "source": "leetcodeTitles",
        "source_id": "328",
        "url": "https://leetcode.com/problems/odd-even-linked-list/",
        "language": "java",
        "query": "Odd Even Linked List",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tLinkedList<Integer> list = new LinkedList<Integer>();\n\t\tlist.add(1);\n\t\tlist.add(2);\n\t\tlist.add(3);\n\t\tlist.add(4);\n\t\tlist.add(5);\n\t\tlist.add(6);\n\t\tlist.add(7);\n\t\tlist.add(8);\n\t\tlist.add(9);\n\t\tlist.add(10);\n\t\tlist.add(11);\n\t\tlist.add(12);\n\t\tlist.add(13);\n\t\tlist.add(14);\n\t\tlist.add(15);\n\t\tlist.add(16);\n\t\tlist.add(17);\n\t\tlist.add(18);\n\t\tlist.add(19);\n\t\tlist.add(20);\n\t\tlist.add(21);\n\t\tlist.add(22);\n\t\tlist.add(23);\n\t\tlist.add(24);\n\t\tlist.add(25);\n\t\tlist.add(26);\n\t\tlist.add(27);\n\t\tlist.add(28);\n\t\tlist.add(29);\n\t\tlist.add(30);\n\t\tlist.add(31);\n\t\tlist.add(32);\n\t\tlist.add(33);\n\t\tlist.add(34);\n\t\tlist.add(35);\n\t\tlist.add(36);\n\t\tlist.add(37);\n\t\tlist.add(38);\n\t\tlist.add(39);\n\t\tlist.add(40);\n\t\tlist.add(41);\n\t\tlist.add(42);\n\t\tlist.add(43);\n\t\tlist.add(44);\n\t\tlist.add(45);\n\t\tlist.add(46);\n\t\tlist.add(47);\n\t\tlist.add(48);\n\t\tlist.add(49);\n\t\tlist.add(50);\n\t\tlist.add(51);\n\t\tlist.add(52);\n",
            "\tNode oddEvenList(Node head){\n\t\tif(head == null || head.next == null) return head;\n\t\tNode odd = head;\n\t\tNode even = head.next;\n\t\tNode evenHead = even;\n\t\twhile(even != null && even.next != null){\n\t\t\todd.next = odd.next.next;\n\t\t\todd = odd.next;\n\t\t\teven.next = even.next.next;\n\t\t\teven = even.next;\n\t\t}\n\t\todd.next = evenHead;\n\t\treturn head;\n\t}\n}\n",
            "\tNode head;\n\tpublic class Node{\n\t\tint data;\n\t\tNode next;\n\t\tNode(int data){\n\t\t\tthis.data = data;\n\t\t}\n\t}\n\tpublic void addNode(int data){\n\t\tNode newNode = new Node(data);\n\t\tif(head == null){\n\t\t\thead = newNode;\n\t\t}\n\t\telse{\n\t\t\tNode temp = head;\n\t\t\twhile(temp.next != null){\n\t\t\t\ttemp = temp.next;\n\t\t\t}\n\t\t\ttemp.next = newNode;\n\t\t}\n\t}\n\tpublic void printList(){\n\t\tNode temp = head;\n\t\twhile(temp != null){\n\t\t\tSystem.out.print(temp.data + \" \");\n\t\t\ttemp = temp.next;\n\t\t}\n\t}\n\tpublic void oddEvenList(){\n\t\tNode odd = head;\n\t\tNode even = head.next;\n\t\tNode evenHead = even;\n\t\twhile(even != null && even.next != null){\n\t\t\todd.next = even.next;\n\t\t\todd = odd.next;\n\t\t\teven.next = odd.next;\n\t\t\teven = even.next;\n\t\t}\n\t\todd.next = evenHead;\n\t}\n\tpublic static void main(String[] args){\n\t\tClazz clazz = new Clazz();\n\t\tclazz.addNode(1);\n\t\tclazz.addNode(2);\n\t\tclazz.addNode(3);\n\t\tclazz.addNode(4);\n\t\tclazz.addNode(5);\n\t\tclazz.addNode(6);\n\t\tclazz.addNode(7);\n\t\tclazz.addNode(8);\n\t\tclazz.addNode(9);\n\t\tclazz.addNode(10);\n\t\tclazz.printList();\n\t\tclazz.oddEvenList();\n\t\tclazz.printList();\n\t}\n}\n",
            "\tvoid oddEvenList(Node head){\n\t\tif(head == null || head.next == null) return;\n\t\tNode odd = head;\n\t\tNode even = head.next;\n\t\tNode evenHead = even;\n\t\twhile(odd.next != null && even.next != null){\n\t\t\todd.next = even.next;\n\t\t\todd = odd.next;\n\t\t\teven.next = odd.next;\n\t\t\teven = even.next;\n\t\t}\n\t\todd.next = evenHead;\n\t}\n}\n",
            "\tNode head;\n\tpublic class Node{\n\t\tint data;\n\t\tNode next;\n\t\tpublic Node(int d){\n\t\t\tdata=d;\n\t\t}\n\t}\n\tpublic void insert(int data){\n\t\tNode newNode=new Node(data);\n\t\tif(head==null){\n\t\t\thead=newNode;\n\t\t}\n\t\telse{\n\t\t\tNode temp=head;\n\t\t\twhile(temp.next!=null){\n\t\t\t\ttemp=temp.next;\n\t\t\t}\n\t\t\ttemp.next=newNode;\n\t\t}\n\t}\n\tpublic void printList(){\n\t\tNode temp=head;\n\t\twhile(temp!=null){\n\t\t\tSystem.out.print(temp.data+\" \");\n\t\t\ttemp=temp.next;\n\t\t}\n\t}\n\tpublic void oddEven(){\n\t\tNode odd=head;\n\t\tNode even=head.next;\n\t\tNode temp=head;\n\t\twhile(temp.next!=null){\n\t\t\ttemp=temp.next;\n\t\t\tif(temp.next!=null){\n\t\t\t\ttemp=temp.next;\n\t\t\t\teven.next=temp;\n\t\t\t\teven=even.next;\n\t\t\t}\n\t\t}\n\t\teven.next=null;\n\t\ttemp=head;\n\t\twhile(temp.next!=null){\n\t\t\ttemp=temp.next;\n\t\t\tif(temp.next!=null){\n\t\t\t\ttemp=temp.next;\n\t\t\t\todd.next=temp;\n\t\t\t\todd=odd.next;\n\t\t\t}\n\t\t}\n\t\todd.next=even.next;\n\t}\n\tpublic static void main(String[] args){\n\t\tClazz clazz=new Clazz();\n\t\tclazz.insert(1);\n\t\tclazz.insert(2);\n\t\tclazz.insert(3);\n\t\tclazz.insert(4);\n\t\tclazz.insert(5);\n"
        ],
        "results": 10
    },
    {
        "id": "1431",
        "source": "leetcodeTitles",
        "source_id": "133",
        "url": "https://leetcode.com/problems/clone-graph/",
        "language": "java",
        "query": "Clone Graph",
        "snippets": [
            "\tclass Node{\n\t\tint val;\n\t\tList<Node> neighbors;\n\t\tNode(int val){\n\t\t\tthis.val = val;\n\t\t\tneighbors = new ArrayList<Node>();\n\t\t}\n\t}\n\tpublic Node cloneGraph(Node node){\n\t\tif(node == null) return null;\n\t\tMap<Node, Node> map = new HashMap<Node, Node>();\n\t\treturn cloneGraph(node, map);\n\t}\n\tpublic Node cloneGraph(Node node, Map<Node, Node> map){\n\t\tif(map.containsKey(node)) return map.get(node);\n\t\tNode newNode = new Node(node.val);\n\t\tmap.put(node, newNode);\n\t\tfor(Node n : node.neighbors){\n\t\t\tnewNode.neighbors.add(cloneGraph(n, map));\n\t\t}\n\t\treturn newNode;\n\t}\n}\n",
            "\tclass Node{\n\t\tint val;\n\t\tList<Node> neighbors;\n\t\tNode(int val){\n\t\t\tthis.val = val;\n\t\t\tneighbors = new ArrayList<Node>();\n\t\t}\n\t}\n\tpublic Node cloneGraph(Node node){\n\t\tif(node == null) return null;\n\t\tMap<Node, Node> map = new HashMap<Node, Node>();\n\t\treturn cloneGraph(node, map);\n\t}\n\tpublic Node cloneGraph(Node node, Map<Node, Node> map){\n\t\tif(map.containsKey(node)) return map.get(node);\n\t\tNode newNode = new Node(node.val);\n\t\tmap.put(node, newNode);\n\t\tfor(Node neighbor : node.neighbors){\n\t\t\tnewNode.neighbors.add(cloneGraph(neighbor, map));\n\t\t}\n\t\treturn newNode;\n\t}\n}\n",
            "\tvoid cloneGraph(GraphNode node){\n\t\tif(node == null) return;\n\t\tHashMap<GraphNode, GraphNode> map = new HashMap<GraphNode, GraphNode>();\n\t\tGraphNode newNode = new GraphNode(node.val);\n\t\tmap.put(node, newNode);\n\t\tfor(GraphNode n : node.neighbors){\n\t\t\tif(!map.containsKey(n)){\n\t\t\t\tcloneGraph(n);\n\t\t\t}\n\t\t}\n\t\tfor(GraphNode n : node.neighbors){\n\t\t\tnewNode.neighbors.add(map.get(n));\n\t\t}\n\t}\n}\n",
            "\tvoid cloneGraph(GraphNode node){\n\t\tif(node == null) return;\n\t\tGraphNode newNode = new GraphNode(node.val);\n\t\tHashMap<GraphNode,GraphNode> map = new HashMap<GraphNode,GraphNode>();\n\t\tmap.put(node, newNode);\n\t\tfor(GraphNode n : node.neighbors){\n\t\t\tif(map.containsKey(n)){\n\t\t\t\tnewNode.neighbors.add(map.get(n));\n\t\t\t}else{\n\t\t\t\tGraphNode newN = new GraphNode(n.val);\n\t\t\t\tmap.put(n, newN);\n\t\t\t\tnewNode.neighbors.add(newN);\n\t\t\t\tcloneGraph(n);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid cloneGraph(GraphNode node){\n\t\tif(node == null) return;\n\t\tGraphNode newNode = new GraphNode(node.val);\n\t\tHashMap<GraphNode,GraphNode> map = new HashMap<GraphNode,GraphNode>();\n\t\tmap.put(node, newNode);\n\t\tfor(GraphNode n : node.neighbors){\n\t\t\tif(!map.containsKey(n)){\n\t\t\t\tcloneGraph(n);\n\t\t\t}\n\t\t}\n\t\tfor(GraphNode n : node.neighbors){\n\t\t\tnewNode.neighbors.add(map.get(n));\n\t\t}\n\t}\n}\n",
            "\tvoid cloneGraph(Node node){\n\t\tif(node == null) return;\n\t\tNode newNode = new Node(node.val);\n\t\tMap<Node,Node> map = new HashMap<Node,Node>();\n\t\tmap.put(node, newNode);\n\t\tfor(Node n : node.neighbors){\n\t\t\tif(map.containsKey(n)){\n\t\t\t\tnewNode.neighbors.add(map.get(n));\n\t\t\t}else{\n\t\t\t\tNode newN = new Node(n.val);\n\t\t\t\tmap.put(n, newN);\n\t\t\t\tnewNode.neighbors.add(newN);\n\t\t\t\tcloneGraph(n);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid cloneGraph(Node node){\n\t\tif(node==null) return;\n\t\tNode newNode=new Node(node.val);\n\t\tHashMap<Node,Node> map=new HashMap<Node,Node>();\n\t\tmap.put(node,newNode);\n\t\tfor(Node n:node.neighbors){\n\t\t\tif(map.containsKey(n)){\n\t\t\t\tnewNode.neighbors.add(map.get(n));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tNode newN=new Node(n.val);\n\t\t\t\tmap.put(n,newN);\n\t\t\t\tnewNode.neighbors.add(newN);\n\t\t\t\tcloneGraph(n);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid cloneGraph(Node node){\n\t\tif(node == null) return;\n\t\tNode newNode = new Node(node.val);\n\t\tHashMap<Node,Node> map = new HashMap<Node,Node>();\n\t\tmap.put(node, newNode);\n\t\tfor(Node n : node.neighbors){\n\t\t\tif(map.containsKey(n)){\n\t\t\t\tnewNode.neighbors.add(map.get(n));\n\t\t\t}else{\n\t\t\t\tNode newNeighbor = new Node(n.val);\n\t\t\t\tmap.put(n, newNeighbor);\n\t\t\t\tnewNode.neighbors.add(newNeighbor);\n\t\t\t\tcloneGraph(n);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tClazz(int v){\n\t\tthis.v = v;\n\t\tadj = new ArrayList<>();\n\t}\n\tpublic int v;\n\tpublic ArrayList<Clazz> adj;\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1432",
        "source": "leetcodeTitles",
        "source_id": "107",
        "url": "https://leetcode.com/problems/binary-tree-level-order-traversal-ii/",
        "language": "java",
        "query": "Binary Tree Level Order Traversal II",
        "snippets": [
            "\tList<List<Integer>> levelOrderBottom(TreeNode root) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(root == null) return result;\n\t\tQueue<TreeNode> queue = new LinkedList<TreeNode>();\n\t\tqueue.offer(root);\n\t\twhile(!queue.isEmpty()){\n\t\t\tint size = queue.size();\n\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tTreeNode node = queue.poll();\n\t\t\t\tlist.add(node.val);\n\t\t\t\tif(node.left != null) queue.offer(node.left);\n\t\t\t\tif(node.right != null) queue.offer(node.right);\n\t\t\t}\n\t\t\tresult.add(0, list);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<Integer>> levelOrderBottom(TreeNode root) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(root == null) return result;\n\t\tQueue<TreeNode> queue = new LinkedList<TreeNode>();\n\t\tqueue.offer(root);\n\t\twhile(!queue.isEmpty()){\n\t\t\tint size = queue.size();\n\t\t\tList<Integer> level = new ArrayList<Integer>();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tTreeNode node = queue.poll();\n\t\t\t\tlevel.add(node.val);\n\t\t\t\tif(node.left != null) queue.offer(node.left);\n\t\t\t\tif(node.right != null) queue.offer(node.right);\n\t\t\t}\n\t\t\tresult.add(0, level);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<List<Integer>> levelOrderBottom(TreeNode root) {\n\t\tList<List<Integer>> res = new ArrayList<List<Integer>>();\n\t\tif(root == null) return res;\n\t\tQueue<TreeNode> q = new LinkedList<TreeNode>();\n\t\tq.offer(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tint size = q.size();\n\t\t\tList<Integer> list = new ArrayList<Integer>();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tTreeNode node = q.poll();\n\t\t\t\tlist.add(node.val);\n\t\t\t\tif(node.left != null) q.offer(node.left);\n\t\t\t\tif(node.right != null) q.offer(node.right);\n\t\t\t}\n\t\t\tres.add(0, list);\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1433",
        "source": "leetcodeTitles",
        "source_id": "1920",
        "url": "https://leetcode.com/problems/build-array-from-permutation/",
        "language": "java",
        "query": "Build Array from Permutation",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] arr18 = {1,2,3,4,5,6,7,8,9};\n\t\tint[]\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm2 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm3 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm4 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm5 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm6 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm7 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm8 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm9 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm10 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm11 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm12 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm13 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm14 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm15 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm16 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm17 = {1,2,3,4,5,6,7,8,9};\n\t\tint[] perm\n"
        ],
        "results": 10
    },
    {
        "id": "1434",
        "source": "leetcodeTitles",
        "source_id": "551",
        "url": "https://leetcode.com/problems/student-attendance-record-i/",
        "language": "java",
        "query": "Student Attendance Record I",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tString[] s = new String[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ts[i] = sc.next();\n\t\t}\n\t\tsc.close();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(s[i].charAt(0) == 'A'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tString[] s = new String[n];\n\t\tfor(int a0 = 0; a0 < n; a0++){\n\t\t\ts[a0] = in.next();\n\t\t}\n\t\tint result = new Clazz().checkRecord(s);\n\t\tSystem.out.println(result);\n\t}\n\tpublic int checkRecord(String[] s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length; i++){\n\t\t\tif(s[i].contains(\"A\")){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(s[i].contains(\"LLL\")){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tString[] s = new String[n];\n\t\tfor(int a0 = 0; a0 < n; a0++){\n\t\t\ts[a0] = in.next();\n\t\t}\n\t\tint result = new Clazz().checkRecord(s);\n\t\tSystem.out.println(result);\n\t}\n\t\n\tpublic int checkRecord(String[] s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length; i++){\n\t\t\tif(s[i].equals(\"A\")){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(s[i].equals(\"L\") && s[i+1].equals(\"L\") && s[i+2].equals(\"L\")){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tString[] s = new String[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ts[i] = sc.next();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(s[i].charAt(0) == 'A'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tString[] s = new String[n];\n\t\tfor(int a0 = 0; a0 < n; a0++){\n\t\t\ts[a0] = in.next();\n\t\t}\n\t\tint result = new Clazz().checkRecord(s);\n\t\tSystem.out.println(result);\n\t}\n\tint checkRecord(String[] s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length; i++){\n\t\t\tif(s[i].indexOf('A') == -1){\n\t\t\t\tif(s[i].indexOf('L') == -1 && s[i].indexOf('R') == -1){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = sc.next\n",
            "\t\tstatic void main(String[] args){\n\t\t\tScanner sc = new Scanner(System.in);\n\t\t\tint n = sc.nextInt();\n\t\t\tString[] s = new String[n];\n\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\ts[i] = sc.next();\n\t\t\t}\n\t\t\tsc.close();\n\t\t\tSystem.out.println(solve(s));\n\t\t}\n\t\tstatic String solve(String[] s){\n\t\t\tint[] a = new int[s.length];\n\t\t\tfor(int i = 0; i < s.length; i++){\n\t\t\t\ta[i] = s[i].charAt(0) == 'A' ? 1 : 0;\n\t\t\t}\n\t\t\tint[] b = new int[s.length];\n\t\t\tfor(int i = 0; i < s.length; i++){\n\t\t\t\tb[i] = s[i].charAt(1) == 'A' ? 1 : 0;\n\t\t\t}\n\t\t\tint[] c = new int[s.length];\n\t\t\tfor(int i = 0; i < s.length; i++){\n\t\t\t\tc[i] = s[i].charAt(2) == 'A' ? 1 : 0;\n\t\t\t}\n\t\t\tint[] d = new int[s.length];\n\t\t\tfor(int i = 0; i < s.length; i++){\n\t\t\t\td[i] = s[i].charAt(3) == 'A' ? 1 : 0;\n\t\t\t}\n\t\t\tint[] e = new int[s.length];\n\t\t\tfor(int i = 0; i < s.length; i++){\n\t\t\t\te[i] = s[i].charAt(4) == 'A' ? 1 : 0;\n\t\t\t}\n\t\t\tint[] f = new int[s.length];\n\t\t\tfor(int i = 0; i < s.length; i\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tString s = in.next();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = s.charAt(i) - '0';\n\t\t}\n\t\tSystem.out.println(checkRecord(a));\n\t}\n\tpublic static String checkRecord(int[] a){\n\t\tint absent = 0;\n\t\tint late = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] == 0){\n\t\t\t\tabsent++;\n\t\t\t}\n\t\t\tif(a[i] == 2){\n\t\t\t\tlate++;\n\t\t\t}\n\t\t}\n\t\tif(absent > 1){\n\t\t\treturn \"NO\";\n\t\t}\n\t\tif(late > 1){\n\t\t\treturn \"NO\";\n\t\t}\n\t\treturn \"YES\";\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1435",
        "source": "leetcodeTitles",
        "source_id": "1311",
        "url": "https://leetcode.com/problems/get-watched-videos-by-your-friends/",
        "language": "java",
        "query": "Get Watched Videos by Your Friends",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\t//Your code here\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tint x = sc.nextInt();\n\t\t\tint y = sc.nextInt();\n\t\t\tgraph[x][y] = 1;\n\t\t\tgraph[y][x] = 1;\n\t\t}\n\t\tint q = sc.nextInt();\n\t\tfor(int i = 0; i < q; i++){\n\t\t\tint x = sc.nextInt();\n\t\t\tint y = sc.nextInt();\n\t\t\tint z = sc.nextInt();\n\t\t\tint[] visited = new int[n];\n\t\t\tint[] dist = new int[n];\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tdist[j] = Integer.MAX_VALUE;\n\t\t\t}\n\t\t\tdist[x] = 0;\n\t\t\tQueue<Integer> q1 = new LinkedList<Integer>();\n\t\t\tq1.add(x);\n\t\t\twhile(!q1.isEmpty()){\n\t\t\t\tint curr = q1.remove();\n\t\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\t\tif(graph[curr][j] == 1 && dist[j] == Integer.MAX_VALUE){\n\t\t\t\t\t\tdist[j] = dist[curr] + 1;\n\t\t\t\t\t\tq1.add(j);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(dist[y]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\t//Your code here\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] arr = new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tarr[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] res = new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tres[i][j] = arr[i][j];\n\t\t\t}\n\t\t}\n\t\tint[][] dp = new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tif(i==0 && j==0){\n\t\t\t\t\tdp[i][j] = arr[i][j];\n\t\t\t\t}\n\t\t\t\telse if(i==0){\n\t\t\t\t\tdp[i][j] = dp[i][j-1] + arr[i][j];\n\t\t\t\t}\n\t\t\t\telse if(j==0){\n\t\t\t\t\tdp[i][j] = dp[i-1][j] + arr[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j],dp[i][j-1]) + arr[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[n-1][m-1]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\t//Your code here\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] arr = new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tarr[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] ans = new int[n][m];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tint count = 0;\n\t\t\t\tif(i-1>=0){\n\t\t\t\t\tcount += arr[i-1][j];\n\t\t\t\t}\n\t\t\t\tif(i+1<n){\n\t\t\t\t\tcount += arr[i+1][j];\n\t\t\t\t}\n\t\t\t\tif(j-1>=0){\n\t\t\t\t\tcount += arr[i][j-1];\n\t\t\t\t}\n\t\t\t\tif(j+1<m){\n\t\t\t\t\tcount += arr[i][j+1];\n\t\t\t\t}\n\t\t\t\tans[i][j] = count;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<m;j++){\n\t\t\t\tSystem.out.print(ans[i][j]+\" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\t//Your code here\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] matrix = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tmatrix[i][j] = sc.nextInt();\n\t\t\t}\n\t\t}\n\t\tint k = sc.nextInt();\n\t\tint[] friends = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tfriends[i] = sc.nextInt();\n\t\t}\n\t\tint[] result = getWatchedVideosByYourFriends(matrix, friends);\n\t\tfor(int i = 0; i < result.length; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n\tpublic static int[] getWatchedVideosByYourFriends(int[][] matrix, int[] friends){\n\t\tint[] result = new int[friends.length];\n\t\tfor(int i = 0; i < friends.length; i++){\n\t\t\tint[] temp = new int[matrix[friends[i]].length];\n\t\t\tfor(int j = 0; j < matrix[friends[i]].length; j++){\n\t\t\t\ttemp[j] = matrix[friends[i]][j];\n\t\t\t}\n\t\t\tArrays.sort(temp);\n\t\t\tresult[i] = temp[temp.length - 1];\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\t//Your code here\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[][] graph = new int[n][n];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tgraph[a][b] = 1;\n\t\t\tgraph[b][a] = 1;\n\t\t}\n\t\tint q = sc.nextInt();\n\t\tfor(int i = 0; i < q; i++){\n\t\t\tint a = sc.nextInt();\n\t\t\tint b = sc.nextInt();\n\t\t\tint[] visited = new int[n];\n\t\t\tint[] ans = new int[n];\n\t\t\tint count = 0;\n\t\t\tdfs(graph, visited, ans, a, b, count);\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(ans[j] == 1)\n\t\t\t\t\tSystem.out.print(j + \" \");\n\t\t\t}\n\t\t\tSystem.out.println();\n\t\t}\n\t}\n\tpublic\n\tstatic void dfs(int[][] graph, int[] visited, int[] ans, int a, int b, int count){\n\t\tif(count == b){\n\t\t\tans[a] = 1;\n\t\t\treturn;\n\t\t}\n\t\tvisited[a] = 1;\n\t\tfor(int i = 0; i < graph[a].length; i++){\n\t\t\tif(graph[a][i] == 1 && visited[i] == 0){\n\t\t\t\tdfs(graph, visited, ans, i, b, count + 1);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tvoid getWatchedVideosByYourFriends(String userId){\n\t\t//Your code here\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] friends = {\"John\", \"Bob\", \"Mary\"};\n\t\tString[][] watchedVideos = {{\"John\", \"Cat Videos\", \"Dog Videos\"}, {\"Bob\", \"Cat Videos\", \"Dog Videos\"}, {\"Mary\", \"Cat Videos\", \"Dog Videos\"}};\n\t\tString[][] watchedVideosByFriends = new String[friends.length][];\n\t\tfor(int i = 0; i < friends.length; i++){\n\t\t\twatchedVideosByFriends[i] = new String[watchedVideos[i].length];\n\t\t\tfor(int j = 0; j < watchedVideos[i].length; j++){\n\t\t\t\twatchedVideosByFriends[i][j] = friends[i] + \" watched \" + watchedVideos[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < friends.length; i++){\n\t\t\tfor(int j = 0; j < watchedVideosByFriends[i].length; j++){\n\t\t\t\tSystem.out.println(watchedVideosByFriends[i][j]);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] friends = {\"John\", \"Mary\", \"Bob\", \"Tom\"};\n\t\tString[] videos = {\"John likes to watch James Bond, Mary likes to watch James Bond, Bob likes to watch James Bond, Tom likes to watch James Bond\",\n\t\t\t\t\t\t\t\"John likes to watch James Bond, Mary likes to watch James Bond, Bob likes to watch James Bond, Tom likes to watch James Bond\",\n\t\t\t\t\t\t\t\"John likes to watch James Bond, Mary likes to watch James Bond, Bob likes to watch James Bond, Tom likes to watch James Bond\",\n\t\t\t\t\t\t\t\"John likes to watch James Bond, Mary likes to watch James Bond, Bob likes to watch James Bond, Tom likes to watch James Bond\"};\n\t\tString[] result = getWatchedVideosByYourFriends(friends, videos);\n\t\tfor(String s: result){\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n\tpublic static String[] getWatchedVideosByYourFriends(String[] friends, String[] videos){\n\t\tString[] result = new String[friends.length];\n\t\tfor(int i = 0; i < friends.length; i++){\n\t\t\tString[] friendVideos = videos[i].split(\" \");\n\t\t\tString[] friendVideos2 = new String[friendVideos.length];\n\t\t\tfor(int j = 0; j < friendVideos.length; j++){\n\t\t\t\tfriendVideos2[j] = friendVideos[j].split(\",\")[0];\n\t\t\t}\n\t\t\tresult[i] = getWatchedVideos(friendVideos2);\n\t\t}\n\t\treturn result;\n\t}\n\tpublic static String getWatchedVideos(String[] videos){\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < videos.length; i++){\n\t\t\tif(i == 0){\n\t\t\t\tresult = videos[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tresult = result + \",\" + videos[i];\n"
        ],
        "results": 10
    },
    {
        "id": "1436",
        "source": "leetcodeTitles",
        "source_id": "1175",
        "url": "https://leetcode.com/problems/prime-arrangements/",
        "language": "java",
        "query": "Prime Arangements",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n=Integer.parseInt(args[0]);\n\t\tint[] a=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i]=i+1;\n\t\t}\n\t\tint[] b=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tb[i]=i+1;\n\t\t}\n\t\tint[] c=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tc[i]=i+1;\n\t\t}\n\t\tint[] d=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\td[i]=i+1;\n\t\t}\n\t\tint[] e=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\te[i]=i+1;\n\t\t}\n\t\tint[] f=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tf[i]=i+1;\n\t\t}\n\t\tint[] g=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tg[i]=i+1;\n\t\t}\n\t\tint[] h=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\th[i]=i+1;\n\t\t}\n\t\tint[] i=new int[n];\n\t\tfor(int j=0;j<n;j++){\n\t\t\ti[j]=j+1;\n\t\t}\n\t\tint[] j=new int[n];\n\t\tfor(int k=0;k<n;k++){\n\t\t\tj[k]=k+1;\n\t\t}\n\t\tint[] k=new int[n];\n\t\tfor(int l=0;l<n\n",
            "\tstatic void main(String[] args){\n\t\tint n=Integer.parseInt(args[0]);\n\t\tint[] a=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i]=i+1;\n\t\t}\n\t\tint[] b=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tb[i]=i+1;\n\t\t}\n\t\tint count=0;\n\t\twhile(true){\n\t\t\tif(isPrime(a)){\n\t\t\t\tcount++;\n\t\t\t\tSystem.out.println(Arrays.toString(a));\n\t\t\t}\n\t\t\tif(nextPermutation(a)){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Total number of prime arangements is \"+count);\n\t\tcount=0;\n\t\twhile(true){\n\t\t\tif(isPrime(b)){\n\t\t\t\tcount++;\n\t\t\t\tSystem.out.println(Arrays.toString(b));\n\t\t\t}\n\t\t\tif(nextPermutation(b)){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Total number of prime arangements is \"+count);\n\t}\n\tpublic static boolean isPrime(int[] a){\n\t\tint n=a.length;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tif(a[i]==a[j]){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static boolean nextPermutation(int[] a){\n\t\tint n=a.length;\n\t\tint i=n-1;\n\t\twhile(i>0&&a[i-1]>=a[i]){\n",
            "\tstatic void main(String[] args){\n\t\tint n=Integer.parseInt(args[0]);\n\t\tint[] a=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i]=i+1;\n\t\t}\n\t\tint[] b=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tb[i]=i+1;\n\t\t}\n\t\tint[] c=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tc[i]=i+1;\n\t\t}\n\t\tint[] d=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\td[i]=i+1;\n\t\t}\n\t\tint[] e=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\te[i]=i+1;\n\t\t}\n\t\tint[] f=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tf[i]=i+1;\n\t\t}\n\t\tint[] g=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tg[i]=i+1;\n\t\t}\n\t\tint[] h=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\th[i]=i+1;\n\t\t}\n\t\tint[] i=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ti[i]=i+1;\n\t\t}\n\t\tint[] j=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tj[i]=i+1;\n\t\t}\n\t\tint[] k=new int[n];\n\t\tfor(int i=0;i<n\n",
            "\tstatic void main(String[] args){\n\t\tint n=Integer.parseInt(args[0]);\n\t\tint[] a=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i]=i+1;\n\t\t}\n\t\tint count=0;\n\t\twhile(true){\n\t\t\tint i=0;\n\t\t\twhile(i<n-1&&a[i]>a[i+1]){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tif(i==n-1){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint j=n-1;\n\t\t\twhile(j>i&&a[j]<a[i]){\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tint temp=a[i];\n\t\t\ta[i]=a[j];\n\t\t\ta[j]=temp;\n\t\t\tint k=i+1;\n\t\t\tint l=n-1;\n\t\t\twhile(k<l){\n\t\t\t\ttemp=a[k];\n\t\t\t\ta[k]=a[l];\n\t\t\t\ta[l]=temp;\n\t\t\t\tk++;\n\t\t\t\tl--;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n=Integer.parseInt(args[0]);\n\t\tint[] a=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i]=i+1;\n\t\t}\n\t\tint[] b=new int[n];\n\t\tint[] c=new int[n];\n\t\tint[] d=new int[n];\n\t\tint[] e=new int[n];\n\t\tint[] f=new int[n];\n\t\tint[] g=new int[n];\n\t\tint[] h=new int[n];\n\t\tint[] i=new int[n];\n\t\tint[] j=new int[n];\n\t\tint[] k=new int[n];\n\t\tint[] l=new int[n];\n\t\tint[] m=new int[n];\n\t\tint[] o=new int[n];\n\t\tint[] p=new int[n];\n\t\tint[] q=new int[n];\n\t\tint[] r=new int[n];\n\t\tint[] s=new int[n];\n\t\tint[] t=new int[n];\n\t\tint[] u=new int[n];\n\t\tint[] v=new int[n];\n\t\tint[] w=new int[n];\n\t\tint[] x=new int[n];\n\t\tint[] y=new int[n];\n\t\tint[] z=new int[n];\n\t\tint[] aa=new int[n];\n\t\tint[] bb=new int[n];\n\t\tint[] cc=new int[n];\n\t\tint[] dd=new int[n];\n\t\tint[] ee=new int[n];\n\t\tint[] ff=new int[n];\n\t\tint[] gg=new int[n];\n\t\tint[] hh=new int[n];\n\t\tint[] ii=new int[n];\n\t\tint[] jj=new int[n];\n\t\tint[] kk=new int[n];\n",
            "\tstatic void main(String[] args){\n\t\tint n=Integer.parseInt(args[0]);\n\t\tint[] a=new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i]=i+1;\n\t\t}\n\t\tint count=0;\n\t\twhile(true){\n\t\t\tif(isPrime(a[0])){\n\t\t\t\tcount++;\n\t\t\t\tif(count==n){\n\t\t\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\t\t\tSystem.out.print(a[i]+\" \");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ta[0]++;\n\t\t\tfor(int i=0;i<n;i++){\n\t\t\t\tif(a[i]>a[i+1]){\n\t\t\t\t\tint temp=a[i];\n\t\t\t\t\ta[i]=a[i+1];\n\t\t\t\t\ta[i+1]=temp;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tpublic static boolean isPrime(int n){\n\t\tif(n==1)return false;\n\t\tfor(int i=2;i<=Math.sqrt(n);i++){\n\t\t\tif(n%i==0)return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(count < n){\n\t\t\tSystem.out.println(a[count]);\n\t\t\tcount++;\n\t\t}\n\t\tint i = 0;\n\t\tint j = n-1;\n\t\twhile(i < j){\n\t\t\tint temp = a[i];\n\t\t\ta[i] = a[j];\n\t\t\ta[j] = temp;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tcount = 0;\n\t\twhile(count < n){\n\t\t\tSystem.out.println(a[count]);\n\t\t\tcount++;\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = i+1;\n\t\t}\n\t\tint count = 0;\n\t\twhile(true){\n\t\t\tif(isPrime(a[0])){\n\t\t\t\tcount++;\n\t\t\t\tif(count == n){\n\t\t\t\t\tfor(int i = 0; i < n; i++){\n\t\t\t\t\t\tSystem.out.print(a[i] + \" \");\n\t\t\t\t\t}\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\ta = nextArrangement(a);\n\t\t}\n\t}\n\tpublic static boolean isPrime(int n){\n\t\tif(n == 1) return false;\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tif(n % i == 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic static int[] nextArrangement(int[] a){\n\t\tint n = a.length;\n\t\tint i = n-1;\n\t\twhile(i > 0 && a[i] > a[i-1]){\n\t\t\ti--;\n\t\t}\n\t\tif(i == 0){\n\t\t\treturn null;\n\t\t}\n\t\tint j = n-1;\n\t\twhile(a[j] < a[i-1]){\n\t\t\tj--;\n\t\t}\n\t\tint temp = a[i-1];\n\t\ta[i-1] = a[j];\n\t\ta[j] = temp;\n\t\tint k = n-1;\n\t\twhile(i < k){\n\t\t\ttemp = a[i];\n\t\t\ta[i] = a[k];\n\t\t\ta[k] = temp;\n"
        ],
        "results": 10
    },
    {
        "id": "1437",
        "source": "leetcodeTitles",
        "source_id": "876",
        "url": "https://leetcode.com/problems/middle-of-the-linked-list/",
        "language": "java",
        "query": "Middle of the Linked List",
        "snippets": [
            "\tNode middle(Node head){\n\t\tNode slow = head;\n\t\tNode fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\treturn slow;\n\t}\n}\n",
            "\tstatic Node middle(Node head){\n\t\tNode slow = head;\n\t\tNode fast = head;\n\t\twhile(fast != null && fast.next != null){\n\t\t\tslow = slow.next;\n\t\t\tfast = fast.next.next;\n\t\t}\n\t\treturn slow;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1438",
        "source": "leetcodeTitles",
        "source_id": "2044",
        "url": "https://leetcode.com/problems/count-number-of-maximum-bitwise-or-subsets/",
        "language": "java",
        "query": "Count Number of Maximum Bitwise-OR Subsets",
        "snippets": [
            "\tint countSubsets(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] dp = new int[n + 1];\n\t\tdp[0] = 1;\n\t\tdp[1] = 1;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tdp[i] = dp[i - 1];\n\t\t\tfor (int j = 0; j < i - 1; j++) {\n\t\t\t\tif (nums[j] <= nums[i - 1]) {\n\t\t\t\t\tdp[i] += dp[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n];\n\t}\n}\n",
            "\tint countSubsets(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] dp = new int[n + 1];\n\t\tdp[0] = 1;\n\t\tdp[1] = 1;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tdp[i] = dp[i - 1];\n\t\t\tfor (int j = 0; j < i - 1; j++) {\n\t\t\t\tif (nums[j] > nums[i - 1]) {\n\t\t\t\t\tdp[i] += dp[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n];\n\t}\n}\n",
            "\tint countBitwiseORs(int[] A) {\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tdp[i] = dp[i - 1];\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (A[i] > A[j] && A[i] < A[i - 1]) {\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tres += dp[i];\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint count(int[] A){\n\t\tint n = A.length;\n\t\tint[] dp = new int[1<<n];\n\t\tfor(int i = 0; i < 1<<n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif((i & (1<<j)) != 0){\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[i^(1<<j)] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[(1<<n)-1];\n\t}\n}\n",
            "\tint countBitWiseORSubsets(int[] A){\n\t\tint n = A.length;\n\t\tint[] dp = new int[1<<n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < 1<<n; j++){\n\t\t\t\tif((j & (1<<i)) == 0){\n\t\t\t\t\tdp[j | (1<<i)] = Math.max(dp[j | (1<<i)], dp[j] + A[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < 1<<n; i++){\n\t\t\tans = Math.max(ans, dp[i]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint countBitWiseORSubsets(int[] A){\n\t\tint n = A.length;\n\t\tint[] dp = new int[1 << n];\n\t\tdp[0] = 1;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < 1 << n; j++){\n\t\t\t\tif((j & (1 << i)) == 0){\n\t\t\t\t\tdp[j | (1 << i)] += dp[j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < 1 << n; i++){\n\t\t\tres += dp[i];\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1439",
        "source": "leetcodeTitles",
        "source_id": "1619",
        "url": "https://leetcode.com/problems/mean-of-array-after-removing-some-elements/",
        "language": "java",
        "query": "Mean of Array After Removing Some Elements",
        "snippets": [
            "\tstatic int mean(int[] arr, int n, int m){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(i < m){\n\t\t\t\tsum += arr[i];\n\t\t\t}\n\t\t}\n\t\treturn sum/m;\n\t}\n}\n",
            "\tstatic int mean(int[] arr, int n, int m){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(i < m){\n\t\t\t\tsum += arr[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsum += arr[i+1];\n\t\t\t}\n\t\t}\n\t\treturn sum/n;\n\t}\n}\n",
            "\tint mean(int[] arr, int n, int m){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(i < m){\n\t\t\t\tsum += arr[i];\n\t\t\t}\n\t\t}\n\t\treturn sum / m;\n\t}\n}\n",
            "\tstatic int mean(int[] a, int m){\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(i < m){\n\t\t\t\tsum += a[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn sum / count;\n\t}\n}\n",
            "\tstatic int mean(int[] a, int m, int n){\n\t\tint sum = 0;\n\t\tfor(int i = m; i < n; i++){\n\t\t\tsum += a[i];\n\t\t}\n\t\treturn sum/(n-m);\n\t}\n}\n",
            "\tstatic int mean(int[] a, int n, int m){\n\t\tint sum=0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(i<m){\n\t\t\t\tsum+=a[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsum-=a[i-m];\n\t\t\t}\n\t\t}\n\t\treturn sum/n;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1440",
        "source": "leetcodeTitles",
        "source_id": "1600",
        "url": "https://leetcode.com/problems/throne-inheritance/",
        "language": "java",
        "query": "Throne Inheritance",
        "snippets": [
            "\tClazz(){\n\t\tSystem.out.println(\"Clazz\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1441",
        "source": "leetcodeTitles",
        "source_id": "343",
        "url": "https://leetcode.com/problems/integer-break/",
        "language": "java",
        "query": "Integer Break",
        "snippets": [
            "\tstatic int breakInteger(int n){\n\t\tint count = 0;\n\t\twhile(n>0){\n\t\t\tn = n/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint breakInteger(int n){\n\t\tint count = 0;\n\t\twhile(n>0){\n\t\t\tn = n/10;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int breakInteger(int n){\n\t\tif(n<=2){\n\t\t\treturn n;\n\t\t}\n\t\tint a=1;\n\t\tint b=2;\n\t\tint c=0;\n\t\twhile(b<n){\n\t\t\tc=a+b;\n\t\t\ta=b;\n\t\t\tb=c;\n\t\t}\n\t\treturn c;\n\t}\n}\n",
            "\tstatic int breakInteger(int n){\n\t\tif(n<=2){\n\t\t\treturn n;\n\t\t}\n\t\tint a=1;\n\t\tint b=2;\n\t\tint c=0;\n\t\twhile(n>=a+b){\n\t\t\tc=a+b;\n\t\t\ta=b;\n\t\t\tb=c;\n\t\t}\n\t\treturn b;\n\t}\n}\n",
            "\tstatic int breakInteger(int n){\n\t\tif(n<=3){\n\t\t\treturn n;\n\t\t}\n\t\telse{\n\t\t\treturn breakInteger(n-3)+breakInteger(n-2)+breakInteger(n-1);\n\t\t}\n\t}\n}\n",
            "\tstatic int breakInteger(int n){\n\t\tint i = 1;\n\t\tint j = 1;\n\t\twhile(i<n){\n\t\t\ti = i*2;\n\t\t\tj++;\n\t\t}\n\t\treturn j;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1442",
        "source": "leetcodeTitles",
        "source_id": "739",
        "url": "https://leetcode.com/problems/daily-temperatures/",
        "language": "java",
        "query": "Daily Temperatura",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint temp = 0;\n\t\tint temp2 = 0;\n\t\tint temp3 = 0;\n\t\tint temp4 = 0;\n\t\tint temp5 = 0;\n\t\tint temp6 = 0;\n\t\tint temp7 = 0;\n\t\tint temp8 = 0;\n\t\tint temp9 = 0;\n\t\tint temp10 = 0;\n\t\tint temp11 = 0;\n\t\tint temp12 = 0;\n\t\tint temp13 = 0;\n\t\tint temp14 = 0;\n\t\tint temp15 = 0;\n\t\tint temp16 = 0;\n\t\tint temp17 = 0;\n\t\tint temp18 = 0;\n\t\tint temp19 = 0;\n\t\tint temp20 = 0;\n\t\tint temp21 = 0;\n\t\tint temp22 = 0;\n\t\tint temp23 = 0;\n\t\tint temp24 = 0;\n\t\tint temp25 = 0;\n\t\tint temp26 = 0;\n\t\tint temp27 = 0;\n\t\tint temp28 = 0;\n\t\tint temp29 = 0;\n\t\tint temp30 = 0;\n\t\tint temp31 = 0;\n\t\tint temp32 = 0;\n\t\tint temp33 = 0;\n\t\tint temp34 = 0;\n\t\tint temp35 = 0;\n\t\tint temp36 = 0;\n\t\tint temp37 = 0;\n\t\tint temp38 = 0;\n\t\tint temp39 = 0;\n\t\tint temp40 = 0;\n\t\tint temp41 = 0;\n\t\tint temp42 = 0;\n\t\tint temp43 = 0;\n\t\tint temp44 = 0;\n\t\tint temp45 = 0;\n\t\tint temp46 = 0;\n\t\tint temp47 = 0;\n\t\tint temp48 = 0;\n\t\tint temp49 = 0;\n\t\tint temp50 = 0;\n\t\tint temp51 = 0;\n\t\tint temp52 = 0;\n\t\tint temp53 = 0;\n\t\tint temp54 = 0;\n\t\tint temp\n",
            "\tstatic void main(String[] args){\n\t\tint temp = 80;\n\t\tif(temp < 80){\n\t\t\tSystem.out.println(\"It is too cold\");\n\t\t}\n\t\telse if(temp > 80 && temp < 90){\n\t\t\tSystem.out.println(\"It is a bit chilly\");\n\t\t}\n\t\telse if(temp > 90 && temp < 100){\n\t\t\tSystem.out.println(\"It is a perfect day\");\n\t\t}\n\t\telse if(temp > 100){\n\t\t\tSystem.out.println(\"It is too hot\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint temp = 0;\n\t\tint temp_max = 0;\n\t\tint temp_min = 0;\n\t\tint temp_sum = 0;\n\t\tint temp_count = 0;\n\t\tint temp_avg = 0;\n\t\tint temp_count_max = 0;\n\t\tint temp_count_min = 0;\n\t\tint temp_count_sum = 0;\n\t\tint temp_count_avg = 0;\n\t\tint temp_count_avg_max = 0;\n\t\tint temp_count_avg_min = 0;\n\t\tint temp_count_avg_sum = 0;\n\t\tint temp_count_avg_count = 0;\n\t\tint temp_count_avg_avg = 0;\n\t\tint temp_count_avg_count_max = 0;\n\t\tint temp_count_avg_count_min = 0;\n\t\tint temp_count_avg_count_sum = 0;\n\t\tint temp_count_avg_count_avg = 0;\n\t\tint temp_count_avg_count_avg_max = 0;\n\t\tint temp_count_avg_count_avg_min = 0;\n\t\tint temp_count_avg_count_avg_sum = 0;\n\t\tint temp_count_avg_count_avg_count = 0;\n\t\tint temp_count_avg_count_avg_avg = 0;\n\t\tint temp_count_avg_count_avg_count_max = 0;\n\t\tint temp_count_avg_count_avg_count_min = 0;\n\t\tint temp_count_avg_count_avg_count_sum = 0;\n\t\tint temp_count_avg_count_avg_count_avg = 0;\n\t\tint temp_count_avg_count_avg_count_avg_max = 0;\n\t\tint temp_count_avg_count_avg_count_avg_min\n"
        ],
        "results": 10
    },
    {
        "id": "1443",
        "source": "leetcodeTitles",
        "source_id": "1144",
        "url": "https://leetcode.com/problems/decrease-elements-to-make-array-zigzag/",
        "language": "java",
        "query": "Decrease Elements To Make Array Zigzag",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9,\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7};\n\t\tint[] arr2 = {1,2,3,4,5,6,7};\n\t\tint[] arr3 = {1,2,3,4,5,6,7};\n\t\tint[] arr4 = {1,2,3,4,5,6,7};\n\t\tint[] arr5 = {1,2,3,4,5,6,7};\n\t\tint[] arr6 = {1,2,3,4,5,6,7};\n\t\tint[] arr7 = {1,2,3,4,5,6,7};\n\t\tint[] arr8 = {1,2,3,4,5,6,7};\n\t\tint[] arr9 = {1,2,3,4,5,6,7};\n\t\tint[] arr10 = {1,2,3,4,5,6,7};\n\t\tint[] arr11 = {1,2,3,4,5,6,7};\n\t\tint[] arr12 = {1,2,3,4,5,6,7};\n\t\tint[] arr13 = {1,2,3,4,5,6,7};\n\t\tint[] arr14 = {1,2,3,4,5,6,7};\n\t\tint[] arr15 = {1,2,3,4,5,6,7};\n\t\tint[] arr16 = {1,2,3,4,5,6,7};\n\t\tint[] arr17 = {1,2,3,4,5,6,7};\n\t\tint[] arr18 = {1,2,3,4,5,6,7};\n\t\tint[] arr19 = {1,2,3,4,5,6,7};\n\t\tint[] arr20 = {1,2,3,4,5,6,7};\n\t\tint[] arr21 = {1,2,3,4,5,6,7};\n\t\tint[] arr22 =\n",
            "\tvoid decrease(int[] arr){\n\t\tint n = arr.length;\n\t\tint[] left = new int[n];\n\t\tint[] right = new int[n];\n\t\tleft[0] = arr[0];\n\t\tright[n-1] = arr[n-1];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tleft[i] = Math.min(left[i-1], arr[i]);\n\t\t}\n\t\tfor(int i = n-2; i >= 0; i--){\n\t\t\tright[i] = Math.min(right[i+1], arr[i]);\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = Math.min(left[i], right[i]);\n\t\t}\n\t}\n}\n",
            "\tvoid zigzag(int[] a){\n\t\tint n = a.length;\n\t\tint i = 0;\n\t\tint j = n-1;\n\t\twhile(i<j){\n\t\t\tif(a[i]>a[j]){\n\t\t\t\tint temp = a[i];\n\t\t\t\ta[i] = a[j];\n\t\t\t\ta[j] = temp;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t}\n}\n",
            "\tstatic int[] makeArrayZigZag(int[] a){\n\t\tint[] b = new int[a.length];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\twhile(i < a.length){\n\t\t\tif(i % 2 == 0){\n\t\t\t\tb[j] = a[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tb[b.length - 1 - k] = a[i];\n\t\t\t\tk++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn b;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1444",
        "source": "leetcodeTitles",
        "source_id": "1583",
        "url": "https://leetcode.com/problems/count-unhappy-friends/",
        "language": "java",
        "query": "Count Unhappy Friends",
        "snippets": [
            "\tstatic int countUnhappyFriends(int[][] friends){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < friends.length; i++){\n\t\t\tfor(int j = 0; j < friends[i].length; j++){\n\t\t\t\tif(friends[i][j] == 1 && friends[j][i] == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(a[i][j] == 0){\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ans);\n\t}\n}\n",
            "\tstatic int countUnhappyFriends(int n, int[][] friends){\n\t\tint unhappy = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(friends[i][j] == 1){\n\t\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\t\tif(friends[j][k] == 1 && friends[i][k] == 0){\n\t\t\t\t\t\t\tunhappy++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn unhappy;\n\t}\n}\n",
            "\tint countUnhappyFriends(int n, int[][] friends){\n\t\tint unhappy = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(friends[i][j] == 1){\n\t\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\t\tif(friends[j][k] == 1 && friends[i][k] == 0){\n\t\t\t\t\t\t\tunhappy++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn unhappy;\n\t}\n}\n",
            "\tstatic int countUnhappyFriends(int n, int[][] friends){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(friends[i][j] == 1){\n\t\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\t\tif(friends[j][k] == 1 && friends[i][k] == 0){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countUnhappyFriends(int[][] friends){\n\t\tint unhappy = 0;\n\t\tfor(int i = 0; i < friends.length; i++){\n\t\t\tfor(int j = 0; j < friends[i].length; j++){\n\t\t\t\tif(friends[i][j] == 1){\n\t\t\t\t\tunhappy++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn unhappy;\n\t}\n}\n",
            "\tstatic int countUnhappyFriends(int n, int[][] friends){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(friends[i][j] == 1 && friends[j][i] == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countUnhappyFriends(int n, int[][] a){\n\t\tint ans = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i != j){\n\t\t\t\t\tif(a[i][j] == 1){\n\t\t\t\t\t\tans++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1445",
        "source": "leetcodeTitles",
        "source_id": "1304",
        "url": "https://leetcode.com/problems/find-n-unique-integers-sum-up-to-zero/",
        "language": "java",
        "query": "Find N Unique Integers Sum up to Zero",
        "snippets": [
            "\tint[] sumZero(int n) {\n\t\tint[] res = new int[n];\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\twhile (i < j) {\n\t\t\tres[i] = i + 1;\n\t\t\tres[j] = -(j + 1);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tif (i == j) {\n\t\t\tres[i] = 0;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] sumZero(int n) {\n\t\tint[] res = new int[n];\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\twhile (i < j) {\n\t\t\tres[i] = -(j - i);\n\t\t\tres[j] = (j - i);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tif (i == j) {\n\t\t\tres[i] = 0;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] sumZero(int n) {\n\t\tint[] res = new int[n];\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\twhile(i < j){\n\t\t\tres[i] = -1;\n\t\t\tres[j] = 1;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tif(i == j){\n\t\t\tres[i] = 0;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[] sumZero(int n) {\n\t\tint[] res = new int[n];\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\twhile (i < j) {\n\t\t\tres[i] = i + 1;\n\t\t\tres[j] = -(i + 1);\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tif (i == j) {\n\t\t\tres[i] = 0;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {-2, -1, 1, 2};\n\t\tint n = 4;\n\t\tint[] res = findNUniqueIntegersSumupToZero(n);\n\t\tfor(int i = 0; i < res.length; i++){\n\t\t\tSystem.out.print(res[i] + \" \");\n\t\t}\n\t}\n\tpublic static int[] findNUniqueIntegersSumupToZero(int n){\n\t\tint[] res = new int[n];\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\tint count = 0;\n\t\twhile(count < n){\n\t\t\tif(i == j){\n\t\t\t\tres[count] = i;\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse if(i < j){\n\t\t\t\tres[count] = i;\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tres[count] = j;\n\t\t\t\tcount++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] nums = {-3,1,1,-3,5};\n\t\tSystem.out.println(findNUniqueIntegersSumuptoZero(nums));\n\t}\n\tpublic static int findNUniqueIntegersSumuptoZero(int[] nums){\n\t\tint n = nums.length;\n\t\tint[] count = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tcount[nums[i]]++;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(count[i] == 1){\n\t\t\t\tres++;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1446",
        "source": "leetcodeTitles",
        "source_id": "450",
        "url": "https://leetcode.com/problems/delete-node-in-a-bst/",
        "language": "java",
        "query": "Delete Node in a BST",
        "snippets": [
            "\tNode deleteNode(Node root, int key) {\n\t\tif(root == null) return root;\n\t\tif(key < root.val) root.left = deleteNode(root.left, key);\n\t\telse if(key > root.val) root.right = deleteNode(root.right, key);\n\t\telse{\n\t\t\tif(root.left == null) return root.right;\n\t\t\telse if(root.right == null) return root.left;\n\t\t\telse{\n\t\t\t\tNode temp = root.right;\n\t\t\t\twhile(temp.left != null) temp = temp.left;\n\t\t\t\troot.val = temp.val;\n\t\t\t\troot.right = deleteNode(root.right, temp.val);\n\t\t\t}\n\t\t}\n\t\treturn root;\n\t}\n}\n",
            "\tNode deleteNode(Node root, int key) {\n\t\tif(root == null) return root;\n\t\tif(root.val < key) root.right = deleteNode(root.right, key);\n\t\telse if(root.val > key) root.left = deleteNode(root.left, key);\n\t\telse{\n\t\t\tif(root.left == null) return root.right;\n\t\t\telse if(root.right == null) return root.left;\n\t\t\telse{\n\t\t\t\tNode temp = root.right;\n\t\t\t\twhile(temp.left != null) temp = temp.left;\n\t\t\t\troot.val = temp.val;\n\t\t\t\troot.right = deleteNode(root.right, temp.val);\n\t\t\t}\n\t\t}\n\t\treturn root;\n\t}\n}\n",
            "\tstatic void deleteNode(Node root, int data){\n\t\tif(root == null){\n\t\t\treturn;\n\t\t}\n\t\tif(data < root.data){\n\t\t\tdeleteNode(root.left, data);\n\t\t}\n\t\telse if(data > root.data){\n\t\t\tdeleteNode(root.right, data);\n\t\t}\n\t\telse{\n\t\t\tif(root.left == null && root.right == null){\n\t\t\t\troot = null;\n\t\t\t}\n\t\t\telse if(root.left == null){\n\t\t\t\troot = root.right;\n\t\t\t}\n\t\t\telse if(root.right == null){\n\t\t\t\troot = root.left;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tNode temp = root.right;\n\t\t\t\twhile(temp.left != null){\n\t\t\t\t\ttemp = temp.left;\n\t\t\t\t}\n\t\t\t\troot.data = temp.data;\n\t\t\t\tdeleteNode(root.right, temp.data);\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void deleteNode(Node root, int key){\n\t\tif(root == null)\n\t\t\treturn;\n\t\tif(root.data == key){\n\t\t\tif(root.left == null && root.right == null){\n\t\t\t\troot = null;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(root.left == null){\n\t\t\t\troot = root.right;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(root.right == null){\n\t\t\t\troot = root.left;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tNode temp = root.right;\n\t\t\twhile(temp.left != null){\n\t\t\t\ttemp = temp.left;\n\t\t\t}\n\t\t\troot.data = temp.data;\n\t\t\tdeleteNode(root.right, temp.data);\n\t\t}\n\t\telse if(root.data > key){\n\t\t\tdeleteNode(root.left, key);\n\t\t}\n\t\telse{\n\t\t\tdeleteNode(root.right, key);\n\t\t}\n\t}\n}\n",
            "\tNode deleteNode(Node root, int key) {\n\t\tif(root == null) return null;\n\t\tif(root.val == key) {\n\t\t\tif(root.left == null) return root.right;\n\t\t\tif(root.right == null) return root.left;\n\t\t\tNode temp = root.right;\n\t\t\twhile(temp.left != null) temp = temp.left;\n\t\t\troot.val = temp.val;\n\t\t\troot.right = deleteNode(root.right, temp.val);\n\t\t}\n\t\telse if(root.val > key) root.left = deleteNode(root.left, key);\n\t\telse root.right = deleteNode(root.right, key);\n\t\treturn root;\n\t}\n}\n",
            "\tstatic void deleteNode(Node root, int data){\n\t\tif(root == null)\n\t\t\treturn;\n\t\tif(data < root.data){\n\t\t\tdeleteNode(root.left, data);\n\t\t}\n\t\telse if(data > root.data){\n\t\t\tdeleteNode(root.right, data);\n\t\t}\n\t\telse{\n\t\t\tif(root.left == null && root.right == null){\n\t\t\t\troot = null;\n\t\t\t}\n\t\t\telse if(root.left == null){\n\t\t\t\troot = root.right;\n\t\t\t}\n\t\t\telse if(root.right == null){\n\t\t\t\troot = root.left;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tNode temp = root.right;\n\t\t\t\twhile(temp.left != null){\n\t\t\t\t\ttemp = temp.left;\n\t\t\t\t}\n\t\t\t\troot.data = temp.data;\n\t\t\t\tdeleteNode(root.right, temp.data);\n\t\t\t}\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1447",
        "source": "leetcodeTitles",
        "source_id": "434",
        "url": "https://leetcode.com/problems/number-of-segments-in-a-string/",
        "language": "java",
        "query": "Number of Segments in a String",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tint count = 0;\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) == ' '){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count+1);\n\t}\n}\n",
            "\tstatic int countSegments(String s) {\n\t\tint count = 0;\n\t\tboolean flag = false;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) != ' '){\n\t\t\t\tflag = true;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tif(flag){\n\t\t\t\t\tcount++;\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag)\n\t\t\tcount++;\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countSegments(String s) {\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < s.length()){\n\t\t\tif(s.charAt(i) != ' ' && (i == 0 || s.charAt(i-1) == ' ')){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tSystem.out.println(str.length());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tSystem.out.println(str.length());\n\t\tSystem.out.println(str.split(\" \").length);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tSystem.out.println(s.length());\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1448",
        "source": "leetcodeTitles",
        "source_id": "1995",
        "url": "https://leetcode.com/problems/count-special-quadruplets/",
        "language": "java",
        "query": "Count Special Quadruplets",
        "snippets": [
            "\tstatic int countSpecialQuadruplets(int[] arr, int a, int b, int c) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tfor (int l = k + 1; l < arr.length; l++) {\n\t\t\t\t\t\tif (arr[i] + arr[j] + arr[k] + arr[l] == a && arr[i] * arr[j] * arr[k] * arr[l] == b && arr[i] % arr[j] == c) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countSpecialQuadruplets(int[] arr, int a, int b, int c) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tfor (int l = k + 1; l < arr.length; l++) {\n\t\t\t\t\t\tif (arr[i] + arr[j] + arr[k] + arr[l] == a && arr[i] + arr[j] + arr[k] == b && arr[i] + arr[j] == c) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countSpecialQuadruplets(int[] arr, int a, int b, int c) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tfor (int j = i + 1; j < arr.length; j++) {\n\t\t\t\tfor (int k = j + 1; k < arr.length; k++) {\n\t\t\t\t\tfor (int l = k + 1; l < arr.length; l++) {\n\t\t\t\t\t\tif (arr[i] + arr[j] + arr[k] + arr[l] == a && arr[i] * arr[j] * arr[k] * arr[l] == b && arr[i] + arr[j] + arr[k] + arr[l] + arr[i] * arr[j] * arr[k] * arr[l] == c) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countSpecialQuadruplets(int[] arr, int a, int b, int c) {\n\t\tint count = 0;\n\t\tint n = arr.length;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tfor (int k = j + 1; k < n; k++) {\n\t\t\t\t\tfor (int l = k + 1; l < n; l++) {\n\t\t\t\t\t\tif (arr[i] + arr[j] + arr[k] + arr[l] == a && arr[i] * arr[j] * arr[k] * arr[l] == b && arr[i] + arr[j] + arr[k] + arr[l] + arr[i] * arr[j] * arr[k] * arr[l] == c) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint n = arr.length;\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tfor(int l = 0; l < n; l++){\n\t\t\t\t\t\tif(i != j && i != k && i != l && j != k && j != l && k != l){\n\t\t\t\t\t\t\tsum = arr[i] + arr[j] + arr[k] + arr[l];\n\t\t\t\t\t\t\tif(sum == 0){\n\t\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic int countQuadruplets(int[] arr, int x) {\n\t\tint count = 0;\n\t\tint n = arr.length;\n\t\tArrays.sort(arr);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tfor (int k = j + 1; k < n; k++) {\n\t\t\t\t\tfor (int l = k + 1; l < n; l++) {\n\t\t\t\t\t\tif (arr[i] + arr[j] + arr[k] + arr[l] == x) {\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic\n\tvoid main(String[] args){\n\t\tint n = 4;\n\t\tint[] arr = {1,1,1,1};\n\t\tSystem.out.println(countSpecialQuadruplets(n, arr));\n\t}\n\tpublic static int countSpecialQuadruplets(int n, int[] arr) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tfor(int j = i+1; j < arr.length; j++){\n\t\t\t\tfor(int k = j+1; k < arr.length; k++){\n\t\t\t\t\tfor(int l = k+1; l < arr.length; l++){\n\t\t\t\t\t\tif(arr[i] + arr[j] + arr[k] + arr[l] == n){\n\t\t\t\t\t\t\tcount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1449",
        "source": "leetcodeTitles",
        "source_id": "125",
        "url": "https://leetcode.com/problems/valid-palindrome/",
        "language": "java",
        "query": "Valid Palindrome",
        "snippets": [
            "\tboolean isPalindrome(String s) {\n\t\tif(s == null || s.length() == 0) return true;\n\t\tint i = 0, j = s.length() - 1;\n\t\twhile(i < j){\n\t\t\twhile(i < j && !Character.isLetterOrDigit(s.charAt(i))) i++;\n\t\t\twhile(i < j && !Character.isLetterOrDigit(s.charAt(j))) j--;\n\t\t\tif(Character.toLowerCase(s.charAt(i)) != Character.toLowerCase(s.charAt(j))) return false;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean isPalindrome(String s) {\n\t\tif(s == null || s.length() == 0) return true;\n\t\tint i = 0, j = s.length() - 1;\n\t\twhile(i < j){\n\t\t\tif(!Character.isLetterOrDigit(s.charAt(i))) i++;\n\t\t\telse if(!Character.isLetterOrDigit(s.charAt(j))) j--;\n\t\t\telse if(Character.toLowerCase(s.charAt(i)) != Character.toLowerCase(s.charAt(j))) return false;\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean isPalindrome(String s) {\n\t\tint i = 0, j = s.length() - 1;\n\t\twhile (i < j) {\n\t\t\twhile (i < j && !Character.isLetterOrDigit(s.charAt(i)))\n\t\t\t\ti++;\n\t\t\twhile (i < j && !Character.isLetterOrDigit(s.charAt(j)))\n\t\t\t\tj--;\n\t\t\tif (Character.toLowerCase(s.charAt(i)) != Character.toLowerCase(s.charAt(j)))\n\t\t\t\treturn false;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean isPalindrome(String s) {\n\t\tif(s.length() == 0) return true;\n\t\tint i = 0;\n\t\tint j = s.length() - 1;\n\t\twhile(i < j){\n\t\t\tif(!Character.isLetterOrDigit(s.charAt(i))) i++;\n\t\t\telse if(!Character.isLetterOrDigit(s.charAt(j))) j--;\n\t\t\telse if(Character.toLowerCase(s.charAt(i)) != Character.toLowerCase(s.charAt(j))) return false;\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean isPalindrome(String s) {\n\t\tif(s.length() == 0) return true;\n\t\tint i = 0, j = s.length() - 1;\n\t\twhile(i < j){\n\t\t\twhile(i < j && !Character.isLetterOrDigit(s.charAt(i))) i++;\n\t\t\twhile(i < j && !Character.isLetterOrDigit(s.charAt(j))) j--;\n\t\t\tif(Character.toLowerCase(s.charAt(i)) != Character.toLowerCase(s.charAt(j))) return false;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1450",
        "source": "leetcodeTitles",
        "source_id": "1021",
        "url": "https://leetcode.com/problems/remove-outermost-parentheses/",
        "language": "java",
        "query": "Remove Outermost Parentheses",
        "snippets": [
            "\tString removeOuterParentheses(String S){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < S.length(); i++){\n\t\t\tif(S.charAt(i) == '('){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(S.charAt(i) == ')'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(count != 0){\n\t\t\t\tsb.append(S.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeOuterParentheses(String S){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < S.length(); i++){\n\t\t\tif(S.charAt(i) == '('){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse if(S.charAt(i) == ')'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(count > 0){\n\t\t\t\tsb.append(S.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeOuterParentheses(String S){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < S.length(); i++){\n\t\t\tif(S.charAt(i) == '('){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(S.charAt(i) == ')'){\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(count == 0){\n\t\t\t\tsb.append(S.substring(i + 1, S.length() - 1));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString removeOuterParentheses(String S){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < S.length(); i++){\n\t\t\tif(S.charAt(i) == '('){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount--;\n\t\t\t}\n\t\t\tif(count > 0){\n\t\t\t\tsb.append(S.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tvoid removeOuterParentheses(String S){\n\t\tint i = 0;\n\t\tint j = S.length() - 1;\n\t\twhile(i < j){\n\t\t\tif(S.charAt(i) == '(' && S.charAt(j) == ')'){\n\t\t\t\tS = S.substring(0, i) + S.substring(i + 1, j) + S.substring(j + 1);\n\t\t\t\ti = 0;\n\t\t\t\tj = S.length() - 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(S);\n\t}\n}\n",
            "\tvoid removeOuterParentheses(String S){\n\t\tint i = 0;\n\t\tint j = S.length() - 1;\n\t\twhile(i < j){\n\t\t\tif(S.charAt(i) == '(' && S.charAt(j) == ')'){\n\t\t\t\tS = S.substring(0, i) + S.substring(i + 1, j) + S.substring(j + 1);\n\t\t\t\ti--;\n\t\t\t\tj--;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\tSystem.out.println(S);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1451",
        "source": "leetcodeTitles",
        "source_id": "1974",
        "url": "https://leetcode.com/problems/minimum-time-to-type-word-using-special-typewriter/",
        "language": "java",
        "query": "Minimum Time to Type Word Using Special Typewriter",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i=0;i<m;i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int k = 0; k < m; k++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint m = sc.nextInt();\n\t\tint[] arr1 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr1[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr2 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr2[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr3 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr3[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr4 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr4[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr5 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr5[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr6 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr6[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr7 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr7[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr8 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr8[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr9 = new int[m];\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint m = sc.nextInt();\n\t\tint[] arr2 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr2[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr3 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr3[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr4 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr4[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr5 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr5[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr6 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr6[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr7 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr7[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr8 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr8[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr9 = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tarr9[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr10 = new int[m];\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint m = in.nextInt();\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i=0;i<n;i++)\n\t\t\ta[i] = sc.nextInt();\n\t\tint[] b = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\tb[i] = sc.nextInt();\n\t\tint[] c = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\tc[i] = sc.nextInt();\n\t\tint[] d = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\td[i] = sc.nextInt();\n\t\tint[] e = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\te[i] = sc.nextInt();\n\t\tint[] f = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\tf[i] = sc.nextInt();\n\t\tint[] g = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\tg[i] = sc.nextInt();\n\t\tint[] h = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\th[i] = sc.nextInt();\n\t\tint[] i = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\ti[i] = sc.nextInt();\n\t\tint[] j = new int[m];\n\t\tfor(int i=0;i<m;i++)\n\t\t\tj[i] = sc.nextInt();\n\t\tint[] k = new int[m];\n\t\tfor(int i=0;i<m;i++)\n",
            "\tstatic void main(String[] args) {\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] arr = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr2 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr2[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr3 = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr3[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr4 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr4[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr5 = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr5[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr6 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr6[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr7 = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr7[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr8 = new int[m];\n\t\tfor(int i=0;i<m;i++){\n\t\t\tarr8[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr9 = new int[n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tarr9[i] = sc.nextInt();\n\t\t}\n\t\tint[] arr10 = new int[m];\n"
        ],
        "results": 10
    },
    {
        "id": "1452",
        "source": "leetcodeTitles",
        "source_id": "2195",
        "url": "https://leetcode.com/problems/append-k-integers-with-minimal-sum/",
        "language": "java",
        "query": "Append K Integers With Minimal Sum",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[k];\n\t\tfor(int j = 0; j < k; j++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = a[i];\n\t\t}\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tc[i] += b[i];\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.print(c[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint k = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tsum += a[i];\n\t\t\tcount++;\n\t\t\tif(sum >= k){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint k = 3;\n\t\tint sum = 0;\n\t\tint[] result = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tresult[i] = arr[i];\n\t\t\tsum += arr[i];\n\t\t}\n\t\tfor(int i = k; i < arr.length; i++){\n\t\t\tif(sum > arr[i]){\n\t\t\t\tsum -= result[0];\n\t\t\t\tresult[0] = arr[i];\n\t\t\t\tsum += arr[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < result.length; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tvoid appendKIntegersWithMinimalSum(int[] arr, int k){\n\t\tint n = arr.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = arr[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = dp[i-1] + arr[i];\n\t\t}\n\t\tint min = dp[0];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tif(j-i+1 == k){\n\t\t\t\t\tmin = Math.min(min, dp[j] - dp[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n}\n",
            "\tvoid appendKIntegersWithMinimalSum(int[] a, int k){\n\t\tint n = a.length;\n\t\tint[] sum = new int[n];\n\t\tsum[0] = a[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tsum[i] = sum[i-1] + a[i];\n\t\t}\n\t\tint min = sum[0];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i + 1; j < n; j++){\n\t\t\t\tif(sum[j] - sum[i] < min){\n\t\t\t\t\tmin = sum[j] - sum[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(min);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5};\n\t\tint k = 3;\n\t\tint sum = 0;\n\t\tint[] result = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tresult[i] = arr[i];\n\t\t\tsum += arr[i];\n\t\t}\n\t\tfor(int i = k; i < arr.length; i++){\n\t\t\tif(sum + arr[i] < sum){\n\t\t\t\tsum = sum + arr[i];\n\t\t\t\tresult[0] = arr[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < result.length; i++){\n\t\t\tSystem.out.print(result[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic int[] appendKIntegers(int[] arr, int k){\n\t\tint[] result = new int[arr.length + k];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < arr.length && j < result.length){\n\t\t\tresult[j] = arr[i];\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\twhile(j < result.length){\n\t\t\tresult[j] = 0;\n\t\t\tj++;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint[] appendK(int[] arr, int k){\n\t\tint[] result = new int[arr.length + k];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < arr.length && j < result.length){\n\t\t\tif(arr[i] < k){\n\t\t\t\tresult[j++] = arr[i++];\n\t\t\t}else{\n\t\t\t\tresult[j++] = k;\n\t\t\t}\n\t\t}\n\t\twhile(j < result.length){\n\t\t\tresult[j++] = k;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tint minSum(int[] A, int K){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = A[0];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = dp[i-1] + A[i];\n\t\t}\n\t\tint min = dp[n-1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tif(j - i + 1 >= K){\n\t\t\t\t\tmin = Math.min(min, dp[j] - dp[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1453",
        "source": "leetcodeTitles",
        "source_id": "1993",
        "url": "https://leetcode.com/problems/operations-on-tree/",
        "language": "java",
        "query": "Maximum Depth of Binary Tree",
        "snippets": [
            "\tint maxDepth(TreeNode root) {\n\t\tif(root == null) return 0;\n\t\tint left = maxDepth(root.left);\n\t\tint right = maxDepth(root.right);\n\t\treturn Math.max(left, right) + 1;\n\t}\n}\n",
            "\tstatic int maxDepth(TreeNode root) {\n\t\tif(root == null)\n\t\t\treturn 0;\n\t\tint left = maxDepth(root.left);\n\t\tint right = maxDepth(root.right);\n\t\treturn Math.max(left, right) + 1;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1454",
        "source": "leetcodeTitles",
        "source_id": "2008",
        "url": "https://leetcode.com/problems/maximum-earnings-from-taxi/",
        "language": "java",
        "query": "Maximum Earnings From Taxi",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf[i][j] = in.nextInt();\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tint sum = 0;\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tfor(int l = 0; l < m; l++){\n\t\t\t\t\t\tif(k == i || l == j){\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsum += a[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tint sum = 0;\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tfor(int l = 0; l < m; l++){\n\t\t\t\t\t\tsum += a[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t\tsum = 0;\n\t\t\t\tfor(int k = 0; k < n; k++){\n\t\t\t\t\tfor(int l = 0; l < m; l++){\n\t\t\t\t\t\tif(k == i || l == j){\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsum += a[k][l];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i = 0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int b_i = 0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[m];\n\t\tfor(int c_i = 0; c_i < m; c_i++){\n\t\t\tc[c_i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int d_i = 0; d_i < m; d_i++){\n\t\t\td[d_i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[m];\n\t\tfor(int e_i = 0; e_i < m; e_i++){\n\t\t\te[e_i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int f_i = 0; f_i < m; f_i++){\n\t\t\tf[f_i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[m];\n\t\tfor(int g_i = 0; g_i < m; g_i++){\n\t\t\tg[g_i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int h_i = 0; h_i < m; h_i++){\n\t\t\th[h_i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[m];\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tint[][] a = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ta[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] b = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tb[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] c = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tc[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] d = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\td[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] e = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\te[i][j] = in.nextInt();\n\t\t\t}\n\t\t}\n\t\tint[][] f = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tf\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tsum += a[j];\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = sc.next\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i; j < n; j++){\n\t\t\t\tsum += a[j];\n\t\t\t\tif(sum > max){\n\t\t\t\t\tmax = sum;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t}\n}\n",
            "\tstatic int maxEarnings(int[] fares, int[] tips){\n\t\tint max = 0;\n\t\tfor(int i = 0; i < fares.length; i++){\n\t\t\tint temp = fares[i] + tips[i];\n\t\t\tif(temp > max){\n\t\t\t\tmax = temp;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1455",
        "source": "leetcodeTitles",
        "source_id": "201",
        "url": "https://leetcode.com/problems/bitwise-and-of-numbers-range/",
        "language": "java",
        "query": "Bitwise AND of Numbers Range",
        "snippets": [
            "\tstatic int rangeBitwiseAnd(int m, int n){\n\t\tint i = 0;\n\t\twhile(m != n){\n\t\t\tm >>= 1;\n\t\t\tn >>= 1;\n\t\t\ti++;\n\t\t}\n\t\treturn m << i;\n\t}\n}\n",
            "\tint rangeBitwiseAnd(int m, int n) {\n\t\tint i = 0;\n\t\twhile(m != n){\n\t\t\tm >>= 1;\n\t\t\tn >>= 1;\n\t\t\ti++;\n\t\t}\n\t\treturn m << i;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint t = in.nextInt();\n\t\twhile(t-- > 0){\n\t\t\tint n = in.nextInt();\n\t\t\tint m = in.nextInt();\n\t\t\tint ans = 0;\n\t\t\tfor(int i = n; i <= m; i++){\n\t\t\t\tans = ans | i;\n\t\t\t}\n\t\t\tSystem.out.println(ans);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint m = Integer.parseInt(args[0]);\n\t\tint n = Integer.parseInt(args[1]);\n\t\tint count = 0;\n\t\tfor(int i = m; i <= n; i++){\n\t\t\tfor(int j = m; j <= n; j++){\n\t\t\t\tif((i & j) == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint m = Integer.parseInt(args[0]);\n\t\tint n = Integer.parseInt(args[1]);\n\t\tint count = 0;\n\t\tfor(int i = m; i <= n; i++){\n\t\t\tfor(int j = i; j <= n; j++){\n\t\t\t\tif((i & j) == i){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1456",
        "source": "leetcodeTitles",
        "source_id": "2048",
        "url": "https://leetcode.com/problems/next-greater-numerically-balanced-number/",
        "language": "java",
        "query": "Next Greater Numerically Balanced Number",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i = 0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint[] result = nextGreaterN(a);\n\t\tfor(int result_i = 0; result_i < result.length; result_i++){\n\t\t\tSystem.out.print(result[result_i] + (result_i != result.length - 1 ? \" \" : \"\"));\n\t\t}\n\t\tSystem.out.println(\"\");\n\t}\n\tpublic static int[] nextGreaterN(int[] a){\n\t\tint[] result = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tresult[i] = -1;\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tint j = i + 1;\n\t\t\twhile(j < a.length && a[j] < a[i]){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j < a.length){\n\t\t\t\tresult[i] = a[j];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int nextGreaterNumericBalancedNumber(int n){\n\t\tint[] digits = new int[10];\n\t\tint i = 0;\n\t\twhile(n > 0){\n\t\t\tdigits[i] = n % 10;\n\t\t\tn /= 10;\n\t\t\ti++;\n\t\t}\n\t\tint j = i - 1;\n\t\twhile(j >= 0 && digits[j] >= digits[j + 1]){\n\t\t\tj--;\n\t\t}\n\t\tif(j == -1){\n\t\t\treturn -1;\n\t\t}\n\t\tint k = j + 1;\n\t\twhile(k < i && digits[k] <= digits[j]){\n\t\t\tk++;\n\t\t}\n\t\tint temp = digits[j];\n\t\tdigits[j] = digits[k];\n\t\tdigits[k] = temp;\n\t\tint m = j + 1;\n\t\tint n = i - 1;\n\t\twhile(m < n){\n\t\t\ttemp = digits[m];\n\t\t\tdigits[m] = digits[n];\n\t\t\tdigits[n] = temp;\n\t\t\tm++;\n\t\t\tn--;\n\t\t}\n\t\tint result = 0;\n\t\tfor(int l = 0; l < i; l++){\n\t\t\tresult = result * 10 + digits[l];\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int nextGreaterNumericallyBalancedNumber(int n){\n\t\tint[] digits = new int[10];\n\t\tint i = 0;\n\t\twhile(n > 0){\n\t\t\tdigits[i++] = n % 10;\n\t\t\tn /= 10;\n\t\t}\n\t\tint j = i - 1;\n\t\twhile(j > 0 && digits[j] <= digits[j - 1]){\n\t\t\tj--;\n\t\t}\n\t\tif(j == 0){\n\t\t\treturn -1;\n\t\t}\n\t\tint k = j - 1;\n\t\twhile(digits[k] <= digits[j]){\n\t\t\tk--;\n\t\t}\n\t\tint temp = digits[j];\n\t\tdigits[j] = digits[k];\n\t\tdigits[k] = temp;\n\t\tint l = j + 1;\n\t\tint r = i - 1;\n\t\twhile(l < r){\n\t\t\ttemp = digits[l];\n\t\t\tdigits[l] = digits[r];\n\t\t\tdigits[r] = temp;\n\t\t\tl++;\n\t\t\tr--;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int m = 0; m < i; m++){\n\t\t\tres = res * 10 + digits[m];\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int nextGreaterNumericBalancedNumber(int n){\n\t\tint[] digits = new int[n.toString().length()];\n\t\tfor(int i = 0; i < n.toString().length(); i++){\n\t\t\tdigits[i] = n.toString().charAt(i) - '0';\n\t\t}\n\t\tint i = 0;\n\t\twhile(i < digits.length && digits[i] <= digits[i+1]){\n\t\t\ti++;\n\t\t}\n\t\tif(i == digits.length - 1){\n\t\t\treturn -1;\n\t\t}\n\t\tint j = i + 1;\n\t\twhile(j < digits.length && digits[j] > digits[i]){\n\t\t\tj++;\n\t\t}\n\t\tint temp = digits[i];\n\t\tdigits[i] = digits[j];\n\t\tdigits[j] = temp;\n\t\tint k = digits.length - 1;\n\t\twhile(i < k){\n\t\t\ttemp = digits[i];\n\t\t\tdigits[i] = digits[k];\n\t\t\tdigits[k] = temp;\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t\tint result = 0;\n\t\tfor(int m = 0; m < digits.length; m++){\n\t\t\tresult = result * 10 + digits[m];\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args) {\n\t\tint[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr2 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr3 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr4 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr5 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr6 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr7 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr8 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr9 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr10 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr11 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr12 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr13 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr14 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr15 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr16 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tint[] arr17 = {1, 2, 3, 4, 5, 6, 7, 8, 9\n",
            "\tstatic int nextGreaterNumericBalancedNumber(int n){\n\t\tString s = Integer.toString(n);\n\t\tint i = s.length()-1;\n\t\twhile(i>0 && s.charAt(i-1)>=s.charAt(i)){\n\t\t\ti--;\n\t\t}\n\t\tif(i==0){\n\t\t\treturn -1;\n\t\t}\n\t\tint j = s.length()-1;\n\t\twhile(s.charAt(j)<=s.charAt(i-1)){\n\t\t\tj--;\n\t\t}\n\t\tchar temp = s.charAt(i-1);\n\t\ts = s.substring(0,i-1)+s.substring(j)+temp+s.substring(i,j)+s.substring(i-1,i);\n\t\treturn Integer.parseInt(s);\n\t}\n}\n",
            "\tstatic int nextGreaterNumericBalancedNumber(int n){\n\t\tString s = String.valueOf(n);\n\t\tint[] arr = new int[s.length()];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tarr[i] = s.charAt(i) - '0';\n\t\t}\n\t\tint i = arr.length - 1;\n\t\twhile(i > 0 && arr[i] <= arr[i - 1]){\n\t\t\ti--;\n\t\t}\n\t\tif(i == 0){\n\t\t\treturn -1;\n\t\t}\n\t\tint j = i - 1;\n\t\twhile(arr[j] <= arr[i]){\n\t\t\tj--;\n\t\t}\n\t\tint temp = arr[i];\n\t\tarr[i] = arr[j];\n\t\tarr[j] = temp;\n\t\tint k = arr.length - 1;\n\t\twhile(i < k){\n\t\t\ttemp = arr[i];\n\t\t\tarr[i] = arr[k];\n\t\t\tarr[k] = temp;\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int x : arr){\n\t\t\tres = res * 10 + x;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int nextGreaterNumericBalancedNumber(int n){\n\t\tString s = String.valueOf(n);\n\t\tint[] nums = new int[s.length()];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tnums[i] = s.charAt(i) - '0';\n\t\t}\n\t\tint i = nums.length - 1;\n\t\twhile(i > 0 && nums[i] <= nums[i - 1]){\n\t\t\ti--;\n\t\t}\n\t\tif(i == 0){\n\t\t\treturn -1;\n\t\t}\n\t\tint j = i - 1;\n\t\twhile(nums[j] <= nums[i]){\n\t\t\tj--;\n\t\t}\n\t\tint temp = nums[i];\n\t\tnums[i] = nums[j];\n\t\tnums[j] = temp;\n\t\tint k = nums.length - 1;\n\t\twhile(i < k){\n\t\t\ttemp = nums[i];\n\t\t\tnums[i] = nums[k];\n\t\t\tnums[k] = temp;\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int m = 0; m < nums.length; m++){\n\t\t\tres = res * 10 + nums[m];\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int nextGreaterNumericallyBalancedNumber(int n){\n\t\tString s = String.valueOf(n);\n\t\tint[] arr = new int[s.length()];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tarr[i] = s.charAt(i) - '0';\n\t\t}\n\t\tint i = arr.length - 1;\n\t\twhile(i > 0 && arr[i] <= arr[i - 1]){\n\t\t\ti--;\n\t\t}\n\t\tif(i == 0){\n\t\t\treturn -1;\n\t\t}\n\t\tint j = i - 1;\n\t\twhile(arr[j] <= arr[i]){\n\t\t\tj--;\n\t\t}\n\t\tint temp = arr[i];\n\t\tarr[i] = arr[j];\n\t\tarr[j] = temp;\n\t\tint k = arr.length - 1;\n\t\twhile(i < k){\n\t\t\ttemp = arr[i];\n\t\t\tarr[i] = arr[k];\n\t\t\tarr[k] = temp;\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int m = 0; m < arr.length; m++){\n\t\t\tres = res * 10 + arr[m];\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int nextGreaterNumericBalancedNumber(int n){\n\t\tString s = Integer.toString(n);\n\t\tint[] arr = new int[s.length()];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tarr[i] = s.charAt(i) - '0';\n\t\t}\n\t\tint i = 0;\n\t\twhile(i < arr.length - 1 && arr[i] <= arr[i + 1]){\n\t\t\ti++;\n\t\t}\n\t\tif(i == arr.length - 1){\n\t\t\treturn -1;\n\t\t}\n\t\tint j = i + 1;\n\t\twhile(j < arr.length && arr[j] > arr[i]){\n\t\t\tj++;\n\t\t}\n\t\tint temp = arr[i];\n\t\tarr[i] = arr[j];\n\t\tarr[j] = temp;\n\t\tint k = arr.length - 1;\n\t\twhile(i < k){\n\t\t\ttemp = arr[i];\n\t\t\tarr[i] = arr[k];\n\t\t\tarr[k] = temp;\n\t\t\ti++;\n\t\t\tk--;\n\t\t}\n\t\tint res = 0;\n\t\tfor(int m = 0; m < arr.length; m++){\n\t\t\tres = res * 10 + arr[m];\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1457",
        "source": "leetcodeTitles",
        "source_id": "2240",
        "url": "https://leetcode.com/problems/number-of-ways-to-buy-pens-and-pencils/",
        "language": "java",
        "query": "Number of Ways to Buy Pens and Pencils",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint m = Integer.parseInt(args[1]);\n\t\tint k = Integer.parseInt(args[2]);\n\t\tint[] pens = new int[n];\n\t\tint[] pencils = new int[m];\n\t\tint[] ways = new int[k+1];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tpens[i] = Integer.parseInt(args[i+3]);\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tpencils[i] = Integer.parseInt(args[i+3+n]);\n\t\t}\n\t\tfor(int i = 0; i <= k; i++){\n\t\t\tways[i] = 0;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tfor(int l = 0; l <= k; l++){\n\t\t\t\t\tif(l >= pens[i] && l >= pencils[j]){\n\t\t\t\t\t\tways[l] += ways[l-pens[i]] + ways[l-pencils[j]];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ways[k]);\n\t}\n}\n",
            "\tstatic int countWays(int n, int m){\n\t\tint[][] dp = new int[n+1][m+1];\n\t\tfor(int i=0;i<=n;i++){\n\t\t\tfor(int j=0;j<=m;j++){\n\t\t\t\tif(i==0 || j==0){\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t}\n\t\t\t\telse if(i>=j){\n\t\t\t\t\tdp[i][j] = dp[i-j][j] + dp[i][j-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n][m];\n\t}\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(countWays(3,2));\n\t}\n}\n",
            "\tstatic int countWays(int n, int m){\n\t\tint[][] dp = new int[n+1][m+1];\n\t\tfor(int i=0;i<=n;i++){\n\t\t\tfor(int j=0;j<=m;j++){\n\t\t\t\tif(i==0 || j==0){\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t}\n\t\t\t\telse if(i>=j){\n\t\t\t\t\tdp[i][j] = dp[i-j][j] + dp[i][j-1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[n][m];\n\t}\n}\n",
            "\tstatic int countWays(int n, int m){\n\t\tif(n==0 || m==0)\n\t\t\treturn 1;\n\t\tif(n<0 || m<0)\n\t\t\treturn 0;\n\t\treturn countWays(n-1,m)+countWays(n,m-1);\n\t}\n}\n",
            "\tstatic int ways(int n, int m){\n\t\tif(n==0 || m==0)\n\t\t\treturn 1;\n\t\tif(n<0 || m<0)\n\t\t\treturn 0;\n\t\treturn ways(n-1,m)+ways(n,m-1);\n\t}\n}\n",
            "\tstatic int ways(int n){\n\t\tif(n<0) return 0;\n\t\tif(n==0) return 1;\n\t\treturn ways(n-1)+ways(n-2);\n\t}\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(ways(5));\n\t}\n}\n",
            "\tstatic int ways(int n, int k){\n\t\tif(n==0)\n\t\t\treturn 1;\n\t\tif(n<0)\n\t\t\treturn 0;\n\t\treturn ways(n-k,k)+ways(n-1,1);\n\t}\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(ways(5,2));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1458",
        "source": "leetcodeTitles",
        "source_id": "1798",
        "url": "https://leetcode.com/problems/maximum-number-of-consecutive-values-you-can-make/",
        "language": "java",
        "query": "Maximum Number of Consecutive Values You Can Make",
        "snippets": [
            "\tstatic int maxConsecutive(int[] nums){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == nums[i+1]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxConsecutive(int[] nums) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == nums[i + 1]) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tmax = Math.max(max, count);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxConsecutive(int[] arr){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] == arr[i+1]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxConsecutive(int[] nums){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == nums[i+1]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif(count > max){\n\t\t\t\tmax = count;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxConsecutive(int[] nums) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == nums[i + 1]) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tmax = Math.max(max, count);\n\t\t}\n\t\treturn max + 1;\n\t}\n}\n",
            "\tint maxConsecutive(int[] nums) {\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == nums[i+1]){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tmax = Math.max(max, count);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxConsecutive(int[] a){\n\t\tint max = 0;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tmax = Math.max(max, count);\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1459",
        "source": "leetcodeTitles",
        "source_id": "61",
        "url": "https://leetcode.com/problems/rotate-list/",
        "language": "java",
        "query": "Rotate List",
        "snippets": [
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode slow = dummy, fast = dummy;\n\t\tint count = 0;\n\t\twhile(fast.next != null){\n\t\t\tfast = fast.next;\n\t\t\tcount++;\n\t\t\tif(count % (k+1) == 0) slow = slow.next;\n\t\t}\n\t\tfast.next = dummy.next;\n\t\tdummy.next = slow.next;\n\t\tslow.next = null;\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode slow = dummy, fast = dummy;\n\t\tint count = 0;\n\t\twhile(fast != null){\n\t\t\tfast = fast.next;\n\t\t\tcount++;\n\t\t\tif(fast != null){\n\t\t\t\tfast = fast.next;\n\t\t\t\tslow = slow.next;\n\t\t\t}\n\t\t}\n\t\tint n = count;\n\t\tk = k % n;\n\t\tif(k == 0) return head;\n\t\tfast = dummy;\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tfast = fast.next;\n\t\t}\n\t\tslow.next = dummy.next;\n\t\tdummy.next = fast.next;\n\t\tfast.next = null;\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode slow = dummy, fast = dummy;\n\t\tint count = 0;\n\t\twhile(fast != null){\n\t\t\tfast = fast.next;\n\t\t\tcount++;\n\t\t\tif(fast == null) break;\n\t\t\tfast = fast.next;\n\t\t\tslow = slow.next;\n\t\t}\n\t\tint n = count;\n\t\tk = k % n;\n\t\tif(k == 0) return head;\n\t\tfast = dummy;\n\t\twhile(k-- > 0) fast = fast.next;\n\t\tslow.next = dummy.next;\n\t\tdummy.next = fast.next;\n\t\tfast.next = null;\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode fast = dummy;\n\t\tListNode slow = dummy;\n\t\tint count = 0;\n\t\twhile(fast.next != null){\n\t\t\tfast = fast.next;\n\t\t\tcount++;\n\t\t}\n\t\tfor(int i = 0; i < k % count; i++){\n\t\t\tfast = dummy;\n\t\t\twhile(fast.next != null){\n\t\t\t\tfast = fast.next;\n\t\t\t\tslow = slow.next;\n\t\t\t}\n\t\t\tfast.next = slow.next;\n\t\t\tslow.next = null;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode fast = dummy;\n\t\tListNode slow = dummy;\n\t\tint count = 0;\n\t\twhile(fast.next != null){\n\t\t\tfast = fast.next;\n\t\t\tcount++;\n\t\t}\n\t\tfor(int i = 0; i < k % count; i++){\n\t\t\tfast = dummy;\n\t\t\twhile(fast.next.next != null){\n\t\t\t\tfast = fast.next;\n\t\t\t}\n\t\t\tfast.next = null;\n\t\t\tfast.next = slow.next;\n\t\t\tslow.next = fast.next.next;\n\t\t\tfast.next.next = dummy.next;\n\t\t}\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode p = head;\n\t\tint len = 0;\n\t\twhile(p != null){\n\t\t\tlen++;\n\t\t\tp = p.next;\n\t\t}\n\t\tk = k % len;\n\t\tif(k == 0) return head;\n\t\tp = head;\n\t\tListNode q = head;\n\t\tfor(int i = 0; i < len - k - 1; i++){\n\t\t\tq = q.next;\n\t\t}\n\t\tListNode r = q.next;\n\t\tq.next = null;\n\t\tp.next = rotateRight(r, k);\n\t\treturn p;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head == null || head.next == null) return head;\n\t\tListNode tail = head;\n\t\tint len = 1;\n\t\twhile(tail.next != null){\n\t\t\ttail = tail.next;\n\t\t\tlen++;\n\t\t}\n\t\ttail.next = head;\n\t\tint rotate = k % len;\n\t\tif(rotate == 0) return head;\n\t\tListNode newTail = head;\n\t\tfor(int i = 0; i < rotate; i++){\n\t\t\tnewTail = newTail.next;\n\t\t}\n\t\tListNode newHead = newTail.next;\n\t\tnewTail.next = null;\n\t\treturn newHead;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head==null||head.next==null) return head;\n\t\tListNode p=head;\n\t\tint len=0;\n\t\twhile(p!=null){\n\t\t\tlen++;\n\t\t\tp=p.next;\n\t\t}\n\t\tk=k%len;\n\t\tif(k==0) return head;\n\t\tListNode q=head;\n\t\tfor(int i=0;i<len-k-1;i++){\n\t\t\tq=q.next;\n\t\t}\n\t\tListNode r=q.next;\n\t\tq.next=null;\n\t\tp=r;\n\t\twhile(p.next!=null){\n\t\t\tp=p.next;\n\t\t}\n\t\tp.next=head;\n\t\treturn r;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head == null || head.next == null)\n\t\t\treturn head;\n\t\tListNode dummy = new ListNode(0);\n\t\tdummy.next = head;\n\t\tListNode cur = dummy;\n\t\tint len = 0;\n\t\twhile(cur.next != null){\n\t\t\tcur = cur.next;\n\t\t\tlen++;\n\t\t}\n\t\tk = k % len;\n\t\tif(k == 0)\n\t\t\treturn head;\n\t\tcur.next = dummy.next;\n\t\tfor(int i = 0; i < len - k; i++){\n\t\t\tcur = cur.next;\n\t\t}\n\t\tdummy.next = cur.next;\n\t\tcur.next = null;\n\t\treturn dummy.next;\n\t}\n}\n",
            "\tListNode rotateRight(ListNode head, int k) {\n\t\tif(head==null||head.next==null) return head;\n\t\tListNode cur=head;\n\t\tint len=0;\n\t\twhile(cur!=null){\n\t\t\tlen++;\n\t\t\tcur=cur.next;\n\t\t}\n\t\tk=k%len;\n\t\tif(k==0) return head;\n\t\tListNode newHead=head;\n\t\tfor(int i=0;i<len-k;i++){\n\t\t\tnewHead=newHead.next;\n\t\t}\n\t\tListNode newTail=newHead;\n\t\twhile(newTail.next!=null){\n\t\t\tnewTail=newTail.next;\n\t\t}\n\t\tnewTail.next=head;\n\t\thead=newHead.next;\n\t\tnewHead.next=null;\n\t\treturn head;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1460",
        "source": "leetcodeTitles",
        "source_id": "2177",
        "url": "https://leetcode.com/problems/find-three-consecutive-integers-that-sum-to-a-given-number/",
        "language": "java",
        "query": "Find Three Consecutive Integers That Sum to a Given Number",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tfor(int j = i; j < arr.length; j++){\n\t\t\t\tfor(int k = j; k < arr.length; k++){\n\t\t\t\t\tif(arr[i] + arr[j] + arr[k] == sum){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tSystem.out.println(arr[i] + \" \" + arr[j] + \" \" + arr[k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Count: \" + count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\twhile(i<arr.length-2){\n\t\t\tj = i+1;\n\t\t\tk = j+1;\n\t\t\twhile(j<arr.length-1){\n\t\t\t\twhile(k<arr.length){\n\t\t\t\t\tif(arr[i]+arr[j]+arr[k]==sum){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tSystem.out.println(arr[i]+\" \"+arr[j]+\" \"+arr[k]);\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\twhile(i<arr.length){\n\t\t\tj = i+1;\n\t\t\tk = i+2;\n\t\t\twhile(j<arr.length){\n\t\t\t\twhile(k<arr.length){\n\t\t\t\t\tif(arr[i]+arr[j]+arr[k]==sum){\n\t\t\t\t\t\tSystem.out.println(arr[i]+\" \"+arr[j]+\" \"+arr[k]);\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(\"count = \"+count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\twhile(i<arr.length){\n\t\t\twhile(j<arr.length){\n\t\t\t\twhile(k<arr.length){\n\t\t\t\t\tif(arr[i]+arr[j]+arr[k]==sum){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tSystem.out.println(arr[i]+\" \"+arr[j]+\" \"+arr[k]);\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\tk=0;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tj=0;\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i<arr.length){\n\t\t\tint j = i+1;\n\t\t\tint k = i+2;\n\t\t\twhile(j<arr.length && k<arr.length){\n\t\t\t\tif(arr[i]+arr[j]+arr[k]==sum){\n\t\t\t\t\tcount++;\n\t\t\t\t\tSystem.out.println(arr[i]+\" \"+arr[j]+\" \"+arr[k]);\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t\tk++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\twhile(i<arr.length){\n\t\t\tj = i+1;\n\t\t\tk = i+2;\n\t\t\twhile(j<arr.length){\n\t\t\t\twhile(k<arr.length){\n\t\t\t\t\tif(arr[i]+arr[j]+arr[k]==sum){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tSystem.out.println(arr[i]+\" \"+arr[j]+\" \"+arr[k]);\n\t\t\t\t\t}\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < arr.length){\n\t\t\tint j = i + 1;\n\t\t\tint k = j + 1;\n\t\t\twhile(j < arr.length && k < arr.length){\n\t\t\t\tif(arr[i] + arr[j] + arr[k] == sum){\n\t\t\t\t\tcount++;\n\t\t\t\t\tSystem.out.println(arr[i] + \" \" + arr[j] + \" \" + arr[k]);\n\t\t\t\t\tj++;\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tj++;\n\t\t\t\t\tk++;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(\"count = \" + count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint k = 0;\n\t\tfor(i = 0; i < arr.length; i++){\n\t\t\tfor(j = i+1; j < arr.length; j++){\n\t\t\t\tfor(k = j+1; k < arr.length; k++){\n\t\t\t\t\tif(arr[i]+arr[j]+arr[k] == sum){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tSystem.out.println(arr[i]+\" \"+arr[j]+\" \"+arr[k]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Total count: \"+count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint sum = 15;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i<arr.length-2){\n\t\t\tif(arr[i]+arr[i+1]+arr[i+2]==sum){\n\t\t\t\tcount++;\n\t\t\t\ti++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1461",
        "source": "leetcodeTitles",
        "source_id": "1696",
        "url": "https://leetcode.com/problems/jump-game-vi/",
        "language": "java",
        "query": "Jump Game VI",
        "snippets": [
            "\tboolean canJump(int[] nums) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (i > max) return false;\n\t\t\tmax = Math.max(max, i + nums[i]);\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean canJump(int[] nums) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (i > max) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tmax = Math.max(max, i + nums[i]);\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean canJump(int[] nums) {\n\t\tint max = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(i > max) return false;\n\t\t\tmax = Math.max(max, i + nums[i]);\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1462",
        "source": "leetcodeTitles",
        "source_id": "1768",
        "url": "https://leetcode.com/problems/merge-strings-alternately/",
        "language": "java",
        "query": "Merge Strings Alternately",
        "snippets": [
            "\tString merge(String s1, String s2){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0, j = 0;\n\t\twhile(i < s1.length() && j < s2.length()){\n\t\t\tsb.append(s1.charAt(i));\n\t\t\tsb.append(s2.charAt(j));\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif(i < s1.length()){\n\t\t\tsb.append(s1.substring(i));\n\t\t}\n\t\tif(j < s2.length()){\n\t\t\tsb.append(s2.substring(j));\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString mergeStrings(String s1, String s2){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0, j = 0;\n\t\twhile(i < s1.length() && j < s2.length()){\n\t\t\tsb.append(s1.charAt(i));\n\t\t\tsb.append(s2.charAt(j));\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif(i < s1.length()){\n\t\t\tsb.append(s1.substring(i));\n\t\t}\n\t\tif(j < s2.length()){\n\t\t\tsb.append(s2.substring(j));\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString mergeStringsAlternately(String s1, String s2){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0, j = 0;\n\t\twhile(i < s1.length() && j < s2.length()){\n\t\t\tsb.append(s1.charAt(i));\n\t\t\tsb.append(s2.charAt(j));\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif(i < s1.length()){\n\t\t\tsb.append(s1.substring(i));\n\t\t}\n\t\tif(j < s2.length()){\n\t\t\tsb.append(s2.substring(j));\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString mergeStringsAlternately(String str1, String str2){\n\t\tString result = \"\";\n\t\tint i = 0, j = 0;\n\t\twhile(i < str1.length() && j < str2.length()){\n\t\t\tresult += str1.charAt(i);\n\t\t\tresult += str2.charAt(j);\n\t\t\ti++;\n\t\t\tj++;\n\t\t}\n\t\tif(i < str1.length()){\n\t\t\tresult += str1.substring(i);\n\t\t}\n\t\tif(j < str2.length()){\n\t\t\tresult += str2.substring(j);\n\t\t}\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1463",
        "source": "leetcodeTitles",
        "source_id": "1413",
        "url": "https://leetcode.com/problems/minimum-value-to-get-positive-step-by-step-sum/",
        "language": "java",
        "query": "Minimum Value to Get Positive Step by Step Sum",
        "snippets": [
            "\tstatic int minValue(int[] arr){\n\t\tint min = 0;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t\tif(sum < 0){\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t\tif(min > sum){\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tstatic int minValue(int[] arr){\n\t\tint min = 0;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t\tif(sum < min){\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tstatic int minValue(int[] arr){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t\tif(sum < min){\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t\tif(sum < 0){\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tstatic int minValue(int[] arr){\n\t\tint min = arr[0];\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t\tif(sum < min){\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tint minStartValue(int[] nums){\n\t\tint sum = 0;\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tif(sum < min){\n\t\t\t\tmin = sum;\n\t\t\t}\n\t\t}\n\t\treturn min < 0 ? -min + 1 : 1;\n\t}\n}\n",
            "\tint minStartValue(int[] nums){\n\t\tint sum = 0;\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tif(sum < min) min = sum;\n\t\t\tif(sum < 0) sum = 0;\n\t\t}\n\t\treturn min < 0 ? 1 - min : 1;\n\t}\n}\n",
            "\tstatic int minValue(int[] arr){\n\t\tint min = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] < 0){\n\t\t\t\tmin += arr[i];\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1464",
        "source": "leetcodeTitles",
        "source_id": "2176",
        "url": "https://leetcode.com/problems/count-equal-and-divisible-pairs-in-an-array/",
        "language": "java",
        "query": "Count Equal and Divisible Pairs in an Array",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tfor(int j = i+1; j < arr.length; j++){\n\t\t\t\tif(arr[i] % arr[j] == 0 || arr[j] % arr[i] == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tfor(int j = i+1; j < arr.length; j++){\n\t\t\t\tif(arr[i]%2 == 0 && arr[j]%2 == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tfor(int j = 0; j < arr.length; j++){\n\t\t\t\tif(arr[i] % 2 == 0 && arr[j] % 2 == 0 && i != j){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic int countEqualDivisiblePairs(int[] a, int k){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = i + 1; j < a.length; j++){\n\t\t\t\tif(a[i] % k == 0 && a[j] % k == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countEqualDivisiblePairs(int[] a, int k){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = i + 1; j < a.length; j++){\n\t\t\t\tif((a[i] + a[j]) % k == 0){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1465",
        "source": "leetcodeTitles",
        "source_id": "462",
        "url": "https://leetcode.com/problems/minimum-moves-to-equal-array-elements-ii/",
        "language": "java",
        "query": "Minimum Moves to Equal Array Elements II",
        "snippets": [
            "\tint minMoves2(int[] nums) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tmin = Math.min(min, nums[i]);\n\t\t}\n\t\treturn sum - min * nums.length;\n\t}\n}\n",
            "\tint minMoves2(int[] nums) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tmin = Math.min(min, nums[i]);\n\t\t\tsum += nums[i];\n\t\t}\n\t\tint res = sum - min * nums.length;\n\t\treturn res;\n\t}\n}\n",
            "\tint minMoves2(int[] nums) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tmin = Math.min(min, nums[i]);\n\t\t\tmax = Math.max(max, nums[i]);\n\t\t}\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += Math.abs(nums[i] - (max + min) / 2);\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tint minMoves2(int[] nums) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tmin = Math.min(min, nums[i]);\n\t\t\tsum += nums[i];\n\t\t}\n\t\treturn sum - min * nums.length;\n\t}\n}\n",
            "\tint minMoves2(int[] nums) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor (int num : nums) {\n\t\t\tmin = Math.min(min, num);\n\t\t\tmax = Math.max(max, num);\n\t\t}\n\t\tint sum = 0;\n\t\tfor (int num : nums) {\n\t\t\tsum += Math.abs(num - min);\n\t\t}\n\t\treturn sum;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1466",
        "source": "leetcodeTitles",
        "source_id": "2309",
        "url": "https://leetcode.com/problems/greatest-english-letter-in-upper-and-lower-case/",
        "language": "java",
        "query": "Greatest English Letter in Upper and Lower Case",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tchar[] alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\t\tint[] count = new int[26];\n\t\tString s = \"Hello World\";\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(s.charAt(i) == alphabet[j]){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint index = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] > max){\n\t\t\t\tmax = count[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The greatest letter in the string is \" + alphabet[index]);\n\t\tSystem.out.println(\"The greatest letter in the string is \" + alphabet[index].toUpperCase());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tchar[] alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\t\tint[] count = new int[26];\n\t\tString s = \"The quick brown fox jumps over the lazy dog\";\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(s.charAt(i) == alphabet[j]){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint index = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] > max){\n\t\t\t\tmax = count[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tchar maxChar = alphabet[index];\n\t\tchar minChar = alphabet[index];\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] > count[index]){\n\t\t\t\tmaxChar = alphabet[i];\n\t\t\t}\n\t\t\tif(count[i] < count[index]){\n\t\t\t\tminChar = alphabet[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max: \" + maxChar);\n\t\tSystem.out.println(\"Min: \" + minChar);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tchar[] alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\t\tint[] count = new int[26];\n\t\tString s = \"The quick brown fox jumps over the lazy dog\";\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(s.charAt(i) == alphabet[j]){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint index = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] > max){\n\t\t\t\tmax = count[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The greatest letter in the alphabet is \" + alphabet[index]);\n\t\tSystem.out.println(\"The greatest letter in the alphabet is \" + alphabet[index].toString().toUpperCase());\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tchar[] alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\t\tint[] count = new int[26];\n\t\tString str = \"The quick brown fox jumps over the lazy dog\";\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(str.charAt(i) == alphabet[j]){\n\t\t\t\t\tcount[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tint index = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] > max){\n\t\t\t\tmax = count[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"The greatest English letter in upper case is \" + alphabet[index]);\n\t\tSystem.out.println(\"The greatest English letter in lower case is \" + Character.toLowerCase(alphabet[index]));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tchar[] ch = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\t\tint[] count = new int[26];\n\t\tint max = 0;\n\t\tint index = 0;\n\t\tfor(int i = 0; i < ch.length; i++){\n\t\t\tfor(int j = 0; j < ch.length; j++){\n\t\t\t\tif(ch[i] == ch[j]){\n\t\t\t\t\tcount[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < count.length; i++){\n\t\t\tif(count[i] > max){\n\t\t\t\tmax = count[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(ch[index]);\n\t\tSystem.out.println(ch[index+'a']);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tchar[] arr = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\t\tint[] arr1 = new int[26];\n\t\tint[] arr2 = new int[26];\n\t\tint[] arr3 = new int[26];\n\t\tint[] arr4 = new int[26];\n\t\tint[] arr5 = new int[26];\n\t\tint[] arr6 = new int[26];\n\t\tint[] arr7 = new int[26];\n\t\tint[] arr8 = new int[26];\n\t\tint[] arr9 = new int[26];\n\t\tint[] arr10 = new int[26];\n\t\tint[] arr11 = new int[26];\n\t\tint[] arr12 = new int[26];\n\t\tint[] arr13 = new int[26];\n\t\tint[] arr14 = new int[26];\n\t\tint[] arr15 = new int[26];\n\t\tint[] arr16 = new int[26];\n\t\tint[] arr17 = new int[26];\n\t\tint[] arr18 = new int[26];\n\t\tint[] arr19 = new int[26];\n\t\tint[] arr20 = new int[26];\n\t\tint[] arr21 = new int[26];\n\t\tint[] arr22 = new int[26];\n\t\tint[] arr23 = new int[26];\n\t\tint[] arr24 = new int[26];\n\t\tint[] arr25 = new int[26];\n\t\tint[] arr26 = new int[26];\n\t\tint[] arr27 = new int[26];\n\t\tint[] arr28 = new int[26];\n\t\tint[] arr29 = new int[26];\n\t\tint[] arr30 = new int[26];\n\t\tint[] arr31 = new int[26];\n\t\tint[] arr32 = new int[26];\n\t\tint[] arr33 = new int[26\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"abcdefghijklmnopqrstuvwxyz\";\n\t\tchar[] c = s.toCharArray();\n\t\tchar max = c[0];\n\t\tchar min = c[0];\n\t\tfor(int i = 0; i < c.length; i++){\n\t\t\tif(c[i] > max){\n\t\t\t\tmax = c[i];\n\t\t\t}\n\t\t\tif(c[i] < min){\n\t\t\t\tmin = c[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max: \" + max);\n\t\tSystem.out.println(\"Min: \" + min);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"abcdefghijklmnopqrstuvwxyz\";\n\t\tchar[] ch = str.toCharArray();\n\t\tint max = 0;\n\t\tint max1 = 0;\n\t\tfor(int i = 0; i < ch.length; i++){\n\t\t\tif(ch[i] >= 'A' && ch[i] <= 'Z'){\n\t\t\t\tif(ch[i] >= max){\n\t\t\t\t\tmax = ch[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max);\n\t\tfor(int i = 0; i < ch.length; i++){\n\t\t\tif(ch[i] >= 'a' && ch[i] <= 'z'){\n\t\t\t\tif(ch[i] >= max1){\n\t\t\t\t\tmax1 = ch[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(max1);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tchar[] ch = str.toCharArray();\n\t\tchar max = ch[0];\n\t\tchar min = ch[0];\n\t\tfor(int i = 0; i < ch.length; i++){\n\t\t\tif(ch[i] > max){\n\t\t\t\tmax = ch[i];\n\t\t\t}\n\t\t\tif(ch[i] < min){\n\t\t\t\tmin = ch[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max: \" + max);\n\t\tSystem.out.println(\"Min: \" + min);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str=\"abcdefghijklmnopqrstuvwxyz\";\n\t\tchar[] ch=str.toCharArray();\n\t\tchar max=ch[0];\n\t\tchar min=ch[0];\n\t\tfor(int i=0;i<ch.length;i++){\n\t\t\tif(ch[i]>max){\n\t\t\t\tmax=ch[i];\n\t\t\t}\n\t\t\tif(ch[i]<min){\n\t\t\t\tmin=ch[i];\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Max:\"+max);\n\t\tSystem.out.println(\"Min:\"+min);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1467",
        "source": "leetcodeTitles",
        "source_id": "503",
        "url": "https://leetcode.com/problems/next-greater-element-ii/",
        "language": "java",
        "query": "Next Greater Element II",
        "snippets": [
            "\tint[] nextGreaterElements(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tres[i] = -1;\n\t\t}\n\t\tStack<Integer> stack = new Stack<>();\n\t\tfor (int i = nums.length - 1; i >= 0; i--) {\n\t\t\twhile (!stack.isEmpty() && nums[stack.peek()] <= nums[i]) {\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tres[i] = stack.isEmpty() ? -1 : nums[stack.peek()];\n\t\t\tstack.push(i);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] nextGreaterElements(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tres[i] = -1;\n\t\t}\n\t\tStack<Integer> stack = new Stack<Integer>();\n\t\tfor(int i = 0; i < nums.length * 2; i++){\n\t\t\twhile(!stack.isEmpty() && nums[stack.peek()] <= nums[i % nums.length]){\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tif(i < nums.length){\n\t\t\t\tres[i] = stack.isEmpty() ? -1 : nums[stack.peek()];\n\t\t\t}\n\t\t\tstack.push(i % nums.length);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] nextGreaterElements(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tint j = i + 1;\n\t\t\twhile(j < nums.length && nums[j] <= nums[i]){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tres[i] = j < nums.length ? nums[j] : -1;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] nextGreaterElements(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tStack<Integer> stack = new Stack<>();\n\t\tfor(int i = 0; i < nums.length * 2; i++){\n\t\t\twhile(!stack.isEmpty() && nums[stack.peek()] <= nums[i % nums.length]){\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tres[i % nums.length] = stack.isEmpty() ? -1 : nums[stack.peek()];\n\t\t\tstack.push(i % nums.length);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tList<Integer> nextGreaterElements(int[] nums) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tif(nums == null || nums.length == 0) return res;\n\t\tDeque<Integer> stack = new ArrayDeque<>();\n\t\tfor(int i = 0; i < nums.length * 2; i++){\n\t\t\twhile(!stack.isEmpty() && nums[stack.peek()] <= nums[i % nums.length]){\n\t\t\t\tres.add(nums[stack.pop()]);\n\t\t\t}\n\t\t\tstack.push(i % nums.length);\n\t\t}\n\t\twhile(!stack.isEmpty()){\n\t\t\tres.add(nums[stack.pop()]);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint[] nextGreaterElements(int[] nums) {\n\t\tint[] res = new int[nums.length];\n\t\tStack<Integer> stack = new Stack<>();\n\t\tfor(int i = nums.length - 1; i >= 0; i--){\n\t\t\twhile(!stack.isEmpty() && nums[i] >= stack.peek()){\n\t\t\t\tstack.pop();\n\t\t\t}\n\t\t\tres[i] = stack.isEmpty() ? -1 : stack.peek();\n\t\t\tstack.push(nums[i]);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tList<Integer> nextGreaterElements(int[] nums) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tint j = i + 1;\n\t\t\twhile(j < nums.length && nums[j] <= nums[i]){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j == nums.length){\n\t\t\t\tres.add(-1);\n\t\t\t}else{\n\t\t\t\tres.add(nums[j]);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tvoid nextGreaterElements(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] next = new int[n];\n\t\tint[] stack = new int[n];\n\t\tint top = -1;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\twhile (top >= 0 && nums[stack[top]] < nums[i]) {\n\t\t\t\tnext[stack[top]] = nums[i];\n\t\t\t\ttop--;\n\t\t\t}\n\t\t\tstack[++top] = i;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tSystem.out.print(next[i] + \" \");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1468",
        "source": "leetcodeTitles",
        "source_id": "229",
        "url": "https://leetcode.com/problems/majority-element-ii/",
        "language": "java",
        "query": "Majority Element II",
        "snippets": [
            "\tint majorityElement(int[] nums) {\n\t\tint count = 0;\n\t\tint candidate = 0;\n\t\tfor (int num : nums) {\n\t\t\tif (count == 0) {\n\t\t\t\tcandidate = num;\n\t\t\t}\n\t\t\tcount += (num == candidate) ? 1 : -1;\n\t\t}\n\t\treturn candidate;\n\t}\n}\n",
            "\tint majorityElement(int[] nums) {\n\t\tint count = 0;\n\t\tint candidate = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (count == 0) {\n\t\t\t\tcandidate = nums[i];\n\t\t\t}\n\t\t\tif (nums[i] == candidate) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t}\n\t\treturn candidate;\n\t}\n}\n",
            "\tint majorityElement(int[] nums) {\n\t\tint count = 0;\n\t\tint candidate = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (count == 0) {\n\t\t\t\tcandidate = nums[i];\n\t\t\t}\n\t\t\tif (nums[i] == candidate) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t}\n\t\tcount = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == candidate) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > nums.length / 2) {\n\t\t\treturn candidate;\n\t\t}\n\t\treturn 0;\n\t}\n}\n",
            "\tint majorityElement(int[] nums) {\n\t\tint count = 0;\n\t\tint candidate = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (count == 0) {\n\t\t\t\tcandidate = nums[i];\n\t\t\t}\n\t\t\tif (nums[i] == candidate) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount--;\n\t\t\t}\n\t\t}\n\t\tcount = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == candidate) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count > nums.length / 2) {\n\t\t\treturn candidate;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1469",
        "source": "leetcodeTitles",
        "source_id": "2085",
        "url": "https://leetcode.com/problems/count-common-words-with-one-occurrence/",
        "language": "java",
        "query": "Count Common Words With One Occurence",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"a\", \"b\", \"a\", \"c\", \"b\"};\n\t\tSystem.out.println(countCommonWords(words));\n\t}\n\tpublic static int countCommonWords(String[] words){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tfor(int j = i+1; j < words.length; j++){\n\t\t\t\tif(words[i].equals(words[j])){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tString[] words = str.split(\" \");\n\t\tMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(String word : words){\n\t\t\tif(map.containsKey(word)){\n\t\t\t\tmap.put(word, map.get(word)+1);\n\t\t\t}else{\n\t\t\t\tmap.put(word, 1);\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(String word : map.keySet()){\n\t\t\tif(map.get(word) == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString s = \"Hello World\";\n\t\tString[] words = s.split(\" \");\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(String word : words){\n\t\t\tif(map.containsKey(word)){\n\t\t\t\tmap.put(word, map.get(word)+1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(word, 1);\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(String word : map.keySet()){\n\t\t\tif(map.get(word) == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"b\"};\n\t\tSystem.out.println(countCommonWords(words));\n\t}\n\tpublic static int countCommonWords(String[] words){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tfor(int j = i + 1; j < words.length; j++){\n\t\t\t\tif(words[i].equals(words[j])){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"d\"};\n\t\tSystem.out.println(countCommonWords(words));\n\t}\n\tpublic static int countCommonWords(String[] words){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tint j = i + 1;\n\t\t\twhile(j < words.length){\n\t\t\t\tif(words[i].equals(words[j])){\n\t\t\t\t\tcount++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\t\tString[] words2 = {\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\t\tString[] words3 = {\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\t\tString[] words4 = {\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\t\tString[] words5 = {\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n\t\tString[] words6 = {\"a\",\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"a b c a d e f g h i j k l m n o p q r s t u v w x y z\";\n\t\tString[] strArray = str.split(\" \");\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(String s : strArray){\n\t\t\tif(map.containsKey(s)){\n\t\t\t\tmap.put(s, map.get(s)+1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(s, 1);\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(String s : map.keySet()){\n\t\t\tif(map.get(s) == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"a b c a d e f g h i j k l m n o p q r s t u v w x y z\";\n\t\tString[] strArr = str.split(\" \");\n\t\tHashMap<String, Integer> map = new HashMap<String, Integer>();\n\t\tfor(int i = 0; i < strArr.length; i++){\n\t\t\tif(map.containsKey(strArr[i])){\n\t\t\t\tmap.put(strArr[i], map.get(strArr[i]) + 1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tmap.put(strArr[i], 1);\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(String key : map.keySet()){\n\t\t\tif(map.get(key) == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\", \"d\", \"d\"};\n\t\tSystem.out.println(countCommonWords(words));\n\t}\n\tpublic static int countCommonWords(String[] words){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tint j = i + 1;\n\t\t\twhile(j < words.length){\n\t\t\t\tif(words[i].equals(words[j])){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 9
    },
    {
        "id": "1470",
        "source": "leetcodeTitles",
        "source_id": "1078",
        "url": "https://leetcode.com/problems/occurrences-after-bigram/",
        "language": "java",
        "query": "Occurences After Bigram",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint k = in.nextInt();\n\t\tString[] a = new String[n];\n\t\tfor(int a_i = 0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.next();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int b_i = 0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[k];\n\t\tfor(int c_i = 0; c_i < k; c_i++){\n\t\t\tc[c_i] = in.nextInt();\n\t\t}\n\t\tint[] result = new int[k];\n\t\tresult = solve(a, b, c);\n\t\tfor(int result_i = 0; result_i < k; result_i++){\n\t\t\tSystem.out.println(result[result_i]);\n\t\t}\n\t}\n\tpublic static int[] solve(String[] a, int[] b, int[] c){\n\t\tint[] result = new int[c.length];\n\t\tfor(int i = 0; i < c.length; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(a[j].length() >= c[i]){\n\t\t\t\t\tif(a[j].substring(a[j].length() - c[i], a[j].length()).equals(b[i])){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[i] = count;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString s = sc.next();\n\t\tString t = sc.next();\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(s.charAt(i) == t.charAt(i)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tif(s.charAt(n+i) == t.charAt(n+i)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args) {\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int a_i=0; a_i < n; a_i++){\n\t\t\ta[a_i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int b_i=0; b_i < m; b_i++){\n\t\t\tb[b_i] = in.nextInt();\n\t\t}\n\t\tint[] result = bigram(a, b);\n\t\tfor(int result_i=0; result_i < result.length; result_i++){\n\t\t\tSystem.out.println(result[result_i]);\n\t\t}\n\t}\n\tpublic static int[] bigram(int[] a, int[] b){\n\t\tint[] result = new int[a.length];\n\t\tfor(int i=0; i < a.length; i++){\n\t\t\tint count = 0;\n\t\t\tfor(int j=0; j < b.length; j++){\n\t\t\t\tif(a[i] == b[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult[i] = count;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tString str = sc.nextLine();\n\t\tString[] str1 = str.split(\" \");\n\t\tString[] str2 = new String[str1.length];\n\t\tfor(int i=0;i<str1.length;i++){\n\t\t\tstr2[i] = str1[i].substring(0,2);\n\t\t}\n\t\tHashMap<String,Integer> hm = new HashMap<String,Integer>();\n\t\tfor(int i=0;i<str1.length;i++){\n\t\t\tif(hm.containsKey(str2[i])){\n\t\t\t\thm.put(str2[i],hm.get(str2[i])+1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\thm.put(str2[i],1);\n\t\t\t}\n\t\t}\n\t\tString[] str3 = sc.nextLine().split(\" \");\n\t\tfor(int i=0;i<str3.length;i++){\n\t\t\tif(hm.containsKey(str3[i])){\n\t\t\t\tSystem.out.println(str3[i]+\" \"+hm.get(str3[i]));\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] input = {\"I\", \"saw\", \"I\", \"saw\", \"I\", \"saw\", \"you\"};\n\t\tString[] output = {\"saw\", \"saw\", \"saw\", \"saw\", \"saw\", \"saw\", \"you\"};\n\t\tSystem.out.println(Arrays.toString(occurencesAfterBigram(input)));\n\t\tSystem.out.println(Arrays.toString(occurencesAfterBigram(output)));\n\t}\n\tpublic static String[] occurencesAfterBigram(String[] input){\n\t\tString[] output = new String[input.length];\n\t\tfor(int i = 0; i < input.length; i++){\n\t\t\tif(i == 0){\n\t\t\t\toutput[i] = input[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\toutput[i] = input[i];\n\t\t\t\toutput[i] += input[i-1];\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] input = {\"I\", \"saw\", \"I\", \"saw\", \"I\", \"saw\", \"you\"};\n\t\tString[] output = {\"saw\", \"saw\", \"saw\", \"saw\", \"saw\", \"saw\", \"you\"};\n\t\tSystem.out.println(Arrays.toString(occurencesAfterBigram(input)));\n\t\tSystem.out.println(Arrays.toString(occurencesAfterBigram(output)));\n\t}\n\tpublic static String[] occurencesAfterBigram(String[] input){\n\t\tString[] output = new String[input.length];\n\t\tfor(int i = 0; i < input.length; i++){\n\t\t\tif(i == 0){\n\t\t\t\toutput[i] = input[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\toutput[i] = input[i];\n\t\t\t\toutput[i-1] = input[i-1];\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] input = {\"I\", \"saw\", \"I\", \"saw\", \"I\", \"saw\", \"you\"};\n\t\tString[] output = {\"saw\", \"saw\", \"saw\", \"saw\", \"saw\", \"saw\"};\n\t\tSystem.out.println(Arrays.toString(occurencesAfterBigram(input)));\n\t\tSystem.out.println(Arrays.toString(output));\n\t}\n\tpublic static String[] occurencesAfterBigram(String[] input){\n\t\tString[] output = new String[input.length];\n\t\tfor(int i = 0; i < input.length; i++){\n\t\t\tif(i == 0){\n\t\t\t\toutput[i] = input[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\toutput[i] = input[i];\n\t\t\t\toutput[i-1] = input[i-1];\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"this\", \"is\", \"a\", \"sentence\", \"this\", \"is\", \"a\", \"sentence\", \"this\", \"is\", \"a\", \"sentence\"};\n\t\tString[] bigrams = {\"this\", \"is\", \"a\", \"sentence\"};\n\t\tSystem.out.println(occurencesAfterBigram(words, bigrams));\n\t}\n\tpublic static int occurencesAfterBigram(String[] words, String[] bigrams){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(words[i].equals(bigrams[0]) && words[i+1].equals(bigrams[1])){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"this\", \"is\", \"a\", \"sentence\", \"this\", \"is\", \"a\", \"sentence\", \"this\", \"is\", \"a\", \"sentence\"};\n\t\tString[] bigrams = {\"this is\", \"is a\", \"a sentence\", \"this is\", \"is a\", \"a sentence\", \"this is\", \"is a\", \"a sentence\"};\n\t\tSystem.out.println(occurencesAfterBigram(words, bigrams));\n\t}\n\tpublic static int occurencesAfterBigram(String[] words, String[] bigrams){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(words[i].equals(bigrams[i])){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"i\", \"saw\", \"the\", \"cat\", \"run\", \"away\"};\n\t\tString[] pairs = {\"saw\", \"cat\", \"run\", \"away\", \"saw\", \"cat\"};\n\t\tString[] result = occurencesAfterBigram(words, pairs);\n\t\tfor(String s : result)\n\t\t\tSystem.out.println(s);\n\t}\n\tpublic static String[] occurencesAfterBigram(String[] words, String[] pairs){\n\t\tMap<String, List<String>> map = new HashMap<String, List<String>>();\n\t\tfor(String s : words){\n\t\t\tif(!map.containsKey(s))\n\t\t\t\tmap.put(s, new ArrayList<String>());\n\t\t}\n\t\tfor(int i = 0; i < pairs.length; i += 2){\n\t\t\tmap.get(pairs[i]).add(pairs[i + 1]);\n\t\t}\n\t\tString[] result = new String[words.length];\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tif(map.containsKey(words[i]))\n\t\t\t\tresult[i] = map.get(words[i]).get(0);\n\t\t}\n\t\treturn result;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1471",
        "source": "leetcodeTitles",
        "source_id": "954",
        "url": "https://leetcode.com/problems/array-of-doubled-pairs/",
        "language": "java",
        "query": "Array of Doubled Pairs",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tb[i] = a[i] * 2;\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tSystem.out.print(b[i] + \" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tb[i] = a[i] * 2;\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tSystem.out.println(b[i]);\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tb[i] = a[i] * 2;\n\t\t}\n\t\tSystem.out.println(Arrays.toString(b));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1472",
        "source": "leetcodeTitles",
        "source_id": "557",
        "url": "https://leetcode.com/problems/reverse-words-in-a-string-iii/",
        "language": "java",
        "query": "Reverse Words in a String III",
        "snippets": [
            "\tString reverseWords(String s){\n\t\tString[] words = s.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = words.length - 1; i >= 0; i--){\n\t\t\tsb.append(words[i]);\n\t\t\tsb.append(\" \");\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n}\n",
            "\tString reverseWords(String s) {\n\t\tString[] words = s.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = words.length - 1; i >= 0; i--){\n\t\t\tif(!words[i].equals(\"\")){\n\t\t\t\tsb.append(words[i]);\n\t\t\t\tsb.append(\" \");\n\t\t\t}\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n}\n",
            "\tString reverseWords(String s) {\n\t\tString[] strs = s.split(\" \");\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = strs.length - 1; i >= 0; i--){\n\t\t\tsb.append(strs[i]);\n\t\t\tsb.append(\" \");\n\t\t}\n\t\treturn sb.toString().trim();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1473",
        "source": "leetcodeTitles",
        "source_id": "762",
        "url": "https://leetcode.com/problems/prime-number-of-set-bits-in-binary-representation/",
        "language": "java",
        "query": "Prime Number of Set Bits in Binary Representation",
        "snippets": [
            "\tstatic int countPrimeSetBits(int n) {\n\t\tint count = 0;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tif (isPrime(i)) {\n\t\t\t\tcount += countSetBits(i);\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tpublic\n\tstatic boolean isPrime(int n) {\n\t\tif (n == 1) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (int i = 2; i <= Math.sqrt(n); i++) {\n\t\t\tif (n % i == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic\n\tstatic int countSetBits(int n) {\n\t\tint count = 0;\n\t\twhile (n > 0) {\n\t\t\tcount += n & 1;\n\t\t\tn >>= 1;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countSetBits(int n){\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tcount += n & 1;\n\t\t\tn = n >> 1;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countSetBits(int n){\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tcount += n & 1;\n\t\t\tn = n >> 1;\n\t\t}\n\t\treturn count;\n\t}\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(countSetBits(5));\n\t}\n}\n",
            "\tstatic int countPrimeSetBits(int n) {\n\t\tint count = 0;\n\t\tfor(int i = 2; i <= n; i++){\n\t\t\tif(isPrime(i)){\n\t\t\t\tcount += countSetBits(i);\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic\n\tstatic boolean isPrime(int n){\n\t\tif(n == 1) return false;\n\t\tif(n == 2) return true;\n\t\tfor(int i = 2; i <= Math.sqrt(n); i++){\n\t\t\tif(n % i == 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n\tpublic\n\tstatic int countSetBits(int n){\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tcount += n & 1;\n\t\t\tn = n >> 1;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countSetBits(int n){\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tcount += n & 1;\n\t\t\tn >>= 1;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countBits(int n){\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tcount += n & 1;\n\t\t\tn >>= 1;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int countBits(int n) {\n\t\tint count = 0;\n\t\twhile(n>0){\n\t\t\tcount += n&1;\n\t\t\tn = n>>1;\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1474",
        "source": "leetcodeTitles",
        "source_id": "905",
        "url": "https://leetcode.com/problems/sort-array-by-parity/",
        "language": "java",
        "query": "Sort Array By Parity",
        "snippets": [
            "\tint[] sortArrayByParity(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0, j = 0;\n\t\tfor (int k = 0; k < A.length; k++) {\n\t\t\tif (A[k] % 2 == 0) {\n\t\t\t\tB[i] = A[k];\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tB[A.length - 1 - j] = A[k];\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tint[] sortArrayByParity(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0, j = 0;\n\t\twhile (i < A.length) {\n\t\t\tif (A[i] % 2 == 0) {\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\ti = 0;\n\t\twhile (i < A.length) {\n\t\t\tif (A[i] % 2 != 0) {\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tint[] sortArrayByParity(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(i < A.length){\n\t\t\tif(A[i] % 2 == 0){\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\ti = 0;\n\t\twhile(i < A.length){\n\t\t\tif(A[i] % 2 != 0){\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tstatic void sortArrayByParity(int[] arr){\n\t\tint i = 0;\n\t\tint j = arr.length - 1;\n\t\twhile(i < j){\n\t\t\tif(arr[i] % 2 == 0){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse if(arr[j] % 2 == 1){\n\t\t\t\tj--;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tint[] sortArrayByParity(int[] A) {\n\t\tint[] B = new int[A.length];\n\t\tint i = 0, j = 0;\n\t\twhile(i < A.length && j < A.length){\n\t\t\tif(A[i] % 2 == 0){\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\twhile(i < A.length){\n\t\t\tif(A[i] % 2 != 0){\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn B;\n\t}\n}\n",
            "\tstatic int[] sortArrayByParity(int[] A){\n\t\tint[] B = new int[A.length];\n\t\tint i = 0, j = 0;\n\t\twhile(i < A.length){\n\t\t\tif(A[i] % 2 == 0){\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\ti = 0;\n\t\twhile(i < A.length){\n\t\t\tif(A[i] % 2 != 0){\n\t\t\t\tB[j] = A[i];\n\t\t\t\tj++;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn B;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1475",
        "source": "leetcodeTitles",
        "source_id": "1574",
        "url": "https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/",
        "language": "java",
        "query": "Shortest Subarray to be Removed to Make Array Sorted",
        "snippets": [
            "\tint findLengthOfShortestSubarray(int[] arr) {\n\t\tint n = arr.length;\n\t\tint[] left = new int[n];\n\t\tint[] right = new int[n];\n\t\tint res = n;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tleft[i] = i;\n\t\t\twhile (left[i] > 0 && arr[i] <= arr[left[i] - 1]) {\n\t\t\t\tleft[i] = left[left[i] - 1];\n\t\t\t}\n\t\t}\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tright[i] = i;\n\t\t\twhile (right[i] < n - 1 && arr[i] <= arr[right[i] + 1]) {\n\t\t\t\tright[i] = right[right[i] + 1];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tres = Math.min(res, i - left[i] + 1 + right[i] - i);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint findLengthOfShortestSubarray(int[] arr) {\n\t\tint n = arr.length;\n\t\tint[] left = new int[n];\n\t\tint[] right = new int[n];\n\t\tleft[0] = -1;\n\t\tright[n - 1] = n;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\twhile (left[i - 1] != -1 && arr[left[i - 1]] >= arr[i])\n\t\t\t\tleft[i] = left[i - 1];\n\t\t\tleft[i] = i;\n\t\t}\n\t\tfor (int i = n - 2; i >= 0; i--) {\n\t\t\twhile (right[i + 1] < n && arr[right[i + 1]] > arr[i])\n\t\t\t\tright[i] = right[i + 1];\n\t\t\tright[i] = i;\n\t\t}\n\t\tint ans = n;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tans = Math.min(ans, right[i] - left[i] - 1);\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint findLengthOfShortestSubarray(int[] arr) {\n\t\tint n = arr.length;\n\t\tint[] left = new int[n];\n\t\tint[] right = new int[n];\n\t\tint res = n;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tleft[i] = i;\n\t\t\twhile (left[i] > 0 && arr[i] < arr[left[i] - 1])\n\t\t\t\tleft[i] = left[left[i] - 1];\n\t\t}\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tright[i] = i;\n\t\t\twhile (right[i] < n - 1 && arr[i] < arr[right[i] + 1])\n\t\t\t\tright[i] = right[right[i] + 1];\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tres = Math.min(res, i - left[i] + 1 + right[i] - i);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint findLengthOfShortestSubarray(int[] arr) {\n\t\tint n = arr.length;\n\t\tint[] left = new int[n];\n\t\tint[] right = new int[n];\n\t\tint i = 0, j = 0;\n\t\tfor (int k = 0; k < n; k++) {\n\t\t\twhile (i < n && arr[i] <= arr[k]) {\n\t\t\t\ti++;\n\t\t\t}\n\t\t\tleft[k] = i;\n\t\t}\n\t\tfor (int k = n - 1; k >= 0; k--) {\n\t\t\twhile (j < n && arr[j] >= arr[k]) {\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tright[k] = j;\n\t\t}\n\t\tint ans = n;\n\t\tfor (int k = 0; k < n; k++) {\n\t\t\tans = Math.min(ans, left[k] + n - 1 - right[k]);\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int findShortestSubArray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] degree = new int[n];\n\t\tint maxDegree = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdegree[i] = 1;\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (nums[i] == nums[j]) {\n\t\t\t\t\tdegree[i]++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (degree[i] > maxDegree) {\n\t\t\t\tmaxDegree = degree[i];\n\t\t\t}\n\t\t}\n\t\tint ans = n;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (degree[i] == maxDegree) {\n\t\t\t\tint left = i;\n\t\t\t\tint right = i;\n\t\t\t\twhile (left > 0 && nums[left - 1] == nums[i]) {\n\t\t\t\t\tleft--;\n\t\t\t\t}\n\t\t\t\twhile (right < n - 1 && nums[right + 1] == nums[i]) {\n\t\t\t\t\tright++;\n\t\t\t\t}\n\t\t\t\tans = Math.min(ans, right - left + 1);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int findShortestSubArray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] degree = new int[n];\n\t\tint[] from = new int[n];\n\t\tint[] to = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tdegree[i] = 1;\n\t\t\tfrom[i] = i;\n\t\t\tto[i] = i;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (nums[i] > nums[j]) {\n\t\t\t\t\tdegree[i]++;\n\t\t\t\t\tfrom[j] = i;\n\t\t\t\t} else if (nums[i] < nums[j]) {\n\t\t\t\t\tdegree[j]++;\n\t\t\t\t\tto[i] = j;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (degree[i] > max) {\n\t\t\t\tmax = degree[i];\n\t\t\t}\n\t\t}\n\t\tint ans = n;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (degree[i] == max) {\n\t\t\t\tans = Math.min(ans, to[i] - from[i] + 1);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int findLength(int[] arr, int n) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tint count = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] < min) {\n\t\t\t\tmin = arr[i];\n\t\t\t}\n\t\t\tif (arr[i] > max) {\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] < min) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int findLength(int[] arr, int n) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tsum += arr[i];\n\t\t\tif (arr[i] < min) {\n\t\t\t\tmin = arr[i];\n\t\t\t}\n\t\t\tif (arr[i] > max) {\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\tif (sum == min + max) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] == min) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif (count == 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tint i = 0;\n\t\tint j = n - 1;\n\t\tint ans = 0;\n\t\twhile (i <= j) {\n\t\t\tif (arr[i] == min) {\n\t\t\t\ti++;\n\t\t\t} else if (arr[j] == max) {\n\t\t\t\tj--;\n\t\t\t} else {\n\t\t\t\tans = Math.max(ans, j - i + 1);\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tstatic int findLength(int[] arr, int n) {\n\t\tint min = 0;\n\t\tint max = 0;\n\t\tint maxLen = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] < arr[min]) {\n\t\t\t\tmin = i;\n\t\t\t}\n\t\t\tif (arr[i] > arr[max]) {\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t\tif (arr[min] <= arr[max]) {\n\t\t\treturn n;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] < arr[min]) {\n\t\t\t\tmin = i;\n\t\t\t}\n\t\t\tif (arr[i] > arr[max]) {\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t\tif (max - min + 1 > maxLen) {\n\t\t\t\tmaxLen = max - min + 1;\n\t\t\t}\n\t\t}\n\t\treturn maxLen;\n\t}\n}\n",
            "\tstatic int findLength(int[] arr, int n) {\n\t\tint min = 0;\n\t\tint max = 0;\n\t\tint maxLen = 0;\n\t\tint minLen = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (arr[i] < arr[min]) {\n\t\t\t\tmin = i;\n\t\t\t}\n\t\t\tif (arr[i] > arr[max]) {\n\t\t\t\tmax = i;\n\t\t\t}\n\t\t}\n\t\tif (arr[min] < arr[max]) {\n\t\t\tminLen = max - min + 1;\n\t\t} else {\n\t\t\tminLen = n - min;\n\t\t}\n\t\tif (arr[max] < arr[min]) {\n\t\t\tmaxLen = max - min + 1;\n\t\t} else {\n\t\t\tmaxLen = n - max;\n\t\t}\n\t\treturn Math.min(minLen, maxLen);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1476",
        "source": "leetcodeTitles",
        "source_id": "1752",
        "url": "https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/",
        "language": "java",
        "query": "Check if Array Is Sorted and Rotated",
        "snippets": [
            "\tstatic boolean isSortedAndRotated(int[] arr){\n\t\tif(arr.length<=1)\n\t\t\treturn true;\n\t\tint i=0;\n\t\twhile(i<arr.length-1 && arr[i]<=arr[i+1])\n\t\t\ti++;\n\t\tif(i==arr.length-1)\n\t\t\treturn true;\n\t\tint j=i+1;\n\t\twhile(j<arr.length && arr[j]>=arr[i])\n\t\t\tj++;\n\t\tif(j==arr.length)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean isSortedAndRotated(int[] arr){\n\t\tif(arr.length<=1)\n\t\t\treturn true;\n\t\tint i=0;\n\t\twhile(i<arr.length-1){\n\t\t\tif(arr[i]>arr[i+1])\n\t\t\t\tbreak;\n\t\t\ti++;\n\t\t}\n\t\tif(i==arr.length-1)\n\t\t\treturn true;\n\t\tint j=i+1;\n\t\twhile(j<arr.length){\n\t\t\tif(arr[j]<arr[i])\n\t\t\t\tbreak;\n\t\t\tj++;\n\t\t}\n\t\tif(j==arr.length)\n\t\t\treturn false;\n\t\tint temp=arr[i];\n\t\tarr[i]=arr[j];\n\t\tarr[j]=temp;\n\t\tint k=i+1;\n\t\twhile(k<j){\n\t\t\ttemp=arr[k];\n\t\t\tarr[k]=arr[j];\n\t\t\tarr[j]=temp;\n\t\t\tk++;\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isSortedAndRotated(int[] arr){\n\t\tif(arr.length == 0)\n\t\t\treturn false;\n\t\tif(arr.length == 1)\n\t\t\treturn true;\n\t\tint i = 0;\n\t\tint j = arr.length - 1;\n\t\twhile(i < j){\n\t\t\tif(arr[i] > arr[j])\n\t\t\t\treturn false;\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isSortedAndRotated(int[] arr){\n\t\tif(arr.length == 0 || arr.length == 1)\n\t\t\treturn true;\n\t\tint i = 0;\n\t\twhile(i < arr.length - 1 && arr[i] <= arr[i+1])\n\t\t\ti++;\n\t\tif(i == arr.length - 1)\n\t\t\treturn true;\n\t\tint j = i + 1;\n\t\twhile(j < arr.length && arr[j] <= arr[i])\n\t\t\tj++;\n\t\tif(j == arr.length)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean isSorted(int[] arr){\n\t\tfor(int i=0;i<arr.length-1;i++){\n\t\t\tif(arr[i]>arr[i+1]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tpublic\n\tstatic boolean isRotated(int[] arr){\n\t\tif(isSorted(arr)){\n\t\t\treturn true;\n\t\t}\n\t\tint i=0;\n\t\tint j=arr.length-1;\n\t\twhile(i<j){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean isSortedAndRotated(int[] arr){\n\t\tint i=0;\n\t\tint j=arr.length-1;\n\t\twhile(i<j){\n\t\t\tif(arr[i]>arr[j]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\ti++;\n\t\t\tj--;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isSortedAndRotated(int[] arr){\n\t\tint n = arr.length;\n\t\tif(n == 0 || n == 1)\n\t\t\treturn true;\n\t\tint i = 0;\n\t\twhile(i < n-1 && arr[i] <= arr[i+1])\n\t\t\ti++;\n\t\tif(i == n-1)\n\t\t\treturn true;\n\t\tint j = i+1;\n\t\twhile(j < n-1 && arr[j] <= arr[j+1])\n\t\t\tj++;\n\t\tif(j == n-1)\n\t\t\treturn true;\n\t\tif(arr[i] > arr[j])\n\t\t\treturn false;\n\t\tint k = j+1;\n\t\twhile(k < n-1 && arr[k] <= arr[k+1])\n\t\t\tk++;\n\t\tif(k == n-1)\n\t\t\treturn true;\n\t\tif(arr[j] > arr[k])\n\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isSortedRotated(int[] arr){\n\t\tif(arr.length==0)\n\t\t\treturn false;\n\t\tint i=0;\n\t\twhile(i<arr.length-1 && arr[i]<=arr[i+1])\n\t\t\ti++;\n\t\tif(i==arr.length-1)\n\t\t\treturn true;\n\t\tint j=i+1;\n\t\twhile(j<arr.length && arr[j]>=arr[i])\n\t\t\tj++;\n\t\tif(j==arr.length)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1477",
        "source": "leetcodeTitles",
        "source_id": "1784",
        "url": "https://leetcode.com/problems/check-if-binary-string-has-at-most-one-segment-of-ones/",
        "language": "java",
        "query": "Check if Binary String Has at Most One Segment of Ones",
        "snippets": [
            "\tboolean hasAtMostOneSegmentOfOnes(String binaryString){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < binaryString.length(); i++){\n\t\t\tif(binaryString.charAt(i) == '1'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1){\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean hasAtMostOneSegment(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '1'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count <= 1;\n\t}\n}\n",
            "\tboolean hasAtMostOneSegment(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '1'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count <= 2;\n\t}\n}\n",
            "\tboolean hasAtMostOneSegmentOfOnes(String binaryString){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < binaryString.length(); i++){\n\t\t\tif(binaryString.charAt(i) == '1'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count <= 2){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tstatic boolean hasAtMostOneSegmentOfOnes(String s){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tif(s.charAt(i) == '1'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count <= 1;\n\t}\n}\n",
            "\tboolean hasAtMostOneSegment(String binaryString){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < binaryString.length(); i++){\n\t\t\tif(binaryString.charAt(i) == '1'){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tif(count > 1){\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1478",
        "source": "leetcodeTitles",
        "source_id": "1925",
        "url": "https://leetcode.com/problems/count-square-sum-triples/",
        "language": "java",
        "query": "Count Sample Sum Triples",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] b = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] c = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] d = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] e = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] f = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] g = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] h = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] i = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] j = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] k = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] l = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] m = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] n = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] o = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] p = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] q = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] r = {1,2,3,\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tint triplets = 0;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = i+1; j < a.length; j++){\n\t\t\t\tfor(int k = j+1; k < a.length; k++){\n\t\t\t\t\tif(a[i] + a[j] + a[k] == 0){\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t\tsum += a[i] + a[j] + a[k];\n\t\t\t\t\t\ttriplets++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(\"Count: \" + count);\n\t\tSystem.out.println(\"Sum: \" + sum);\n\t\tSystem.out.println(\"Triplets: \" + triplets);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = sc.next\n"
        ],
        "results": 10
    },
    {
        "id": "1479",
        "source": "leetcodeTitles",
        "source_id": "9",
        "url": "https://leetcode.com/problems/palindrome-number/",
        "language": "java",
        "query": "Palindrome Number",
        "snippets": [
            "\tboolean isPalindrome(int x) {\n\t\tif(x<0) return false;\n\t\tint y=x;\n\t\tint z=0;\n\t\twhile(y>0){\n\t\t\tz=z*10+y%10;\n\t\t\ty=y/10;\n\t\t}\n\t\treturn z==x;\n\t}\n}\n",
            "\tboolean isPalindrome(int x) {\n\t\tif(x<0) return false;\n\t\tint y=x;\n\t\tint z=0;\n\t\twhile(x>0){\n\t\t\tz=z*10+x%10;\n\t\t\tx=x/10;\n\t\t}\n\t\tif(y==z) return true;\n\t\telse return false;\n\t}\n}\n",
            "\tboolean isPalindrome(int x) {\n\t\tif(x<0)\n\t\t\treturn false;\n\t\tint temp=x;\n\t\tint rev=0;\n\t\twhile(temp!=0){\n\t\t\trev=rev*10+temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn rev==x;\n\t}\n}\n",
            "\tboolean isPalindrome(int x){\n\t\tif(x<0) return false;\n\t\tint temp=x;\n\t\tint sum=0;\n\t\twhile(temp>0){\n\t\t\tsum=sum*10+temp%10;\n\t\t\ttemp/=10;\n\t\t}\n\t\treturn sum==x;\n\t}\n}\n",
            "\tboolean isPalindrome(int x) {\n\t\tif(x<0) return false;\n\t\tint temp = x;\n\t\tint reverse = 0;\n\t\twhile(temp!=0){\n\t\t\treverse = reverse*10 + temp%10;\n\t\t\ttemp = temp/10;\n\t\t}\n\t\treturn reverse==x;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1480",
        "source": "leetcodeTitles",
        "source_id": "242",
        "url": "https://leetcode.com/problems/valid-anagram/",
        "language": "java",
        "query": "Valid Anagram",
        "snippets": [
            "\tboolean isAnagram(String s, String t) {\n\t\tif(s.length() != t.length()) return false;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++){\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\t\tcount[t.charAt(i) - 'a']--;\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] != 0) return false;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean isAnagram(String s, String t) {\n\t\tif(s.length() != t.length())\n\t\t\treturn false;\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < s.length(); i++)\n\t\t\tcount[s.charAt(i) - 'a']++;\n\t\tfor(int i = 0; i < t.length(); i++)\n\t\t\tcount[t.charAt(i) - 'a']--;\n\t\tfor(int i = 0; i < 26; i++)\n\t\t\tif(count[i] != 0)\n\t\t\t\treturn false;\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1481",
        "source": "leetcodeTitles",
        "source_id": "970",
        "url": "https://leetcode.com/problems/powerful-integers/",
        "language": "java",
        "query": "Powerful Integers",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i1 = 0; i1 < n; i1++){\n\t\t\ti[i1] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i1 = 0; i1 <\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int k = 0; k < m; k++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int j = 0; j < m; j++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int j = 0; j < m; j++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tint[] b = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tint[] d = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tint[] f = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tint[] h = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ti[i] = sc.nextInt();\n\t\t}\n\t\tint[] j = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tj[i] = sc.next\n"
        ],
        "results": 10
    },
    {
        "id": "1482",
        "source": "leetcodeTitles",
        "source_id": "1509",
        "url": "https://leetcode.com/problems/minimum-difference-between-largest-and-smallest-value-in-three-moves/",
        "language": "java",
        "query": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "snippets": [
            "\tstatic int minDiff(int a, int b, int c){\n\t\tint min = Math.min(a, Math.min(b, c));\n\t\tint max = Math.max(a, Math.max(b, c));\n\t\treturn max - min;\n\t}\n}\n",
            "\tstatic int minDiff(int[] a) {\n\t\tint n = a.length;\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tif(a[i]<min)\n\t\t\t\tmin = a[i];\n\t\t\tif(a[i]>max)\n\t\t\t\tmax = a[i];\n\t\t}\n\t\treturn max-min;\n\t}\n}\n",
            "\tstatic int minDiff(int[] a){\n\t\tint min = a[0];\n\t\tint max = a[0];\n\t\tfor(int i = 1; i < a.length; i++){\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t}\n\t\treturn max - min;\n\t}\n}\n",
            "\tstatic int minDiff(int[] a){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tif(a[i]<min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t\tif(a[i]>max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t}\n\t\treturn max-min;\n\t}\n}\n",
            "\tint minDiff(int[] a) {\n\t\tint n = a.length;\n\t\tint[] b = new int[n];\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tb[i] = a[i];\n\t\t\tc[i] = a[i];\n\t\t}\n\t\tArrays.sort(b);\n\t\tArrays.sort(c);\n\t\tint min = Math.abs(b[n-1] - c[0]);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmin = Math.min(min, Math.abs(b[i] - c[n-1-i]));\n\t\t}\n\t\treturn min;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1483",
        "source": "leetcodeTitles",
        "source_id": "795",
        "url": "https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/",
        "language": "java",
        "query": "Number of Subarrays with Bounded Maximum",
        "snippets": [
            "\tint countSubarrays(int[] A, int L, int R){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tint j = i;\n\t\t\twhile(j < A.length && A[j] <= R){\n\t\t\t\tj++;\n\t\t\t}\n\t\t\tif(j - i >= L){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubarrays(int[] A, int L, int R){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tint left = i;\n\t\t\tint right = i;\n\t\t\twhile(left >= 0 && A[left] <= A[i]){\n\t\t\t\tleft--;\n\t\t\t}\n\t\t\twhile(right < A.length && A[right] <= A[i]){\n\t\t\t\tright++;\n\t\t\t}\n\t\t\tif(right - left - 1 >= R && right - left - 1 >= L){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubarrays(int[] A, int L, int R){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i; j < A.length; j++){\n\t\t\t\tsum += A[j];\n\t\t\t\tif(sum >= L && sum <= R){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubarrays(int[] A, int L, int R){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tint j = i;\n\t\t\tint sum = 0;\n\t\t\twhile(j < A.length && sum <= R){\n\t\t\t\tsum += A[j];\n\t\t\t\tif(sum >= L){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubarrays(int[] A, int L, int R){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tint left = i;\n\t\t\tint right = i;\n\t\t\twhile(left >= 0 && A[left] <= A[i]){\n\t\t\t\tleft--;\n\t\t\t}\n\t\t\twhile(right < A.length && A[right] <= A[i]){\n\t\t\t\tright++;\n\t\t\t}\n\t\t\tif(right - left - 1 >= L && right - left - 1 <= R){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubarrays(int[] A, int L, int R){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tint sum = 0;\n\t\t\tfor(int j = i; j < A.length; j++){\n\t\t\t\tsum += A[j];\n\t\t\t\tif(sum >= L && sum <= R)\n\t\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint numSubarrayBoundedMax(int[] A, int L, int R) {\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\twhile(j < A.length){\n\t\t\tif(A[j] <= R){\n\t\t\t\tj++;\n\t\t\t}else{\n\t\t\t\ti = j;\n\t\t\t\tj = i + 1;\n\t\t\t}\n\t\t\tif(A[i] >= L){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint numSubarrayBoundedMax(int[] A, int L, int R) {\n\t\tint count = 0;\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tint sum = 0;\n\t\twhile (j < A.length) {\n\t\t\tif (A[j] <= R) {\n\t\t\t\tsum += A[j];\n\t\t\t\tj++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (sum >= L) {\n\t\t\tcount++;\n\t\t}\n\t\twhile (j < A.length) {\n\t\t\tif (A[j] > R) {\n\t\t\t\ti = j;\n\t\t\t\tsum = 0;\n\t\t\t\twhile (j < A.length) {\n\t\t\t\t\tif (A[j] <= R) {\n\t\t\t\t\t\tsum += A[j];\n\t\t\t\t\t\tj++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (sum >= L) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubarrays(int[] A, int L, int R){\n\t\tint count = 0;\n\t\tint[] left = new int[A.length];\n\t\tint[] right = new int[A.length];\n\t\tleft[0] = A[0];\n\t\tright[A.length-1] = A[A.length-1];\n\t\tfor(int i = 1; i < A.length; i++){\n\t\t\tleft[i] = left[i-1] + A[i];\n\t\t}\n\t\tfor(int i = A.length-2; i >= 0; i--){\n\t\t\tright[i] = right[i+1] + A[i];\n\t\t}\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tfor(int j = i; j < A.length; j++){\n\t\t\t\tif(left[i] <= right[j] && right[j] - left[i] >= R && right[j] - left[i] <= L){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1484",
        "source": "leetcodeTitles",
        "source_id": "516",
        "url": "https://leetcode.com/problems/longest-palindromic-subsequence/",
        "language": "java",
        "query": "Longest Palindromic Subsequence",
        "snippets": [
            "\tint lps(String str){\n\t\tint n = str.length();\n\t\tint[][] lps = new int[n][n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tlps[i][i] = 1;\n\t\t}\n\t\tfor(int i=n-2;i>=0;i--){\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tif(str.charAt(i) == str.charAt(j) && lps[i+1][j-1] == 1){\n\t\t\t\t\tlps[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=0;j<n;j++){\n\t\t\t\tif(lps[i][j] > max){\n\t\t\t\t\tmax = lps[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint lps(String str){\n\t\tint n = str.length();\n\t\tint[][] lps = new int[n][n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tlps[i][i] = 1;\n\t\t}\n\t\tfor(int i=0;i<n-1;i++){\n\t\t\tif(str.charAt(i) == str.charAt(i+1)){\n\t\t\t\tlps[i][i+1] = 2;\n\t\t\t}\n\t\t}\n\t\tfor(int gap=2;gap<n;gap++){\n\t\t\tfor(int i=0;i<n-gap;i++){\n\t\t\t\tint j = i+gap;\n\t\t\t\tif(str.charAt(i) == str.charAt(j)){\n\t\t\t\t\tlps[i][j] = lps[i+1][j-1] + 2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlps[i][j] = Math.max(lps[i][j-1], lps[i+1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn lps[0][n-1];\n\t}\n}\n",
            "\tint lps(String str){\n\t\tint n=str.length();\n\t\tint[][] dp=new int[n][n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdp[i][i]=1;\n\t\t}\n\t\tfor(int i=0;i<n-1;i++){\n\t\t\tif(str.charAt(i)==str.charAt(i+1)){\n\t\t\t\tdp[i][i+1]=2;\n\t\t\t}\n\t\t}\n\t\tfor(int i=2;i<n;i++){\n\t\t\tfor(int j=0;j<n-i;j++){\n\t\t\t\tint x=j;\n\t\t\t\tint y=j+i;\n\t\t\t\tif(str.charAt(x)==str.charAt(y)){\n\t\t\t\t\tdp[x][y]=dp[x+1][y-1]+2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[x][y]=Math.max(dp[x+1][y],dp[x][y-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n-1];\n\t}\n}\n",
            "\tint lps(String str) {\n\t\tint n = str.length();\n\t\tint[][] lps = new int[n][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlps[i][i] = 1;\n\t\t}\n\t\tfor (int i = n - 2; i >= 0; i--) {\n\t\t\tfor (int j = i + 1; j < n; j++) {\n\t\t\t\tif (str.charAt(i) == str.charAt(j) && lps[i + 1][j - 1] == 1) {\n\t\t\t\t\tlps[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint maxLen = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (lps[i][j] > maxLen) {\n\t\t\t\t\tmaxLen = lps[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn maxLen;\n\t}\n}\n",
            "\tint lps(String str){\n\t\tint n = str.length();\n\t\tint[][] lps = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tlps[i][i] = 1;\n\t\t}\n\t\tfor(int i = n-2; i >= 0; i--){\n\t\t\tfor(int j = i+1; j < n; j++){\n\t\t\t\tif(str.charAt(i) == str.charAt(j)){\n\t\t\t\t\tlps[i][j] = lps[i+1][j-1] + 2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlps[i][j] = Math.max(lps[i+1][j], lps[i][j-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn lps[0][n-1];\n\t}\n}\n",
            "\tint lps(String str){\n\t\tint n = str.length();\n\t\tint[][] lps = new int[n][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tlps[i][i] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n-1; i++){\n\t\t\tif(str.charAt(i) == str.charAt(i+1)){\n\t\t\t\tlps[i][i+1] = 2;\n\t\t\t}\n\t\t}\n\t\tfor(int gap = 2; gap < n; gap++){\n\t\t\tfor(int i = 0; i < n-gap; i++){\n\t\t\t\tint j = i+gap;\n\t\t\t\tif(str.charAt(i) == str.charAt(j) && lps[i+1][j-1] > 0){\n\t\t\t\t\tlps[i][j] = lps[i+1][j-1] + 2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tlps[i][j] = Math.max(lps[i][j-1], lps[i+1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn lps[0][n-1];\n\t}\n}\n",
            "\tint lps(String str){\n\t\tint n = str.length();\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdp[i][i] = 1;\n\t\t}\n\t\tfor(int i=n-1;i>=0;i--){\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tif(str.charAt(i)==str.charAt(j)){\n\t\t\t\t\tdp[i][j] = dp[i+1][j-1]+2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n-1];\n\t}\n}\n",
            "\tint lps(String str){\n\t\tint n = str.length();\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdp[i][i] = 1;\n\t\t}\n\t\tfor(int i=n-2;i>=0;i--){\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tif(str.charAt(i)==str.charAt(j)){\n\t\t\t\t\tdp[i][j] = dp[i+1][j-1]+2;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.max(dp[i+1][j],dp[i][j-1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dp[0][n-1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1485",
        "source": "leetcodeTitles",
        "source_id": "1313",
        "url": "https://leetcode.com/problems/decompress-run-length-encoded-list/",
        "language": "java",
        "query": "Decompress Run-Length Encoded List",
        "snippets": [
            "\tList<Integer> decompressRLElist(List<int[]> list) {\n\t\tList<Integer> result = new ArrayList<>();\n\t\tfor (int[] arr : list) {\n\t\t\tfor (int i = 0; i < arr[0]; i++) {\n\t\t\t\tresult.add(arr[1]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> decompressRLElist(List<int[]> list){\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor(int i = 0; i < list.size(); i++){\n\t\t\tint[] pair = list.get(i);\n\t\t\tfor(int j = 0; j < pair[1]; j++){\n\t\t\t\tresult.add(pair[0]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> decompressRLElist(List<int[]> data) {\n\t\tList<Integer> result = new ArrayList<>();\n\t\tfor (int[] pair : data) {\n\t\t\tfor (int i = 0; i < pair[1]; i++) {\n\t\t\t\tresult.add(pair[0]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> decompressRLElist(List<int[]> list){\n\t\tList<Integer> res = new ArrayList<>();\n\t\tfor(int[] arr: list){\n\t\t\tfor(int i = 0; i < arr[0]; i++){\n\t\t\t\tres.add(arr[1]);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tList<Integer> decompressRLElist(List<int[]> list){\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tfor(int[] arr : list){\n\t\t\tfor(int i = 0; i < arr[0]; i++){\n\t\t\t\tresult.add(arr[1]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> decompressRLElist(List<int[]> list){\n\t\tList<Integer> result = new ArrayList<>();\n\t\tfor(int[] pair : list){\n\t\t\tfor(int i = 0; i < pair[1]; i++){\n\t\t\t\tresult.add(pair[0]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> decompressRunLengthEncodedList(List<Integer> encodedList) {\n\t\tList<Integer> decodedList = new ArrayList<Integer>();\n\t\tint count = 0;\n\t\tfor (int i = 0; i < encodedList.size(); i++) {\n\t\t\tif (count == 0) {\n\t\t\t\tcount = encodedList.get(i);\n\t\t\t} else {\n\t\t\t\tdecodedList.add(encodedList.get(i));\n\t\t\t\tcount--;\n\t\t\t}\n\t\t}\n\t\treturn decodedList;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1486",
        "source": "leetcodeTitles",
        "source_id": "237",
        "url": "https://leetcode.com/problems/delete-node-in-a-linked-list/",
        "language": "java",
        "query": "Delete Node in a Linked List",
        "snippets": [
            "\tNode deleteNode(Node head, int n) {\n\t\tif(head == null) return null;\n\t\tif(n == 1) return head.next;\n\t\tNode cur = head;\n\t\tint i = 1;\n\t\twhile(cur.next != null){\n\t\t\tif(i == n-1){\n\t\t\t\tcur.next = cur.next.next;\n\t\t\t\treturn head;\n\t\t\t}\n\t\t\tcur = cur.next;\n\t\t\ti++;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tNode deleteNode(Node head, int position) {\n\t\tif(head == null)\n\t\t\treturn null;\n\t\tif(position == 0)\n\t\t\treturn head.next;\n\t\tNode current = head;\n\t\tint count = 0;\n\t\twhile(current.next != null){\n\t\t\tif(count == position - 1){\n\t\t\t\tcurrent.next = current.next.next;\n\t\t\t\treturn head;\n\t\t\t}\n\t\t\tcurrent = current.next;\n\t\t\tcount++;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tNode deleteNode(Node head, int position) {\n\t\tNode current = head;\n\t\tNode previous = null;\n\t\tint count = 0;\n\t\twhile (current != null) {\n\t\t\tif (count == position) {\n\t\t\t\tif (previous == null) {\n\t\t\t\t\thead = current.next;\n\t\t\t\t} else {\n\t\t\t\t\tprevious.next = current.next;\n\t\t\t\t}\n\t\t\t}\n\t\t\tprevious = current;\n\t\t\tcurrent = current.next;\n\t\t\tcount++;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tNode deleteNode(Node head, int n) {\n\t\tif(head == null || n < 1) return head;\n\t\tNode cur = head;\n\t\tNode prev = null;\n\t\tint count = 1;\n\t\twhile(cur != null && count < n){\n\t\t\tprev = cur;\n\t\t\tcur = cur.next;\n\t\t\tcount++;\n\t\t}\n\t\tif(cur == null) return head;\n\t\tif(cur.next == null) {\n\t\t\tprev.next = null;\n\t\t\treturn head;\n\t\t}\n\t\tprev.next = cur.next;\n\t\treturn head;\n\t}\n}\n",
            "\tvoid deleteNode(Node head, Node nodeToDelete){\n\t\tif(head == null || nodeToDelete == null)\n\t\t\treturn;\n\t\tif(nodeToDelete.next == null){\n\t\t\tif(head == nodeToDelete)\n\t\t\t\thead = null;\n\t\t\telse{\n\t\t\t\tNode temp = head;\n\t\t\t\twhile(temp.next != nodeToDelete)\n\t\t\t\t\ttemp = temp.next;\n\t\t\t\ttemp.next = null;\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tNode temp = nodeToDelete.next;\n\t\t\tnodeToDelete.data = temp.data;\n\t\t\tnodeToDelete.next = temp.next;\n\t\t}\n\t}\n}\n",
            "\tNode deleteNode(Node head, int n) {\n\t\tif(head == null || n < 1) return head;\n\t\tNode cur = head;\n\t\tNode prev = null;\n\t\tint count = 0;\n\t\twhile(cur != null){\n\t\t\tif(count == n){\n\t\t\t\tif(cur.next == null){\n\t\t\t\t\tprev.next = null;\n\t\t\t\t\treturn head;\n\t\t\t\t}\n\t\t\t\tprev.next = cur.next;\n\t\t\t\treturn head;\n\t\t\t}\n\t\t\tprev = cur;\n\t\t\tcur = cur.next;\n\t\t\tcount++;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tNode deleteNode(Node head, int n) {\n\t\tif(head == null || n < 1) return head;\n\t\tNode cur = head;\n\t\tNode prev = null;\n\t\tint count = 0;\n\t\twhile(cur != null){\n\t\t\tif(count == n){\n\t\t\t\tif(prev == null){\n\t\t\t\t\thead = head.next;\n\t\t\t\t}else{\n\t\t\t\t\tprev.next = cur.next;\n\t\t\t\t}\n\t\t\t\treturn head;\n\t\t\t}\n\t\t\tprev = cur;\n\t\t\tcur = cur.next;\n\t\t\tcount++;\n\t\t}\n\t\treturn head;\n\t}\n}\n",
            "\tvoid deleteNode(Node head, Node n){\n\t\tif(n == head){\n\t\t\thead = head.next;\n\t\t\treturn;\n\t\t}\n\t\tNode prev = head;\n\t\twhile(prev.next != n){\n\t\t\tprev = prev.next;\n\t\t}\n\t\tprev.next = n.next;\n\t}\n}\n",
            "\tvoid deleteNode(Node head, Node node) {\n\t\tif(node == null || node.next == null) {\n\t\t\treturn;\n\t\t}\n\t\tNode next = node.next;\n\t\tnode.val = next.val;\n\t\tnode.next = next.next;\n\t}\n}\n",
            "\tvoid deleteNode(Node head, Node n){\n\t\tif(n == head){\n\t\t\thead = n.next;\n\t\t\treturn;\n\t\t}\n\t\tNode prev = head;\n\t\twhile(prev.next != n){\n\t\t\tprev = prev.next;\n\t\t}\n\t\tprev.next = n.next;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1487",
        "source": "leetcodeTitles",
        "source_id": "2208",
        "url": "https://leetcode.com/problems/minimum-operations-to-halve-array-sum/",
        "language": "java",
        "query": "Minimum Operations to Halve Array Sum",
        "snippets": [
            "\tint minOperations(int[] nums){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t}\n\t\tint half = sum / 2;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(i < nums.length && nums[i] <= half){\n\t\t\thalf -= nums[i];\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] arr) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tsum += arr[i];\n\t\t}\n\t\tint count = 0;\n\t\twhile (sum > 0) {\n\t\t\tsum /= 2;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minOperations(int[] nums) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tsum += nums[i];\n\t\t}\n\t\tint count = 0;\n\t\twhile (sum > 0) {\n\t\t\tsum /= 2;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] arr) {\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tsum += arr[i];\n\t\t}\n\t\tint count = 0;\n\t\twhile (sum > 0) {\n\t\t\tsum = sum / 2;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int[] arr){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\tint half = sum / 2;\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(sum > half){\n\t\t\tsum -= arr[i];\n\t\t\ti++;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int n) {\n\t\tint count = 0;\n\t\twhile(n > 1){\n\t\t\tif(n % 2 == 0){\n\t\t\t\tn = n / 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tn = n - 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minOperations(int n) {\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\twhile(n > 0){\n\t\t\tsum += n;\n\t\t\tn--;\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minOperations(int n) {\n\t\tint ans = 0;\n\t\twhile(n > 1){\n\t\t\tans += n;\n\t\t\tn = n >> 1;\n\t\t}\n\t\treturn ans;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1488",
        "source": "leetcodeTitles",
        "source_id": "166",
        "url": "https://leetcode.com/problems/fraction-to-recurring-decimal/",
        "language": "java",
        "query": "Fraction to Recurring Decimal",
        "snippets": [
            "\tString fractionToDecimal(int numerator, int denominator) {\n\t\tif (numerator == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tif (denominator == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif ((numerator < 0) ^ (denominator < 0)) {\n\t\t\tsb.append(\"-\");\n\t\t}\n\t\tlong num = Math.abs((long) numerator);\n\t\tlong den = Math.abs((long) denominator);\n\t\tsb.append(num / den);\n\t\tlong remainder = num % den;\n\t\tif (remainder == 0) {\n\t\t\treturn sb.toString();\n\t\t}\n\t\tsb.append(\".\");\n\t\tMap<Long, Integer> map = new HashMap<>();\n\t\twhile (remainder != 0) {\n\t\t\tif (map.containsKey(remainder)) {\n\t\t\t\tsb.insert(map.get(remainder), \"(\");\n\t\t\t\tsb.append(\")\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmap.put(remainder, sb.length());\n\t\t\tremainder *= 10;\n\t\t\tsb.append(remainder / den);\n\t\t\tremainder %= den;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString fractionToDecimal(int numerator, int denominator) {\n\t\tif (numerator == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tif (denominator == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif ((numerator < 0) ^ (denominator < 0)) {\n\t\t\tsb.append(\"-\");\n\t\t}\n\t\tlong numeratorL = Math.abs((long) numerator);\n\t\tlong denominatorL = Math.abs((long) denominator);\n\t\tsb.append(numeratorL / denominatorL);\n\t\tlong remainder = numeratorL % denominatorL;\n\t\tif (remainder == 0) {\n\t\t\treturn sb.toString();\n\t\t}\n\t\tsb.append(\".\");\n\t\tMap<Long, Integer> map = new HashMap<Long, Integer>();\n\t\twhile (remainder != 0) {\n\t\t\tif (map.containsKey(remainder)) {\n\t\t\t\tsb.insert(map.get(remainder), \"(\");\n\t\t\t\tsb.append(\")\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmap.put(remainder, sb.length());\n\t\t\tremainder *= 10;\n\t\t\tsb.append(remainder / denominatorL);\n\t\t\tremainder %= denominatorL;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString fractionToDecimal(int numerator, int denominator) {\n\t\tif (numerator == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tif (denominator == 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif ((numerator < 0) ^ (denominator < 0)) {\n\t\t\tsb.append(\"-\");\n\t\t}\n\t\tlong numeratorL = Math.abs((long) numerator);\n\t\tlong denominatorL = Math.abs((long) denominator);\n\t\tsb.append(numeratorL / denominatorL);\n\t\tlong remainder = numeratorL % denominatorL;\n\t\tif (remainder == 0) {\n\t\t\treturn sb.toString();\n\t\t}\n\t\tsb.append(\".\");\n\t\tMap<Long, Integer> map = new HashMap<>();\n\t\twhile (remainder != 0) {\n\t\t\tif (map.containsKey(remainder)) {\n\t\t\t\tsb.insert(map.get(remainder), \"(\");\n\t\t\t\tsb.append(\")\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmap.put(remainder, sb.length());\n\t\t\tremainder *= 10;\n\t\t\tsb.append(remainder / denominatorL);\n\t\t\tremainder %= denominatorL;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString fractionToDecimal(int numerator, int denominator) {\n\t\tif (numerator == 0) {\n\t\t\treturn \"0\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif ((numerator < 0) ^ (denominator < 0)) {\n\t\t\tsb.append(\"-\");\n\t\t}\n\t\tlong numeratorL = Math.abs((long) numerator);\n\t\tlong denominatorL = Math.abs((long) denominator);\n\t\tsb.append(numeratorL / denominatorL);\n\t\tlong remainder = numeratorL % denominatorL;\n\t\tif (remainder == 0) {\n\t\t\treturn sb.toString();\n\t\t}\n\t\tsb.append(\".\");\n\t\tMap<Long, Integer> map = new HashMap<Long, Integer>();\n\t\twhile (remainder != 0) {\n\t\t\tif (map.containsKey(remainder)) {\n\t\t\t\tsb.insert(map.get(remainder), \"(\");\n\t\t\t\tsb.append(\")\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmap.put(remainder, sb.length());\n\t\t\tremainder *= 10;\n\t\t\tsb.append(remainder / denominatorL);\n\t\t\tremainder %= denominatorL;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString fractionToDecimal(int numerator, int denominator) {\n\t\tif (numerator == 0) return \"0\";\n\t\tif (denominator == 0) return \"\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif ((numerator < 0) ^ (denominator < 0)) sb.append(\"-\");\n\t\tlong num = Math.abs((long)numerator);\n\t\tlong den = Math.abs((long)denominator);\n\t\tsb.append(num / den);\n\t\tnum %= den;\n\t\tif (num == 0) return sb.toString();\n\t\tsb.append(\".\");\n\t\tMap<Long, Integer> map = new HashMap<>();\n\t\tmap.put(num, sb.length());\n\t\twhile (num != 0) {\n\t\t\tnum *= 10;\n\t\t\tsb.append(num / den);\n\t\t\tnum %= den;\n\t\t\tif (map.containsKey(num)) {\n\t\t\t\tsb.insert(map.get(num), \"(\");\n\t\t\t\tsb.append(\")\");\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tmap.put(num, sb.length());\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString fractionToDecimal(int numerator, int denominator) {\n\t\tif (numerator == 0) return \"0\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif ((numerator < 0) ^ (denominator < 0)) sb.append(\"-\");\n\t\tlong num = Math.abs((long) numerator);\n\t\tlong den = Math.abs((long) denominator);\n\t\tsb.append(num / den);\n\t\tnum %= den;\n\t\tif (num == 0) return sb.toString();\n\t\tsb.append(\".\");\n\t\tMap<Long, Integer> map = new HashMap<>();\n\t\tmap.put(num, sb.length());\n\t\twhile (num != 0) {\n\t\t\tnum *= 10;\n\t\t\tsb.append(num / den);\n\t\t\tnum %= den;\n\t\t\tif (map.containsKey(num)) {\n\t\t\t\tsb.insert(map.get(num), \"(\");\n\t\t\t\tsb.append(\")\");\n\t\t\t\tbreak;\n\t\t\t} else {\n\t\t\t\tmap.put(num, sb.length());\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString fractionToDecimal(int numerator, int denominator){\n\t\tif(numerator == 0) return \"0\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tif((numerator < 0) ^ (denominator < 0)) sb.append(\"-\");\n\t\tlong num = Math.abs((long)numerator);\n\t\tlong den = Math.abs((long)denominator);\n\t\tsb.append(num / den);\n\t\tnum %= den;\n\t\tif(num == 0) return sb.toString();\n\t\tsb.append(\".\");\n\t\tMap<Long, Integer> map = new HashMap<>();\n\t\tmap.put(num, sb.length());\n\t\twhile(num != 0){\n\t\t\tnum *= 10;\n\t\t\tsb.append(num / den);\n\t\t\tnum %= den;\n\t\t\tif(map.containsKey(num)){\n\t\t\t\tsb.insert(map.get(num), \"(\");\n\t\t\t\tsb.append(\")\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmap.put(num, sb.length());\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1489",
        "source": "leetcodeTitles",
        "source_id": "989",
        "url": "https://leetcode.com/problems/add-to-array-form-of-integer/",
        "language": "java",
        "query": "Add to Array-Form of Integer",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5};\n\t\tint[] b = {6,7,8,9,10};\n\t\tint[] c = new int[a.length+b.length];\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tc[i] = a[i];\n\t\t}\n\t\tfor(int i=0;i<b.length;i++){\n\t\t\tc[i+a.length] = b[i];\n\t\t}\n\t\tfor(int i=0;i<c.length;i++){\n\t\t\tSystem.out.print(c[i]+\" \");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint[] a = {1,2,3,4,5};\n\t\tint[] b = {6,7,8,9,10};\n\t\tint[] c = new int[a.length+b.length];\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tc[i] = a[i];\n\t\t}\n\t\tfor(int i=0;i<b.length;i++){\n\t\t\tc[a.length+i] = b[i];\n\t\t}\n\t\tfor(int i=0;i<c.length;i++){\n\t\t\tSystem.out.print(c[i]+\" \");\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1490",
        "source": "leetcodeTitles",
        "source_id": "69",
        "url": "https://leetcode.com/problems/sqrtx/",
        "language": "java",
        "query": "Sqrt(x)",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint x = Integer.parseInt(args[0]);\n\t\tint y = (int)Math.sqrt(x);\n\t\tSystem.out.println(y);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble x = Double.parseDouble(args[0]);\n\t\tdouble eps = 1e-8;\n\t\tdouble low = 0;\n\t\tdouble high = x;\n\t\tdouble mid = (low + high) / 2;\n\t\twhile(Math.abs(mid * mid - x) > eps){\n\t\t\tif(mid * mid > x){\n\t\t\t\thigh = mid;\n\t\t\t}else{\n\t\t\t\tlow = mid;\n\t\t\t}\n\t\t\tmid = (low + high) / 2;\n\t\t}\n\t\tSystem.out.println(mid);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(Math.sqrt(4));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(Math.sqrt(9));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(Math.sqrt(2));\n\t}\n}\n",
            "\tstatic double sqrt(double x){\n\t\tif(x<0)\n\t\t\tthrow new IllegalArgumentException();\n\t\tdouble epsilon=1e-15;\n\t\tdouble t=x;\n\t\twhile(Math.abs(t-x/t)>epsilon*t)\n\t\t\tt=(x/t+t)/2.0;\n\t\treturn t;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tSystem.out.println(Math.sqrt(25));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1491",
        "source": "leetcodeTitles",
        "source_id": "637",
        "url": "https://leetcode.com/problems/average-of-levels-in-binary-tree/",
        "language": "java",
        "query": "Average of Levels in Binary Tree",
        "snippets": [
            "\tstatic int average(Node root){\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\tint left=average(root.left);\n\t\tint right=average(root.right);\n\t\treturn (left+right+root.data)/3;\n\t}\n}\n",
            "\tint averageOfLevels(TreeNode root) {\n\t\tif(root == null) return 0;\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tQueue<TreeNode> q = new LinkedList<TreeNode>();\n\t\tq.offer(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tint size = q.size();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tTreeNode node = q.poll();\n\t\t\t\tsum += node.val;\n\t\t\t\tif(node.left != null) q.offer(node.left);\n\t\t\t\tif(node.right != null) q.offer(node.right);\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn sum/count;\n\t}\n}\n",
            "\tstatic int averageLevel(Node root){\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\tint sum=0;\n\t\tint count=0;\n\t\tQueue<Node> q=new LinkedList<Node>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tint size=q.size();\n\t\t\tfor(int i=0;i<size;i++){\n\t\t\t\tNode temp=q.remove();\n\t\t\t\tsum+=temp.data;\n\t\t\t\tif(temp.left!=null)\n\t\t\t\t\tq.add(temp.left);\n\t\t\t\tif(temp.right!=null)\n\t\t\t\t\tq.add(temp.right);\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn sum/count;\n\t}\n}\n",
            "\tstatic int averageLevel(Node root){\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\tint sum=0;\n\t\tint count=0;\n\t\tQueue<Node> q=new LinkedList<Node>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tNode temp=q.remove();\n\t\t\tsum+=temp.data;\n\t\t\tcount++;\n\t\t\tif(temp.left!=null)\n\t\t\t\tq.add(temp.left);\n\t\t\tif(temp.right!=null)\n\t\t\t\tq.add(temp.right);\n\t\t}\n\t\treturn sum/count;\n\t}\n}\n",
            "\tint averageOfLevels(TreeNode root) {\n\t\tif(root == null)\n\t\t\treturn 0;\n\t\tint sum = 0;\n\t\tint count = 0;\n\t\tQueue<TreeNode> queue = new LinkedList<TreeNode>();\n\t\tqueue.offer(root);\n\t\twhile(!queue.isEmpty()){\n\t\t\tint size = queue.size();\n\t\t\tfor(int i = 0; i < size; i++){\n\t\t\t\tTreeNode node = queue.poll();\n\t\t\t\tsum += node.val;\n\t\t\t\tif(node.left != null)\n\t\t\t\t\tqueue.offer(node.left);\n\t\t\t\tif(node.right != null)\n\t\t\t\t\tqueue.offer(node.right);\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn sum / count;\n\t}\n}\n",
            "\tint average(Node root){\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\tint sum=0;\n\t\tint count=0;\n\t\tNode temp=root;\n\t\twhile(temp!=null){\n\t\t\tsum+=temp.data;\n\t\t\tcount++;\n\t\t\ttemp=temp.left;\n\t\t}\n\t\ttemp=root;\n\t\twhile(temp!=null){\n\t\t\tsum+=temp.data;\n\t\t\tcount++;\n\t\t\ttemp=temp.right;\n\t\t}\n\t\treturn sum/count;\n\t}\n}\n",
            "\tint averageOfLevels(TreeNode root) {\n\t\tif(root==null)\n\t\t\treturn 0;\n\t\tint sum=0;\n\t\tint count=0;\n\t\tQueue<TreeNode> q=new LinkedList<TreeNode>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tint size=q.size();\n\t\t\twhile(size>0){\n\t\t\t\tTreeNode temp=q.remove();\n\t\t\t\tsum+=temp.val;\n\t\t\t\tcount++;\n\t\t\t\tif(temp.left!=null)\n\t\t\t\t\tq.add(temp.left);\n\t\t\t\tif(temp.right!=null)\n\t\t\t\t\tq.add(temp.right);\n\t\t\t\tsize--;\n\t\t\t}\n\t\t}\n\t\treturn sum/count;\n\t}\n}\n",
            "\tint averageLevel(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint sum=0;\n\t\tint count=0;\n\t\tQueue<TreeNode> q=new LinkedList<TreeNode>();\n\t\tq.add(root);\n\t\twhile(!q.isEmpty()){\n\t\t\tint size=q.size();\n\t\t\tfor(int i=0;i<size;i++){\n\t\t\t\tTreeNode temp=q.poll();\n\t\t\t\tsum+=temp.val;\n\t\t\t\tif(temp.left!=null) q.add(temp.left);\n\t\t\t\tif(temp.right!=null) q.add(temp.right);\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn sum/count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1492",
        "source": "leetcodeTitles",
        "source_id": "767",
        "url": "https://leetcode.com/problems/reorganize-string/",
        "language": "java",
        "query": "Reorganize String",
        "snippets": [
            "\tString reorganizeString(String S){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < S.length(); i++){\n\t\t\tcount[S.charAt(i) - 'a']++;\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] > max){\n\t\t\t\tmax = count[i];\n\t\t\t}\n\t\t}\n\t\tif(max > (S.length() + 1) / 2){\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\twhile(count[i] > 0){\n\t\t\t\tsb.append((char)('a' + i));\n\t\t\t\tcount[i]--;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reorganizeString(String S){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < S.length(); i++){\n\t\t\tcount[S.charAt(i) - 'a']++;\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] > max){\n\t\t\t\tmax = count[i];\n\t\t\t}\n\t\t}\n\t\tif(max > (S.length() + 1) / 2){\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\twhile(count[i] > 0){\n\t\t\t\tsb.append((char)(i + 'a'));\n\t\t\t\tcount[i]--;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reorganizeString(String S) {\n\t\tint[] count = new int[26];\n\t\tfor (int i = 0; i < S.length(); i++) {\n\t\t\tcount[S.charAt(i) - 'a']++;\n\t\t}\n\t\tint max = 0;\n\t\tfor (int i = 0; i < 26; i++) {\n\t\t\tmax = Math.max(max, count[i]);\n\t\t}\n\t\tif (max > (S.length() + 1) / 2) {\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < 26; i++) {\n\t\t\twhile (count[i]-- > 0) {\n\t\t\t\tsb.append((char) ('a' + i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reorganizeString(String S) {\n\t\tint[] count = new int[26];\n\t\tfor (char c : S.toCharArray()) {\n\t\t\tcount[c - 'a']++;\n\t\t}\n\t\tint maxCount = 0;\n\t\tfor (int i = 0; i < 26; i++) {\n\t\t\tmaxCount = Math.max(maxCount, count[i]);\n\t\t}\n\t\tif (maxCount > (S.length() + 1) / 2) {\n\t\t\treturn \"\";\n\t\t}\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < 26; i++) {\n\t\t\twhile (count[i]-- > 0) {\n\t\t\t\tsb.append((char) ('a' + i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reorganizeString(String S) {\n\t\tint[] count = new int[26];\n\t\tfor (char c : S.toCharArray())\n\t\t\tcount[c - 'a']++;\n\t\tint max = 0, idx = 0;\n\t\tfor (int i = 0; i < 26; i++)\n\t\t\tif (count[i] > max) {\n\t\t\t\tmax = count[i];\n\t\t\t\tidx = i;\n\t\t\t}\n\t\tif (max > (S.length() + 1) / 2)\n\t\t\treturn \"\";\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor (int i = 0; i < max; i++)\n\t\t\tsb.append((char) (idx + 'a'));\n\t\tfor (int i = 0; i < 26; i++)\n\t\t\tif (i != idx && count[i] > 0)\n\t\t\t\tfor (int j = 0; j < count[i]; j++)\n\t\t\t\t\tsb.append((char) (i + 'a'));\n\t\treturn sb.toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1493",
        "source": "leetcodeTitles",
        "source_id": "231",
        "url": "https://leetcode.com/problems/power-of-two/",
        "language": "java",
        "query": "Power of Two",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tSystem.out.println(isPowerOfTwo(n));\n\t}\n\tpublic static boolean isPowerOfTwo(int n){\n\t\tif(n == 0) return false;\n\t\tif(n == 1) return true;\n\t\tif(n % 2 == 0) return isPowerOfTwo(n / 2);\n\t\treturn false;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tSystem.out.println(isPowerOfTwo(n));\n\t}\n\tpublic static boolean isPowerOfTwo(int n){\n\t\treturn (n & (n-1)) == 0;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint count = 0;\n\t\twhile(n>0){\n\t\t\tn = n&(n-1);\n\t\t\tcount++;\n\t\t}\n\t\tif(count==1)\n\t\t\tSystem.out.println(\"YES\");\n\t\telse\n\t\t\tSystem.out.println(\"NO\");\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint i = 1;\n\t\twhile(i<n){\n\t\t\ti = i*2;\n\t\t}\n\t\tif(i==n){\n\t\t\tSystem.out.println(\"YES\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint i = 1;\n\t\twhile(i<n){\n\t\t\ti = i*2;\n\t\t}\n\t\tif(i==n){\n\t\t\tSystem.out.println(\"YES\");\n\t\t}\n\t\telse{\n\t\t\tSystem.out.println(\"NO\");\n\t\t}\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint count = 0;\n\t\twhile(n>0){\n\t\t\tn = n&(n-1);\n\t\t\tcount++;\n\t\t}\n\t\tif(count==1)\n\t\t\tSystem.out.println(\"yes\");\n\t\telse\n\t\t\tSystem.out.println(\"no\");\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1494",
        "source": "leetcodeTitles",
        "source_id": "1832",
        "url": "https://leetcode.com/problems/check-if-the-sentence-is-pangram/",
        "language": "java",
        "query": "Check if the Sentence is Pangram",
        "snippets": [
            "\tstatic boolean isPangram(String str){\n\t\tint[] alphabet = new int[26];\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) >= 'a' && str.charAt(i) <= 'z'){\n\t\t\t\talphabet[str.charAt(i) - 'a']++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < alphabet.length; i++){\n\t\t\tif(alphabet[i] == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isPangram(String str){\n\t\tint[] alphabet = new int[26];\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tchar c = str.charAt(i);\n\t\t\tif(c >= 'a' && c <= 'z'){\n\t\t\t\talphabet[c - 'a']++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < alphabet.length; i++){\n\t\t\tif(alphabet[i] == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isPangram(String sentence){\n\t\tboolean[] alphabet = new boolean[26];\n\t\tfor(int i = 0; i < sentence.length(); i++){\n\t\t\tchar c = sentence.charAt(i);\n\t\t\tif(c >= 'a' && c <= 'z'){\n\t\t\t\talphabet[c - 'a'] = true;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < alphabet.length; i++){\n\t\t\tif(!alphabet[i]){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isPangram(String str){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tchar c = str.charAt(i);\n\t\t\tif(c >= 'a' && c <= 'z'){\n\t\t\t\tcount[c-'a']++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < 26; i++){\n\t\t\tif(count[i] == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean checkPangram(String str){\n\t\tint[] alphabet = new int[26];\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tif(str.charAt(i) >= 'a' && str.charAt(i) <= 'z'){\n\t\t\t\talphabet[str.charAt(i) - 'a']++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < alphabet.length; i++){\n\t\t\tif(alphabet[i] == 0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean isPangram(String str){\n\t\tint[] alphabet = new int[26];\n\t\tfor(int i=0;i<str.length();i++){\n\t\t\tchar c = str.charAt(i);\n\t\t\tif(c>='a' && c<='z'){\n\t\t\t\talphabet[c-'a']++;\n\t\t\t}\n\t\t\telse if(c>='A' && c<='Z'){\n\t\t\t\talphabet[c-'A']++;\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<26;i++){\n\t\t\tif(alphabet[i]==0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1495",
        "source": "leetcodeTitles",
        "source_id": "350",
        "url": "https://leetcode.com/problems/intersection-of-two-arrays-ii/",
        "language": "java",
        "query": "Intersection of Two Arrays II",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] nums1 = {1,2,2,1};\n\t\tint[] nums2 = {2,2};\n\t\tint[] res = new int[2];\n\t\tint i = 0, j = 0, k = 0;\n\t\twhile(i < nums1.length && j < nums2.length){\n\t\t\tif(nums1[i] == nums2[j]){\n\t\t\t\tres[k++] = nums1[i];\n\t\t\t\ti++;\n\t\t\t\tj++;\n\t\t\t}\n\t\t\telse if(nums1[i] < nums2[j]){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tj++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(Arrays.toString(res));\n\t}\n}\n",
            "\tList<Integer> intersection(List<Integer> nums1, List<Integer> nums2) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < nums1.size(); i++){\n\t\t\tmap.put(nums1.get(i), map.getOrDefault(nums1.get(i), 0) + 1);\n\t\t}\n\t\tfor(int i = 0; i < nums2.size(); i++){\n\t\t\tif(map.containsKey(nums2.get(i))){\n\t\t\t\tresult.add(nums2.get(i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> intersection(List<Integer> nums1, List<Integer> nums2) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tif(nums1.size() == 0 || nums2.size() == 0) return result;\n\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < nums1.size(); i++){\n\t\t\tmap.put(nums1.get(i), map.getOrDefault(nums1.get(i), 0) + 1);\n\t\t}\n\t\tfor(int i = 0; i < nums2.size(); i++){\n\t\t\tif(map.containsKey(nums2.get(i))){\n\t\t\t\tresult.add(nums2.get(i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> intersection(List<Integer> nums1, List<Integer> nums2) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tif(nums1.size() == 0 || nums2.size() == 0)\n\t\t\treturn result;\n\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < nums1.size(); i++){\n\t\t\tif(map.containsKey(nums1.get(i)))\n\t\t\t\tmap.put(nums1.get(i), map.get(nums1.get(i)) + 1);\n\t\t\telse\n\t\t\t\tmap.put(nums1.get(i), 1);\n\t\t}\n\t\tfor(int i = 0; i < nums2.size(); i++){\n\t\t\tif(map.containsKey(nums2.get(i)) && map.get(nums2.get(i)) > 0){\n\t\t\t\tresult.add(nums2.get(i));\n\t\t\t\tmap.put(nums2.get(i), map.get(nums2.get(i)) - 1);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> intersection(List<Integer> nums1, List<Integer> nums2) {\n\t\tList<Integer> result = new ArrayList<Integer>();\n\t\tSet<Integer> set = new HashSet<Integer>();\n\t\tfor(int i = 0; i < nums1.size(); i++){\n\t\t\tset.add(nums1.get(i));\n\t\t}\n\t\tfor(int i = 0; i < nums2.size(); i++){\n\t\t\tif(set.contains(nums2.get(i))){\n\t\t\t\tresult.add(nums2.get(i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> intersect(List<Integer> nums1, List<Integer> nums2) {\n\t\tList<Integer> res = new ArrayList<>();\n\t\tMap<Integer, Integer> map = new HashMap<>();\n\t\tfor(int i : nums1){\n\t\t\tmap.put(i, map.getOrDefault(i, 0) + 1);\n\t\t}\n\t\tfor(int i : nums2){\n\t\t\tif(map.containsKey(i) && map.get(i) > 0){\n\t\t\t\tres.add(i);\n\t\t\t\tmap.put(i, map.get(i) - 1);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tList<Integer> intersection(List<Integer> nums1, List<Integer> nums2) {\n\t\tList<Integer> result = new ArrayList<>();\n\t\tSet<Integer> set = new HashSet<>();\n\t\tfor(int i = 0; i < nums1.size(); i++){\n\t\t\tset.add(nums1.get(i));\n\t\t}\n\t\tfor(int i = 0; i < nums2.size(); i++){\n\t\t\tif(set.contains(nums2.get(i))){\n\t\t\t\tresult.add(nums2.get(i));\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<Integer> intersection(List<Integer> nums1, List<Integer> nums2) {\n\t\tList<Integer> res = new ArrayList<Integer>();\n\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < nums1.size(); i++){\n\t\t\tmap.put(nums1.get(i), map.getOrDefault(nums1.get(i), 0) + 1);\n\t\t}\n\t\tfor(int i = 0; i < nums2.size(); i++){\n\t\t\tif(map.containsKey(nums2.get(i))){\n\t\t\t\tres.add(nums2.get(i));\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1496",
        "source": "leetcodeTitles",
        "source_id": "2300",
        "url": "https://leetcode.com/problems/successful-pairs-of-spells-and-potions/",
        "language": "java",
        "query": "Successful Pairs of Spells and Potions",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] spells = new int[n];\n\t\tint[] potions = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tspells[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tpotions[i] = sc.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(spells[i] == potions[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] spells = new int[n];\n\t\tint[] potions = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tspells[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tpotions[i] = sc.nextInt();\n\t\t}\n\t\tint[] dp = new int[n+1];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(spells[j] <= potions[i]){\n\t\t\t\t\tdp[j+1] = Math.max(dp[j+1], dp[j] + potions[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[n]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] spells = new int[n];\n\t\tint[] potions = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tspells[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tpotions[i] = sc.nextInt();\n\t\t}\n\t\tint[] dp = new int[n + 1];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = n; j >= 0; j--){\n\t\t\t\tif(j - potions[i] >= 0){\n\t\t\t\t\tdp[j] = Math.max(dp[j], dp[j - potions[i]] + spells[j - potions[i]]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(dp[n]);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] spells = new int[n];\n\t\tint[] potions = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tspells[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tpotions[i] = in.nextInt();\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(spells[i] == potions[j]){\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tint[] j = new int[m];\n\t\tfor(int k = 0; k < n; k++){\n\t\t\ti[k] = in.nextInt();\n\t\t}\n\t\tfor(int k = 0; k < m; k++){\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint m = in.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = in.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = in.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = in.nextInt();\n\t\t}\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = in.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = in.nextInt();\n\t\t}\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = in.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = in.nextInt();\n\t\t}\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = in.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tfor(int j = 0; j < n; j++){\n\t\t\ti[j] = in.nextInt();\n\t\t}\n\t\tint[] j = new int[m];\n\t\tfor(int j = 0; j < m; j++){\n",
            "\tClazz(){\n\t\t\n\t}\n\tpublic static void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint m = sc.nextInt();\n\t\tint[] a = new int[n];\n\t\tint[] b = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\ta[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tb[i] = sc.nextInt();\n\t\t}\n\t\tint[] c = new int[n];\n\t\tint[] d = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tc[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\td[i] = sc.nextInt();\n\t\t}\n\t\tint[] e = new int[n];\n\t\tint[] f = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\te[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tf[i] = sc.nextInt();\n\t\t}\n\t\tint[] g = new int[n];\n\t\tint[] h = new int[m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tg[i] = sc.nextInt();\n\t\t}\n\t\tfor(int i = 0; i < m; i++){\n\t\t\th[i] = sc.nextInt();\n\t\t}\n\t\tint[] i = new int[n];\n\t\tint[] j = new int[m];\n\t\tfor(int k = 0; k < n; k++){\n\t\t\ti[k] = sc.nextInt();\n\t\t}\n\t\tfor(int\n"
        ],
        "results": 10
    },
    {
        "id": "1497",
        "source": "leetcodeTitles",
        "source_id": "405",
        "url": "https://leetcode.com/problems/convert-a-number-to-hexadecimal/",
        "language": "java",
        "query": "Convert Number to Hexadecimal",
        "snippets": [
            "\tstatic String toHex(int n){\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(n != 0){\n\t\t\tsb.append(Integer.toHexString(n & 15));\n\t\t\tn >>>= 4;\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tstatic String toHex(int n){\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(n != 0){\n\t\t\tsb.append(Integer.toHexString(n & 0xF));\n\t\t\tn >>>= 4;\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tstatic String toHex(int num){\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(num > 0){\n\t\t\tint rem = num % 16;\n\t\t\tif(rem < 10)\n\t\t\t\tsb.append(rem);\n\t\t\telse\n\t\t\t\tsb.append((char)(rem + 55));\n\t\t\tnum /= 16;\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tstatic String toHex(int n){\n\t\tString s = \"\";\n\t\twhile(n != 0){\n\t\t\ts = (char)((n & 15) + 'a') + s;\n\t\t\tn = n >>> 4;\n\t\t}\n\t\treturn s;\n\t}\n}\n",
            "\tstatic String toHex(int num){\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(num > 0){\n\t\t\tsb.append(Integer.toHexString(num % 16));\n\t\t\tnum /= 16;\n\t\t}\n\t\treturn sb.reverse().toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1498",
        "source": "leetcodeTitles",
        "source_id": "771",
        "url": "https://leetcode.com/problems/jewels-and-stones/",
        "language": "java",
        "query": "Jewels and Stones",
        "snippets": [
            "\tstatic int numJewelsInStones(String J, String S) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < S.length(); i++) {\n\t\t\tif (J.indexOf(S.charAt(i)) != -1) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint numJewelsInStones(String J, String S) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < S.length(); i++){\n\t\t\tif(J.indexOf(S.charAt(i)) != -1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1499",
        "source": "leetcodeTitles",
        "source_id": "572",
        "url": "https://leetcode.com/problems/subtree-of-another-tree//",
        "language": "java",
        "query": "Subtree of Another Tree",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\tTreeNode root2 = new TreeNode(1);\n\t\troot2.left = new TreeNode(2);\n\t\troot2.right = new TreeNode(3);\n\t\troot2.left.left = new TreeNode(4);\n\t\troot2.left.right = new TreeNode(5);\n\t\troot2.right.left = new TreeNode(6);\n\t\troot2.right.right = new TreeNode(7);\n\t\troot2.left.left.left = new TreeNode(8);\n\t\troot2.left.left.right = new TreeNode(9);\n\t\troot2.left.right.left = new TreeNode(10);\n\t\troot2.left.right.right = new TreeNode(11);\n\t\troot2.right.left.left = new TreeNode(12);\n\t\troot2.right.left.right = new TreeNode(13);\n\t\troot2.right.right.left = new TreeNode(14);\n\t\troot2.right.right.right = new TreeNode(15);\n\t\tSystem.\n",
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\tTreeNode root2 = new TreeNode(1);\n\t\troot2.left = new TreeNode(2);\n\t\troot2.right = new TreeNode(3);\n\t\troot2.left.left = new TreeNode(4);\n\t\troot2.left.right = new TreeNode(5);\n\t\troot2.right.left = new TreeNode(6);\n\t\troot2.right.right = new TreeNode(7);\n\t\tSystem.out.println(isSubtree(root, root2));\n\t}\n\tpublic static boolean isSubtree(TreeNode root, TreeNode subTree){\n\t\tif(root == null){\n\t\t\treturn false;\n\t\t}\n\t\tif(isSameTree(root, subTree)){\n\t\t\treturn true;\n\t\t}\n\t\treturn isSubtree(root.left, subTree) || isSubtree(root.right, subTree);\n\t}\n\tpublic static boolean isSameTree(TreeNode root1, TreeNode root2){\n\t\tif(root1 == null && root2 == null){\n\t\t\treturn true;\n\t\t}\n\t\tif(root1 == null || root2 == null){\n\t\t\treturn false;\n\t\t}\n\t\tif(root1.val != root2.val){\n\t\t\treturn false;\n\t\t}\n\t\treturn isSameTree(root1.left, root2.left) && isSameTree(root1.right, root2.right);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\tTreeNode root2 = new TreeNode(1);\n\t\troot2.left = new TreeNode(2);\n\t\troot2.right = new TreeNode(3);\n\t\troot2.left.left = new TreeNode(4);\n\t\troot2.left.right = new TreeNode(5);\n\t\troot2.right.left = new TreeNode(6);\n\t\troot2.right.right = new TreeNode(7);\n\t\tTreeNode root3 = new TreeNode(1);\n\t\troot3.left = new TreeNode(2);\n\t\troot3.right = new TreeNode(3);\n\t\troot3.left.left = new TreeNode(4);\n\t\troot3.left.right = new TreeNode(5);\n\t\troot3.right.left = new TreeNode(6);\n\t\troot3.right.right = new TreeNode(7);\n\t\tTreeNode root4 = new TreeNode(1);\n\t\troot4.left = new TreeNode(2);\n\t\troot4.right = new TreeNode(3);\n\t\troot4.left.left = new TreeNode(4);\n\t\troot4.left.right = new TreeNode(5);\n\t\troot4.right.left = new TreeNode(6);\n\t\troot4.right.right = new TreeNode(7);\n\t\tTreeNode root5 = new TreeNode(1);\n\t\troot5.left = new TreeNode(2);\n\t\troot5.right = new TreeNode(3);\n\t\troot5.left.left = new TreeNode(4);\n\t\troot5.left.right = new TreeNode(5\n",
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\tTreeNode root2 = new TreeNode(1);\n\t\troot2.left = new TreeNode(2);\n\t\troot2.right = new TreeNode(3);\n\t\troot2.left.left = new TreeNode(4);\n\t\troot2.left.right = new TreeNode(5);\n\t\troot2.right.left = new TreeNode(6);\n\t\troot2.right.right = new TreeNode(7);\n\t\tSystem.out.println(isSubtree(root, root2));\n\t}\n\tpublic static boolean isSubtree(TreeNode root, TreeNode subroot){\n\t\tif(root == null) return false;\n\t\tif(root.val == subroot.val && isSame(root, subroot)) return true;\n\t\treturn isSubtree(root.left, subroot) || isSubtree(root.right, subroot);\n\t}\n\tpublic static boolean isSame(TreeNode root, TreeNode subroot){\n\t\tif(root == null && subroot == null) return true;\n\t\tif(root == null || subroot == null) return false;\n\t\tif(root.val != subroot.val) return false;\n\t\treturn isSame(root.left, subroot.left) && isSame(root.right, subroot.right);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\tTreeNode root2 = new TreeNode(1);\n\t\troot2.left = new TreeNode(2);\n\t\troot2.right = new TreeNode(3);\n\t\troot2.left.left = new TreeNode(4);\n\t\troot2.left.right = new TreeNode(5);\n\t\troot2.right.left = new TreeNode(6);\n\t\troot2.right.right = new TreeNode(7);\n\t\tSystem.out.println(isSubtree(root, root2));\n\t}\n\tpublic static boolean isSubtree(TreeNode root, TreeNode subTree){\n\t\tif(root == null) return false;\n\t\tif(isSame(root, subTree)) return true;\n\t\treturn isSubtree(root.left, subTree) || isSubtree(root.right, subTree);\n\t}\n\tpublic static boolean isSame(TreeNode root, TreeNode subTree){\n\t\tif(root == null && subTree == null) return true;\n\t\tif(root == null || subTree == null) return false;\n\t\tif(root.val != subTree.val) return false;\n\t\treturn isSame(root.left, subTree.left) && isSame(root.right, subTree.right);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\tTreeNode root2 = new TreeNode(1);\n\t\troot2.left = new TreeNode(2);\n\t\troot2.right = new TreeNode(3);\n\t\troot2.left.left = new TreeNode(4);\n\t\troot2.left.right = new TreeNode(5);\n\t\troot2.right.left = new TreeNode(6);\n\t\troot2.right.right = new TreeNode(7);\n\t\tSystem.out.println(isSubtree(root, root2));\n\t}\n\tpublic static boolean isSubtree(TreeNode root, TreeNode subroot){\n\t\tif(root == null) return false;\n\t\tif(isSame(root, subroot)) return true;\n\t\treturn isSubtree(root.left, subroot) || isSubtree(root.right, subroot);\n\t}\n\tpublic static boolean isSame(TreeNode root, TreeNode subroot){\n\t\tif(root == null && subroot == null) return true;\n\t\tif(root == null || subroot == null) return false;\n\t\tif(root.val != subroot.val) return false;\n\t\treturn isSame(root.left, subroot.left) && isSame(root.right, subroot.right);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\tTreeNode node2 = new TreeNode(2);\n\t\tTreeNode node3 = new TreeNode(3);\n\t\tTreeNode node4 = new TreeNode(4);\n\t\tTreeNode node5 = new TreeNode(5);\n\t\tTreeNode node6 = new TreeNode(6);\n\t\tTreeNode node7 = new TreeNode(7);\n\t\tTreeNode node8 = new TreeNode(8);\n\t\tTreeNode node9 = new TreeNode(9);\n\t\tTreeNode node10 = new TreeNode(10);\n\t\tTreeNode node11 = new TreeNode(11);\n\t\tTreeNode node12 = new TreeNode(12);\n\t\tTreeNode node13 = new TreeNode(13);\n\t\tTreeNode node14 = new TreeNode(14);\n\t\tTreeNode node15 = new TreeNode(15);\n\t\tTreeNode node16 = new TreeNode(16);\n\t\tTreeNode node17 = new TreeNode(17);\n\t\tTreeNode node18 = new TreeNode(18);\n\t\tTreeNode node19 = new TreeNode(19);\n\t\tTreeNode node20 = new TreeNode(20);\n\t\tTreeNode node21 = new TreeNode(21);\n\t\tTreeNode node22 = new TreeNode(22);\n\t\tTreeNode node23 = new TreeNode(23);\n\t\tTreeNode node24 = new TreeNode(24);\n\t\tTreeNode node25 = new TreeNode(25);\n\t\tTreeNode node26 = new TreeNode(26);\n\t\tTreeNode node27 = new TreeNode(27);\n\t\tTreeNode node28 = new TreeNode(28);\n\t\tTreeNode node29 = new TreeNode(29);\n\t\tTreeNode node30 = new TreeNode(30);\n\t\tTreeNode node31 = new TreeNode(31);\n\t\tTreeNode node32 = new TreeNode(32);\n\t\tTreeNode node33 = new TreeNode(33);\n\t\tTreeNode node34 = new TreeNode(34);\n\t\tTreeNode node35 = new TreeNode(35);\n"
        ],
        "results": 10
    },
    {
        "id": "1500",
        "source": "leetcodeTitles",
        "source_id": "1984",
        "url": "https://leetcode.com/problems/minimum-difference-between-highest-and-lowest-of-k-scores/",
        "language": "java",
        "query": "Minimum Difference Between Highest and Lowest of K Scores",
        "snippets": [
            "\tint minDiff(int[] scores, int k){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tif(scores[i] < min){\n\t\t\t\tmin = scores[i];\n\t\t\t}\n\t\t\tif(scores[i] > max){\n\t\t\t\tmax = scores[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\tint[] count = new int[diff + 1];\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tcount[scores[i] - min]++;\n\t\t}\n\t\tint maxCount = 0;\n\t\tfor(int i = 0; i < count.length; i++){\n\t\t\tif(count[i] > maxCount){\n\t\t\t\tmaxCount = count[i];\n\t\t\t}\n\t\t}\n\t\tint minDiff = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < count.length; i++){\n\t\t\tif(count[i] == maxCount){\n\t\t\t\tif(i + min < minDiff){\n\t\t\t\t\tminDiff = i + min;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn minDiff;\n\t}\n}\n",
            "\tint minDiff(int[] scores, int k){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tif(scores[i] > max){\n\t\t\t\tmax = scores[i];\n\t\t\t}\n\t\t\tif(scores[i] < min){\n\t\t\t\tmin = scores[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\tif(k > scores.length){\n\t\t\treturn diff;\n\t\t}\n\t\tint[] temp = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\ttemp[i] = scores[i];\n\t\t}\n\t\tArrays.sort(temp);\n\t\tint minDiff = temp[k-1] - temp[0];\n\t\tfor(int i = k; i < scores.length; i++){\n\t\t\tif(scores[i] < temp[0]){\n\t\t\t\ttemp[0] = scores[i];\n\t\t\t}\n\t\t\telse if(scores[i] > temp[k-1]){\n\t\t\t\ttemp[k-1] = scores[i];\n\t\t\t}\n\t\t\telse{\n\t\t\t\tint index = findIndex(temp, scores[i]);\n\t\t\t\ttemp[index] = scores[i];\n\t\t\t}\n\t\t\tint newDiff = temp[k-1] - temp[0];\n\t\t\tif(newDiff < minDiff){\n\t\t\t\tminDiff = newDiff;\n\t\t\t}\n\t\t}\n\t\treturn minDiff;\n\t}\n\tpublic int findIndex(int[] temp, int num){\n\t\tint start = 0;\n\t\tint end = temp.length - 1;\n\t\twhile(start <= end){\n\t\t\tint mid = (start + end) / 2;\n\t\t\tif(temp[mid] == num){\n",
            "\tint minDiff(int[] scores, int k) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tif(scores[i] > max){\n\t\t\t\tmax = scores[i];\n\t\t\t}\n\t\t\tif(scores[i] < min){\n\t\t\t\tmin = scores[i];\n\t\t\t}\n\t\t}\n\t\tint[] buckets = new int[max - min + 1];\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tbuckets[scores[i] - min]++;\n\t\t}\n\t\tint count = 0;\n\t\tint i = 0;\n\t\twhile(count < k){\n\t\t\tcount += buckets[i];\n\t\t\ti++;\n\t\t}\n\t\tint res = min + i - 1;\n\t\tint count2 = buckets[i - 1];\n\t\tfor(int j = i; j < buckets.length; j++){\n\t\t\tcount2 += buckets[j];\n\t\t\tif(count2 >= k){\n\t\t\t\tres = Math.min(res, min + j - 1);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minDiff(int[] scores, int k) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tif(scores[i] < min){\n\t\t\t\tmin = scores[i];\n\t\t\t}\n\t\t\tif(scores[i] > max){\n\t\t\t\tmax = scores[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\tif(k == 1){\n\t\t\treturn diff;\n\t\t}\n\t\tint[] temp = new int[k];\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tif(scores[i] == min){\n\t\t\t\ttemp[0] = scores[i];\n\t\t\t}\n\t\t\tif(scores[i] == max){\n\t\t\t\ttemp[k - 1] = scores[i];\n\t\t\t}\n\t\t\tif(scores[i] != min && scores[i] != max){\n\t\t\t\tint j = 0;\n\t\t\t\twhile(j < k - 1 && scores[i] > temp[j]){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tfor(int l = k - 1; l > j; l--){\n\t\t\t\t\ttemp[l] = temp[l - 1];\n\t\t\t\t}\n\t\t\t\ttemp[j] = scores[i];\n\t\t\t}\n\t\t}\n\t\tint minDiff = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < k - 1; i++){\n\t\t\tif(temp[i + 1] - temp[i] < minDiff){\n\t\t\t\tminDiff = temp[i + 1] - temp[i];\n\t\t\t}\n\t\t}\n\t\treturn minDiff;\n\t}\n}\n",
            "\tint minDiff(int[] scores, int k) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tif(scores[i] < min){\n\t\t\t\tmin = scores[i];\n\t\t\t}\n\t\t\tif(scores[i] > max){\n\t\t\t\tmax = scores[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\tif(k > scores.length){\n\t\t\treturn diff;\n\t\t}\n\t\tint[] temp = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\ttemp[i] = scores[i];\n\t\t}\n\t\tArrays.sort(temp);\n\t\tint minDiff = temp[k - 1] - temp[0];\n\t\tfor(int i = k; i < scores.length; i++){\n\t\t\tint tempMin = temp[0];\n\t\t\ttemp[0] = scores[i];\n\t\t\tArrays.sort(temp);\n\t\t\tint tempDiff = temp[k - 1] - temp[0];\n\t\t\tif(tempDiff < minDiff){\n\t\t\t\tminDiff = tempDiff;\n\t\t\t}\n\t\t\ttemp[0] = tempMin;\n\t\t}\n\t\treturn minDiff;\n\t}\n}\n",
            "\tstatic int minDiff(int[] scores, int k){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < scores.length; i++){\n\t\t\tif(scores[i] < min){\n\t\t\t\tmin = scores[i];\n\t\t\t}\n\t\t\tif(scores[i] > max){\n\t\t\t\tmax = scores[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\tif(k > scores.length){\n\t\t\treturn diff;\n\t\t}\n\t\tint[] temp = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\ttemp[i] = scores[i];\n\t\t}\n\t\tArrays.sort(temp);\n\t\tint minDiff = temp[k-1] - temp[0];\n\t\tfor(int i = k; i < scores.length; i++){\n\t\t\tint tempMin = temp[0];\n\t\t\ttemp[0] = scores[i];\n\t\t\tArrays.sort(temp);\n\t\t\tint tempDiff = temp[k-1] - temp[0];\n\t\t\tif(tempDiff < minDiff){\n\t\t\t\tminDiff = tempDiff;\n\t\t\t}\n\t\t\ttemp[0] = tempMin;\n\t\t}\n\t\treturn minDiff;\n\t}\n}\n",
            "\tint minDiff(int[] a, int k){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\tif(diff < 0){\n\t\t\treturn 0;\n\t\t}\n\t\tif(k > a.length){\n\t\t\treturn diff;\n\t\t}\n\t\tint[] b = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tb[i] = a[i];\n\t\t}\n\t\tArrays.sort(b);\n\t\tint minDiff = b[k-1] - b[0];\n\t\tfor(int i = k; i < a.length; i++){\n\t\t\tint temp = a[i] - b[0];\n\t\t\tif(temp < minDiff){\n\t\t\t\tminDiff = temp;\n\t\t\t}\n\t\t\tb[0] = a[i];\n\t\t\tArrays.sort(b);\n\t\t}\n\t\treturn minDiff;\n\t}\n}\n",
            "\tint minDiff(int[] a, int k){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\tif(k > a.length){\n\t\t\treturn diff;\n\t\t}\n\t\tint[] b = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tb[i] = a[i];\n\t\t}\n\t\tArrays.sort(b);\n\t\tint minDiff = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tif(b[i] - min < minDiff){\n\t\t\t\tminDiff = b[i] - min;\n\t\t\t}\n\t\t}\n\t\treturn minDiff;\n\t}\n}\n",
            "\tint minDiff(int[] a, int k) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tif(a[i] < min){\n\t\t\t\tmin = a[i];\n\t\t\t}\n\t\t\tif(a[i] > max){\n\t\t\t\tmax = a[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\tif(k > a.length){\n\t\t\treturn diff;\n\t\t}\n\t\tint[] b = new int[k];\n\t\tfor(int i = 0; i < k; i++){\n\t\t\tb[i] = a[i];\n\t\t}\n\t\tArrays.sort(b);\n\t\tint minDiff = b[k-1] - b[0];\n\t\tfor(int i = k; i < a.length; i++){\n\t\t\tif(a[i] < b[0]){\n\t\t\t\tb[0] = a[i];\n\t\t\t\tArrays.sort(b);\n\t\t\t\tminDiff = b[k-1] - b[0];\n\t\t\t}\n\t\t\telse if(a[i] > b[k-1]){\n\t\t\t\tb[k-1] = a[i];\n\t\t\t\tArrays.sort(b);\n\t\t\t\tminDiff = b[k-1] - b[0];\n\t\t\t}\n\t\t}\n\t\treturn minDiff;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1501",
        "source": "leetcodeTitles",
        "source_id": "1360",
        "url": "https://leetcode.com/problems/number-of-days-between-two-dates/",
        "language": "java",
        "query": "Number of Days Between Two Dates",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date1 = sc.nextLine();\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date2 = sc.nextLine();\n\t\tint days = daysBetweenDates(date1, date2);\n\t\tSystem.out.println(\"Number of days between two dates is \" + days);\n\t}\n\tpublic static int daysBetweenDates(String date1, String date2){\n\t\tint days = 0;\n\t\tString[] date1Array = date1.split(\"/\");\n\t\tString[] date2Array = date2.split(\"/\");\n\t\tint date1Day = Integer.parseInt(date1Array[0]);\n\t\tint date1Month = Integer.parseInt(date1Array[1]);\n\t\tint date1Year = Integer.parseInt(date1Array[2]);\n\t\tint date2Day = Integer.parseInt(date2Array[0]);\n\t\tint date2Month = Integer.parseInt(date2Array[1]);\n\t\tint date2Year = Integer.parseInt(date2Array[2]);\n\t\tif(date1Year > date2Year){\n\t\t\tdays = (date1Year - date2Year) * 365;\n\t\t}\n\t\telse if(date1Year < date2Year){\n\t\t\tdays = (date2Year - date1Year) * 365;\n\t\t}\n\t\telse{\n\t\t\tif(date1Month > date2Month){\n\t\t\t\tdays = (date1Month - date2Month) * 30;\n\t\t\t}\n\t\t\telse if(date1Month < date2Month){\n\t\t\t\tdays = (date2Month - date1Month) * 30;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdays = date2Day - date1Day;\n\t\t\t}\n\t\t}\n\t\treturn days;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date1 = sc.nextLine();\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date2 = sc.nextLine();\n\t\tSimpleDateFormat sdf = new SimpleDateFormat(\"dd/MM/yyyy\");\n\t\tDate d1 = null;\n\t\tDate d2 = null;\n\t\ttry{\n\t\t\td1 = sdf.parse(date1);\n\t\t\td2 = sdf.parse(date2);\n\t\t}\n\t\tcatch(ParseException e){\n\t\t\te.printStackTrace();\n\t\t}\n\t\tlong diff = d2.getTime() - d1.getTime();\n\t\tlong diffDays = diff / (24 * 60 * 60 * 1000);\n\t\tSystem.out.println(\"Number of days between two dates is \" + diffDays);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date1 = sc.nextLine();\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date2 = sc.nextLine();\n\t\tDate d1 = new Date(date1);\n\t\tDate d2 = new Date(date2);\n\t\tSystem.out.println(\"Number of days between two dates is \" + d1.difference(d2));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date1 = sc.nextLine();\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date2 = sc.nextLine();\n\t\tDate d1 = new Date(date1);\n\t\tDate d2 = new Date(date2);\n\t\tint days = d1.daysBetween(d2);\n\t\tSystem.out.println(\"Number of days between two dates is \" + days);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the first date in dd/mm/yyyy format\");\n\t\tString date1 = sc.nextLine();\n\t\tSystem.out.println(\"Enter the second date in dd/mm/yyyy format\");\n\t\tString date2 = sc.nextLine();\n\t\tint days = daysBetweenDates(date1,date2);\n\t\tSystem.out.println(\"Number of days between the two dates is \"+days);\n\t}\n\tpublic static int daysBetweenDates(String date1,String date2){\n\t\tint days = 0;\n\t\tString[] date1_split = date1.split(\"/\");\n\t\tString[] date2_split = date2.split(\"/\");\n\t\tint date1_day = Integer.parseInt(date1_split[0]);\n\t\tint date1_month = Integer.parseInt(date1_split[1]);\n\t\tint date1_year = Integer.parseInt(date1_split[2]);\n\t\tint date2_day = Integer.parseInt(date2_split[0]);\n\t\tint date2_month = Integer.parseInt(date2_split[1]);\n\t\tint date2_year = Integer.parseInt(date2_split[2]);\n\t\tif(date1_year>date2_year){\n\t\t\tdays = (date1_year-date2_year)*365;\n\t\t}\n\t\telse if(date1_year<date2_year){\n\t\t\tdays = (date2_year-date1_year)*365;\n\t\t}\n\t\telse{\n\t\t\tif(date1_month>date2_month){\n\t\t\t\tdays = (date1_month-date2_month)*30;\n\t\t\t}\n\t\t\telse if(date1_month<date2_month){\n\t\t\t\tdays = (date2_month-date1_month)*30;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdays = date2_\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the first date in dd/mm/yyyy format\");\n\t\tString date1 = sc.nextLine();\n\t\tSystem.out.println(\"Enter the second date in dd/mm/yyyy format\");\n\t\tString date2 = sc.nextLine();\n\t\tint days = daysBetweenDates(date1, date2);\n\t\tSystem.out.println(\"Number of days between the two dates is \" + days);\n\t}\n\tpublic static int daysBetweenDates(String date1, String date2){\n\t\tint days = 0;\n\t\tString[] date1Array = date1.split(\"/\");\n\t\tString[] date2Array = date2.split(\"/\");\n\t\tint date1Day = Integer.parseInt(date1Array[0]);\n\t\tint date1Month = Integer.parseInt(date1Array[1]);\n\t\tint date1Year = Integer.parseInt(date1Array[2]);\n\t\tint date2Day = Integer.parseInt(date2Array[0]);\n\t\tint date2Month = Integer.parseInt(date2Array[1]);\n\t\tint date2Year = Integer.parseInt(date2Array[2]);\n\t\tif(date1Year > date2Year){\n\t\t\tdays = 365 * (date1Year - date2Year);\n\t\t}\n\t\telse if(date1Year < date2Year){\n\t\t\tdays = 365 * (date2Year - date1Year);\n\t\t}\n\t\telse{\n\t\t\tif(date1Month > date2Month){\n\t\t\t\tdays = 30 * (date1Month - date2Month);\n\t\t\t}\n\t\t\telse if(date1Month < date2Month){\n\t\t\t\tdays = 30 * (date2Month - date1Month);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tdays = date2Day - date1Day;\n\t\t\t}\n\t\t}\n\t\treturn days;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc=new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date1=sc.nextLine();\n\t\tSystem.out.println(\"Enter the date in dd/mm/yyyy format\");\n\t\tString date2=sc.nextLine();\n\t\tint days=daysBetween(date1,date2);\n\t\tSystem.out.println(\"Number of days between two dates is \"+days);\n\t}\n\tpublic static int daysBetween(String date1,String date2){\n\t\tint days=0;\n\t\tString[] date1arr=date1.split(\"/\");\n\t\tString[] date2arr=date2.split(\"/\");\n\t\tint date1day=Integer.parseInt(date1arr[0]);\n\t\tint date1month=Integer.parseInt(date1arr[1]);\n\t\tint date1year=Integer.parseInt(date1arr[2]);\n\t\tint date2day=Integer.parseInt(date2arr[0]);\n\t\tint date2month=Integer.parseInt(date2arr[1]);\n\t\tint date2year=Integer.parseInt(date2arr[2]);\n\t\tif(date1year>date2year){\n\t\t\tdays=(date1year-date2year)*365;\n\t\t}\n\t\telse if(date1year<date2year){\n\t\t\tdays=(date2year-date1year)*365;\n\t\t}\n\t\telse{\n\t\t\tdays=0;\n\t\t}\n\t\tif(date1month>date2month){\n\t\t\tdays=days+((date1month-date2month)*30);\n\t\t}\n\t\telse if(date1month<date2month){\n\t\t\tdays=days+((date2month-date1month)*30);\n\t\t}\n\t\telse{\n\t\t\tdays=days+0;\n\t\t}\n\t\tif(date1day>date2day){\n\t\t\tdays=days+date1day-date\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tSystem.out.println(\"Enter the first date in dd/mm/yyyy format\");\n\t\tString date1 = in.nextLine();\n\t\tSystem.out.println(\"Enter the second date in dd/mm/yyyy format\");\n\t\tString date2 = in.nextLine();\n\t\tint days = daysBetweenDates(date1, date2);\n\t\tSystem.out.println(\"Number of days between the two dates is \" + days);\n\t}\n\tpublic static int daysBetweenDates(String date1, String date2){\n\t\tint days = 0;\n\t\tString[] date1Array = date1.split(\"/\");\n\t\tString[] date2Array = date2.split(\"/\");\n\t\tint[] date1Int = new int[3];\n\t\tint[] date2Int = new int[3];\n\t\tfor(int i = 0; i < 3; i++){\n\t\t\tdate1Int[i] = Integer.parseInt(date1Array[i]);\n\t\t\tdate2Int[i] = Integer.parseInt(date2Array[i]);\n\t\t}\n\t\tif(date1Int[2] > date2Int[2]){\n\t\t\tdays = (date1Int[2] - date2Int[2]) * 365;\n\t\t}\n\t\telse{\n\t\t\tdays = (date2Int[2] - date1Int[2]) * 365;\n\t\t}\n\t\tif(date1Int[1] > date2Int[1]){\n\t\t\tdays += (date1Int[1] - date2Int[1]) * 30;\n\t\t}\n\t\telse{\n\t\t\tdays += (date2Int[1] - date1Int[1]) * 30;\n\t\t}\n\t\tif(date1Int[0] > date2Int[0]){\n\t\t\tdays += (date1Int[0] - date2Int[0]);\n\t\t}\n\t\telse{\n\t\t\tdays += (date2Int[\n"
        ],
        "results": 10
    },
    {
        "id": "1502",
        "source": "leetcodeTitles",
        "source_id": "198",
        "url": "https://leetcode.com/problems/house-robber/",
        "language": "java",
        "query": "House Robber",
        "snippets": [
            "\tint rob(int[] nums) {\n\t\tint n = nums.length;\n\t\tif(n == 0) return 0;\n\t\tif(n == 1) return nums[0];\n\t\tif(n == 2) return Math.max(nums[0], nums[1]);\n\t\tint[] dp = new int[n];\n\t\tdp[0] = nums[0];\n\t\tdp[1] = Math.max(nums[0], nums[1]);\n\t\tfor(int i = 2; i < n; i++){\n\t\t\tdp[i] = Math.max(dp[i-1], dp[i-2] + nums[i]);\n\t\t}\n\t\treturn dp[n-1];\n\t}\n}\n",
            "\tint rob(int[] nums) {\n\t\tif(nums.length == 0) return 0;\n\t\tif(nums.length == 1) return nums[0];\n\t\tif(nums.length == 2) return Math.max(nums[0], nums[1]);\n\t\tint[] dp = new int[nums.length];\n\t\tdp[0] = nums[0];\n\t\tdp[1] = Math.max(nums[0], nums[1]);\n\t\tfor(int i = 2; i < nums.length; i++){\n\t\t\tdp[i] = Math.max(dp[i-1], dp[i-2] + nums[i]);\n\t\t}\n\t\treturn dp[nums.length-1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1503",
        "source": "leetcodeTitles",
        "source_id": "313",
        "url": "https://leetcode.com/problems/super-ugly-number/",
        "language": "java",
        "query": "Super Ugly Number",
        "snippets": [
            "\tint nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] res = new int[n];\n\t\tres[0] = 1;\n\t\tint[] index = new int[primes.length];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tres[i] = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tres[i] = Math.min(res[i], res[index[j]] * primes[j]);\n\t\t\t}\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tif (res[i] == res[index[j]] * primes[j]) {\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res[n - 1];\n\t}\n}\n",
            "\tint nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tugly[0] = 1;\n\t\tint[] index = new int[primes.length];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tmin = Math.min(min, primes[j] * ugly[index[j]]);\n\t\t\t}\n\t\t\tugly[i] = min;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tif (ugly[i] == primes[j] * ugly[index[j]]) {\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tint nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tugly[0] = 1;\n\t\tint[] index = new int[primes.length];\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tugly[i] = Integer.MAX_VALUE;\n\t\t\tfor(int j = 0; j < primes.length; j++){\n\t\t\t\tugly[i] = Math.min(ugly[i], primes[j] * ugly[index[j]]);\n\t\t\t}\n\t\t\tfor(int j = 0; j < primes.length; j++){\n\t\t\t\tif(ugly[i] == primes[j] * ugly[index[j]]){\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tstatic int nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tint[] index = new int[primes.length];\n\t\tugly[0] = 1;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tmin = Math.min(min, primes[j] * ugly[index[j]]);\n\t\t\t}\n\t\t\tugly[i] = min;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tif (min == primes[j] * ugly[index[j]]) {\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tstatic int nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tint[] index = new int[primes.length];\n\t\tint[] primes_copy = primes.clone();\n\t\tArrays.sort(primes_copy);\n\t\tugly[0] = 1;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes_copy.length; j++) {\n\t\t\t\tmin = Math.min(min, primes_copy[j] * ugly[index[j]]);\n\t\t\t}\n\t\t\tugly[i] = min;\n\t\t\tfor (int j = 0; j < primes_copy.length; j++) {\n\t\t\t\tif (ugly[i] == primes_copy[j] * ugly[index[j]]) {\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tstatic int nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tint[] index = new int[primes.length];\n\t\tugly[0] = 1;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tmin = Math.min(min, primes[j] * ugly[index[j]]);\n\t\t\t}\n\t\t\tugly[i] = min;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tif (ugly[i] == primes[j] * ugly[index[j]]) {\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tint nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tint[] index = new int[primes.length];\n\t\tugly[0] = 1;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tmin = Math.min(min, primes[j] * ugly[index[j]]);\n\t\t\t}\n\t\t\tugly[i] = min;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tif (ugly[i] == primes[j] * ugly[index[j]]) {\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tint nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tint[] index = new int[primes.length];\n\t\tugly[0] = 1;\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tmin = Math.min(min, primes[j] * ugly[index[j]]);\n\t\t\t}\n\t\t\tugly[i] = min;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tif (min == primes[j] * ugly[index[j]]) {\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tstatic int nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tugly[0] = 1;\n\t\tint[] index = new int[primes.length];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tmin = Math.min(min, primes[j] * ugly[index[j]]);\n\t\t\t}\n\t\t\tugly[i] = min;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tif (min == primes[j] * ugly[index[j]]) {\n\t\t\t\t\tindex[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n",
            "\tint nthSuperUglyNumber(int n, int[] primes) {\n\t\tint[] ugly = new int[n];\n\t\tugly[0] = 1;\n\t\tint[] indexes = new int[primes.length];\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tint min = Integer.MAX_VALUE;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tmin = Math.min(min, primes[j] * ugly[indexes[j]]);\n\t\t\t}\n\t\t\tugly[i] = min;\n\t\t\tfor (int j = 0; j < primes.length; j++) {\n\t\t\t\tif (min == primes[j] * ugly[indexes[j]]) {\n\t\t\t\t\tindexes[j]++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ugly[n - 1];\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1504",
        "source": "leetcodeTitles",
        "source_id": "221",
        "url": "https://leetcode.com/problems/maximal-square/",
        "language": "java",
        "query": "Maximum Square",
        "snippets": [
            "\tint maxSquare(int[] a) {\n\t\tint n = a.length;\n\t\tint[][] dp = new int[n][n];\n\t\tint max = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (a[i] == a[j]) {\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\tmax = Math.max(max, dp[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (dp[i][j] != 0) {\n\t\t\t\t\tfor (int k = i + 1; k < n; k++) {\n\t\t\t\t\t\tfor (int l = j + 1; l < n; l++) {\n\t\t\t\t\t\t\tif (a[k] == a[l]) {\n\t\t\t\t\t\t\t\tdp[i][j] = Math.max(dp[i][j], dp[k][l] + 1);\n\t\t\t\t\t\t\t\tmax = Math.max(max, dp[i][j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max * max;\n\t}\n}\n",
            "\tstatic int maxSquare(int[][] matrix){\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(matrix[i][j] == 1){\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\tif(i > 0) dp[i][j] += dp[i-1][j];\n\t\t\t\t\tif(j > 0) dp[i][j] += dp[i][j-1];\n\t\t\t\t\tif(i > 0 && j > 0) dp[i][j] -= dp[i-1][j-1];\n\t\t\t\t\tmax = Math.max(max, dp[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max*max;\n\t}\n}\n",
            "\tint maxSquare(int[] a){\n\t\tint n = a.length;\n\t\tint[][] dp = new int[n][n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 || j == 0){\n\t\t\t\t\tdp[i][j] = a[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], Math.min(dp[i][j-1], dp[i-1][j-1])) + a[i][j];\n\t\t\t\t}\n\t\t\t\tmax = Math.max(max, dp[i][j]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxSquare(int[] a){\n\t\tint n = a.length;\n\t\tint[][] dp = new int[n][n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(a[i] == a[j]){\n\t\t\t\t\tif(i == 0 || j == 0){\n\t\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tdp[i][j] = dp[i-1][j-1] + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = 0;\n\t\t\t\t}\n\t\t\t\tmax = Math.max(max, dp[i][j]);\n\t\t\t}\n\t\t}\n\t\treturn max * max;\n\t}\n}\n",
            "\tint maxSquare(int[] a){\n\t\tint n = a.length;\n\t\tint[][] dp = new int[n][n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(i == 0 || j == 0){\n\t\t\t\t\tdp[i][j] = a[i][j];\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tdp[i][j] = a[i][j] + Math.min(dp[i-1][j], Math.min(dp[i][j-1], dp[i-1][j-1]));\n\t\t\t\t}\n\t\t\t\tmax = Math.max(max, dp[i][j]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maximalSquare(char[][] matrix) {\n\t\tint m = matrix.length;\n\t\tif(m == 0) return 0;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(matrix[i][j] == '1'){\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\tif(i > 0) dp[i][j] += dp[i-1][j];\n\t\t\t\t\tif(j > 0) dp[i][j] += dp[i][j-1];\n\t\t\t\t\tif(i > 0 && j > 0) dp[i][j] -= dp[i-1][j-1];\n\t\t\t\t\tmax = Math.max(max, dp[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max * max;\n\t}\n}\n",
            "\tstatic int maxSquare(int[][] matrix){\n\t\tint rows = matrix.length;\n\t\tint cols = matrix[0].length;\n\t\tint[][] dp = new int[rows][cols];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < rows; i++){\n\t\t\tfor(int j = 0; j < cols; j++){\n\t\t\t\tif(matrix[i][j] == 1){\n\t\t\t\t\tif(i == 0 || j == 0){\n\t\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tdp[i][j] = Math.min(dp[i-1][j], Math.min(dp[i][j-1], dp[i-1][j-1])) + 1;\n\t\t\t\t\t}\n\t\t\t\t\tmax = Math.max(max, dp[i][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max * max;\n\t}\n}\n",
            "\tint maxSquare(int[] a) {\n\t\tint n = a.length;\n\t\tint[][] dp = new int[n][n];\n\t\tfor(int i=0;i<n;i++){\n\t\t\tdp[i][i] = a[i];\n\t\t}\n\t\tfor(int i=n-2;i>=0;i--){\n\t\t\tfor(int j=i+1;j<n;j++){\n\t\t\t\tdp[i][j] = a[i]*a[j]*(j-i+1);\n\t\t\t\tfor(int k=i;k<j;k++){\n\t\t\t\t\tdp[i][j] = Math.max(dp[i][j],dp[i][k]*dp[k+1][j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tfor(int j=i;j<n;j++){\n\t\t\t\tmax = Math.max(max,dp[i][j]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1505",
        "source": "leetcodeTitles",
        "source_id": "421",
        "url": "https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array/",
        "language": "java",
        "query": "Maximum XOR of Two Numbers in an Array",
        "snippets": [
            "\tint findMaximumXOR(int[] nums) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tfor (int j = i + 1; j < nums.length; j++) {\n\t\t\t\tint xor = nums[i] ^ nums[j];\n\t\t\t\tif (xor > max) {\n\t\t\t\t\tmax = xor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint findMaximumXOR(int[] nums) {\n\t\tint max = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tfor(int j = i + 1; j < nums.length; j++){\n\t\t\t\tint xor = nums[i] ^ nums[j];\n\t\t\t\tif(xor > max) max = xor;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxXor(int[] nums) {\n\t\tint max = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tfor(int j = i + 1; j < nums.length; j++){\n\t\t\t\tmax = Math.max(max, nums[i] ^ nums[j]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint maxXor(int[] nums) {\n\t\tint max = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tfor(int j = i + 1; j < nums.length; j++){\n\t\t\t\tint xor = nums[i] ^ nums[j];\n\t\t\t\tif(xor > max)\n\t\t\t\t\tmax = xor;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxXor(int[] nums) {\n\t\tint max = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tfor (int j = i + 1; j < nums.length; j++) {\n\t\t\t\tmax = Math.max(max, nums[i] ^ nums[j]);\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1506",
        "source": "leetcodeTitles",
        "source_id": "53",
        "url": "https://leetcode.com/problems/maximum-subarray/",
        "language": "java",
        "query": "Maximum Subarray",
        "snippets": [
            "\tint maxSubArray(int[] nums) {\n\t\tint max = nums[0];\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tif(sum > max)\n\t\t\t\tmax = sum;\n\t\t\tif(sum < 0)\n\t\t\t\tsum = 0;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxSubArray(int[] nums) {\n\t\tint max = nums[0];\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tif(sum > max)\n\t\t\t\tmax = sum;\n\t\t\tif(sum < 0)\n\t\t\t\tsum = 0;\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int maxSubArray(int[] nums) {\n\t\tint max = nums[0];\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tsum += nums[i];\n\t\t\tif(sum > max){\n\t\t\t\tmax = sum;\n\t\t\t}\n\t\t\tif(sum < 0){\n\t\t\t\tsum = 0;\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1507",
        "source": "leetcodeTitles",
        "source_id": "1528",
        "url": "https://leetcode.com/problems/shuffle-string/",
        "language": "java",
        "query": "Shuffle String",
        "snippets": [
            "\tString shuffleString(String s){\n\t\tchar[] c = s.toCharArray();\n\t\tint n = c.length;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint r = (int)(Math.random() * n);\n\t\t\tchar temp = c[i];\n\t\t\tc[i] = c[r];\n\t\t\tc[r] = temp;\n\t\t}\n\t\treturn new String(c);\n\t}\n}\n",
            "\tString shuffleString(String s){\n\t\tchar[] c = s.toCharArray();\n\t\tint n = c.length;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint r = (int)(Math.random() * (n - i)) + i;\n\t\t\tchar temp = c[i];\n\t\t\tc[i] = c[r];\n\t\t\tc[r] = temp;\n\t\t}\n\t\treturn new String(c);\n\t}\n}\n",
            "\tString shuffle(String s){\n\t\tchar[] c = s.toCharArray();\n\t\tint n = c.length;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint r = (int)(Math.random() * (n - i)) + i;\n\t\t\tchar temp = c[i];\n\t\t\tc[i] = c[r];\n\t\t\tc[r] = temp;\n\t\t}\n\t\treturn new String(c);\n\t}\n}\n",
            "\tString shuffle(String s){\n\t\tchar[] c = s.toCharArray();\n\t\tint n = c.length;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint r = (int)(Math.random()*n);\n\t\t\tchar temp = c[i];\n\t\t\tc[i] = c[r];\n\t\t\tc[r] = temp;\n\t\t}\n\t\treturn new String(c);\n\t}\n}\n",
            "\tString shuffleString(String s){\n\t\tchar[] ch = s.toCharArray();\n\t\tint n = ch.length;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint r = (int)(Math.random() * n);\n\t\t\tchar temp = ch[i];\n\t\t\tch[i] = ch[r];\n\t\t\tch[r] = temp;\n\t\t}\n\t\treturn new String(ch);\n\t}\n}\n",
            "\tString shuffleString(String s){\n\t\tchar[] c=s.toCharArray();\n\t\tint n=c.length;\n\t\tfor(int i=0;i<n;i++){\n\t\t\tint r=i+ (int)(Math.random()*(n-i));\n\t\t\tchar temp=c[i];\n\t\t\tc[i]=c[r];\n\t\t\tc[r]=temp;\n\t\t}\n\t\treturn new String(c);\n\t}\n}\n",
            "\tString shuffleString(String s) {\n\t\tchar[] ch = s.toCharArray();\n\t\tint n = ch.length;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tint r = (int) (Math.random() * (n - i)) + i;\n\t\t\tchar temp = ch[i];\n\t\t\tch[i] = ch[r];\n\t\t\tch[r] = temp;\n\t\t}\n\t\treturn new String(ch);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1508",
        "source": "leetcodeTitles",
        "source_id": "1190",
        "url": "https://leetcode.com/problems/reverse-substrings-between-each-pair-of-parentheses/",
        "language": "java",
        "query": "Reverse Substrings Between Each Pair of Parentheses",
        "snippets": [
            "\tString reverseParentheses(String s){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile(i < s.length()){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tint j = i + 1;\n\t\t\t\twhile(j < s.length() && s.charAt(j) != ')'){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tsb.append(new StringBuilder(s.substring(i + 1, j)).reverse());\n\t\t\t\ti = j;\n\t\t\t}else{\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reverseParentheses(String s){\n\t\tStringBuilder sb = new StringBuilder(s);\n\t\tint i = 0;\n\t\twhile(i < sb.length()){\n\t\t\tif(sb.charAt(i) == '('){\n\t\t\t\tint j = i + 1;\n\t\t\t\twhile(j < sb.length() && sb.charAt(j) != ')'){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tsb.reverse(i + 1, j);\n\t\t\t\ti = j;\n\t\t\t}\n\t\t\telse{\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reverseParentheses(String s) {\n\t\tStringBuilder sb = new StringBuilder();\n\t\tint i = 0;\n\t\twhile(i < s.length()){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tint j = i + 1;\n\t\t\t\twhile(j < s.length() && s.charAt(j) != ')'){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tString temp = s.substring(i + 1, j);\n\t\t\t\tStringBuilder sb2 = new StringBuilder();\n\t\t\t\tfor(int k = temp.length() - 1; k >= 0; k--){\n\t\t\t\t\tsb2.append(temp.charAt(k));\n\t\t\t\t}\n\t\t\t\tsb.append(sb2.toString());\n\t\t\t\ti = j;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reverseParentheses(String s){\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(i < s.length()){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tj = i;\n\t\t\t\twhile(s.charAt(j) != ')'){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tsb.append(new StringBuilder(s.substring(i+1, j)).reverse());\n\t\t\t\ti = j;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reverseParentheses(String s){\n\t\tint n = s.length();\n\t\tStringBuilder sb = new StringBuilder(n);\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tint j = i;\n\t\t\t\twhile(s.charAt(j) != ')'){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tsb.append(new StringBuilder(s.substring(i + 1, j)).reverse());\n\t\t\t\ti = j;\n\t\t\t}else{\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reverseParentheses(String s){\n\t\tint i = 0;\n\t\tint j = 0;\n\t\tStringBuilder sb = new StringBuilder();\n\t\twhile(i < s.length()){\n\t\t\tif(s.charAt(i) == '('){\n\t\t\t\tj = i;\n\t\t\t\twhile(j < s.length() && s.charAt(j) != ')'){\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\tsb.append(new StringBuilder(s.substring(i + 1, j)).reverse());\n\t\t\t\ti = j;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsb.append(s.charAt(i));\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1509",
        "source": "leetcodeTitles",
        "source_id": "931",
        "url": "https://leetcode.com/problems/minimum-falling-path-sum/",
        "language": "java",
        "query": "Minimum Falling Path Sum",
        "snippets": [
            "\tint minFallingPathSum(int[][] A) {\n\t\tint m = A.length;\n\t\tint n = A[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tdp[i][0] = A[i][0];\n\t\t}\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tfor (int i = 0; i < m; i++) {\n\t\t\t\tdp[i][j] = A[i][j] + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));\n\t\t\t}\n\t\t}\n\t\tint res = dp[0][n - 1];\n\t\tfor (int i = 1; i < m; i++) {\n\t\t\tres = Math.min(res, dp[i][n - 1]);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minFallingPathSum(int[][] A) {\n\t\tint m = A.length;\n\t\tint n = A[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tdp[i][0] = A[i][0];\n\t\t}\n\t\tfor (int j = 1; j < n; j++) {\n\t\t\tfor (int i = 0; i < m; i++) {\n\t\t\t\tdp[i][j] = A[i][j] + Math.min(dp[i][j - 1], Math.min(dp[i - 1][j - 1], dp[i + 1][j - 1]));\n\t\t\t}\n\t\t}\n\t\tint res = dp[0][n - 1];\n\t\tfor (int i = 1; i < m; i++) {\n\t\t\tres = Math.min(res, dp[i][n - 1]);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minFallingPathSum(int[][] A) {\n\t\tint m = A.length;\n\t\tint n = A[0].length;\n\t\tint[] dp = new int[n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tint[] next = new int[n];\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tint min = Integer.MAX_VALUE;\n\t\t\t\tfor (int k = 0; k < n; k++) {\n\t\t\t\t\tif (j == k) continue;\n\t\t\t\t\tmin = Math.min(min, dp[k]);\n\t\t\t\t}\n\t\t\t\tnext[j] = Math.min(min, dp[j]) + A[i][j];\n\t\t\t}\n\t\t\tdp = next;\n\t\t}\n\t\tint res = Integer.MAX_VALUE;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tres = Math.min(res, dp[i]);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint minFallingPathSum(int[][] arr) {\n\t\tint m = arr.length;\n\t\tint n = arr[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tdp[i][0] = arr[i][0];\n\t\t}\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tdp[j][i] = arr[j][i] + Math.min(dp[j][i - 1], Math.min(dp[j - 1][i - 1], dp[j + 1][i - 1]));\n\t\t\t}\n\t\t}\n\t\tint res = dp[0][n - 1];\n\t\tfor (int i = 1; i < m; i++) {\n\t\t\tres = Math.min(res, dp[i][n - 1]);\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1510",
        "source": "leetcodeTitles",
        "source_id": "1437",
        "url": "https://leetcode.com/problems/check-if-all-1s-are-at-least-length-k-places-away/",
        "language": "java",
        "query": "Check If All 1's Are at Least Length K Places Away",
        "snippets": [
            "\tboolean kLengthApart(int[] nums, int k) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 1){\n\t\t\t\tcount++;\n\t\t\t\tif(count > k) return false;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean kLengthApart(int[] nums, int k) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 1){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(nums[i] == 0){\n\t\t\t\tif(count > k){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean kLengthApart(int[] nums, int k) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == 1) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tif (count > k) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\treturn count <= k;\n\t}\n}\n",
            "\tboolean kLengthApart(int[] nums, int k) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == 1) {\n\t\t\t\tcount++;\n\t\t\t\tif (i - count > k) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean kLengthApart(int[] nums, int k){\n\t\tint count = 0;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] == 1){\n\t\t\t\tcount++;\n\t\t\t\tif(count > k){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean kLengthApart(int[] nums, int k) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == 1) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t\tif (count > k) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean kLengthApart(int[] nums, int k) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == 1) {\n\t\t\t\tcount++;\n\t\t\t} else {\n\t\t\t\tif (count < k) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tcount = 0;\n\t\t\t}\n\t\t}\n\t\treturn count >= k;\n\t}\n}\n",
            "\tboolean kLengthApart(int[] nums, int k) {\n\t\tint last = -1;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == 1) {\n\t\t\t\tif (last != -1 && i - last <= k) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tlast = i;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic boolean kLengthApart(int[] nums, int k) {\n\t\tint count = 0;\n\t\tint last = -1;\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (nums[i] == 1) {\n\t\t\t\tif (last != -1 && i - last <= k) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tlast = i;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count >= k;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1511",
        "source": "leetcodeTitles",
        "source_id": "646",
        "url": "https://leetcode.com/problems/maximum-length-of-pair-chain/",
        "language": "java",
        "query": "Maximum Length of Pair Chain",
        "snippets": [
            "\tstatic int maxChain(int[] nums){\n\t\tint max = 0;\n\t\tint[] dp = new int[nums.length];\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(nums[i] > nums[j] && dp[i] < dp[j] + 1){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint findLongestChain(int[][] pairs) {\n\t\tint n = pairs.length;\n\t\tint[] dp = new int[n];\n\t\tArrays.fill(dp, 1);\n\t\tArrays.sort(pairs, (a, b) -> a[0] - b[0]);\n\t\tfor (int i = 1; i < n; i++) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (pairs[i][0] > pairs[j][1]) {\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn Arrays.stream(dp).max().getAsInt();\n\t}\n}\n",
            "\tint findLongestChain(int[][] pairs) {\n\t\tif(pairs == null || pairs.length == 0) return 0;\n\t\tArrays.sort(pairs, new Comparator<int[]>(){\n\t\t\tpublic int compare(int[] a, int[] b){\n\t\t\t\treturn a[1] - b[1];\n\t\t\t}\n\t\t});\n\t\tint max = 1;\n\t\tint cur = 1;\n\t\tfor(int i = 1; i < pairs.length; i++){\n\t\t\tif(pairs[i][0] > pairs[i-1][1]){\n\t\t\t\tcur++;\n\t\t\t}else{\n\t\t\t\tcur = 1;\n\t\t\t}\n\t\t\tmax = Math.max(max, cur);\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint findLongestChain(int[][] pairs) {\n\t\tArrays.sort(pairs, new Comparator<int[]>() {\n\t\t\tpublic int compare(int[] a, int[] b) {\n\t\t\t\treturn a[1] - b[1];\n\t\t\t}\n\t\t});\n\t\tint res = 0, end = Integer.MIN_VALUE;\n\t\tfor (int[] pair : pairs) {\n\t\t\tif (pair[0] > end) {\n\t\t\t\tres++;\n\t\t\t\tend = pair[1];\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint findLongestChain(int[][] pairs) {\n\t\tArrays.sort(pairs, new Comparator<int[]>() {\n\t\t\t@Override\n\t\t\tpublic int compare(int[] o1, int[] o2) {\n\t\t\t\treturn o1[1] - o2[1];\n\t\t\t}\n\t\t});\n\t\tint res = 0;\n\t\tint end = 0;\n\t\tfor (int[] pair : pairs) {\n\t\t\tif (pair[0] > end) {\n\t\t\t\tres++;\n\t\t\t\tend = pair[1];\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint chainLength(int[] A){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tdp[0] = 1;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(A[j] < A[i] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint chain(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[i] > a[j] && dp[i] < dp[j] + 1){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(max < dp[i]){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint chain(int[] A){\n\t\tint n = A.length;\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(A[i] > A[j] && dp[i] < dp[j] + 1){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(max < dp[i]){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint chainLength(int[] pairs){\n\t\tint n = pairs.length;\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(pairs[i] > pairs[j]){\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1512",
        "source": "leetcodeTitles",
        "source_id": "561",
        "url": "https://leetcode.com/problems/array-partition/",
        "language": "java",
        "query": "Array Partition",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr2 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr3 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr4 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr5 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr6 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr7 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr8 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr9 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr10 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr11 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr12 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr13 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr14 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr15 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr16 = {1,2,3,4,5,6,7,8,9,10};\n\t\tint[] arr17 = {1,2,3,4,5,6,7,8,9,\n",
            "\tstatic void partition(int[] arr, int low, int high){\n\t\tint i = low;\n\t\tint j = high;\n\t\tint pivot = arr[low];\n\t\twhile(i<j){\n\t\t\twhile(i<j && arr[j]>=pivot)\n\t\t\t\tj--;\n\t\t\tif(i<j)\n\t\t\t\tarr[i++] = arr[j];\n\t\t\twhile(i<j && arr[i]<=pivot)\n\t\t\t\ti++;\n\t\t\tif(i<j)\n\t\t\t\tarr[j--] = arr[i];\n\t\t}\n\t\tarr[i] = pivot;\n\t\tpartition(arr, low, i-1);\n\t\tpartition(arr, i+1, high);\n\t}\n}\n",
            "\tstatic void partition(int[] arr, int low, int high){\n\t\tint i = low;\n\t\tint j = high;\n\t\tint pivot = arr[(low + high) / 2];\n\t\twhile(i <= j){\n\t\t\twhile(arr[i] < pivot)\n\t\t\t\ti++;\n\t\t\twhile(arr[j] > pivot)\n\t\t\t\tj--;\n\t\t\tif(i <= j){\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t\ti++;\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tif(low < j)\n\t\t\tpartition(arr, low, j);\n\t\tif(i < high)\n\t\t\tpartition(arr, i, high);\n\t}\n}\n",
            "\tstatic void partition(int[] arr, int low, int high){\n\t\tint i = low;\n\t\tint j = high;\n\t\tint pivot = arr[low];\n\t\twhile(i<j){\n\t\t\twhile(arr[i]<=pivot && i<j){\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(arr[j]>pivot){\n\t\t\t\tj--;\n\t\t\t}\n\t\t\tif(i<j){\n\t\t\t\tint temp = arr[i];\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\tarr[j] = temp;\n\t\t\t}\n\t\t}\n\t\tarr[low] = arr[j];\n\t\tarr[j] = pivot;\n\t\tpartition(arr, low, j-1);\n\t\tpartition(arr, j+1, high);\n\t}\n}\n",
            "\tstatic void partition(int[] arr, int low, int high){\n\t\tint i = low;\n\t\tint j = high;\n\t\tint pivot = arr[low];\n\t\twhile(i<j){\n\t\t\twhile(i<j && arr[j]>=pivot)\n\t\t\t\tj--;\n\t\t\tif(i<j){\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(i<j && arr[i]<=pivot)\n\t\t\t\ti++;\n\t\t\tif(i<j){\n\t\t\t\tarr[j] = arr[i];\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tarr[i] = pivot;\n\t\tpartition(arr, low, i-1);\n\t\tpartition(arr, i+1, high);\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] arr = {1,2,3,4,5,6,7,8,9,10};\n\t\tpartition(arr, 0, arr.length-1);\n\t\tfor(int i=0; i<arr.length; i++)\n\t\t\tSystem.out.print(arr[i]+\" \");\n\t}\n}\n",
            "\tstatic void partition(int[] arr, int low, int high){\n\t\tint i = low;\n\t\tint j = high;\n\t\tint pivot = arr[low];\n\t\twhile(i<j){\n\t\t\twhile(i<j && arr[j]>=pivot)\n\t\t\t\tj--;\n\t\t\tif(i<j){\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(i<j && arr[i]<=pivot)\n\t\t\t\ti++;\n\t\t\tif(i<j){\n\t\t\t\tarr[j] = arr[i];\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tarr[i] = pivot;\n\t\tpartition(arr, low, i-1);\n\t\tpartition(arr, i+1, high);\n\t}\n\tpublic\n\tstatic void partition2(int[] arr, int low, int high){\n\t\tint i = low;\n\t\tint j = high;\n\t\tint pivot = arr[low];\n\t\twhile(i<j){\n\t\t\twhile(i<j && arr[j]>=pivot)\n\t\t\t\tj--;\n\t\t\tif(i<j){\n\t\t\t\tarr[i] = arr[j];\n\t\t\t\ti++;\n\t\t\t}\n\t\t\twhile(i<j && arr[i]<=pivot)\n\t\t\t\ti++;\n\t\t\tif(i<j){\n\t\t\t\tarr[j] = arr[i];\n\t\t\t\tj--;\n\t\t\t}\n\t\t}\n\t\tarr[i] = pivot;\n\t\tpartition2(arr, low, i-1);\n\t\tpartition2(arr, i+1, high);\n\t}\n\tpublic\n\tstatic void partition3(int[] arr, int low, int high){\n\t\tint i = low;\n\t\tint j = high;\n\t\tint pivot = arr[low];\n\t\twhile\n"
        ],
        "results": 10
    },
    {
        "id": "1513",
        "source": "leetcodeTitles",
        "source_id": "219",
        "url": "https://leetcode.com/problems/contains-duplicate-ii/",
        "language": "java",
        "query": "Contains Duplicate II",
        "snippets": [
            "\tboolean containsNearbyDuplicate(int[] nums, int k) {\n\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (map.containsKey(nums[i])) {\n\t\t\t\tif (i - map.get(nums[i]) <= k) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmap.put(nums[i], i);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsNearbyDuplicate(int[] nums, int k) {\n\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor (int i = 0; i < nums.length; i++) {\n\t\t\tif (map.containsKey(nums[i]) && i - map.get(nums[i]) <= k) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tmap.put(nums[i], i);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsNearbyDuplicate(int[] nums, int k) {\n\t\tif(nums == null || nums.length == 0)\n\t\t\treturn false;\n\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(map.containsKey(nums[i])){\n\t\t\t\tif(i - map.get(nums[i]) <= k)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tmap.put(nums[i], i);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsNearbyDuplicate(int[] nums, int k) {\n\t\tif(nums == null || nums.length == 0)\n\t\t\treturn false;\n\t\tHashMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(map.containsKey(nums[i])){\n\t\t\t\tif(i - map.get(nums[i]) <= k)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tmap.put(nums[i], i);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsNearbyDuplicate(int[] nums, int k) {\n\t\tif(nums == null || nums.length == 0 || k < 0)\n\t\t\treturn false;\n\t\tMap<Integer, Integer> map = new HashMap<Integer, Integer>();\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(map.containsKey(nums[i])){\n\t\t\t\tif(i - map.get(nums[i]) <= k)\n\t\t\t\t\treturn true;\n\t\t\t}\n\t\t\tmap.put(nums[i], i);\n\t\t}\n\t\treturn false;\n\t}\n}\n",
            "\tboolean containsNearbyDuplicate(int[] nums, int k) {\n\t\tif(nums.length==0||k<0) return false;\n\t\tMap<Integer,Integer> map=new HashMap<Integer,Integer>();\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(map.containsKey(nums[i])){\n\t\t\t\tif(i-map.get(nums[i])<=k) return true;\n\t\t\t}\n\t\t\tmap.put(nums[i],i);\n\t\t}\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1514",
        "source": "leetcodeTitles",
        "source_id": "1886",
        "url": "https://leetcode.com/problems/determine-whether-matrix-can-be-obtained-by-rotation/",
        "language": "java",
        "query": "Determine Whether Matrix Can Be Obtained By Rotation",
        "snippets": [
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tif (n == 0)\n\t\t\treturn false;\n\t\tint m = matrix[0].length;\n\t\tif (m == 0)\n\t\t\treturn false;\n\t\tif (n != m)\n\t\t\treturn false;\n\t\tint[][] newMatrix = new int[m][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tnewMatrix[j][i] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (matrix[i][j] != newMatrix[i][j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tif (n == 0)\n\t\t\treturn false;\n\t\tint m = matrix[0].length;\n\t\tif (m == 0)\n\t\t\treturn false;\n\t\tif (n != m)\n\t\t\treturn false;\n\t\tint[][] tmp = new int[m][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\ttmp[j][i] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (tmp[i][j] != matrix[j][i])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tif(n == 0) return false;\n\t\tint m = matrix[0].length;\n\t\tif(m == 0) return false;\n\t\tif(n != m) return false;\n\t\tint[][] newMatrix = new int[m][n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tnewMatrix[j][n-i-1] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(newMatrix[i][j] != matrix[i][j]) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tint m = matrix[0].length;\n\t\tint[][] newMatrix = new int[m][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tnewMatrix[j][n - 1 - i] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (matrix[i][j] != newMatrix[i][j]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tif (n == 0)\n\t\t\treturn false;\n\t\tint m = matrix[0].length;\n\t\tif (m == 0)\n\t\t\treturn false;\n\t\tif (n != m)\n\t\t\treturn false;\n\t\tint[][] temp = new int[n][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\ttemp[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tmatrix[i][j] = temp[m - 1 - j][i];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (matrix[i][j] != temp[i][j])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tif (n == 0)\n\t\t\treturn false;\n\t\tint m = matrix[0].length;\n\t\tif (m == 0)\n\t\t\treturn false;\n\t\tif (n != m)\n\t\t\treturn false;\n\t\tint[][] temp = new int[m][m];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\ttemp[j][i] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (temp[i][j] != matrix[j][i])\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tint m = matrix[0].length;\n\t\tint[][] newMatrix = new int[m][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tnewMatrix[j][n - i - 1] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (matrix[i][j] != newMatrix[i][j]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tint m = matrix[0].length;\n\t\tint[][] newMatrix = new int[m][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tnewMatrix[j][n - i - 1] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (newMatrix[i][j] != matrix[i][j]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotate(int[][] matrix) {\n\t\tint n = matrix.length;\n\t\tint m = matrix[0].length;\n\t\tint[][] temp = new int[m][n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\ttemp[j][n - i - 1] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tfor (int j = 0; j < m; j++) {\n\t\t\t\tif (matrix[i][j] != temp[i][j]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tboolean rotateMatrix(int[][] matrix){\n\t\tint n = matrix.length;\n\t\tif(n == 0) return false;\n\t\tint m = matrix[0].length;\n\t\tif(m == 0) return false;\n\t\tif(n != m) return false;\n\t\tint[][] temp = new int[n][m];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\ttemp[i][j] = matrix[i][j];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tmatrix[i][j] = temp[m-j-1][i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tfor(int j = 0; j < m; j++){\n\t\t\t\tif(matrix[i][j] != temp[i][j]) return false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1515",
        "source": "leetcodeTitles",
        "source_id": "1504",
        "url": "https://leetcode.com/problems/count-submatrices-with-all-ones/",
        "language": "java",
        "query": "Count Submatrices With All Ones",
        "snippets": [
            "\tint countSubmatrices(int[][] matrix, int K) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = (i == 0 || j == 0) ? 1 : dp[i - 1][j] + dp[i][j - 1];\n\t\t\t\t\tans += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tans -= dp[i][j];\n\t\t\t\t\tfor (int k = i; k < m; k++) {\n\t\t\t\t\t\tfor (int l = j; l < n; l++) {\n\t\t\t\t\t\t\tif (dp[k][l] >= K) {\n\t\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint countSubmatrices(int[][] matrix, int K) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint count = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tdp[i][j] += dp[i - 1][j];\n\t\t\t\t\t}\n\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\tdp[i][j] += dp[i][j - 1];\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 0 && j > 0) {\n\t\t\t\t\t\tdp[i][j] -= dp[i - 1][j - 1];\n\t\t\t\t\t}\n\t\t\t\t\tcount += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint countSubmatrices(int[][] matrix, int k) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint res = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = (i == 0 || j == 0) ? 1 : dp[i - 1][j] + dp[i][j - 1];\n\t\t\t\t\tres += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tint count = dp[i][j];\n\t\t\t\t\tfor (int x = i; x < m; x++) {\n\t\t\t\t\t\tfor (int y = j; y < n; y++) {\n\t\t\t\t\t\t\tcount += dp[x][y];\n\t\t\t\t\t\t\tif (count >= k) {\n\t\t\t\t\t\t\t\tres++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint countSubmatrices(int[][] matrix, int k) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tdp[i][j] += dp[i - 1][j];\n\t\t\t\t\t}\n\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\tdp[i][j] += dp[i][j - 1];\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 0 && j > 0) {\n\t\t\t\t\t\tdp[i][j] -= dp[i - 1][j - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (dp[i][j] >= k) {\n\t\t\t\t\tans++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint countSubmatrices(int[][] matrix, int k) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint res = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = (i == 0 || j == 0) ? 1 : dp[i - 1][j] + dp[i][j - 1];\n\t\t\t\t\tres += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tfor (int x = i; x < m; x++) {\n\t\t\t\t\t\tfor (int y = j; y < n; y++) {\n\t\t\t\t\t\t\tif (dp[x][y] >= k) {\n\t\t\t\t\t\t\t\tres++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tint countSubmatrix(int[][] matrix) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] sum = new int[m][n];\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (i == 0) {\n\t\t\t\t\tsum[i][j] = matrix[i][j];\n\t\t\t\t} else {\n\t\t\t\t\tsum[i][j] = sum[i - 1][j] + matrix[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tfor (int k = i; k < m; k++) {\n\t\t\t\t\tfor (int l = j; l < n; l++) {\n\t\t\t\t\t\tint x = sum[k][l] - (j == 0 ? 0 : sum[k][j - 1])\n\t\t\t\t\t\t\t\t- (i == 0 ? 0 : sum[i - 1][l]);\n\t\t\t\t\t\tif (x == 0) {\n\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint countSubmatrices(int[][] matrix, int K) {\n\t\tint m = matrix.length, n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint ans = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = (i == 0 || j == 0) ? 1 : dp[i - 1][j] + dp[i][j - 1];\n\t\t\t\t\tans += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tans += dp[i][j];\n\t\t\t\t\tfor (int k = i; k < m; k++) {\n\t\t\t\t\t\tfor (int l = j; l < n; l++) {\n\t\t\t\t\t\t\tif (dp[k][l] >= K) {\n\t\t\t\t\t\t\t\tans++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n}\n",
            "\tint countSubmatrices(int[][] mat, int K) {\n\t\tint m = mat.length, n = mat[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint res = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (mat[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = (i == 0 || j == 0) ? 1 : dp[i - 1][j - 1] + 1;\n\t\t\t\t\tres += (dp[i][j] == K) ? 1 : 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (mat[i][j] == 1) {\n\t\t\t\t\tfor (int k = 1; k <= K; k++) {\n\t\t\t\t\t\tif (i - k >= 0 && j - k >= 0) {\n\t\t\t\t\t\t\tres += dp[i - k][j - k];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i - k >= 0 && j + k < n) {\n\t\t\t\t\t\t\tres += dp[i - k][j + k];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i + k < m && j - k >= 0) {\n\t\t\t\t\t\t\tres += dp[i + k][j - k];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (i + k < m && j + k < n) {\n\t\t\t\t\t\t\tres += dp[i + k][j + k];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int countSubmatrices(int[][] matrix, int k) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint res = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = 1;\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tdp[i][j] += dp[i - 1][j];\n\t\t\t\t\t}\n\t\t\t\t\tif (j > 0) {\n\t\t\t\t\t\tdp[i][j] += dp[i][j - 1];\n\t\t\t\t\t}\n\t\t\t\t\tif (i > 0 && j > 0) {\n\t\t\t\t\t\tdp[i][j] -= dp[i - 1][j - 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (dp[i][j] >= k) {\n\t\t\t\t\tres++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int countSubmatrices(int[][] matrix, int k) {\n\t\tint m = matrix.length;\n\t\tint n = matrix[0].length;\n\t\tint[][] dp = new int[m][n];\n\t\tint res = 0;\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tdp[i][j] = (i == 0 || j == 0) ? 1 : dp[i - 1][j] + dp[i][j - 1];\n\t\t\t\t\tres += dp[i][j];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (int i = 0; i < m; i++) {\n\t\t\tfor (int j = 0; j < n; j++) {\n\t\t\t\tif (matrix[i][j] == 1) {\n\t\t\t\t\tint count = dp[i][j];\n\t\t\t\t\tfor (int x = i; x < m; x++) {\n\t\t\t\t\t\tfor (int y = j; y < n; y++) {\n\t\t\t\t\t\t\tif (dp[x][y] >= k) {\n\t\t\t\t\t\t\t\tcount += dp[x][y];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tres += count;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1516",
        "source": "leetcodeTitles",
        "source_id": "1457",
        "url": "https://leetcode.com/problems/pseudo-palindromic-paths-in-a-binary-tree/",
        "language": "java",
        "query": "Pseudo-Palindromic Paths in a Binary Tree",
        "snippets": [
            "\tstatic int count = 0;\n\tpublic static void main(String[] args){\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(28\n",
            "\tstatic int count = 0;\n\tpublic static void main(String[] args) {\n\t\tTreeNode root = new TreeNode(1);\n\t\troot.left = new TreeNode(2);\n\t\troot.right = new TreeNode(3);\n\t\troot.left.left = new TreeNode(4);\n\t\troot.left.right = new TreeNode(5);\n\t\troot.right.left = new TreeNode(6);\n\t\troot.right.right = new TreeNode(7);\n\t\troot.left.left.left = new TreeNode(8);\n\t\troot.left.left.right = new TreeNode(9);\n\t\troot.left.right.left = new TreeNode(10);\n\t\troot.left.right.right = new TreeNode(11);\n\t\troot.right.left.left = new TreeNode(12);\n\t\troot.right.left.right = new TreeNode(13);\n\t\troot.right.right.left = new TreeNode(14);\n\t\troot.right.right.right = new TreeNode(15);\n\t\troot.left.left.left.left = new TreeNode(16);\n\t\troot.left.left.left.right = new TreeNode(17);\n\t\troot.left.left.right.left = new TreeNode(18);\n\t\troot.left.left.right.right = new TreeNode(19);\n\t\troot.left.right.left.left = new TreeNode(20);\n\t\troot.left.right.left.right = new TreeNode(21);\n\t\troot.left.right.right.left = new TreeNode(22);\n\t\troot.left.right.right.right = new TreeNode(23);\n\t\troot.right.left.left.left = new TreeNode(24);\n\t\troot.right.left.left.right = new TreeNode(25);\n\t\troot.right.left.right.left = new TreeNode(26);\n\t\troot.right.left.right.right = new TreeNode(27);\n\t\troot.right.right.left.left = new TreeNode(\n",
            "\tint countPseudoPalindromicPaths(TreeNode root){\n\t\tif(root==null) return 0;\n\t\treturn countPseudoPalindromicPaths(root.left)+countPseudoPalindromicPaths(root.right)+countPseudoPalindromicPaths(root.left,root.right);\n\t}\n\tprivate int countPseudoPalindromicPaths(TreeNode left,TreeNode right){\n\t\tif(left==null&&right==null) return 1;\n\t\tif(left==null||right==null) return 0;\n\t\tif(left.val==right.val) return countPseudoPalindromicPaths(left.left,right.right)+countPseudoPalindromicPaths(left.right,right.left);\n\t\treturn 0;\n\t}\n}\n",
            "\tint countPseudoPalindromicPaths(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint[] res=new int[1];\n\t\thelper(root,res);\n\t\treturn res[0];\n\t}\n\tprivate void helper(TreeNode root,int[] res){\n\t\tif(root==null) return;\n\t\tif(root.left==null&&root.right==null){\n\t\t\tres[0]++;\n\t\t\treturn;\n\t\t}\n\t\thelper(root.left,res);\n\t\thelper(root.right,res);\n\t\tif(root.left!=null&&root.right!=null){\n\t\t\tif(root.left.val==root.right.val){\n\t\t\t\tres[0]++;\n\t\t\t}\n\t\t}\n\t}\n}\n",
            "\tint count(TreeNode root){\n\t\tif(root==null) return 0;\n\t\tint count=0;\n\t\tif(isPalindrome(root)) count++;\n\t\tcount+=count(root.left);\n\t\tcount+=count(root.right);\n\t\treturn count;\n\t}\n\tpublic\n\tboolean isPalindrome(TreeNode root){\n\t\tif(root==null) return true;\n\t\tif(root.left==null&&root.right==null) return true;\n\t\tif(root.left==null) return isPalindrome(root.right);\n\t\tif(root.right==null) return isPalindrome(root.left);\n\t\treturn isPalindrome(root.left)&&isPalindrome(root.right);\n\t}\n}\n",
            "\tstatic int count = 0;\n\tpublic static int countPalindromicPaths(TreeNode root){\n\t\tif(root == null) return 0;\n\t\tcountPalindromicPaths(root.left);\n\t\tcountPalindromicPaths(root.right);\n\t\tif(isPalindrome(root)) count++;\n\t\treturn count;\n\t}\n\tpublic static boolean isPalindrome(TreeNode root){\n\t\tif(root == null) return true;\n\t\tif(root.left == null && root.right == null) return true;\n\t\tif(root.left == null) return isPalindrome(root.right);\n\t\tif(root.right == null) return isPalindrome(root.left);\n\t\treturn isPalindrome(root.left) && isPalindrome(root.right);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1517",
        "source": "leetcodeTitles",
        "source_id": "965",
        "url": "https://leetcode.com/problems/univalued-binary-tree/",
        "language": "java",
        "query": "Univalued Binary Tree",
        "snippets": [
            "\tboolean isUnivalued(TreeNode root) {\n\t\tif(root == null) return true;\n\t\tif(root.left != null && root.left.val != root.val) return false;\n\t\tif(root.right != null && root.right.val != root.val) return false;\n\t\treturn isUnivalued(root.left) && isUnivalued(root.right);\n\t}\n}\n",
            "\tboolean isUnivalTree(TreeNode root){\n\t\tif(root == null) return true;\n\t\tint val = root.val;\n\t\treturn isUnivalTree(root.left, val) && isUnivalTree(root.right, val);\n\t}\n\tpublic\n\tboolean isUnivalTree(TreeNode root, int val){\n\t\tif(root == null) return true;\n\t\tif(root.val != val) return false;\n\t\treturn isUnivalTree(root.left, val) && isUnivalTree(root.right, val);\n\t}\n}\n",
            "\tstatic boolean isUnivalued(TreeNode root){\n\t\tif(root == null)\n\t\t\treturn true;\n\t\tif(root.left != null && root.left.val != root.val)\n\t\t\treturn false;\n\t\tif(root.right != null && root.right.val != root.val)\n\t\t\treturn false;\n\t\treturn isUnivalued(root.left) && isUnivalued(root.right);\n\t}\n}\n",
            "\tboolean isUnivalTree(TreeNode root){\n\t\tif(root==null) return true;\n\t\treturn isUnivalTree(root.left,root.val)&&isUnivalTree(root.right,root.val);\n\t}\n\tpublic\n\tboolean isUnivalTree(TreeNode root,int val){\n\t\tif(root==null) return true;\n\t\tif(root.val!=val) return false;\n\t\treturn isUnivalTree(root.left,val)&&isUnivalTree(root.right,val);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1518",
        "source": "leetcodeTitles",
        "source_id": "2126",
        "url": "https://leetcode.com/problems/destroying-asteroids/",
        "language": "java",
        "query": "Destroying Asteroids",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tAsteroid a = new Asteroid();\n\t\ta.destroy();\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tAsteroid a1 = new Asteroid(10,10,10,10);\n\t\tAsteroid a2 = new Asteroid(10,10,10,10);\n\t\tAsteroid a3 = new Asteroid(10,10,10,10);\n\t\tAsteroid a4 = new Asteroid(10,10,10,10);\n\t\tAsteroid a5 = new Asteroid(10,10,10,10);\n\t\tAsteroid a6 = new Asteroid(10,10,10,10);\n\t\tAsteroid a7 = new Asteroid(10,10,10,10);\n\t\tAsteroid a8 = new Asteroid(10,10,10,10);\n\t\tAsteroid a9 = new Asteroid(10,10,10,10);\n\t\tAsteroid a10 = new Asteroid(10,10,10,10);\n\t\tAsteroid a11 = new Asteroid(10,10,10,10);\n\t\tAsteroid a12 = new Asteroid(10,10,10,10);\n\t\tAsteroid a13 = new Asteroid(10,10,10,10);\n\t\tAsteroid a14 = new Asteroid(10,10,10,10);\n\t\tAsteroid a15 = new Asteroid(10,10,10,10);\n\t\tAsteroid a16 = new Asteroid(10,10,10,10);\n\t\tAsteroid a17 = new Asteroid(10,10,10,10);\n\t\tAsteroid a18 = new Asteroid(10,10,10,10);\n\t\tAsteroid a19 = new Asteroid(10,10,10,10);\n\t\tAsteroid a20 = new Asteroid(10,10,10,10);\n\t\tAsteroid a21 = new Asteroid(10,10,10,10);\n\t\tAsteroid a22 = new Asteroid(10,10,10,10);\n\t\tAsteroid a23 = new Asteroid(10,10,10,10);\n\t\tAsteroid a\n",
            "\tstatic void main(String[] args){\n\t\tAsteroid a = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid b = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid c = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid d = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid e = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid f = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid g = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid h = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid i = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid j = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid k = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid l = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid m = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid n = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid o = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid p = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid q = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid r = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid s = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid t = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid u = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid v = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid w = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid x = new Asteroid(10, 10, 10, 10);\n\t\tAsteroid y = new Aster\n"
        ],
        "results": 10
    },
    {
        "id": "1519",
        "source": "leetcodeTitles",
        "source_id": "90",
        "url": "https://leetcode.com/problems/subsets-ii/",
        "language": "java",
        "query": "Subsets II",
        "snippets": [
            "\tList<List<Integer>> subsetsWithDup(int[] nums) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (nums == null || nums.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(nums);\n\t\thelper(result, new ArrayList<Integer>(), nums, 0);\n\t\treturn result;\n\t}\n\tprivate void helper(List<List<Integer>> result, List<Integer> list, int[] nums, int start) {\n\t\tresult.add(new ArrayList<Integer>(list));\n\t\tfor (int i = start; i < nums.length; i++) {\n\t\t\tif (i > start && nums[i] == nums[i - 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlist.add(nums[i]);\n\t\t\thelper(result, list, nums, i + 1);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> subsetsWithDup(int[] nums) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (nums == null || nums.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(nums);\n\t\thelper(result, new ArrayList<Integer>(), nums, 0);\n\t\treturn result;\n\t}\n\tpublic void helper(List<List<Integer>> result, List<Integer> list, int[] nums, int start) {\n\t\tresult.add(new ArrayList<Integer>(list));\n\t\tfor (int i = start; i < nums.length; i++) {\n\t\t\tif (i > start && nums[i] == nums[i - 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlist.add(nums[i]);\n\t\t\thelper(result, list, nums, i + 1);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> subsetsWithDup(int[] nums) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (nums == null || nums.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(nums);\n\t\thelper(nums, 0, new ArrayList<Integer>(), result);\n\t\treturn result;\n\t}\n\tpublic void helper(int[] nums, int start, List<Integer> list, List<List<Integer>> result) {\n\t\tresult.add(new ArrayList<Integer>(list));\n\t\tfor (int i = start; i < nums.length; i++) {\n\t\t\tif (i > start && nums[i] == nums[i - 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlist.add(nums[i]);\n\t\t\thelper(nums, i + 1, list, result);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> subsetsWithDup(int[] nums) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (nums == null || nums.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(nums);\n\t\thelper(nums, 0, new ArrayList<Integer>(), result);\n\t\treturn result;\n\t}\n\tprivate void helper(int[] nums, int start, List<Integer> list, List<List<Integer>> result) {\n\t\tresult.add(new ArrayList<Integer>(list));\n\t\tfor (int i = start; i < nums.length; i++) {\n\t\t\tif (i > start && nums[i] == nums[i - 1]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlist.add(nums[i]);\n\t\t\thelper(nums, i + 1, list, result);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> subsetsWithDup(int[] nums) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif (nums == null || nums.length == 0) {\n\t\t\treturn result;\n\t\t}\n\t\tArrays.sort(nums);\n\t\thelper(nums, 0, new ArrayList<Integer>(), result);\n\t\treturn result;\n\t}\n\tpublic void helper(int[] nums, int index, List<Integer> list, List<List<Integer>> result) {\n\t\tif (index == nums.length) {\n\t\t\tresult.add(new ArrayList<Integer>(list));\n\t\t\treturn;\n\t\t}\n\t\tlist.add(nums[index]);\n\t\thelper(nums, index + 1, list, result);\n\t\tlist.remove(list.size() - 1);\n\t\thelper(nums, index + 1, list, result);\n\t}\n}\n",
            "\tList<List<Integer>> subsetsWithDup(int[] nums) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(nums == null || nums.length == 0)\n\t\t\treturn result;\n\t\tArrays.sort(nums);\n\t\thelper(result, new ArrayList<Integer>(), nums, 0);\n\t\treturn result;\n\t}\n\tpublic void helper(List<List<Integer>> result, List<Integer> list, int[] nums, int index){\n\t\tresult.add(new ArrayList<Integer>(list));\n\t\tfor(int i = index; i < nums.length; i++){\n\t\t\tif(i != index && nums[i] == nums[i - 1])\n\t\t\t\tcontinue;\n\t\t\tlist.add(nums[i]);\n\t\t\thelper(result, list, nums, i + 1);\n\t\t\tlist.remove(list.size() - 1);\n\t\t}\n\t}\n}\n",
            "\tList<List<Integer>> subsetsWithDup(int[] nums) {\n\t\tList<List<Integer>> result = new ArrayList<List<Integer>>();\n\t\tif(nums == null || nums.length == 0) return result;\n\t\tArrays.sort(nums);\n\t\thelper(result, new ArrayList<Integer>(), nums, 0);\n\t\treturn result;\n\t}\n\tpublic void helper(List<List<Integer>> result, List<Integer> list, int[] nums, int index){\n\t\tresult.add(new ArrayList<Integer>(list));\n\t\tfor(int i = index; i < nums.length; i++){\n\t\t\tif(i > index && nums[i] == nums[i-1]) continue;\n\t\t\tlist.add(nums[i]);\n\t\t\thelper(result, list, nums, i+1);\n\t\t\tlist.remove(list.size()-1);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1520",
        "source": "leetcodeTitles",
        "source_id": "1160",
        "url": "https://leetcode.com/problems/find-words-that-can-be-formed-by-characters/",
        "language": "java",
        "query": "Find Words That Can Be Formed by Characters",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tchar[] chars = {'a','t'};\n\t\tSystem.out.println(findWords(words,chars));\n\t}\n\tpublic static List<String> findWords(String[] words, char[] chars){\n\t\tList<String> res = new ArrayList<String>();\n\t\tMap<Character,Integer> map = new HashMap<Character,Integer>();\n\t\tfor(char c:chars){\n\t\t\tmap.put(c,map.getOrDefault(c,0)+1);\n\t\t}\n\t\tfor(String word:words){\n\t\t\tMap<Character,Integer> cur = new HashMap<Character,Integer>();\n\t\t\tfor(char c:word.toCharArray()){\n\t\t\t\tcur.put(c,cur.getOrDefault(c,0)+1);\n\t\t\t}\n\t\t\tif(cur.keySet().equals(map.keySet())){\n\t\t\t\tres.add(word);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tString chars = \"atach\";\n\t\tSystem.out.println(findWords(words,chars));\n\t}\n\tpublic static List<String> findWords(String[] words, String chars) {\n\t\tList<String> res = new ArrayList<>();\n\t\tMap<Character, Integer> map = new HashMap<>();\n\t\tfor(char c : chars.toCharArray()){\n\t\t\tmap.put(c, map.getOrDefault(c, 0) + 1);\n\t\t}\n\t\tfor(String word : words){\n\t\t\tMap<Character, Integer> t = new HashMap<>(map);\n\t\t\tfor(char c : word.toCharArray()){\n\t\t\t\tif(t.containsKey(c)){\n\t\t\t\t\tt.put(c, t.get(c) - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(t.values().stream().allMatch(x -> x == 0)){\n\t\t\t\tres.add(word);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tchar[] chars = {'a','t'};\n\t\tSystem.out.println(findWords(words,chars));\n\t}\n\tpublic static List<String> findWords(String[] words, char[] chars){\n\t\tList<String> res = new ArrayList<String>();\n\t\tfor(String word:words){\n\t\t\tif(isValid(word,chars)){\n\t\t\t\tres.add(word);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tpublic static boolean isValid(String word, char[] chars){\n\t\tint[] cnt = new int[26];\n\t\tfor(char c:word.toCharArray()){\n\t\t\tcnt[c-'a']++;\n\t\t}\n\t\tfor(char c:chars){\n\t\t\tcnt[c-'a']--;\n\t\t}\n\t\tfor(int i=0;i<26;i++){\n\t\t\tif(cnt[i]!=0){\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tString[] chars = {\"at\",\"bt\",\"ct\",\"dt\",\"et\",\"ft\",\"gt\",\"ht\",\"it\",\"jt\",\"kt\",\"lt\",\"mt\",\"nt\",\"ot\",\"pt\",\"qt\",\"rt\",\"st\",\"tt\",\"ut\",\"vt\",\"wt\",\"xt\",\"yt\",\"zt\",\"qa\",\"qb\",\"qc\",\"qd\",\"qe\",\"qf\",\"qg\",\"qh\",\"qi\",\"qj\",\"qk\",\"ql\",\"qm\",\"qn\",\"qo\",\"qp\",\"qq\",\"qr\",\"qs\",\"qt\",\"qu\",\"qv\",\"qw\",\"qx\",\"qy\",\"qz\"};\n\t\tint[] res = findWords(words,chars);\n\t\tfor(int i=0;i<res.length;i++){\n\t\t\tSystem.out.println(res[i]);\n\t\t}\n\t}\n\tpublic static int[] findWords(String[] words, String[] chars) {\n\t\tint[] res = new int[words.length];\n\t\tint[] count = new int[26];\n\t\tfor(int i=0;i<chars.length;i++){\n\t\t\tcount[chars[i].charAt(0)-'a']++;\n\t\t}\n\t\tfor(int i=0;i<words.length;i++){\n\t\t\tint[] temp = new int[26];\n\t\t\tfor(int j=0;j<words[i].length();j++){\n\t\t\t\ttemp[words[i].charAt(j)-'a']++;\n\t\t\t}\n\t\t\tboolean flag = true;\n\t\t\tfor(int j=0;j<26;j++){\n\t\t\t\tif(temp[j]>count[j]){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag){\n\t\t\t\tres[i] = 1;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tString[] chars = {\"at\",\"ct\",\"hat\",\"tree\"};\n\t\tSystem.out.println(findWords(words,chars));\n\t}\n\tpublic static List<String> findWords(String[] words, String[] chars) {\n\t\tList<String> res = new ArrayList<String>();\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < chars.length; i++){\n\t\t\tcount[chars[i].charAt(0)-'a']++;\n\t\t}\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tint[] temp = new int[26];\n\t\t\tfor(int j = 0; j < words[i].length(); j++){\n\t\t\t\ttemp[words[i].charAt(j)-'a']++;\n\t\t\t}\n\t\t\tboolean flag = true;\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(temp[j] > count[j]){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag){\n\t\t\t\tres.add(words[i]);\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tString[] chars = {\"at\",\"t\"};\n\t\tSystem.out.println(findWords(words,chars));\n\t}\n\tpublic static List<String> findWords(String[] words, String[] chars){\n\t\tList<String> list = new ArrayList<String>();\n\t\tfor(String word:words){\n\t\t\tif(isValid(word,chars)){\n\t\t\t\tlist.add(word);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tpublic static boolean isValid(String word, String[] chars){\n\t\tint[] count = new int[26];\n\t\tfor(int i=0;i<word.length();i++){\n\t\t\tcount[word.charAt(i)-'a']++;\n\t\t}\n\t\tfor(String c:chars){\n\t\t\tint[] temp = new int[26];\n\t\t\tfor(int i=0;i<c.length();i++){\n\t\t\t\ttemp[c.charAt(i)-'a']++;\n\t\t\t}\n\t\t\tfor(int i=0;i<26;i++){\n\t\t\t\tif(temp[i]>count[i]){\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tString[] chars = {\"atach\",\"atio\",\"tatach\"};\n\t\tSystem.out.println(new Clazz().countCharacters(words,chars));\n\t}\n\tpublic int countCharacters(String[] words, String[] chars){\n\t\tint[] count = new int[26];\n\t\tfor(int i = 0; i < chars.length; i++){\n\t\t\tfor(int j = 0; j < chars[i].length(); j++){\n\t\t\t\tcount[chars[i].charAt(j)-'a']++;\n\t\t\t}\n\t\t}\n\t\tint res = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tint[] temp = new int[26];\n\t\t\tfor(int j = 0; j < words[i].length(); j++){\n\t\t\t\ttemp[words[i].charAt(j)-'a']++;\n\t\t\t}\n\t\t\tboolean flag = true;\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(temp[j] > count[j]){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag){\n\t\t\t\tres += words[i].length();\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tString[] chars = {\"atach\",\"atio\",\"tatach\",\"atio\"};\n\t\tSystem.out.println(new Clazz().countCharacters(words,chars));\n\t}\n\tpublic int countCharacters(String[] words, String[] chars) {\n\t\tint count = 0;\n\t\tint[] charCount = new int[26];\n\t\tfor(int i = 0; i < chars.length; i++){\n\t\t\tfor(int j = 0; j < chars[i].length(); j++){\n\t\t\t\tcharCount[chars[i].charAt(j) - 'a']++;\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tint[] wordCount = new int[26];\n\t\t\tfor(int j = 0; j < words[i].length(); j++){\n\t\t\t\twordCount[words[i].charAt(j) - 'a']++;\n\t\t\t}\n\t\t\tboolean flag = true;\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(wordCount[j] > charCount[j]){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag){\n\t\t\t\tcount += words[i].length();\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tString[] chars = {\"atach\",\"atio\",\"tatach\",\"atio\",\"atio\"};\n\t\tSystem.out.println(new Clazz().countCharacters(words,chars));\n\t}\n\tpublic int countCharacters(String[] words, String[] chars){\n\t\tint[] charCount = new int[26];\n\t\tfor(int i = 0; i < chars.length; i++){\n\t\t\tfor(int j = 0; j < chars[i].length(); j++){\n\t\t\t\tcharCount[chars[i].charAt(j)-'a']++;\n\t\t\t}\n\t\t}\n\t\tint count = 0;\n\t\tfor(int i = 0; i < words.length; i++){\n\t\t\tint[] wordCount = new int[26];\n\t\t\tfor(int j = 0; j < words[i].length(); j++){\n\t\t\t\twordCount[words[i].charAt(j)-'a']++;\n\t\t\t}\n\t\t\tboolean flag = true;\n\t\t\tfor(int j = 0; j < 26; j++){\n\t\t\t\tif(wordCount[j] > charCount[j]){\n\t\t\t\t\tflag = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(flag){\n\t\t\t\tcount += words[i].length();\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString[] words = {\"cat\",\"bt\",\"hat\",\"tree\"};\n\t\tString[] chars = {\"atach\",\"ation\",\"tatio\",\"eeta\",\"tatio\"};\n\t\tSystem.out.println(new Clazz().findWords(words,chars));\n\t}\n\tpublic int findWords(String[] words, String[] chars) {\n\t\tint count = 0;\n\t\tfor(String word:words){\n\t\t\tif(isValid(word,chars)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic boolean isValid(String word, String[] chars){\n\t\tint[] charCount = new int[26];\n\t\tfor(char c:word.toCharArray()){\n\t\t\tcharCount[c-'a']++;\n\t\t}\n\t\tfor(String c:chars){\n\t\t\tint[] temp = new int[26];\n\t\t\tfor(char ch:c.toCharArray()){\n\t\t\t\ttemp[ch-'a']++;\n\t\t\t}\n\t\t\tif(Arrays.equals(charCount,temp)){\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1521",
        "source": "leetcodeTitles",
        "source_id": "300",
        "url": "https://leetcode.com/problems/longest-increasing-subsequence/",
        "language": "java",
        "query": "Longest Increasing Subsequence",
        "snippets": [
            "\tstatic int lis(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[j] < a[i] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145\n",
            "\tint lis(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[i] > a[j] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int lis(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[j] < a[i] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10};\n\t\tSystem.out.println(lis(a));\n\t}\n}\n",
            "\tstatic int lis(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[i] > a[j] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145\n",
            "\tint lis(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[j] < a[i] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int lis(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t}\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[i] > a[j] && dp[i] < dp[j] + 1){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] a = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124\n",
            "\tint lis(int[] arr){\n\t\tint[] dp = new int[arr.length];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(arr[i] > arr[j] && dp[j] + 1 > dp[i]){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tint lis(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t}\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[i] > a[j] && dp[i] < dp[j] + 1){\n\t\t\t\t\tdp[i] = dp[j] + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tif(dp[i] > max){\n\t\t\t\tmax = dp[i];\n\t\t\t}\n\t\t}\n\t\treturn max;\n\t}\n}\n",
            "\tstatic int LIS(int[] a){\n\t\tint n = a.length;\n\t\tint[] dp = new int[n];\n\t\tint max = 0;\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tdp[i] = 1;\n\t\t\tfor(int j = 0; j < i; j++){\n\t\t\t\tif(a[j] < a[i]){\n\t\t\t\t\tdp[i] = Math.max(dp[i], dp[j] + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tmax = Math.max(max, dp[i]);\n\t\t}\n\t\treturn max;\n\t}\n\tpublic static void main(String[] args){\n\t\tint[] a = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n\t\tSystem.out.println(LIS(a));\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1522",
        "source": "leetcodeTitles",
        "source_id": "974",
        "url": "https://leetcode.com/problems/subarray-sums-divisible-by-k/",
        "language": "java",
        "query": "Subarray Sums Divisible by K",
        "snippets": [
            "\tstatic int subarraysDivByK(int[] A, int K) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < A.length; i++) {\n\t\t\tsum += A[i];\n\t\t\tif (sum % K == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int subarraysDivByK(int[] A, int K) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tsum += A[i];\n\t\t\tif(sum % K == 0)\n\t\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int subarraySumsDivisibleByK(int[] arr, int k) {\n\t\tint count = 0;\n\t\tint sum = 0;\n\t\tfor (int i = 0; i < arr.length; i++) {\n\t\t\tsum += arr[i];\n\t\t\tif (sum % k == 0) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint subarraysDivByK(int[] A, int K) {\n\t\tint[] count = new int[K];\n\t\tcount[0] = 1;\n\t\tint sum = 0;\n\t\tint res = 0;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tsum += A[i];\n\t\t\tint mod = (sum % K + K) % K;\n\t\t\tres += count[mod];\n\t\t\tcount[mod]++;\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1523",
        "source": "leetcodeTitles",
        "source_id": "530",
        "url": "https://leetcode.com/problems/minimum-absolute-difference-in-bst/",
        "language": "java",
        "query": "Minimum Absolute Difference in BST",
        "snippets": [
            "\tint minDiffInBST(TreeNode root){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint prev = Integer.MIN_VALUE;\n\t\thelper(root, prev, min);\n\t\treturn min;\n\t}\n\tpublic void helper(TreeNode root, int prev, int min){\n\t\tif(root == null) return;\n\t\thelper(root.left, prev, min);\n\t\tif(prev != Integer.MIN_VALUE) min = Math.min(min, root.val - prev);\n\t\tprev = root.val;\n\t\thelper(root.right, prev, min);\n\t}\n}\n",
            "\tint minDiff(TreeNode root){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint prev = Integer.MIN_VALUE;\n\t\thelper(root, prev, min);\n\t\treturn min;\n\t}\n\tpublic void helper(TreeNode root, int prev, int min){\n\t\tif(root == null) return;\n\t\thelper(root.left, prev, min);\n\t\tif(prev != Integer.MIN_VALUE) min = Math.min(min, root.val - prev);\n\t\tprev = root.val;\n\t\thelper(root.right, prev, min);\n\t}\n}\n",
            "\tint minDiff(TreeNode root){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint prev = Integer.MIN_VALUE;\n\t\tminDiff(root, prev, min);\n\t\treturn min;\n\t}\n\tpublic\n\tvoid minDiff(TreeNode root, int prev, int min){\n\t\tif(root == null) return;\n\t\tminDiff(root.left, prev, min);\n\t\tif(prev != Integer.MIN_VALUE)\n\t\t\tmin = Math.min(min, root.val - prev);\n\t\tprev = root.val;\n\t\tminDiff(root.right, prev, min);\n\t}\n}\n",
            "\tint minDiff(Node root){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint prev = Integer.MIN_VALUE;\n\t\tminDiff(root, prev, min);\n\t\treturn min;\n\t}\n\tpublic\n\tvoid minDiff(Node root, int prev, int min){\n\t\tif(root == null)\n\t\t\treturn;\n\t\tminDiff(root.left, prev, min);\n\t\tif(prev != Integer.MIN_VALUE)\n\t\t\tmin = Math.min(min, root.data - prev);\n\t\tprev = root.data;\n\t\tminDiff(root.right, prev, min);\n\t}\n}\n",
            "\tstatic int minDiff(Node root){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint prev = Integer.MIN_VALUE;\n\t\treturn minDiff(root, prev, min);\n\t}\n\tpublic static int minDiff(Node root, int prev, int min){\n\t\tif(root == null)\n\t\t\treturn min;\n\t\tmin = minDiff(root.left, prev, min);\n\t\tif(prev != Integer.MIN_VALUE)\n\t\t\tmin = Math.min(min, root.data - prev);\n\t\tprev = root.data;\n\t\tmin = minDiff(root.right, prev, min);\n\t\treturn min;\n\t}\n}\n",
            "\tint minDiff(TreeNode root){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint prev = Integer.MIN_VALUE;\n\t\treturn minDiff(root, min, prev);\n\t}\n\tprivate\n\tint minDiff(TreeNode root, int min, int prev){\n\t\tif(root == null) return min;\n\t\tmin = Math.min(min, Math.abs(root.val - prev));\n\t\tprev = root.val;\n\t\tminDiff(root.left, min, prev);\n\t\tminDiff(root.right, min, prev);\n\t\treturn min;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1524",
        "source": "leetcodeTitles",
        "source_id": "747",
        "url": "https://leetcode.com/problems/largest-number-at-least-twice-of-others/",
        "language": "java",
        "query": "Largest Number At Least Twice of Others",
        "snippets": [
            "\tint[]\n\tlargest(int[] nums){\n\t\tint[] res = new int[2];\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] > max){\n\t\t\t\tmax = nums[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] * 2 > max){\n\t\t\t\tres[0] = nums[i];\n\t\t\t\tres[1] = max;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[]\n\tlargest(int[] nums){\n\t\tint[] result = new int[2];\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] > max){\n\t\t\t\tmax = nums[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\tif(nums[i] * 2 > max){\n\t\t\t\tresult[0] = nums[i];\n\t\t\t\tresult[1] = max;\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tstatic int[]\n\tlargest(int[] a){\n\t\tint[] b = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tint max = 0;\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(a[j] > max){\n\t\t\t\t\tmax = a[j];\n\t\t\t\t}\n\t\t\t}\n\t\t\tb[i] = max;\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(a[j] == max){\n\t\t\t\t\ta[j] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn b;\n\t}\n}\n",
            "\tstatic int[]\n\tlargest(int[] a){\n\t\tint[] b=new int[a.length];\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tb[i]=a[i];\n\t\t}\n\t\tfor(int i=0;i<a.length;i++){\n\t\t\tfor(int j=0;j<a.length;j++){\n\t\t\t\tif(a[i]>a[j]&&a[i]>2*a[j]){\n\t\t\t\t\tb[i]=a[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn b;\n\t}\n}\n",
            "\tstatic int[]\n\tlargest(int[] a){\n\t\tint[] b = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tb[i] = a[i];\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(b[i] < b[j]){\n\t\t\t\t\tint temp = b[i];\n\t\t\t\t\tb[i] = b[j];\n\t\t\t\t\tb[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint[] c = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tc[i] = b[i];\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(c[i] > c[j]){\n\t\t\t\t\tint temp = c[i];\n\t\t\t\t\tc[i] = c[j];\n\t\t\t\t\tc[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tint[] d = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\td[i] = c[i];\n\t\t}\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(d[i] < d[j]){\n\t\t\t\t\tint temp = d[i];\n\t\t\t\t\td[i] = d[j];\n\t\t\t\t\td[j] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n",
            "\tint[] solution(int[] nums){\n\t\tint[] answer = new int[nums.length];\n\t\tint[] temp = new int[nums.length];\n\t\tint[] temp2 = new int[nums.length];\n\t\tint[] temp3 = new int[nums.length];\n\t\tint[] temp4 = new int[nums.length];\n\t\tint[] temp5 = new int[nums.length];\n\t\tint[] temp6 = new int[nums.length];\n\t\tint[] temp7 = new int[nums.length];\n\t\tint[] temp8 = new int[nums.length];\n\t\tint[] temp9 = new int[nums.length];\n\t\tint[] temp10 = new int[nums.length];\n\t\tint[] temp11 = new int[nums.length];\n\t\tint[] temp12 = new int[nums.length];\n\t\tint[] temp13 = new int[nums.length];\n\t\tint[] temp14 = new int[nums.length];\n\t\tint[] temp15 = new int[nums.length];\n\t\tint[] temp16 = new int[nums.length];\n\t\tint[] temp17 = new int[nums.length];\n\t\tint[] temp18 = new int[nums.length];\n\t\tint[] temp19 = new int[nums.length];\n\t\tint[] temp20 = new int[nums.length];\n\t\tint[] temp21 = new int[nums.length];\n\t\tint[] temp22 = new int[nums.length];\n\t\tint[] temp23 = new int[nums.length];\n\t\tint[] temp24 = new int[nums.length];\n\t\tint[] temp25 = new int[nums.length];\n\t\tint[] temp26 = new int[nums.length];\n\t\tint[] temp27 = new int[nums.length];\n\t\tint[] temp28 = new int[nums.length];\n\t\tint[] temp29 = new int[nums.length];\n\t\tint[] temp30 = new int[\n",
            "\tstatic int[]\n\tlargest(int[] a){\n\t\tint[] b = new int[a.length];\n\t\tint[] c = new int[a.length];\n\t\tint[] d = new int[a.length];\n\t\tint[] e = new int[a.length];\n\t\tint[] f = new int[a.length];\n\t\tint[] g = new int[a.length];\n\t\tint[] h = new int[a.length];\n\t\tint[] i = new int[a.length];\n\t\tint[] j = new int[a.length];\n\t\tint[] k = new int[a.length];\n\t\tint[] l = new int[a.length];\n\t\tint[] m = new int[a.length];\n\t\tint[] n = new int[a.length];\n\t\tint[] o = new int[a.length];\n\t\tint[] p = new int[a.length];\n\t\tint[] q = new int[a.length];\n\t\tint[] r = new int[a.length];\n\t\tint[] s = new int[a.length];\n\t\tint[] t = new int[a.length];\n\t\tint[] u = new int[a.length];\n\t\tint[] v = new int[a.length];\n\t\tint[] w = new int[a.length];\n\t\tint[] x = new int[a.length];\n\t\tint[] y = new int[a.length];\n\t\tint[] z = new int[a.length];\n\t\tint[] aa = new int[a.length];\n\t\tint[] bb = new int[a.length];\n\t\tint[] cc = new int[a.length];\n\t\tint[] dd = new int[a.length];\n\t\tint[] ee = new int[a.length];\n\t\tint[] ff = new int[a.length];\n\t\tint[] gg = new int[a.length];\n\t\tint[] hh = new int[a.length];\n\t\tint[] ii = new int[a.length];\n\t\tint[] j\n",
            "\tint[]\n\tlargest(int[] nums){\n\t\tint[] res=new int[2];\n\t\tint max=Integer.MIN_VALUE;\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(nums[i]>max){\n\t\t\t\tmax=nums[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(nums[i]>max/2&&nums[i]<max){\n\t\t\t\tres[0]=nums[i];\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<nums.length;i++){\n\t\t\tif(nums[i]>max/2&&nums[i]<max&&nums[i]!=res[0]){\n\t\t\t\tres[1]=nums[i];\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tstatic int[]\n\tlargest(int[] a){\n\t\tint[] res = new int[a.length];\n\t\tfor(int i = 0; i < a.length; i++){\n\t\t\tint max = 0;\n\t\t\tfor(int j = 0; j < a.length; j++){\n\t\t\t\tif(i == j) continue;\n\t\t\t\tif(a[j] > max) max = a[j];\n\t\t\t}\n\t\t\tres[i] = max * 2;\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\t\tstatic int[]\n\t\tlargest(int[] nums){\n\t\t\tint[] res = new int[2];\n\t\t\tint max = Integer.MIN_VALUE;\n\t\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\t\tif(nums[i] > max){\n\t\t\t\t\tmax = nums[i];\n\t\t\t\t\tres[0] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor(int i = 0; i < nums.length; i++){\n\t\t\t\tif(i != res[0] && nums[i] * 2 > max){\n\t\t\t\t\tmax = nums[i] * 2;\n\t\t\t\t\tres[1] = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn res;\n\t\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1525",
        "source": "leetcodeTitles",
        "source_id": "709",
        "url": "https://leetcode.com/problems/to-lower-case/",
        "language": "java",
        "query": "To Lower Case",
        "snippets": [
            "\tString toLowerCase(String str){\n\t\tString result = \"\";\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tchar c = str.charAt(i);\n\t\t\tif(c >= 'A' && c <= 'Z'){\n\t\t\t\tc += 32;\n\t\t\t}\n\t\t\tresult += c;\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tString toLowerCase(String str){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = 0; i < str.length(); i++){\n\t\t\tchar c = str.charAt(i);\n\t\t\tif(c >= 'A' && c <= 'Z'){\n\t\t\t\tc += 32;\n\t\t\t}\n\t\t\tsb.append(c);\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString toLowerCase(String str){\n\t\tchar[] ch = str.toCharArray();\n\t\tfor(int i=0;i<ch.length;i++){\n\t\t\tif(ch[i]>='A'&&ch[i]<='Z'){\n\t\t\t\tch[i] = (char)(ch[i]+32);\n\t\t\t}\n\t\t}\n\t\treturn new String(ch);\n\t}\n}\n",
            "\tString toLowerCase(String str){\n\t\tStringBuilder sb = new StringBuilder(str);\n\t\tfor(int i = 0; i < sb.length(); i++){\n\t\t\tif(sb.charAt(i) >= 'A' && sb.charAt(i) <= 'Z'){\n\t\t\t\tsb.setCharAt(i, (char)(sb.charAt(i) + 32));\n\t\t\t}\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1526",
        "source": "leetcodeTitles",
        "source_id": "1480",
        "url": "https://leetcode.com/problems/running-sum-of-1d-array/",
        "language": "java",
        "query": "Running Sum of 1d Array",
        "snippets": [
            "\tstatic int runningSum(int[] arr){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\treturn sum;\n\t}\n}\n",
            "\tstatic int sum(int[] arr){\n\t\tint sum = 0;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tsum += arr[i];\n\t\t}\n\t\treturn sum;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1527",
        "source": "leetcodeTitles",
        "source_id": "1556",
        "url": "https://leetcode.com/problems/thousand-separator/",
        "language": "java",
        "query": "Thousand Separator",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tdouble d = 1234567.89;\n\t\tSystem.out.println(d);\n\t\tSystem.out.println(String.format(\"%,.2f\", d));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble d = 123456789.123456789;\n\t\tSystem.out.println(d);\n\t\tSystem.out.println(String.format(\"%,.2f\", d));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tdouble d = 1234567.89;\n\t\tSystem.out.println(d);\n\t\tSystem.out.println(String.format(\"%.3f\", d));\n\t\tSystem.out.println(String.format(\"%,.3f\", d));\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint a = 123456789;\n\t\tSystem.out.println(a);\n\t\tSystem.out.println(a/1000);\n\t\tSystem.out.println(a%1000);\n\t\tSystem.out.println(a/1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.println(a/1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000%1000);\n\t\tSystem.out.\n"
        ],
        "results": 10
    },
    {
        "id": "1528",
        "source": "leetcodeTitles",
        "source_id": "1492",
        "url": "https://leetcode.com/problems/the-kth-factor-of-n/",
        "language": "java",
        "query": "The kth Factor of n",
        "snippets": [
            "\tstatic int kthFactor(int n, int k){\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(n % i == 0){\n\t\t\t\tcount++;\n\t\t\t\tif(count == k)\n\t\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tstatic int kthFactor(int n, int k){\n\t\tint i = 1;\n\t\tint count = 0;\n\t\twhile(i <= n){\n\t\t\tif(n % i == 0){\n\t\t\t\tcount++;\n\t\t\t\tif(count == k){\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tstatic int kthFactor(int n, int k) {\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(n % i == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(count == k){\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint kthFactor(int n, int k) {\n\t\tint i = 1;\n\t\tint count = 0;\n\t\twhile (i <= n) {\n\t\t\tif (n % i == 0) {\n\t\t\t\tcount++;\n\t\t\t\tif (count == k) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n}\n",
            "\tint kthFactor(int n, int k) {\n\t\tint i = 1;\n\t\tint count = 0;\n\t\twhile(i <= n){\n\t\t\tif(n % i == 0){\n\t\t\t\tcount++;\n\t\t\t\tif(count == k)\n\t\t\t\t\treturn i;\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\treturn -1;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1529",
        "source": "leetcodeTitles",
        "source_id": "257",
        "url": "https://leetcode.com/problems/binary-tree-paths/",
        "language": "java",
        "query": "Binary Tree Paths",
        "snippets": [
            "\tList<String> binaryTreePaths(TreeNode root) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tif(root == null) return result;\n\t\tString path = String.valueOf(root.val);\n\t\tif(root.left == null && root.right == null) {\n\t\t\tresult.add(path);\n\t\t\treturn result;\n\t\t}\n\t\tif(root.left != null) {\n\t\t\tList<String> left = binaryTreePaths(root.left);\n\t\t\tfor(String s : left) {\n\t\t\t\tresult.add(path + \"->\" + s);\n\t\t\t}\n\t\t}\n\t\tif(root.right != null) {\n\t\t\tList<String> right = binaryTreePaths(root.right);\n\t\t\tfor(String s : right) {\n\t\t\t\tresult.add(path + \"->\" + s);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<String> binaryTreePaths(TreeNode root) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tif(root == null) return result;\n\t\tString path = String.valueOf(root.val);\n\t\tif(root.left == null && root.right == null) {\n\t\t\tresult.add(path);\n\t\t\treturn result;\n\t\t}\n\t\tif(root.left != null) {\n\t\t\tList<String> leftResult = binaryTreePaths(root.left);\n\t\t\tfor(String s : leftResult) {\n\t\t\t\tresult.add(path + \"->\" + s);\n\t\t\t}\n\t\t}\n\t\tif(root.right != null) {\n\t\t\tList<String> rightResult = binaryTreePaths(root.right);\n\t\t\tfor(String s : rightResult) {\n\t\t\t\tresult.add(path + \"->\" + s);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<String> binaryTreePaths(TreeNode root) {\n\t\tList<String> result = new ArrayList<String>();\n\t\tif(root == null) return result;\n\t\tif(root.left == null && root.right == null) {\n\t\t\tresult.add(root.val + \"\");\n\t\t\treturn result;\n\t\t}\n\t\tList<String> left = binaryTreePaths(root.left);\n\t\tList<String> right = binaryTreePaths(root.right);\n\t\tfor(String l : left) {\n\t\t\tresult.add(root.val + \"->\" + l);\n\t\t}\n\t\tfor(String r : right) {\n\t\t\tresult.add(root.val + \"->\" + r);\n\t\t}\n\t\treturn result;\n\t}\n}\n",
            "\tList<String> binaryTreePaths(TreeNode root) {\n\t\tList<String> res = new ArrayList<String>();\n\t\tif(root == null) return res;\n\t\tString path = String.valueOf(root.val);\n\t\tif(root.left == null && root.right == null) res.add(path);\n\t\telse{\n\t\t\tif(root.left != null)\n\t\t\t\tfor(String s : binaryTreePaths(root.left))\n\t\t\t\t\tres.add(path + \"->\" + s);\n\t\t\tif(root.right != null)\n\t\t\t\tfor(String s : binaryTreePaths(root.right))\n\t\t\t\t\tres.add(path + \"->\" + s);\n\t\t}\n\t\treturn res;\n\t}\n}\n",
            "\tList<String> binaryTreePaths(TreeNode root) {\n\t\tList<String> res = new ArrayList<String>();\n\t\tif(root == null) return res;\n\t\tdfs(root, res, \"\");\n\t\treturn res;\n\t}\n\tpublic void dfs(TreeNode root, List<String> res, String path){\n\t\tif(root.left == null && root.right == null){\n\t\t\tres.add(path + root.val);\n\t\t\treturn;\n\t\t}\n\t\tif(root.left != null) dfs(root.left, res, path + root.val + \"->\");\n\t\tif(root.right != null) dfs(root.right, res, path + root.val + \"->\");\n\t}\n}\n",
            "\tList<String> binaryTreePaths(TreeNode root) {\n\t\tList<String> res = new ArrayList<String>();\n\t\tif(root == null) return res;\n\t\tString path = String.valueOf(root.val);\n\t\tif(root.left == null && root.right == null) res.add(path);\n\t\telse{\n\t\t\tList<String> left = binaryTreePaths(root.left);\n\t\t\tList<String> right = binaryTreePaths(root.right);\n\t\t\tfor(String s : left) res.add(path + \"->\" + s);\n\t\t\tfor(String s : right) res.add(path + \"->\" + s);\n\t\t}\n\t\treturn res;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1530",
        "source": "leetcodeTitles",
        "source_id": "200",
        "url": "https://leetcode.com/problems/number-of-islands/",
        "language": "java",
        "query": "Number of Islands",
        "snippets": [
            "\tint numIslands(char[][] grid) {\n\t\tint count = 0;\n\t\tfor(int i = 0; i < grid.length; i++){\n\t\t\tfor(int j = 0; j < grid[0].length; j++){\n\t\t\t\tif(grid[i][j] == '1'){\n\t\t\t\t\tcount++;\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(char[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0'){\n\t\t\treturn;\n\t\t}\n\t\tgrid[i][j] = '0';\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n",
            "\tint numIslands(char[][] grid) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < grid.length; i++) {\n\t\t\tfor (int j = 0; j < grid[0].length; j++) {\n\t\t\t\tif (grid[i][j] == '1') {\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(char[][] grid, int i, int j) {\n\t\tif (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0') {\n\t\t\treturn;\n\t\t}\n\t\tgrid[i][j] = '0';\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n",
            "\tint numIslands(char[][] grid) {\n\t\tint count = 0;\n\t\tfor (int i = 0; i < grid.length; i++) {\n\t\t\tfor (int j = 0; j < grid[0].length; j++) {\n\t\t\t\tif (grid[i][j] == '1') {\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(char[][] grid, int i, int j) {\n\t\tif (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != '1') {\n\t\t\treturn;\n\t\t}\n\t\tgrid[i][j] = '0';\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n",
            "\tint numIslands(char[][] grid) {\n\t\tif(grid == null || grid.length == 0 || grid[0].length == 0) return 0;\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(grid[i][j] == '1'){\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(char[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == '0') return;\n\t\tgrid[i][j] = '0';\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n",
            "\tint numIslands(char[][] grid) {\n\t\tif(grid == null || grid.length == 0 || grid[0].length == 0) return 0;\n\t\tint m = grid.length;\n\t\tint n = grid[0].length;\n\t\tint count = 0;\n\t\tfor(int i = 0; i < m; i++){\n\t\t\tfor(int j = 0; j < n; j++){\n\t\t\t\tif(grid[i][j] == '1'){\n\t\t\t\t\tdfs(grid, i, j);\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\tpublic void dfs(char[][] grid, int i, int j){\n\t\tif(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] != '1') return;\n\t\tgrid[i][j] = '0';\n\t\tdfs(grid, i + 1, j);\n\t\tdfs(grid, i - 1, j);\n\t\tdfs(grid, i, j + 1);\n\t\tdfs(grid, i, j - 1);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1531",
        "source": "leetcodeTitles",
        "source_id": "1291",
        "url": "https://leetcode.com/problems/sequential-digits/",
        "language": "java",
        "query": "Sequential Digits",
        "snippets": [
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(isSequential(i)){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n\tpublic static boolean isSequential(int n){\n\t\tint last = 0;\n\t\tint current = 0;\n\t\twhile(n > 0){\n\t\t\tcurrent = n % 10;\n\t\t\tif(current == last + 1){\n\t\t\t\tlast = current;\n\t\t\t}\n\t\t\telse{\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tn = n / 10;\n\t\t}\n\t\treturn true;\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(i % 10 != 0 && i % 11 != 0 && i % 12 != 0 && i % 13 != 0 && i % 14 != 0 && i % 15 != 0 && i % 16 != 0 && i % 17 != 0 && i % 18 != 0 && i % 19 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(i % 10 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner sc = new Scanner(System.in);\n\t\tint n = sc.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tString s = String.valueOf(i);\n\t\t\tif(s.length() == 1 || s.length() == 2 || s.length() == 3){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(i % 100 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tif(i % 10 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tScanner in = new Scanner(System.in);\n\t\tint n = in.nextInt();\n\t\tint count = 0;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tif(i % 10 != 0 && i % 11 != 0 && i % 12 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(i % 10 != 0 && i % 11 != 0 && i % 12 != 0 && i % 13 != 0 && i % 14 != 0 && i % 15 != 0 && i % 16 != 0 && i % 17 != 0 && i % 18 != 0 && i % 19 != 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint count = 0;\n\t\tfor(int i = 1; i < n; i++){\n\t\t\tif(i % 10 == 0){\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(count);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tint n = Integer.parseInt(args[0]);\n\t\tint[] arr = new int[n];\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tarr[i] = Integer.parseInt(args[i+1]);\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tSystem.out.println(arr[i]);\n\t\t}\n\t\tfor(int i = 0; i < n; i++){\n\t\t\tint count = 0;\n\t\t\tint num = arr[i];\n\t\t\twhile(num > 0){\n\t\t\t\tnum /= 10;\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tSystem.out.println(count);\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1532",
        "source": "leetcodeTitles",
        "source_id": "687",
        "url": "https://leetcode.com/problems/longest-univalue-path/",
        "language": "java",
        "query": "Longest Univalue Path",
        "snippets": [
            "\tint longestUnivaluePath(TreeNode root) {\n\t\tif(root == null) return 0;\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t\treturn res[0];\n\t}\n\tpublic int helper(TreeNode root, int[] res){\n\t\tif(root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tint left_val = root.left != null && root.val == root.left.val ? left + 1 : 0;\n\t\tint right_val = root.right != null && root.val == root.right.val ? right + 1 : 0;\n\t\tres[0] = Math.max(res[0], left_val + right_val);\n\t\treturn Math.max(left_val, right_val);\n\t}\n}\n",
            "\tint longestUnivaluePath(TreeNode root) {\n\t\tif(root == null) return 0;\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t\treturn res[0];\n\t}\n\tprivate int helper(TreeNode root, int[] res){\n\t\tif(root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tint left_val = root.left != null && root.val == root.left.val ? left + 1 : 0;\n\t\tint right_val = root.right != null && root.val == root.right.val ? right + 1 : 0;\n\t\tres[0] = Math.max(res[0], left_val + right_val);\n\t\treturn Math.max(left_val, right_val);\n\t}\n}\n",
            "\tint longestUnivaluePath(TreeNode root) {\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t\treturn res[0];\n\t}\n\tprivate int helper(TreeNode root, int[] res) {\n\t\tif (root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tint left_val = root.left != null && root.val == root.left.val ? left + 1 : 0;\n\t\tint right_val = root.right != null && root.val == root.right.val ? right + 1 : 0;\n\t\tres[0] = Math.max(res[0], left_val + right_val);\n\t\treturn Math.max(left_val, right_val);\n\t}\n}\n",
            "\tint longestUnivaluePath(TreeNode root) {\n\t\tint[] res = new int[1];\n\t\thelper(root, res);\n\t\treturn res[0];\n\t}\n\tprivate int helper(TreeNode root, int[] res) {\n\t\tif (root == null) return 0;\n\t\tint left = helper(root.left, res);\n\t\tint right = helper(root.right, res);\n\t\tint leftCount = root.left != null && root.val == root.left.val ? left + 1 : 0;\n\t\tint rightCount = root.right != null && root.val == root.right.val ? right + 1 : 0;\n\t\tres[0] = Math.max(res[0], leftCount + rightCount);\n\t\treturn Math.max(leftCount, rightCount);\n\t}\n}\n",
            "\tint longestUnivaluePath(TreeNode root) {\n\t\tint[] max = new int[1];\n\t\tmax[0] = 0;\n\t\thelper(root, max);\n\t\treturn max[0];\n\t}\n\tprivate int helper(TreeNode root, int[] max) {\n\t\tif (root == null) return 0;\n\t\tint left = helper(root.left, max);\n\t\tint right = helper(root.right, max);\n\t\tint leftMax = 0;\n\t\tint rightMax = 0;\n\t\tif (root.left != null && root.left.val == root.val) {\n\t\t\tleftMax = left + 1;\n\t\t}\n\t\tif (root.right != null && root.right.val == root.val) {\n\t\t\trightMax = right + 1;\n\t\t}\n\t\tmax[0] = Math.max(max[0], leftMax + rightMax);\n\t\treturn Math.max(leftMax, rightMax);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1533",
        "source": "leetcodeTitles",
        "source_id": "1658",
        "url": "https://leetcode.com/problems/minimum-operations-to-reduce-x-to-zero/",
        "language": "java",
        "query": "Minimum Operations to Reduce X to Zero",
        "snippets": [
            "\tstatic int minOperations(int x){\n\t\tint count = 0;\n\t\twhile(x != 0){\n\t\t\tif(x % 2 == 0){\n\t\t\t\tx = x / 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx = x - 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tstatic int minOperations(int x){\n\t\tint count = 0;\n\t\twhile(x != 0){\n\t\t\tif(x % 2 == 0){\n\t\t\t\tx /= 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx -= 1;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n",
            "\tint minOperations(int x){\n\t\tint count = 0;\n\t\twhile(x != 0){\n\t\t\tif(x % 2 == 0){\n\t\t\t\tx /= 2;\n\t\t\t}\n\t\t\telse{\n\t\t\t\tx--;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\treturn count;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1534",
        "source": "leetcodeTitles",
        "source_id": "581",
        "url": "https://leetcode.com/problems/shortest-unsorted-continuous-subarray/",
        "language": "java",
        "query": "Shortest Unsorted Continuous Subarray",
        "snippets": [
            "\tint findUnsortedSubarray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tSystem.arraycopy(nums, 0, copy, 0, n);\n\t\tArrays.sort(copy);\n\t\tint left = 0, right = n - 1;\n\t\twhile (left < n && nums[left] == copy[left]) left++;\n\t\twhile (right >= 0 && nums[right] == copy[right]) right--;\n\t\treturn right - left + 1;\n\t}\n}\n",
            "\tint findUnsortedSubarray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tSystem.arraycopy(nums, 0, copy, 0, n);\n\t\tArrays.sort(copy);\n\t\tint left = 0, right = n - 1;\n\t\twhile (left < n && nums[left] == copy[left]) left++;\n\t\twhile (right > 0 && nums[right] == copy[right]) right--;\n\t\treturn right - left + 1;\n\t}\n}\n",
            "\tint findUnsortedSubarray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = nums.clone();\n\t\tArrays.sort(copy);\n\t\tint left = 0, right = n - 1;\n\t\twhile (left < n && nums[left] == copy[left]) left++;\n\t\twhile (right >= 0 && nums[right] == copy[right]) right--;\n\t\treturn right - left + 1;\n\t}\n}\n",
            "\tint findUnsortedSubarray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = nums.clone();\n\t\tArrays.sort(copy);\n\t\tint start = 0;\n\t\tint end = n - 1;\n\t\twhile (start < n && nums[start] == copy[start])\n\t\t\tstart++;\n\t\twhile (end >= 0 && nums[end] == copy[end])\n\t\t\tend--;\n\t\treturn end - start + 1;\n\t}\n}\n",
            "\tstatic int findUnsortedSubarray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tSystem.arraycopy(nums, 0, copy, 0, n);\n\t\tArrays.sort(copy);\n\t\tint left = 0, right = n - 1;\n\t\twhile (left < n && nums[left] == copy[left]) left++;\n\t\twhile (right >= 0 && nums[right] == copy[right]) right--;\n\t\treturn right - left + 1;\n\t}\n}\n",
            "\tint findUnsortedSubarray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tint left = 0, right = 0;\n\t\tint min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcopy[i] = nums[i];\n\t\t\tmin = Math.min(min, nums[i]);\n\t\t\tmax = Math.max(max, nums[i]);\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (nums[i] != min)\n\t\t\t\tbreak;\n\t\t\tleft = i;\n\t\t}\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tif (nums[i] != max)\n\t\t\t\tbreak;\n\t\t\tright = i;\n\t\t}\n\t\tint count = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (nums[i] != copy[i])\n\t\t\t\tcount++;\n\t\t}\n\t\treturn count == 0 ? 0 : right - left + 1;\n\t}\n}\n",
            "\tstatic int findUnsortedSubarray(int[] nums) {\n\t\tint n = nums.length;\n\t\tint[] copy = new int[n];\n\t\tint left = 0, right = 0;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tcopy[i] = nums[i];\n\t\t}\n\t\tArrays.sort(copy);\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (copy[i] != nums[i]) {\n\t\t\t\tleft = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (int i = n - 1; i >= 0; i--) {\n\t\t\tif (copy[i] != nums[i]) {\n\t\t\t\tright = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn right - left + 1;\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1535",
        "source": "leetcodeTitles",
        "source_id": "344",
        "url": "https://leetcode.com/problems/reverse-string/",
        "language": "java",
        "query": "Reverse String",
        "snippets": [
            "\tString reverse(String str){\n\t\tString rev = \"\";\n\t\tfor(int i = str.length()-1; i >= 0; i--){\n\t\t\trev += str.charAt(i);\n\t\t}\n\t\treturn rev;\n\t}\n}\n",
            "\tString reverse(String s){\n\t\tString rev = \"\";\n\t\tfor(int i = s.length()-1; i >= 0; i--){\n\t\t\trev += s.charAt(i);\n\t\t}\n\t\treturn rev;\n\t}\n}\n",
            "\tString reverse(String s){\n\t\tif(s.length()==0)\n\t\t\treturn s;\n\t\treturn reverse(s.substring(1))+s.charAt(0);\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tSystem.out.println(reverse(str));\n\t}\n\tpublic static String reverse(String str){\n\t\tStringBuilder sb = new StringBuilder();\n\t\tfor(int i = str.length()-1; i >= 0; i--){\n\t\t\tsb.append(str.charAt(i));\n\t\t}\n\t\treturn sb.toString();\n\t}\n}\n",
            "\tString reverse(String str){\n\t\tif(str.length()==0)\n\t\t\treturn str;\n\t\treturn reverse(str.substring(1))+str.charAt(0);\n\t}\n}\n",
            "\tString reverse(String s){\n\t\tif(s.length()==0)\n\t\t\treturn s;\n\t\telse\n\t\t\treturn reverse(s.substring(1))+s.charAt(0);\n\t}\n}\n",
            "\tString reverse(String s){\n\t\tStringBuilder sb = new StringBuilder(s);\n\t\treturn sb.reverse().toString();\n\t}\n}\n",
            "\tstatic void main(String[] args){\n\t\tString str = \"Hello World\";\n\t\tString rev = \"\";\n\t\tfor(int i = str.length()-1; i >= 0; i--){\n\t\t\trev += str.charAt(i);\n\t\t}\n\t\tSystem.out.println(rev);\n\t}\n}\n",
            "\tString reverse(String s){\n\t\tStringBuffer sb = new StringBuffer(s);\n\t\treturn sb.reverse().toString();\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1536",
        "source": "leetcodeTitles",
        "source_id": "513",
        "url": "https://leetcode.com/problems/find-bottom-left-tree-value/",
        "language": "java",
        "query": "Find Bottom Left Tree Value",
        "snippets": [
            "\tclass TreeNode{\n\t\tint val;\n\t\tTreeNode left;\n\t\tTreeNode right;\n\t\tTreeNode(int x){\n\t\t\tval = x;\n\t\t}\n\t}\n\tpublic int findBottomLeftValue(TreeNode root){\n\t\tif(root == null) return -1;\n\t\tint[] res = new int[1];\n\t\tres[0] = root.val;\n\t\tfindBottomLeftValue(root, res, 0);\n\t\treturn res[0];\n\t}\n\tpublic void findBottomLeftValue(TreeNode root, int[] res, int depth){\n\t\tif(root == null) return;\n\t\tif(depth > res[0]) res[0] = depth;\n\t\tfindBottomLeftValue(root.left, res, depth + 1);\n\t\tfindBottomLeftValue(root.right, res, depth + 1);\n\t}\n}\n",
            "\tint findBottomLeftValue(TreeNode root) {\n\t\tint[] res = new int[1];\n\t\thelper(root, 0, res);\n\t\treturn res[0];\n\t}\n\tpublic void helper(TreeNode root, int depth, int[] res){\n\t\tif(root == null) return;\n\t\tif(depth > res[0]){\n\t\t\tres[0] = depth;\n\t\t\tres[1] = root.val;\n\t\t}\n\t\thelper(root.left, depth + 1, res);\n\t\thelper(root.right, depth + 1, res);\n\t}\n}\n",
            "\tint findBottomLeftValue(TreeNode root) {\n\t\tif(root == null) return -1;\n\t\tint[] res = new int[1];\n\t\tfindBottomLeftValue(root, res, 0);\n\t\treturn res[0];\n\t}\n\tpublic void findBottomLeftValue(TreeNode root, int[] res, int depth){\n\t\tif(root == null) return;\n\t\tif(depth > res[0]){\n\t\t\tres[0] = depth;\n\t\t\tres[1] = root.val;\n\t\t}\n\t\tfindBottomLeftValue(root.left, res, depth+1);\n\t\tfindBottomLeftValue(root.right, res, depth+1);\n\t}\n}\n",
            "\tstatic class TreeNode{\n\t\tint val;\n\t\tTreeNode left;\n\t\tTreeNode right;\n\t\tTreeNode(int x){\n\t\t\tval = x;\n\t\t}\n\t}\n\tpublic static int findBottomLeftValue(TreeNode root){\n\t\tif(root == null) return -1;\n\t\tint[] res = new int[1];\n\t\tres[0] = root.val;\n\t\tint[] level = new int[1];\n\t\tlevel[0] = 0;\n\t\tfindBottomLeftValue(root, res, level);\n\t\treturn res[0];\n\t}\n\tpublic static void findBottomLeftValue(TreeNode root, int[] res, int[] level){\n\t\tif(root == null) return;\n\t\tif(root.left != null){\n\t\t\tfindBottomLeftValue(root.left, res, level);\n\t\t}\n\t\tif(root.right != null){\n\t\t\tfindBottomLeftValue(root.right, res, level);\n\t\t}\n\t\tif(level[0] == res.length){\n\t\t\tres = Arrays.copyOf(res, res.length * 2);\n\t\t}\n\t\tres[level[0]] = root.val;\n\t\tlevel[0]++;\n\t}\n}\n",
            "\tint findBottomLeftValue(TreeNode root) {\n\t\tint[] res = new int[1];\n\t\tfindBottomLeftValue(root, 0, res);\n\t\treturn res[0];\n\t}\n\tprivate void findBottomLeftValue(TreeNode root, int depth, int[] res) {\n\t\tif (root == null) return;\n\t\tif (depth > res[0]) res[0] = depth;\n\t\tfindBottomLeftValue(root.left, depth + 1, res);\n\t\tfindBottomLeftValue(root.right, depth + 1, res);\n\t}\n}\n",
            "\tint findBottomLeftValue(TreeNode root) {\n\t\tif(root == null) return -1;\n\t\tint[] res = new int[1];\n\t\tres[0] = root.val;\n\t\tfindBottomLeftValue(root.left, res);\n\t\tfindBottomLeftValue(root.right, res);\n\t\treturn res[0];\n\t}\n\tprivate void findBottomLeftValue(TreeNode root, int[] res){\n\t\tif(root == null) return;\n\t\tres[0] = root.val;\n\t\tfindBottomLeftValue(root.left, res);\n\t\tfindBottomLeftValue(root.right, res);\n\t}\n}\n",
            "\tint findBottomLeftValue(TreeNode root) {\n\t\tif(root == null) return -1;\n\t\tint[] res = new int[1];\n\t\thelper(root, res, 0);\n\t\treturn res[0];\n\t}\n\tpublic void helper(TreeNode root, int[] res, int depth){\n\t\tif(root == null) return;\n\t\tif(depth > res[0]){\n\t\t\tres[0] = depth;\n\t\t\tres[1] = root.val;\n\t\t}\n\t\thelper(root.left, res, depth+1);\n\t\thelper(root.right, res, depth+1);\n\t}\n}\n",
            "\tint findBottomLeftValue(TreeNode root) {\n\t\tif(root == null) return -1;\n\t\tint[] res = new int[1];\n\t\thelper(root, res, 0);\n\t\treturn res[0];\n\t}\n\tprivate void helper(TreeNode root, int[] res, int level){\n\t\tif(root == null) return;\n\t\tif(level > res[0]) res[0] = level;\n\t\thelper(root.left, res, level+1);\n\t\thelper(root.right, res, level+1);\n\t}\n}\n",
            "\tint findBottomLeftValue(TreeNode root) {\n\t\tif(root == null) return -1;\n\t\tint[] res = new int[1];\n\t\thelper(root, res, 0);\n\t\treturn res[0];\n\t}\n\tprivate void helper(TreeNode root, int[] res, int level){\n\t\tif(root == null) return;\n\t\tif(level > res[0]){\n\t\t\tres[0] = level;\n\t\t\tres[1] = root.val;\n\t\t}\n\t\thelper(root.left, res, level+1);\n\t\thelper(root.right, res, level+1);\n\t}\n}\n"
        ],
        "results": 10
    },
    {
        "id": "1537",
        "source": "leetcodeTitles",
        "source_id": "539",
        "url": "https://leetcode.com/problems/minimum-time-difference/",
        "language": "java",
        "query": "Minimum Time Difference",
        "snippets": [
            "\tstatic int minTime(int[] times) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < times.length; i++){\n\t\t\tif(times[i] < min){\n\t\t\t\tmin = times[i];\n\t\t\t}\n\t\t\tif(times[i] > max){\n\t\t\t\tmax = times[i];\n\t\t\t}\n\t\t}\n\t\treturn max - min;\n\t}\n}\n",
            "\tstatic int minTime(int[] times) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < times.length; i++){\n\t\t\tmin = Math.min(min, times[i]);\n\t\t\tmax = Math.max(max, times[i]);\n\t\t}\n\t\treturn max - min;\n\t}\n}\n",
            "\tstatic int minTime(int[] time) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < time.length; i++){\n\t\t\tif(time[i] < min){\n\t\t\t\tmin = time[i];\n\t\t\t}\n\t\t\tif(time[i] > max){\n\t\t\t\tmax = time[i];\n\t\t\t}\n\t\t}\n\t\treturn max - min;\n\t}\n}\n",
            "\tstatic int minTimeDiff(int[] arr){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < arr.length; i++){\n\t\t\tif(arr[i] < min){\n\t\t\t\tmin = arr[i];\n\t\t\t}\n\t\t\tif(arr[i] > max){\n\t\t\t\tmax = arr[i];\n\t\t\t}\n\t\t}\n\t\tint diff = max - min;\n\t\treturn diff;\n\t}\n}\n",
            "\tstatic int minTime(int[] A, int[] B){\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i = 0; i < A.length; i++){\n\t\t\tmin = Math.min(min, A[i]);\n\t\t\tmax = Math.max(max, B[i]);\n\t\t}\n\t\tint diff = max - min;\n\t\treturn diff;\n\t}\n}\n",
            "\tstatic int minTime(int[] time) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < time.length; i++){\n\t\t\tfor(int j = i+1; j < time.length; j++){\n\t\t\t\tint diff = Math.abs(time[i] - time[j]);\n\t\t\t\tif(diff < min){\n\t\t\t\t\tmin = diff;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tstatic int minTime(int[] arr, int n)\n\t{\n\t\tint min = Integer.MAX_VALUE;\n\t\tint max = Integer.MIN_VALUE;\n\t\tfor(int i=0;i<n;i++)\n\t\t{\n\t\t\tif(arr[i]<min)\n\t\t\t\tmin = arr[i];\n\t\t\tif(arr[i]>max)\n\t\t\t\tmax = arr[i];\n\t\t}\n\t\tint diff = max-min;\n\t\treturn diff;\n\t}\n}\n",
            "\tstatic int minimumTimeDifference(int[] time) {\n\t\tint min = Integer.MAX_VALUE;\n\t\tfor(int i = 0; i < time.length; i++){\n\t\t\tfor(int j = i+1; j < time.length; j++){\n\t\t\t\tint diff = Math.abs(time[i] - time[j]);\n\t\t\t\tif(diff < min)\n\t\t\t\t\tmin = diff;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n}\n",
            "\tstatic int minTime(int[] arr, int m) {\n\t\tint n = arr.length;\n\t\tint[] count = new int[2400];\n\t\tfor(int i = 0; i < n; i++)\n\t\t\tcount[arr[i]]++;\n\t\tint ans = Integer.MAX_VALUE;\n\t\tint start = 0;\n\t\tfor(int i = 0; i < 2400; i++) {\n\t\t\twhile(count[i] > m) {\n\t\t\t\tcount[start]--;\n\t\t\t\tstart++;\n\t\t\t}\n\t\t\tif(i - start + 1 >= m)\n\t\t\t\tans = Math.min(ans, i - start + 1);\n\t\t}\n\t\treturn ans == Integer.MAX_VALUE ? -1 : ans;\n\t}\n}\n",
            "\tstatic int minTime(int[] arr, int n)\n\t{\n\t\tint min = Integer.MAX_VALUE;\n\t\tint minIndex = 0;\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tif(arr[i] < min)\n\t\t\t{\n\t\t\t\tmin = arr[i];\n\t\t\t\tminIndex = i;\n\t\t\t}\n\t\t}\n\t\tint max = Integer.MIN_VALUE;\n\t\tint maxIndex = 0;\n\t\tfor(int i = 0; i < n; i++)\n\t\t{\n\t\t\tif(arr[i] > max)\n\t\t\t{\n\t\t\t\tmax = arr[i];\n\t\t\t\tmaxIndex = i;\n\t\t\t}\n\t\t}\n\t\tif(minIndex > maxIndex)\n\t\t{\n\t\t\treturn max - min;\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn min - max;\n\t\t}\n\t}\n}\n"
        ],
        "results": 10
    },
]